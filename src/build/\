#include "signals_dict_impl.hpp"

namespace SystemExplorer
{
	namespace Core
	{
		SignalsDict::SignalsDict()
		{
			// Term
			_signals.insert(std::make_pair("Term", 
				Signal(SIGALRM, "SIGALARM", SignalTypesDict::GetInstance()->Get("Term"), "P1990", "Timer signal from alarm(2)")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGPIPE, "SIGPIPE", SignalTypesDict::GetInstance()->Get("Term"), "P1990", "Broken pipe: write to pipe with no readers; see pipe(7)")));
/*
			_signals.insert(std::make_pair("Term", 
				Signal(SIGEMT, "SIGEMT", SignalTypesDict::GetInstance()->Get("Term"), "", "Emulator trap")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGLOST, "SIGLOST", SignalTypesDict::GetInstance()->Get("Term"), "", "File lock lost (unused)")));
*/
			_signals.insert(std::make_pair("Term", 
				Signal(SIGHUP, "P1990", SignalTypesDict::GetInstance()->Get("Term"), "P1990", "Hangup detected on controlling terminal or death of controlling process")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGINT, "SIGINT", SignalTypesDict::GetInstance()->Get("Term"), "P1990", "P1990")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGIO, "SIGIO", SignalTypesDict::GetInstance()->Get("Term"), "", "I/O now possible (4.2BSD)")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGKILL, "SIGKILL", SignalTypesDict::GetInstance()->Get("Term"), "P1990", "Kill signal")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGPOLL, "SIGPOLL", SignalTypesDict::GetInstance()->Get("Term"), "P2001", "Pollable event (Sys V); synonym for SIGIO")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGPWR, "SIGPWR", SignalTypesDict::GetInstance()->Get("Term"), "", "Power failure (System V)")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGPROF, "SIGPROF", SignalTypesDict::GetInstance()->Get("Term"), "P2001", "Profiling timer expired")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGSTKFLT, "SIGSTKFLT", SignalTypesDict::GetInstance()->Get("Term"), "", "Stack fault on coprocessor (unused)")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGTERM, "SIGTERM", SignalTypesDict::GetInstance()->Get("Term"), "P1990", "Termination signal")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGUSR1, "SIGUSR1", SignalTypesDict::GetInstance()->Get("Term"), "P1990", "User-defined signal 1")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGUSR2, "SIGUSR2", SignalTypesDict::GetInstance()->Get("Term"), "P1990", "User-defined signal 2")));
			_signals.insert(std::make_pair("Term", 
				Signal(SIGVTALRM, "SIGVTALRM", SignalTypesDict::GetInstance()->Get("Term"), "P2001", "Virtual alarm clock (4.2BSD)")));

			// Cont
			_signals.insert(std::make_pair("Cont", 
				Signal(SIGCONT, "SIGCONT", SignalTypesDict::GetInstance()->Get("Cont"), "P1990", "Continue if stopped")));

			//	Core
			_signals.insert(std::make_pair("Core", 
				Signal(SIGABRT, "SIGABRT", SignalTypesDict::GetInstance()->Get("Core"), "P1990", "Abort signal from abort(3)")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGSYS, "SIGSYS", SignalTypesDict::GetInstance()->Get("Core"), "P2001", "Bad system call (SVr4); see also seccomp(2)")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGBUS, "SIGBUS", SignalTypesDict::GetInstance()->Get("Core"), "P2001", "Bus error (bad memory access)")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGXCPU, "SIGXCPU", SignalTypesDict::GetInstance()->Get("Core"), "P2001", "CPU time limit exceeded (4.2BSD); see setrlimit(2)")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGXFSZ, "SIGXFSZ", SignalTypesDict::GetInstance()->Get("Core"), "P2001", "File size limit exceeded (4.2BSD); see setrlimit(2)")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGFPE, "SIGFPE", SignalTypesDict::GetInstance()->Get("Core"), "P1990", "Floating-point exception")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGILL, "SIGILL", SignalTypesDict::GetInstance()->Get("Core"), "P1990", "Illegal Instruction")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGSEGV, "SIGSEGV", SignalTypesDict::GetInstance()->Get("Core"), "P1990", "Invalid memory reference")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGIOT, "SIGIOT", SignalTypesDict::GetInstance()->Get("Core"), "", "IOT trap. A synonym for SIGABRT")));
			_signals.insert(std::make_pair("Core", 
				Signal(SIGQUIT, "SIGQUIT", SignalTypesDict::GetInstance()->Get("Core"), "P1990", "Quit from keyboard")));
/*
			_signals.insert(std::make_pair("Core", 
				Signal(SIGUNUSED, "SIGUNUSED", SignalTypesDict::GetInstance()->Get("Core"), "", "Synonymous with SIGSYS")));
*/
			_signals.insert(std::make_pair("Core", 
				Signal(SIGTRAP, "SIGTRAP", SignalTypesDict::GetInstance()->Get("Core"), "P2001", "Trace/breakpoint trap")));

			// Ign
			_signals.insert(std::make_pair("Ign", 
				Signal(SIGCLD, "SIGCLD", SignalTypesDict::GetInstance()->Get("Ign"), "", "A synonym for SIGCHLD")));
			_signals.insert(std::make_pair("Ign", 
				Signal(SIGCHLD, "SIGCHLD", SignalTypesDict::GetInstance()->Get("Ign"), "P1990", "Child stopped or terminated")));
			_signals.insert(std::make_pair("Ign", 
				Signal(SIGURG, "SIGURG", SignalTypesDict::GetInstance()->Get("Ign"), "P2001", "Urgent condition on socket (4.2BSD)")));
			_signals.insert(std::make_pair("Ign", 
				Signal(SIGWINCH, "SIGWINCH", SignalTypesDict::GetInstance()->Get("Ign"), "", "Window resize signal (4.3BSD, Sun)")));
/*
			_signals.insert(std::make_pair("Term", 
				Signal(, "", SignalTypesDict::GetInstance()->Get("Term"), "", "")));

*/


/*			_signals.insert(std::make_pair("Ign", Signal(1, "", SignalTypesDict::GetInstance->Get("Term"), "", ""));
			_signals.insert(std::make_pair("Core", Signal(1, "", SignalTypesDict::GetInstance->Get("Term"), "", ""));
			_signals.insert(std::make_pair("Stop", Signal(1, "", SignalTypesDict::GetInstance->Get("Term"), "", ""));
			_signals.insert(std::make_pair("Cont", Signal(1, "", SignalTypesDict::GetInstance->Get("Term"), "", ""));
*/

	/*		_signals.insert(std::make_pair("Term", SignalType(1, "Term", "Default action is to terminate the process.")));
			_signals.insert(std::make_pair("Ign", SignalType(2, "Ign", "Default action is to ignore the signal.")));
			_signals.insert(std::make_pair("Core", SignalType(3, "Core", "Default action is to terminate the process and dump core (see core(5)).")));
			_signals.insert(std::make_pair("Stop", SignalType(4, "Stop", "Default action is to stop the process.")));
			_signals.insert(std::make_pair("Cont", SignalType(5, "Cont", "Default action is to continue the process if it is currently stopped.")));
	*/
		}

		SignalsDict* SignalsDict::GetInstance()
		{
			//TODO:Add locking
			if(_instance == nullptr)
				_instance = new SignalsDict();

			return _instance;
		}

		Signal SignalsDict::Get(std::string const &alias)
		{
			return _signals[alias];
		}

		std::vector<Signal> SignalsDict::GetAll() const
		{
			std::vector<Signal> result;

			std::for_each(_signals.begin(), _signals.end(), 
				[&result](typename std::map<std::string, Signal>::value_type const &item)
				{
					result.push_back(item.second);
				});

			return result;
		}
	
		SignalsDict *SignalsDict::_instance = nullptr;
	}
}
