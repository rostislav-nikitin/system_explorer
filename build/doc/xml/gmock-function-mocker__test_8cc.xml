<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock-function-mocker__test_8cc" kind="file" language="C++">
    <compoundname>gmock-function-mocker_test.cc</compoundname>
    <includes refid="gmock-function-mocker_8h" local="yes">gmock/gmock-function-mocker.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="15">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
      </node>
      <node id="74">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="25">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="19">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc</label>
        <link refid="gmock-function-mocker__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="35">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="56">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="26">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>assert.h</label>
      </node>
      <node id="49">
        <label>atomic</label>
      </node>
      <node id="60">
        <label>cassert</label>
      </node>
      <node id="30">
        <label>cerrno</label>
      </node>
      <node id="70">
        <label>cmath</label>
      </node>
      <node id="42">
        <label>cstddef</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="27">
        <label>ctype.h</label>
      </node>
      <node id="16">
        <label>errno.h</label>
      </node>
      <node id="71">
        <label>exception</label>
      </node>
      <node id="52">
        <label>float.h</label>
      </node>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="72">
        <label>initializer_list</label>
      </node>
      <node id="43">
        <label>iomanip</label>
      </node>
      <node id="73">
        <label>ios</label>
      </node>
      <node id="62">
        <label>iosfwd</label>
      </node>
      <node id="24">
        <label>iostream</label>
      </node>
      <node id="58">
        <label>iterator</label>
      </node>
      <node id="31">
        <label>limits</label>
      </node>
      <node id="68">
        <label>limits.h</label>
      </node>
      <node id="32">
        <label>locale</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="9">
        <label>memory</label>
      </node>
      <node id="10">
        <label>ostream</label>
      </node>
      <node id="39">
        <label>regex.h</label>
      </node>
      <node id="11">
        <label>set</label>
      </node>
      <node id="12">
        <label>sstream</label>
      </node>
      <node id="28">
        <label>stddef.h</label>
      </node>
      <node id="20">
        <label>stdio.h</label>
      </node>
      <node id="23">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="29">
        <label>string.h</label>
      </node>
      <node id="37">
        <label>strings.h</label>
      </node>
      <node id="33">
        <label>sys/stat.h</label>
      </node>
      <node id="34">
        <label>sys/types.h</label>
      </node>
      <node id="18">
        <label>tuple</label>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
      <node id="40">
        <label>typeinfo</label>
      </node>
      <node id="38">
        <label>unistd.h</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" prot="public">testing::gmock_function_mocker_test::TemplatedCopyable</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" prot="public">testing::gmock_function_mocker_test::FooInterface</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" prot="public">testing::gmock_function_mocker_test::MockFoo</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" prot="public">testing::gmock_function_mocker_test::LegacyMockFoo</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1FunctionMockerTest" prot="public">testing::gmock_function_mocker_test::FunctionMockerTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1MockB" prot="public">testing::gmock_function_mocker_test::MockB</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockB" prot="public">testing::gmock_function_mocker_test::LegacyMockB</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1ExpectCallTest" prot="public">testing::gmock_function_mocker_test::ExpectCallTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1StackInterface" prot="public">testing::gmock_function_mocker_test::StackInterface</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1MockStack" prot="public">testing::gmock_function_mocker_test::MockStack</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" prot="public">testing::gmock_function_mocker_test::LegacyMockStack</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1TemplateMockTest" prot="public">testing::gmock_function_mocker_test::TemplateMockTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" prot="public">testing::gmock_function_mocker_test::MockOverloadedOnArgNumber</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" prot="public">testing::gmock_function_mocker_test::LegacyMockOverloadedOnArgNumber</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1OverloadedMockMethodTest" prot="public">testing::gmock_function_mocker_test::OverloadedMockMethodTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" prot="public">testing::gmock_function_mocker_test::MockOverloadedOnConstness</innerclass>
    <innerclass refid="classtesting_1_1gmock__function__mocker__test_1_1MockMethodMockFunctionSignatureTest" prot="public">testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1AlternateCallable" prot="public">testing::gmock_function_mocker_test::AlternateCallable</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes0" prot="public">testing::gmock_function_mocker_test::MockMethodSizes0</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes1" prot="public">testing::gmock_function_mocker_test::MockMethodSizes1</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes2" prot="public">testing::gmock_function_mocker_test::MockMethodSizes2</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes3" prot="public">testing::gmock_function_mocker_test::MockMethodSizes3</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes4" prot="public">testing::gmock_function_mocker_test::MockMethodSizes4</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes0" prot="public">testing::gmock_function_mocker_test::LegacyMockMethodSizes0</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes1" prot="public">testing::gmock_function_mocker_test::LegacyMockMethodSizes1</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes2" prot="public">testing::gmock_function_mocker_test::LegacyMockMethodSizes2</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes3" prot="public">testing::gmock_function_mocker_test::LegacyMockMethodSizes3</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes4" prot="public">testing::gmock_function_mocker_test::LegacyMockMethodSizes4</innerclass>
    <innerclass refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodNoexceptSpecifier" prot="public">testing::gmock_function_mocker_test::MockMethodNoexceptSpecifier</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__function__mocker__test">testing::gmock_function_mocker_test</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gmock-function-mocker__test_8cc_1a9ae68063487fddb9f678e66728fae155" prot="public" static="no">
        <name>MY_MOCK_METHODS1_</name>
        <initializer>  MOCK_METHOD(void, Overloaded, ());            \
  MOCK_METHOD(int, Overloaded, (int), (const)); \
  MOCK_METHOD(bool, Overloaded, (bool f, int n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="702" column="9" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-function-mocker__test_8cc_1a6f2e034f79dc01715dc67fd3f7b2aeb5" prot="public" static="no">
        <name>LEGACY_MY_MOCK_METHODS1_</name>
        <initializer>  MOCK_METHOD0(Overloaded, void());           \
  MOCK_CONST_METHOD1(Overloaded, int(int n)); \
  MOCK_METHOD2(Overloaded, bool(bool f, int n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="707" column="9" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-function-mocker__test_8cc_1ac36252ad7584222cebc036d56465d652" prot="public" static="no">
        <name>MY_MOCK_METHODS2_</name>
        <initializer>  MOCK_CONST_METHOD1(Overloaded, int(int n)); \
  MOCK_METHOD1(Overloaded, int(int n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="755" column="9" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="755" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>function<sp/>mocker<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-function-mocker.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silence<sp/>C4503<sp/>(decorated<sp/>name<sp/>length<sp/>exceeded)<sp/>for<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4503)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSDN<sp/>says<sp/>the<sp/>header<sp/>file<sp/>to<sp/>be<sp/>included<sp/>for<sp/>STDMETHOD<sp/>is<sp/>BaseTyps.h<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>getting<sp/>compiler<sp/>errors<sp/>if<sp/>we<sp/>use<sp/>basetyps.h,<sp/>hence<sp/>including</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>objbase.h<sp/>for<sp/>definition<sp/>of<sp/>STDMETHOD.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;objbase.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_function_mocker_test<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::_;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::A;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::An;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::AnyNumber;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Const;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::DoDefault;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Eq;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Lt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::MockFunction;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Ref;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Return;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ReturnRef;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::TypedEq;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="71" refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" kindref="compound">TemplatedCopyable</ref><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" kindref="compound">TemplatedCopyable</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" kindref="compound">TemplatedCopyable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;<sp/>other)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" kindref="compound">FooInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" kindref="compound">~FooInterface</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidReturning(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Unary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Binary(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Decimal(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>f,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>k)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TakesNonConstReference(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>TakesConstReference(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TakesConst(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OverloadedOnArgumentNumber()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OverloadedOnArgumentNumber(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OverloadedOnArgumentType(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>OverloadedOnArgumentType(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OverloadedOnConstness()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>OverloadedOnConstness()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TypeWithHole(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*func)())<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TypeWithComma(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>std::string&gt;&amp;<sp/>a_map)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TypeWithTemplatedCopyCtor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" kindref="compound">TemplatedCopyable&lt;int&gt;</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>int<sp/>(*ReturnsFunctionPointer1(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))(bool)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">fn_ptr<sp/>=<sp/>int<sp/>(*)(bool);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>fn_ptr<sp/>ReturnsFunctionPointer2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedConstRef()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedConstRefRef()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedRef()<sp/>&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedRefRef()<sp/>&amp;&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedOverloaded()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedOverloaded()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedOverloaded()<sp/>&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedOverloaded()<sp/>&amp;&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>CTNullary)()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>CTUnary)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>CTDecimal)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>f,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>k)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>CTConst)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Const<sp/>qualifiers<sp/>on<sp/>arguments<sp/>were<sp/>once<sp/>(incorrectly)<sp/>considered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>significant<sp/>in<sp/>determining<sp/>whether<sp/>two<sp/>virtual<sp/>functions<sp/>had<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signature.<sp/>This<sp/>was<sp/>fixed<sp/>in<sp/>Visual<sp/>Studio<sp/>2008.<sp/>However,<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>still<sp/>emits<sp/>a<sp/>warning<sp/>that<sp/>alerts<sp/>about<sp/>this<sp/>change<sp/>in<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4373)</highlight></codeline>
<codeline lineno="138" refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" refkind="compound"><highlight class="normal">class<sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref><sp/>:<sp/>public<sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" kindref="compound">FooInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>a<sp/>mock<sp/>function<sp/>parameter<sp/>can<sp/>be<sp/>named.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>VoidReturning,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>Nullary,<sp/>());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>a<sp/>mock<sp/>function<sp/>parameter<sp/>can<sp/>be<sp/>unnamed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>Unary,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>Binary,<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>Decimal,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>TakesNonConstReference,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>MOCK_METHOD(std::string,<sp/>TakesConstReference,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>TakesConst,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>can<sp/>contain<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>MOCK_METHOD((std::map&lt;int,<sp/>std::string&gt;),<sp/>ReturnTypeWithComma,<sp/>(),<sp/>());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>MOCK_METHOD((std::map&lt;int,<sp/>std::string&gt;),<sp/>ReturnTypeWithComma,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>OverloadedOnArgumentNumber,<sp/>());<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>OverloadedOnArgumentNumber,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>OverloadedOnArgumentType,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>OverloadedOnArgumentType,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>OverloadedOnConstness,<sp/>(),<sp/>(</highlight><highlight class="keyword">override</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>OverloadedOnConstness,<sp/>(),<sp/>(</highlight><highlight class="keyword">override</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>TypeWithHole,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)()),<sp/>());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>TypeWithComma,<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>std::string&gt;&amp;)));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>TypeWithTemplatedCopyCtor,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" kindref="compound">TemplatedCopyable&lt;int&gt;</ref>&amp;));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),<sp/>ReturnsFunctionPointer1,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>MOCK_METHOD(fn_ptr,<sp/>ReturnsFunctionPointer2,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>CTNullary,<sp/>(),<sp/>(Calltype(STDMETHODCALLTYPE)));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>CTUnary,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>(Calltype(STDMETHODCALLTYPE)));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>CTDecimal,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>k),</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Calltype(STDMETHODCALLTYPE)));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>CTConst,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/>Calltype(STDMETHODCALLTYPE)));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>MOCK_METHOD((std::map&lt;int,<sp/>std::string&gt;),<sp/>CTReturnTypeWithComma,<sp/>(),</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Calltype(STDMETHODCALLTYPE)));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>reference<sp/>qualified<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>RefQualifiedConstRef,<sp/>(),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/>ref(&amp;),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>RefQualifiedConstRefRef,<sp/>(),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/>ref(&amp;&amp;),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>RefQualifiedRef,<sp/>(),<sp/>(ref(&amp;),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>RefQualifiedRefRef,<sp/>(),<sp/>(ref(&amp;&amp;),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>RefQualifiedOverloaded,<sp/>(),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/>ref(&amp;),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>RefQualifiedOverloaded,<sp/>(),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/>ref(&amp;&amp;),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>RefQualifiedOverloaded,<sp/>(),<sp/>(ref(&amp;),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>RefQualifiedOverloaded,<sp/>(),<sp/>(ref(&amp;&amp;),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" kindref="compound">FooInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>a<sp/>mock<sp/>function<sp/>parameter<sp/>can<sp/>be<sp/>named.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(VoidReturning,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(Nullary,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>a<sp/>mock<sp/>function<sp/>parameter<sp/>can<sp/>be<sp/>unnamed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Unary,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Binary,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>MOCK_METHOD10(Decimal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TakesNonConstReference,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TakesConstReference,<sp/>std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TakesConst,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>can<sp/>contain<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(ReturnTypeWithComma,<sp/>std::map&lt;int,<sp/>std::string&gt;());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1(ReturnTypeWithComma,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>std::string&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(OverloadedOnArgumentNumber,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(OverloadedOnArgumentNumber,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(OverloadedOnArgumentType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(OverloadedOnArgumentType,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(OverloadedOnConstness,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0(OverloadedOnConstness,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TypeWithHole,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)()));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TypeWithComma,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>std::string&gt;&amp;));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TypeWithTemplatedCopyCtor,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" kindref="compound">TemplatedCopyable&lt;int&gt;</ref>&amp;));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(ReturnsFunctionPointer1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(ReturnsFunctionPointer2,<sp/>fn_ptr(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTNullary,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>MOCK_METHOD1_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTUnary,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>MOCK_METHOD10_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTDecimal,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>k));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTConst,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>can<sp/>contain<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTReturnTypeWithComma,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>std::string&gt;());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>mock<sp/>these<sp/>with<sp/>the<sp/>old<sp/>macros,<sp/>but<sp/>we<sp/>need<sp/>to<sp/>define<sp/>them<sp/>to<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>concrete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedConstRef()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedConstRefRef()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedRef()<sp/>&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedRefRef()<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedOverloaded()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedOverloaded()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedOverloaded()<sp/>&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RefQualifiedOverloaded()<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4373</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="285" refid="classtesting_1_1gmock__function__mocker__test_1_1FunctionMockerTest" refkind="compound"><highlight class="normal">class<sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1FunctionMockerTest" kindref="compound">FunctionMockerTest</ref><sp/>:<sp/>public<sp/>testing::<ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1FunctionMockerTest" kindref="compound">FunctionMockerTest</ref>()<sp/>:<sp/>foo_(&amp;mock_foo_)<sp/>{}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" kindref="compound">FooInterface</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>foo_;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>T<sp/>mock_foo_;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">};</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">FunctionMockerTestTypes</ref><sp/>=<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">::testing::Types&lt;MockFoo, LegacyMockFoo&gt;</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1FunctionMockerTest" kindref="compound">FunctionMockerTest</ref>,<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">FunctionMockerTestTypes</ref>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>void-returning<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">TYPED_TEST(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1FunctionMockerTest" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>VoidReturning(Lt(100)));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>this-&gt;foo_-&gt;VoidReturning(0);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>nullary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksNullaryFunction)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>Nullary())</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoDefault())</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>this-&gt;foo_-&gt;Nullary());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>this-&gt;foo_-&gt;Nullary());</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>unary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksUnaryFunction)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>Unary(Eq(2))).Times(2).WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(this-&gt;foo_-&gt;Unary(2));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(this-&gt;foo_-&gt;Unary(2));</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>binary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksBinaryFunction)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>Binary(2,<sp/>_)).WillOnce(Return(3));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>this-&gt;foo_-&gt;Binary(2,<sp/>1));</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>decimal<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksDecimalFunction)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>1L,<sp/>A&lt;float&gt;(),<sp/>Lt(100),<sp/>5U,<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(5));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>this-&gt;foo_-&gt;Decimal(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>5,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>non-const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksFunctionWithNonConstReferenceArgument)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>TakesNonConstReference(Ref(a)))</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(this-&gt;foo_-&gt;TakesNonConstReference(a));</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksFunctionWithConstReferenceArgument)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>TakesConstReference(Ref(a)))</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>this-&gt;foo_-&gt;TakesConstReference(a));</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>const<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksFunctionWithConstArgument)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>TakesConst(Lt(10))).WillOnce(DoDefault());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(this-&gt;foo_-&gt;TakesConst(5));</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>functions<sp/>overloaded<sp/>on<sp/>the<sp/>number<sp/>of<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksFunctionsOverloadedOnArgumentNumber)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>OverloadedOnArgumentNumber())</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>OverloadedOnArgumentNumber(_))</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>this-&gt;foo_-&gt;OverloadedOnArgumentNumber(1));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>this-&gt;foo_-&gt;OverloadedOnArgumentNumber());</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>functions<sp/>overloaded<sp/>on<sp/>the<sp/>types<sp/>of<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksFunctionsOverloadedOnArgumentType)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>OverloadedOnArgumentType(An&lt;int&gt;()))</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>OverloadedOnArgumentType(TypedEq&lt;char&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>this-&gt;foo_-&gt;OverloadedOnArgumentType(0));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>this-&gt;foo_-&gt;OverloadedOnArgumentType(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>functions<sp/>overloaded<sp/>on<sp/>the<sp/>const-ness<sp/>of<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksFunctionsOverloadedOnConstnessOfThis)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>OverloadedOnConstness());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>EXPECT_CALL(Const(this-&gt;mock_foo_),<sp/>OverloadedOnConstness())</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>this-&gt;foo_-&gt;OverloadedOnConstness());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>Const(*this-&gt;foo_).OverloadedOnConstness());</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksReturnTypeWithComma)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>std::string&gt;<sp/>a_map;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>ReturnTypeWithComma()).WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>ReturnTypeWithComma(42)).WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>this-&gt;mock_foo_.ReturnTypeWithComma());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>this-&gt;mock_foo_.ReturnTypeWithComma(42));</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksTypeWithTemplatedCopyCtor)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>TypeWithTemplatedCopyCtor(_))</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(this-&gt;foo_-&gt;TypeWithTemplatedCopyCtor(TemplatedCopyable&lt;int&gt;()));</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>nullary<sp/>function<sp/>with<sp/>calltype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksNullaryFunctionWithCallType)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>CTNullary())</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(-1))</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-1,<sp/>this-&gt;foo_-&gt;CTNullary());</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>this-&gt;foo_-&gt;CTNullary());</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>unary<sp/>function<sp/>with<sp/>calltype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksUnaryFunctionWithCallType)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>CTUnary(Eq(2)))</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(2)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(this-&gt;foo_-&gt;CTUnary(2));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(this-&gt;foo_-&gt;CTUnary(2));</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>decimal<sp/>function<sp/>with<sp/>calltype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksDecimalFunctionWithCallType)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>CTDecimal(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>1L,<sp/>A&lt;float&gt;(),</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lt(100),<sp/>5U,<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(10));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>this-&gt;foo_-&gt;CTDecimal(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>5,<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>functions<sp/>overloaded<sp/>on<sp/>the<sp/>const-ness<sp/>of<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksFunctionsConstFunctionWithCallType)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>EXPECT_CALL(Const(this-&gt;mock_foo_),<sp/>CTConst(_)).WillOnce(Return(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>Const(*this-&gt;foo_).CTConst(0));</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">TYPED_TEST(FunctionMockerTest,<sp/>MocksReturnTypeWithCommaAndCallType)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>std::string&gt;<sp/>a_map;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>EXPECT_CALL(this-&gt;mock_foo_,<sp/>CTReturnTypeWithComma()).WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>this-&gt;mock_foo_.CTReturnTypeWithComma());</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">TEST(FunctionMockerTest,<sp/>RefQualified)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>MockFoo<sp/>mock_foo;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo,<sp/>RefQualifiedConstRef).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>EXPECT_CALL(std::move(mock_foo),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RefQualifiedConstRefRef)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo,<sp/>RefQualifiedRef).WillOnce(Return(3));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>EXPECT_CALL(std::move(mock_foo),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RefQualifiedRefRef)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(4));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>EXPECT_CALL(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">MockFoo&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mock_foo),<sp/>RefQualifiedOverloaded())</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(5));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>EXPECT_CALL(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">MockFoo&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mock_foo),<sp/>RefQualifiedOverloaded())</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(6));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>EXPECT_CALL(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MockFoo&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mock_foo),<sp/>RefQualifiedOverloaded())</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(7));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>EXPECT_CALL(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MockFoo&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mock_foo),<sp/>RefQualifiedOverloaded())</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(8));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>EXPECT_EQ(mock_foo.RefQualifiedConstRef(),<sp/>1);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>EXPECT_EQ(std::move(mock_foo).RefQualifiedConstRefRef(),<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>EXPECT_EQ(mock_foo.RefQualifiedRef(),<sp/>3);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>EXPECT_EQ(std::move(mock_foo).RefQualifiedRefRef(),<sp/>4);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>EXPECT_EQ(std::cref(mock_foo).get().RefQualifiedOverloaded(),<sp/>5);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>EXPECT_EQ(std::move(std::cref(mock_foo).get())<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.RefQualifiedOverloaded(),</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>EXPECT_EQ(mock_foo.RefQualifiedOverloaded(),<sp/>7);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>EXPECT_EQ(std::move(mock_foo).RefQualifiedOverloaded(),<sp/>8);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="classtesting_1_1gmock__function__mocker__test_1_1MockB" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockB" kindref="compound">MockB</ref><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockB" kindref="compound">MockB</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>DoB,<sp/>());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockB" kindref="compound">MockB</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockB" kindref="compound">MockB</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockB" kindref="compound">MockB</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockB" kindref="compound">MockB</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">};</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockB" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockB" kindref="compound">LegacyMockB</ref><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockB" kindref="compound">LegacyMockB</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(DoB,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockB" kindref="compound">LegacyMockB</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockB" kindref="compound">LegacyMockB</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockB" kindref="compound">LegacyMockB</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockB" kindref="compound">LegacyMockB</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">};</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="511" refid="classtesting_1_1gmock__function__mocker__test_1_1ExpectCallTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1ExpectCallTest" kindref="compound">ExpectCallTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">ExpectCallTestTypes</ref><sp/>=<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">::testing::Types&lt;MockB, LegacyMockB&gt;</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1ExpectCallTest" kindref="compound">ExpectCallTest</ref>,<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">ExpectCallTestTypes</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>functions<sp/>with<sp/>no<sp/>EXPECT_CALL()<sp/>rules<sp/>can<sp/>be<sp/>called<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">TYPED_TEST(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1ExpectCallTest" kindref="compound">ExpectCallTest</ref>,<sp/>UnmentionedFunctionCanBeCalledAnyNumberOfTimes)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>{<sp/>TypeParam<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>TypeParam<sp/>b;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>TypeParam<sp/>b;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>template<sp/>interfaces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="535" refid="classtesting_1_1gmock__function__mocker__test_1_1StackInterface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1StackInterface" kindref="compound">StackInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1StackInterface" kindref="compound">~StackInterface</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Template<sp/>parameter<sp/>appears<sp/>in<sp/>function<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Push(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pop()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetSize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Template<sp/>parameter<sp/>appears<sp/>in<sp/>function<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>GetTop()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="545"><highlight class="normal">};</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="548" refid="classtesting_1_1gmock__function__mocker__test_1_1MockStack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockStack" kindref="compound">MockStack</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1StackInterface" kindref="compound">StackInterface</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockStack" kindref="compound">MockStack</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Push,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>elem),<sp/>());</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Pop,<sp/>(),<sp/>(</highlight><highlight class="keyword">final</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>GetSize,<sp/>(),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;,<sp/>GetTop,<sp/>(),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>can<sp/>contain<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>MOCK_METHOD((std::map&lt;int,<sp/>int&gt;),<sp/>ReturnTypeWithComma,<sp/>(),<sp/>());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>MOCK_METHOD((std::map&lt;int,<sp/>int&gt;),<sp/>ReturnTypeWithComma,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockStack" kindref="compound">MockStack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockStack" kindref="compound">MockStack</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockStack" kindref="compound">MockStack</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockStack" kindref="compound">MockStack</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">};</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="567" refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" kindref="compound">LegacyMockStack</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1StackInterface" kindref="compound">StackInterface</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" kindref="compound">LegacyMockStack</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>MOCK_METHOD1_T(Push,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>elem));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_T(Pop,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T(GetSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T(GetTop,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;());</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>can<sp/>contain<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_T(ReturnTypeWithComma,<sp/>std::map&lt;int,<sp/>int&gt;());</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1_T(ReturnTypeWithComma,<sp/>std::map&lt;int,<sp/>int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" kindref="compound">LegacyMockStack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" kindref="compound">LegacyMockStack</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" kindref="compound">LegacyMockStack</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" kindref="compound">LegacyMockStack</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="586" refid="classtesting_1_1gmock__function__mocker__test_1_1TemplateMockTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplateMockTest" kindref="compound">TemplateMockTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">TemplateMockTestTypes</ref><sp/>=</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">::testing::Types&lt;MockStack&lt;int&gt;</ref>,<sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockStack" kindref="compound">LegacyMockStack&lt;int&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplateMockTest" kindref="compound">TemplateMockTest</ref>,<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">TemplateMockTestTypes</ref>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>template<sp/>mock<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">TYPED_TEST(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplateMockTest" kindref="compound">TemplateMockTest</ref>,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>TypeParam<sp/>mock;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>GetSize())</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0))</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Push(_));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>GetTop()).WillOnce(ReturnRef(n));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Pop()).Times(AnyNumber());</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>mock.Push(5);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>mock.GetTop());</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>mock.Pop();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">TYPED_TEST(TemplateMockTest,<sp/>MethodWithCommaInReturnTypeWorks)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>TypeParam<sp/>mock;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>int&gt;<sp/>a_map;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>ReturnTypeWithComma()).WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>ReturnTypeWithComma(1)).WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>mock.ReturnTypeWithComma());</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>mock.ReturnTypeWithComma(1));</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>template<sp/>interfaces<sp/>with<sp/>calltype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StackInterfaceWithCallType<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~StackInterfaceWithCallType()<sp/>{}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Template<sp/>parameter<sp/>appears<sp/>in<sp/>function<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Push)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Pop)()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>GetSize)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Template<sp/>parameter<sp/>appears<sp/>in<sp/>function<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;,<sp/>GetTop)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="637"><highlight class="normal">};</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockStackWithCallType<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>StackInterfaceWithCallType&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>MockStackWithCallType()<sp/>{}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Push,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>elem),</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Calltype(STDMETHODCALLTYPE),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Pop,<sp/>(),<sp/>(Calltype(STDMETHODCALLTYPE),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>GetSize,<sp/>(),<sp/>(Calltype(STDMETHODCALLTYPE),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;,<sp/>GetTop,<sp/>(),</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Calltype(STDMETHODCALLTYPE),<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>MockStackWithCallType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockStackWithCallType&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>MockStackWithCallType&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockStackWithCallType&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal">};</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LegacyMockStackWithCallType<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>StackInterfaceWithCallType&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>LegacyMockStackWithCallType()<sp/>{}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>MOCK_METHOD1_T_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>Push,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>elem));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_T_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>Pop,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>GetSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>GetTop,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;());</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>LegacyMockStackWithCallType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LegacyMockStackWithCallType&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>LegacyMockStackWithCallType&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LegacyMockStackWithCallType&amp;)<sp/>=</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">};</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TemplateMockTestWithCallType<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TemplateMockTestWithCallTypeTypes<sp/>=</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">::testing::Types&lt;MockStackWithCallType&lt;int&gt;</ref>,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LegacyMockStackWithCallType&lt;int&gt;&gt;;</highlight></codeline>
<codeline lineno="677"><highlight class="normal">TYPED_TEST_SUITE(TemplateMockTestWithCallType,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TemplateMockTestWithCallTypeTypes);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>template<sp/>mock<sp/>with<sp/>calltype<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">TYPED_TEST(TemplateMockTestWithCallType,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>TypeParam<sp/>mock;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>GetSize())</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0))</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Push(_));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>GetTop()).WillOnce(ReturnRef(n));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Pop()).Times(AnyNumber());</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>mock.Push(5);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>mock.GetTop());</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>mock.Pop();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_MOCK_METHODS1_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"><sp/><sp/>MOCK_METHOD(void,<sp/>Overloaded,<sp/>());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"><sp/><sp/>MOCK_METHOD(int,<sp/>Overloaded,<sp/>(int),<sp/>(const));<sp/>\</highlight></codeline>
<codeline lineno="705"><highlight class="preprocessor"><sp/><sp/>MOCK_METHOD(bool,<sp/>Overloaded,<sp/>(bool<sp/>f,<sp/>int<sp/>n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LEGACY_MY_MOCK_METHODS1_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="708"><highlight class="preprocessor"><sp/><sp/>MOCK_METHOD0(Overloaded,<sp/>void());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"><sp/><sp/>MOCK_CONST_METHOD1(Overloaded,<sp/>int(int<sp/>n));<sp/>\</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"><sp/><sp/>MOCK_METHOD2(Overloaded,<sp/>bool(bool<sp/>f,<sp/>int<sp/>n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712" refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" kindref="compound">MockOverloadedOnArgNumber</ref><sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" kindref="compound">MockOverloadedOnArgNumber</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>MY_MOCK_METHODS1_;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" kindref="compound">MockOverloadedOnArgNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" kindref="compound">MockOverloadedOnArgNumber</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" kindref="compound">MockOverloadedOnArgNumber</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" kindref="compound">MockOverloadedOnArgNumber</ref>&amp;)<sp/>=</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">};</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" kindref="compound">LegacyMockOverloadedOnArgNumber</ref><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" kindref="compound">LegacyMockOverloadedOnArgNumber</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>LEGACY_MY_MOCK_METHODS1_;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" kindref="compound">LegacyMockOverloadedOnArgNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" kindref="compound">LegacyMockOverloadedOnArgNumber</ref>&amp;)<sp/>=</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" kindref="compound">LegacyMockOverloadedOnArgNumber</ref>&amp;<sp/>operator=(</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" kindref="compound">LegacyMockOverloadedOnArgNumber</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">};</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="738" refid="classtesting_1_1gmock__function__mocker__test_1_1OverloadedMockMethodTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1OverloadedMockMethodTest" kindref="compound">OverloadedMockMethodTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">OverloadedMockMethodTestTypes</ref><sp/>=</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">::testing::Types</ref>&lt;<ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnArgNumber" kindref="compound">MockOverloadedOnArgNumber</ref>,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockOverloadedOnArgNumber" kindref="compound">LegacyMockOverloadedOnArgNumber</ref>&gt;;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1OverloadedMockMethodTest" kindref="compound">OverloadedMockMethodTest</ref>,<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">OverloadedMockMethodTestTypes</ref>);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">TYPED_TEST(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1OverloadedMockMethodTest" kindref="compound">OverloadedMockMethodTest</ref>,<sp/>CanOverloadOnArgNumberInMacroBody)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>TypeParam<sp/>mock;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Overloaded());</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Overloaded(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Overloaded(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1)).WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>mock.Overloaded();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>mock.Overloaded(1));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(mock.Overloaded(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_MOCK_METHODS2_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/>MOCK_CONST_METHOD1(Overloaded,<sp/>int(int<sp/>n));<sp/>\</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"><sp/><sp/>MOCK_METHOD1(Overloaded,<sp/>int(int<sp/>n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" kindref="compound">MockOverloadedOnConstness</ref><sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" kindref="compound">MockOverloadedOnConstness</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>MY_MOCK_METHODS2_;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" kindref="compound">MockOverloadedOnConstness</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" kindref="compound">MockOverloadedOnConstness</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" kindref="compound">MockOverloadedOnConstness</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" kindref="compound">MockOverloadedOnConstness</ref>&amp;)<sp/>=</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal">};</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal">TEST(MockMethodOverloadedMockMethodTest,<sp/>CanOverloadOnConstnessInMacroBody)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" kindref="compound">MockOverloadedOnConstness</ref><sp/>mock;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockOverloadedOnConstness" kindref="compound">MockOverloadedOnConstness</ref>*<sp/>const_mock<sp/>=<sp/>&amp;mock;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Overloaded(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*const_mock,<sp/>Overloaded(1)).WillOnce(Return(3));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>mock.Overloaded(1));</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>const_mock-&gt;Overloaded(1));</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>WorksForVoidNullary)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>MockFunction&lt;void()&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call());</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>foo.Call();</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>WorksForNonVoidNullary)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>MockFunction&lt;int()&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call()).WillOnce(Return(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo.Call());</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>foo.Call());</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>WorksForVoidUnary)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>MockFunction&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(1));</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>foo.Call(1);</highlight></codeline>
<codeline lineno="798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>WorksForNonVoidBinary)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42)).WillOnce(Return(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>Ge(100))).WillOnce(Return(3));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo.Call(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>foo.Call(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>foo.Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>120));</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>WorksFor10Arguments)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a0,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a4,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a5,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a6,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a7,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a8,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a9)&gt;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>foo;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(_,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_))</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo.Call(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>foo.Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>AsStdFunction)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>call<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(i);<sp/>};</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(1)).WillOnce(Return(-1));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(2)).WillOnce(Return(-2));</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-1,<sp/>call(foo.AsStdFunction(),<sp/>1));</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-2,<sp/>call(foo.AsStdFunction(),<sp/>2));</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>AsStdFunctionReturnsReference)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>MockFunction&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;()&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call()).WillOnce(ReturnRef(value));</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>ref<sp/>=<sp/>foo.AsStdFunction()();</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>ref);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>value<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>ref);</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>AsStdFunctionWithReferenceParameter)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>call<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)&gt;&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(i);<sp/>};</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(i)).WillOnce(Return(-1));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-1,<sp/>call(foo.AsStdFunction(),<sp/>i));</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Expected,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsMockFunctionTemplateArgumentDeducedTo(</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::MockFunction&lt;F&gt;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_same&lt;F,<sp/>Expected&gt;::value;</highlight></codeline>
<codeline lineno="853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="858" refid="classtesting_1_1gmock__function__mocker__test_1_1MockMethodMockFunctionSignatureTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockMethodMockFunctionSignatureTest" kindref="compound">MockMethodMockFunctionSignatureTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">MockMethodMockFunctionSignatureTypes</ref><sp/>=</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">Types</ref>&lt;void(),<sp/>int(),<sp/>void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;;</highlight></codeline>
<codeline lineno="863"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockMethodMockFunctionSignatureTest" kindref="compound">MockMethodMockFunctionSignatureTest</ref>,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">MockMethodMockFunctionSignatureTypes</ref>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">TYPED_TEST(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockMethodMockFunctionSignatureTest" kindref="compound">MockMethodMockFunctionSignatureTest</ref>,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsMockFunctionTemplateArgumentDeducedForRawSignature)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Argument<sp/>=<sp/>TypeParam;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>MockFunction&lt;Argument&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsMockFunctionTemplateArgumentDeducedTo&lt;TypeParam&gt;(foo));</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal">TYPED_TEST(MockMethodMockFunctionSignatureTest,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsMockFunctionTemplateArgumentDeducedForStdFunction)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Argument<sp/>=<sp/>std::function&lt;TypeParam&gt;;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>MockFunction&lt;Argument&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsMockFunctionTemplateArgumentDeducedTo&lt;TypeParam&gt;(foo));</highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal">TYPED_TEST(</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>MockMethodMockFunctionSignatureTest,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>IsMockFunctionCallMethodSignatureTheSameForRawSignatureAndStdFunction)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ForRawSignature<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(&amp;MockFunction&lt;TypeParam&gt;::Call);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ForStdFunction<sp/>=</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(&amp;MockFunction&lt;std::function&lt;TypeParam&gt;&gt;::Call);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;ForRawSignature,<sp/>ForStdFunction&gt;::value));</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="890" refid="structtesting_1_1gmock__function__mocker__test_1_1AlternateCallable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1AlternateCallable" kindref="compound">AlternateCallable</ref><sp/>{};</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal">TYPED_TEST(<ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockMethodMockFunctionSignatureTest" kindref="compound">MockMethodMockFunctionSignatureTest</ref>,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsMockFunctionTemplateArgumentDeducedForAlternateCallable)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Argument<sp/>=<sp/><ref refid="structtesting_1_1gmock__function__mocker__test_1_1AlternateCallable" kindref="compound">AlternateCallable&lt;TypeParam&gt;</ref>;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>MockFunction&lt;Argument&gt;<sp/>foo;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsMockFunctionTemplateArgumentDeducedTo&lt;TypeParam&gt;(foo));</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">TYPED_TEST(MockMethodMockFunctionSignatureTest,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsMockFunctionCallMethodSignatureTheSameForAlternateCallable)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ForRawSignature<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(&amp;MockFunction&lt;TypeParam&gt;::Call);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ForStdFunction<sp/>=</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(&amp;MockFunction&lt;std::function&lt;TypeParam&gt;&gt;::Call);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;ForRawSignature,<sp/>ForStdFunction&gt;::value));</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907" refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes0" kindref="compound">MockMethodSizes0</ref><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func,<sp/>());</highlight></codeline>
<codeline lineno="909"><highlight class="normal">};</highlight></codeline>
<codeline lineno="910" refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes1" kindref="compound">MockMethodSizes1</ref><sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="912"><highlight class="normal">};</highlight></codeline>
<codeline lineno="913" refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes2" kindref="compound">MockMethodSizes2</ref><sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="915"><highlight class="normal">};</highlight></codeline>
<codeline lineno="916" refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes3" kindref="compound">MockMethodSizes3</ref><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="918"><highlight class="normal">};</highlight></codeline>
<codeline lineno="919" refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes4" kindref="compound">MockMethodSizes4</ref><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="921"><highlight class="normal">};</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923" refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes0" kindref="compound">LegacyMockMethodSizes0</ref><sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="925"><highlight class="normal">};</highlight></codeline>
<codeline lineno="926" refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes1" kindref="compound">LegacyMockMethodSizes1</ref><sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="928"><highlight class="normal">};</highlight></codeline>
<codeline lineno="929" refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes2" kindref="compound">LegacyMockMethodSizes2</ref><sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="931"><highlight class="normal">};</highlight></codeline>
<codeline lineno="932" refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes3" kindref="compound">LegacyMockMethodSizes3</ref><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>MOCK_METHOD3(func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="934"><highlight class="normal">};</highlight></codeline>
<codeline lineno="935" refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes4" kindref="compound">LegacyMockMethodSizes4</ref><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>MOCK_METHOD4(func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="937"><highlight class="normal">};</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>MockMethodSizeOverhead)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes0" kindref="compound">MockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes1" kindref="compound">MockMethodSizes1</ref>));</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes0" kindref="compound">MockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes2" kindref="compound">MockMethodSizes2</ref>));</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes0" kindref="compound">MockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes3" kindref="compound">MockMethodSizes3</ref>));</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes0" kindref="compound">MockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes4" kindref="compound">MockMethodSizes4</ref>));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes0" kindref="compound">LegacyMockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes1" kindref="compound">LegacyMockMethodSizes1</ref>));</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes0" kindref="compound">LegacyMockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes2" kindref="compound">LegacyMockMethodSizes2</ref>));</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes0" kindref="compound">LegacyMockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes3" kindref="compound">LegacyMockMethodSizes3</ref>));</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes0" kindref="compound">LegacyMockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes4" kindref="compound">LegacyMockMethodSizes4</ref>));</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1LegacyMockMethodSizes0" kindref="compound">LegacyMockMethodSizes0</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodSizes0" kindref="compound">MockMethodSizes0</ref>));</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>EnsureNoUnusedMemberFunction)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>error<sp/>&quot;-Wunused-member-function&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/google/googletest/issues/4052</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Foo<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>foo,<sp/>());</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>EXPECT_CALL(Foo(),<sp/>foo()).Times(0);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hasTwoParams(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaybeThrows();</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DoesntThrow()<sp/>noexcept;</highlight></codeline>
<codeline lineno="971" refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodNoexceptSpecifier" refkind="compound"><highlight class="normal">struct<sp/><ref refid="structtesting_1_1gmock__function__mocker__test_1_1MockMethodNoexceptSpecifier" kindref="compound">MockMethodNoexceptSpecifier</ref><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func1,<sp/>(),<sp/>(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func2,<sp/>(),<sp/>(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func3,<sp/>(),<sp/>(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func4,<sp/>(),<sp/>(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(MaybeThrows()))));</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func5,<sp/>(),<sp/>(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(DoesntThrow()))));</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func6,<sp/>(),<sp/>(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(DoesntThrow())),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func7,<sp/>(),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(DoesntThrow()))));</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>commas<sp/>in<sp/>the<sp/>noexcept<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>func8,<sp/>(),<sp/>(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(hasTwoParams(1,<sp/>2))),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="981"><highlight class="normal">};</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>NoexceptSpecifierPreserved)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::declval&lt;MockMethodNoexceptSpecifier&gt;().func1()));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::declval&lt;MockMethodNoexceptSpecifier&gt;().func2()));</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::declval&lt;MockMethodNoexceptSpecifier&gt;().func3()));</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::declval&lt;MockMethodNoexceptSpecifier&gt;().func4()));</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::declval&lt;MockMethodNoexceptSpecifier&gt;().func5()));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::declval&lt;MockMethodNoexceptSpecifier&gt;().func6()));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::declval&lt;MockMethodNoexceptSpecifier&gt;().func7()));</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::declval&lt;MockMethodNoexceptSpecifier&gt;().func8()),</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(hasTwoParams(1,<sp/>2)));</highlight></codeline>
<codeline lineno="993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_function_mocker_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4503</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc"/>
  </compounddef>
</doxygen>
