<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock-matchers-misc__test_8cc" kind="file" language="C++">
    <compoundname>gmock-matchers-misc_test.cc</compoundname>
    <includes local="no">array</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gmock-matchers__test_8h" local="yes">test/gmock-matchers_test.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="79">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
      </node>
      <node id="76">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="74">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="71">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc</label>
        <link refid="gmock-matchers-misc__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>test/gmock-matchers_test.h</label>
        <link refid="gmock-matchers__test_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="30">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="48">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="37">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="19">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="73">
        <label>assert.h</label>
      </node>
      <node id="39">
        <label>atomic</label>
      </node>
      <node id="52">
        <label>cassert</label>
      </node>
      <node id="25">
        <label>cerrno</label>
      </node>
      <node id="67">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>cstddef</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>ctype.h</label>
      </node>
      <node id="60">
        <label>deque</label>
      </node>
      <node id="80">
        <label>errno.h</label>
      </node>
      <node id="68">
        <label>exception</label>
      </node>
      <node id="43">
        <label>float.h</label>
      </node>
      <node id="61">
        <label>forward_list</label>
      </node>
      <node id="40">
        <label>functional</label>
      </node>
      <node id="69">
        <label>initializer_list</label>
      </node>
      <node id="12">
        <label>iomanip</label>
      </node>
      <node id="70">
        <label>ios</label>
      </node>
      <node id="54">
        <label>iosfwd</label>
      </node>
      <node id="26">
        <label>iostream</label>
      </node>
      <node id="50">
        <label>iterator</label>
      </node>
      <node id="13">
        <label>limits</label>
      </node>
      <node id="82">
        <label>limits.h</label>
      </node>
      <node id="62">
        <label>list</label>
      </node>
      <node id="27">
        <label>locale</label>
      </node>
      <node id="44">
        <label>map</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="4">
        <label>ostream</label>
      </node>
      <node id="34">
        <label>regex.h</label>
      </node>
      <node id="14">
        <label>set</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="21">
        <label>stddef.h</label>
      </node>
      <node id="22">
        <label>stdio.h</label>
      </node>
      <node id="23">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="24">
        <label>string.h</label>
      </node>
      <node id="32">
        <label>strings.h</label>
      </node>
      <node id="28">
        <label>sys/stat.h</label>
      </node>
      <node id="29">
        <label>sys/types.h</label>
      </node>
      <node id="59">
        <label>time.h</label>
      </node>
      <node id="6">
        <label>tuple</label>
      </node>
      <node id="16">
        <label>type_traits</label>
      </node>
      <node id="35">
        <label>typeinfo</label>
      </node>
      <node id="33">
        <label>unistd.h</label>
      </node>
      <node id="63">
        <label>unordered_map</label>
      </node>
      <node id="64">
        <label>unordered_set</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test">testing::gmock_matchers_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test_1_1matcher__test">testing::gmock_matchers_test::matcher_test</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1a363ea6953b8c7298a327ccf90d578a72" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>char value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="113" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1a4e49839887adcdf7fe848238b2a1f4d4" prot="private" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t kUnused</definition>
        <argsstring></argsstring>
        <name>kUnused</name>
        <initializer>= static_cast&lt;size_t&gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="432" column="23" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1ad88eea96f82ba29e252f3e07cdb84378" prot="private" static="no" mutable="no">
        <type>const Graph *</type>
        <definition>const Graph* graph_</definition>
        <argsstring></argsstring>
        <name>graph_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="473" column="15" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1a08a6ed0fb0d954b75bc716d7e1027d39" prot="private" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; lhs_used_</definition>
        <argsstring></argsstring>
        <name>lhs_used_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="474" column="15" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1a92a5f54fbf6a5d2eab027a03744756f3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; rhs_used_</definition>
        <argsstring></argsstring>
        <name>rhs_used_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="475" column="15" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1aab3de6f08394dc65ac9dba5b3bcc5a44" prot="private" static="no" mutable="no">
        <type>ElementMatcherPairs</type>
        <definition>ElementMatcherPairs matches_</definition>
        <argsstring></argsstring>
        <name>matches_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="476" column="23" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1af7014f387b012eaf69559acac016b3f4" prot="private" static="no" mutable="no">
        <type>ElementMatcherPairs</type>
        <definition>ElementMatcherPairs best_so_far_</definition>
        <argsstring></argsstring>
        <name>best_so_far_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="477" column="23" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1a545f93fe606de188711fa1e3ff393d6d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool has_value_</definition>
        <argsstring></argsstring>
        <name>has_value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="691" column="8" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1a0e593923ba36d474258655a5ee3e1345" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int i_</definition>
        <argsstring></argsstring>
        <name>i_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="745" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1a656301417b9a2b5e085771fa3c49b01f" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string s_</definition>
        <argsstring></argsstring>
        <name>s_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="746" column="15" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1a6f821e50a2ad8ee2658234db0d48fd7b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool has_int_</definition>
        <argsstring></argsstring>
        <name>has_int_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="747" column="8" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-misc__test_8cc_1aaaf1ac02dfa554a3cdffc647d512a77b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int index_</definition>
        <argsstring></argsstring>
        <name>index_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" line="801" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc" bodystart="801" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>some<sp/>commonly<sp/>used<sp/>argument<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silence<sp/>warning<sp/>C4244:<sp/>&apos;initializing&apos;:<sp/>conversion<sp/>from<sp/>&apos;int&apos;<sp/>to<sp/>&apos;short&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possible<sp/>loss<sp/>of<sp/>data<sp/>and<sp/>C4100,<sp/>unreferenced<sp/>local<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4244<sp/>4100)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test/gmock-matchers_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_matchers_test<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">TEST(AddressTest,<sp/>NonConst)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>Address(Eq(&amp;n));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(other));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n_ref<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n_ref));</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">TEST(AddressTest,<sp/>Const)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>Address(Eq(&amp;n));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(other));</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">TEST(AddressTest,<sp/>MatcherDoesntCopy)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>n(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;std::unique_ptr&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>Address(Eq(&amp;n));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">TEST(AddressTest,<sp/>Describe)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>matcher<sp/>=<sp/>Address(_);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>address<sp/>that<sp/>is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>Describe(matcher));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>have<sp/>address<sp/>that<sp/>is<sp/>anything&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(matcher));</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>tests<sp/>verify<sp/>that<sp/>values<sp/>without<sp/>a<sp/>public<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor<sp/>can<sp/>be<sp/>used<sp/>as<sp/>arguments<sp/>to<sp/>matchers<sp/>like<sp/>Eq(),<sp/>Ge(),<sp/>and<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>help<sp/>of<sp/>ByRef().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NotCopyable<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>NotCopyable(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NotCopyable&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value()<sp/>==<sp/>rhs.value();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NotCopyable&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value()<sp/>&gt;=<sp/>rhs.value();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>NotCopyable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NotCopyable&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>NotCopyable&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NotCopyable&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">TEST(ByRefTest,<sp/>AllowsNotCopyableConstValueInMatchers)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NotCopyable<sp/>const_value1(1);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>NotCopyable&amp;&gt;<sp/>m<sp/>=<sp/>Eq(ByRef(const_value1));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NotCopyable<sp/>n1(1),<sp/>n2(2);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n1));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(n2));</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">TEST(ByRefTest,<sp/>AllowsNotCopyableValueInMatchers)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>NotCopyable<sp/>value2(2);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;NotCopyable&amp;&gt;<sp/>m<sp/>=<sp/>Ge(ByRef(value2));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>NotCopyable<sp/>n1(1),<sp/>n2(2);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(n1));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n2));</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">TEST(IsEmptyTest,<sp/>ImplementsIsEmpty)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>IsEmpty());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(IsEmpty()));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>container.push_back(1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(IsEmpty()));</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">TEST(IsEmptyTest,<sp/>WorksWithString)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>std::string<sp/>text;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>EXPECT_THAT(text,<sp/>IsEmpty());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>EXPECT_THAT(text,<sp/>Not(IsEmpty()));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>EXPECT_THAT(text,<sp/>Not(IsEmpty()));</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">TEST(IsEmptyTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>IsEmpty();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>empty&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>empty&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">TEST(IsEmptyTest,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>IsEmpty();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>container));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>is<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>container));</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">TEST(IsEmptyTest,<sp/>WorksWithMoveOnly)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>ContainerHelper<sp/>helper;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>Call(IsEmpty()));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>helper.Call({});</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">TEST(IsTrueTest,<sp/>IsTrueIsFalse)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>IsTrue());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>IsFalse());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>Not(IsTrue()));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(IsTrue()));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>IsFalse());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>Not(IsTrue()));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>IsFalse());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-1,<sp/>IsTrue());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-1,<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>IsTrue());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>IsTrue());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>IsTrue());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;a,<sp/>IsTrue());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;a,<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>Not(IsTrue()));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::true_type(),<sp/>IsTrue());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::true_type(),<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::false_type(),<sp/>IsFalse());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::false_type(),<sp/>Not(IsTrue()));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>Not(IsTrue()));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>IsFalse());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>null_unique;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>nonnull_unique(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(0));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>EXPECT_THAT(null_unique,<sp/>Not(IsTrue()));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>EXPECT_THAT(null_unique,<sp/>IsFalse());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>EXPECT_THAT(nonnull_unique,<sp/>IsTrue());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>EXPECT_THAT(nonnull_unique,<sp/>Not(IsFalse()));</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_TYPED_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ContainerEq<sp/>with<sp/>different<sp/>container<sp/>types,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>element<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ContainerEqTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types&lt;set&lt;int&gt;</ref>,<sp/>vector&lt;size_t&gt;,<sp/>multiset&lt;size_t&gt;,<sp/>list&lt;int&gt;&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>ContainerEqTestTypes;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">TYPED_TEST_SUITE(ContainerEqTest,<sp/>ContainerEqTestTypes);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>filled<sp/>container<sp/>is<sp/>equal<sp/>to<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>EqualsSelf)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;TypeParam&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(my_set));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>my_set));</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>missing<sp/>values<sp/>are<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>ValueMissing)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{2,<sp/>1,<sp/>8,<sp/>5};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>TypeParam<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;TypeParam&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>added<sp/>values<sp/>are<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>ValueAdded)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>5,<sp/>8,<sp/>46};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>TypeParam<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>TypeParam&amp;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>46&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>added<sp/>and<sp/>missing<sp/>values<sp/>are<sp/>reported<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>ValueAddedAndRemoved)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>8,<sp/>46};</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>TypeParam<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;TypeParam&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>46,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>duplicated<sp/>value<sp/>--<sp/>expect<sp/>no<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>DuplicateDifference)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>TypeParam<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>TypeParam&amp;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Depending<sp/>on<sp/>the<sp/>container,<sp/>match<sp/>may<sp/>be<sp/>true<sp/>or<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>in<sp/>any<sp/>case<sp/>there<sp/>should<sp/>be<sp/>no<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_TYPED_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>multiple<sp/>missing<sp/>values<sp/>are<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>just<sp/>vector<sp/>here,<sp/>so<sp/>order<sp/>is<sp/>predictable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>MultipleValuesMissing)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{2,<sp/>1,<sp/>5};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;vector&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>3,<sp/>8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>added<sp/>values<sp/>are<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>just<sp/>vector<sp/>here,<sp/>so<sp/>order<sp/>is<sp/>predictable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>MultipleValuesAdded)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>92,<sp/>3,<sp/>5,<sp/>8,<sp/>46};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>list&lt;size_t&gt;<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>list&lt;size_t&gt;<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>7);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>list&lt;size_t&gt;&amp;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>92,<sp/>46&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>added<sp/>and<sp/>missing<sp/>values<sp/>are<sp/>reported<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>MultipleValuesAddedAndRemoved)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>92,<sp/>46};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>list&lt;size_t&gt;<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>list&lt;size_t&gt;<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>list&lt;size_t&gt;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>92,<sp/>46,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>5,<sp/>8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>to<sp/>see<sp/>that<sp/>duplicate<sp/>elements<sp/>are<sp/>detected,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>(as<sp/>above)<sp/>not<sp/>reported<sp/>in<sp/>the<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>MultiSetOfIntDuplicateDifference)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;vector&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(my_set));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>nothing<sp/>to<sp/>report<sp/>when<sp/>both<sp/>sets<sp/>contain<sp/>all<sp/>the<sp/>same<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ContainerEq<sp/>works<sp/>for<sp/>non-trivial<sp/>associative<sp/>containers,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>like<sp/>maps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>WorksForMaps)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>map&lt;int,<sp/>std::string&gt;<sp/>my_map;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>my_map[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>my_map[1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>map&lt;int,<sp/>std::string&gt;<sp/>test_map;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>test_map[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;aa&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>test_map[1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>map&lt;int,<sp/>std::string&gt;&amp;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_map);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(my_map));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_map));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>(0,<sp/>\&quot;aa\&quot;),\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>(0,<sp/>\&quot;a\&quot;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_map));</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>WorksForNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[]<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>ContainerEq(a2));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>Not(ContainerEq(b)));</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>WorksForTwoDimensionalNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a1[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a2[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ContainerEq()<sp/>in<sp/>the<sp/>first<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>ContainerEq(a2));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>Not(ContainerEq(b)));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ContainerEq()<sp/>in<sp/>the<sp/>second<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>ElementsAre(ContainerEq(a2[0]),<sp/>ContainerEq(a2[1])));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>ElementsAre(Not(ContainerEq(b[0])),<sp/>ContainerEq(a2[1])));</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>WorksForNativeArrayAsTuple)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(p1,<sp/>3),<sp/>ContainerEq(a2));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(p1,<sp/>3),<sp/>Not(ContainerEq(b)));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c[]<sp/>=<sp/>{1,<sp/>3,<sp/>2};</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(p1,<sp/>3),<sp/>Not(ContainerEq(c)));</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>CopiesNativeArrayParameter)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>std::string<sp/>a1[][3]<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ciao&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;bye&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;see<sp/>you&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ciao&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>std::string<sp/>a2[][3]<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ciao&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;bye&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;see<sp/>you&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ciao&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string(&amp;)[2][3]&gt;<sp/>m<sp/>=<sp/>ContainerEq(a2);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>m);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>a2[0][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ha&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>m);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>as<sp/>a<sp/>check<sp/>on<sp/>the<sp/>more<sp/>complex<sp/>max<sp/>flow<sp/>method<sp/>used<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>real<sp/>testing::internal::FindMaxBipartiteMatching.<sp/>This<sp/>method<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compatible<sp/>but<sp/>runs<sp/>in<sp/>worst-case<sp/>factorial<sp/>time,<sp/>so<sp/>we<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>it<sp/>in<sp/>testing<sp/>for<sp/>small<sp/>problem<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BacktrackingMaxBPMState<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>take<sp/>ownership<sp/>of<sp/>&apos;g&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BacktrackingMaxBPMState(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph*<sp/>g)<sp/>:<sp/>graph_(g)<sp/>{}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>ElementMatcherPairs<sp/>Compute()<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graph_-&gt;LhsSize()<sp/>==<sp/>0<sp/>||<sp/>graph_-&gt;RhsSize()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_so_far_;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs_used_.assign(graph_-&gt;LhsSize(),<sp/>kUnused);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs_used_.assign(graph_-&gt;RhsSize(),<sp/>kUnused);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs<sp/>=<sp/>0;<sp/>irhs<sp/>&lt;<sp/>graph_-&gt;RhsSize();<sp/>++irhs)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matches_.clear();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RecurseInto(irhs);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_so_far_.size()<sp/>==<sp/>graph_-&gt;RhsSize())<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_so_far_;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kUnused<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PushMatch(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>matches_.push_back(ElementMatcherPair(lhs,<sp/>rhs));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs_used_[lhs]<sp/>=<sp/>rhs;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs_used_[rhs]<sp/>=<sp/>lhs;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches_.size()<sp/>&gt;<sp/>best_so_far_.size())<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_so_far_<sp/>=<sp/>matches_;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PopMatch()<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ElementMatcherPair&amp;<sp/>back<sp/>=<sp/>matches_.back();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs_used_[back.first]<sp/>=<sp/>kUnused;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs_used_[back.second]<sp/>=<sp/>kUnused;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>matches_.pop_back();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RecurseInto(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs_used_[irhs]<sp/>!=<sp/>kUnused)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilhs<sp/>=<sp/>0;<sp/>ilhs<sp/>&lt;<sp/>graph_-&gt;LhsSize();<sp/>++ilhs)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_used_[ilhs]<sp/>!=<sp/>kUnused)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!graph_-&gt;HasEdge(ilhs,<sp/>irhs))<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PushMatch(ilhs,<sp/>irhs);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_so_far_.size()<sp/>==<sp/>graph_-&gt;RhsSize())<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mi<sp/>=<sp/>irhs<sp/>+<sp/>1;<sp/>mi<sp/>&lt;<sp/>graph_-&gt;RhsSize();<sp/>++mi)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RecurseInto(mi))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PopMatch();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph*<sp/>graph_;<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>lhs_used_;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>rhs_used_;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>ElementMatcherPairs<sp/>matches_;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>ElementMatcherPairs<sp/>best_so_far_;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">};</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BacktrackingMaxBPMState&lt;Graph&gt;::kUnused;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implement<sp/>a<sp/>simple<sp/>backtracking<sp/>algorithm<sp/>to<sp/>determine<sp/>if<sp/>it<sp/>is<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>find<sp/>one<sp/>element<sp/>per<sp/>matcher,<sp/>without<sp/>reusing<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">ElementMatcherPairs<sp/>FindBacktrackingMaxBPM(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph&amp;<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BacktrackingMaxBPMState&lt;Graph&gt;(&amp;g).Compute();</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BacktrackingBPMTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>MaxBipartiteMatching<sp/>algorithm<sp/>with<sp/>square<sp/>matrices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>single<sp/>int<sp/>param<sp/>is<sp/>the<sp/>#<sp/>of<sp/>nodes<sp/>on<sp/>each<sp/>of<sp/>the<sp/>left<sp/>and<sp/>right<sp/>sides.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BipartiteTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">::testing::TestWithParam</ref>&lt;size_t&gt;<sp/>{};</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>all<sp/>match<sp/>graphs<sp/>up<sp/>to<sp/>some<sp/>moderate<sp/>number<sp/>of<sp/>edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">TEST_P(BipartiteTest,<sp/>Exhaustive)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nodes<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>MatchMatrix<sp/>graph(nodes,<sp/>nodes);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>ElementMatcherPairs<sp/>matches<sp/>=<sp/>internal::FindMaxBipartiteMatching(graph);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(FindBacktrackingMaxBPM(graph).size(),<sp/>matches.size())</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;graph:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>graph.DebugString();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>all<sp/>elements<sp/>of<sp/>matches<sp/>are<sp/>in<sp/>the<sp/>graph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>elements<sp/>of<sp/>first<sp/>and<sp/>second<sp/>are<sp/>unique.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>seen_element(graph.LhsSize());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>seen_matcher(graph.RhsSize());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(PrintToString(matches));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matches.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilhs<sp/>=<sp/>matches[i].first;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs<sp/>=<sp/>matches[i].second;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(graph.HasEdge(ilhs,<sp/>irhs));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(seen_element[ilhs]);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(seen_matcher[irhs]);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seen_element[ilhs]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seen_matcher[irhs]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(graph.NextGraph());</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(AllGraphs,<sp/>BipartiteTest,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Range(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{0},<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{5}));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameterized<sp/>by<sp/>a<sp/>pair<sp/>interpreted<sp/>as<sp/>(LhsSize,<sp/>RhsSize).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BipartiteNonSquareTest</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">::testing::TestWithParam</ref>&lt;std::pair&lt;size_t,<sp/>size_t&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">TEST_F(BipartiteNonSquareTest,<sp/>SimpleBacktracking)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>.......</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0:-----\<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1:---\<sp/>|<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2:---\<sp/>|<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3:-\<sp/>|<sp/>|<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>:.......:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0<sp/>1<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>MatchMatrix<sp/>g(4,<sp/>3);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::array&lt;std::array&lt;size_t,<sp/>2&gt;,<sp/>4&gt;<sp/>kEdges<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{{{0,<sp/>2}},<sp/>{{1,<sp/>1}},<sp/>{{2,<sp/>1}},<sp/>{{3,<sp/>0}}}};</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kEdges.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>g.SetEdge(kEdges[i][0],<sp/>kEdges[i][1],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>EXPECT_THAT(FindBacktrackingMaxBPM(g),</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(Pair(3,<sp/>0),<sp/>Pair(AnyOf(1,<sp/>2),<sp/>1),<sp/>Pair(0,<sp/>2)))</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>g.DebugString();</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>a<sp/>few<sp/>nonsquare<sp/>matrices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">TEST_P(BipartiteNonSquareTest,<sp/>Exhaustive)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nlhs<sp/>=<sp/>GetParam().first;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nrhs<sp/>=<sp/>GetParam().second;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>MatchMatrix<sp/>graph(nlhs,<sp/>nrhs);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(FindBacktrackingMaxBPM(graph).size(),</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FindMaxBipartiteMatching(graph).size())</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;graph:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>graph.DebugString()</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nbacktracking:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PrintToString(FindBacktrackingMaxBPM(graph))</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nmax<sp/>flow:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>PrintToString(internal::FindMaxBipartiteMatching(graph));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(graph.NextGraph());</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>AllGraphs,<sp/>BipartiteNonSquareTest,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::Values(std::make_pair(1,<sp/>2),<sp/>std::make_pair(2,<sp/>1),</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(3,<sp/>2),<sp/>std::make_pair(2,<sp/>3),</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(4,<sp/>1),<sp/>std::make_pair(1,<sp/>4),</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(4,<sp/>3),<sp/>std::make_pair(3,<sp/>4)));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BipartiteRandomTest</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">::testing::TestWithParam</ref>&lt;std::pair&lt;int,<sp/>int&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>a<sp/>large<sp/>sample<sp/>of<sp/>larger<sp/>graphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">TEST_P(BipartiteRandomTest,<sp/>LargerNets)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes<sp/>=<sp/>GetParam().first;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iters<sp/>=<sp/>GetParam().second;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>MatchMatrix<sp/>graph(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nodes),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nodes));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(GTEST_FLAG_GET(random_seed));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seed<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>seed<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(time(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>iters<sp/>&gt;<sp/>0;<sp/>--iters,<sp/>++seed)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(seed));</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>graph.Randomize();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(FindBacktrackingMaxBPM(graph).size(),</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FindMaxBipartiteMatching(graph).size())</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>graph:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>graph.DebugString()</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nTo<sp/>reproduce<sp/>the<sp/>failure,<sp/>rerun<sp/>the<sp/>test<sp/>with<sp/>the<sp/>flag&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>GTEST_FLAG_PREFIX_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;random_seed=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>seed;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>argument<sp/>is<sp/>a<sp/>std::pair&lt;int,<sp/>int&gt;<sp/>representing<sp/>(nodes,<sp/>iters).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(Samples,<sp/>BipartiteRandomTest,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(std::make_pair(5,<sp/>10000),</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(6,<sp/>5000),</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(7,<sp/>2000),</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(8,<sp/>500),</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(9,<sp/>100)));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>IsReadableTypeName().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">TEST(IsReadableTypeNameTest,<sp/>ReturnsTrueForShortNames)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;const<sp/>unsigned<sp/>char*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;MyMap&lt;int,<sp/>void*&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;void<sp/>(*)(int,<sp/>bool)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">TEST(IsReadableTypeNameTest,<sp/>ReturnsTrueForLongNonTemplateNonFunctionNames)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;my_long_namespace::MyClassName&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;int<sp/>[5][6][7][8][9][10][11]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;my_namespace::MyOuterClass::MyInnerClass&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">TEST(IsReadableTypeNameTest,<sp/>ReturnsFalseForLongTemplateNames)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;basic_string&lt;char,<sp/>std::char_traits&lt;char&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;std::vector&lt;int,<sp/>std::alloc_traits&lt;int&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">TEST(IsReadableTypeNameTest,<sp/>ReturnsFalseForLongFunctionTypeNames)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;void<sp/>(&amp;)(int,<sp/>bool,<sp/>char,<sp/>float)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>FormatMatcherDescription().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">TEST(FormatMatcherDescriptionTest,<sp/>WorksForEmptyDescription)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMatcherDescription(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IsEven&quot;</highlight><highlight class="normal">,<sp/>{},<sp/>Strings()));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>even)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMatcherDescription(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IsEven&quot;</highlight><highlight class="normal">,<sp/>{},<sp/>Strings()));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;equals<sp/>(a:<sp/>5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMatcherDescription(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Equals&quot;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>in<sp/>range<sp/>(a:<sp/>5,<sp/>b:<sp/>8)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FormatMatcherDescription(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IsInRange&quot;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal">INSTANTIATE_GTEST_MATCHER_TEST_P(MatcherTupleTest);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal">TEST_P(MatcherTupleTestP,<sp/>ExplainsMatchFailure)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss1;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>ExplainMatchFailureTupleTo(</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(Matcher&lt;char&gt;(Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)),<sp/>GreaterThan(5)),</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>10),<sp/>&amp;ss1);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ss1.str());<sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss2;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>ExplainMatchFailureTupleTo(</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(GreaterThan(5),<sp/>Matcher&lt;char&gt;(Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(2,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),<sp/>&amp;ss2);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>&gt;<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>2,<sp/>which<sp/>is<sp/>3<sp/>less<sp/>than<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#1:<sp/>is<sp/>equal<sp/>to<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>&apos;b&apos;<sp/>(98,<sp/>0x62)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss2.str());<sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match<sp/>where<sp/>both<sp/>arguments<sp/>need<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss3;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>ExplainMatchFailureTupleTo(</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(GreaterThan(5),<sp/>Matcher&lt;char&gt;(Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(2,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),<sp/>&amp;ss3);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>&gt;<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>2,<sp/>which<sp/>is<sp/>3<sp/>less<sp/>than<sp/>5\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss3.str());<sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match<sp/>where<sp/>only<sp/>one<sp/>argument<sp/>needs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>optional<sp/>type<sp/>implementation<sp/>with<sp/>minimal<sp/>requirements<sp/>for<sp/>use<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Optional<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SampleOptional<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SampleOptional(T<sp/>value)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(std::move(value)),<sp/>has_value_(true)<sp/>{}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>SampleOptional()<sp/>:<sp/>value_(),<sp/>has_value_(false)<sp/>{}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value_;<sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_value_;</highlight></codeline>
<codeline lineno="692"><highlight class="normal">};</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">TEST(OptionalTest,<sp/>DescribesSelf)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SampleOptional&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>Optional(Eq(1));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;value<sp/>is<sp/>equal<sp/>to<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">TEST(OptionalTest,<sp/>ExplainsSelf)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SampleOptional&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>Optional(Eq(1));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>1<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>SampleOptional&lt;int&gt;(1)));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>2<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>SampleOptional&lt;int&gt;(2)));</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal">TEST(OptionalTest,<sp/>MatchesNonEmptyOptional)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SampleOptional&lt;int&gt;&gt;<sp/>m1<sp/>=<sp/>Optional(1);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SampleOptional&lt;int&gt;&gt;<sp/>m2<sp/>=<sp/>Optional(Eq(2));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SampleOptional&lt;int&gt;&gt;<sp/>m3<sp/>=<sp/>Optional(Lt(3));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>SampleOptional&lt;int&gt;<sp/>opt(1);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(opt));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(opt));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m3.Matches(opt));</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal">TEST(OptionalTest,<sp/>DoesNotMatchNullopt)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SampleOptional&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>Optional(1);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>SampleOptional&lt;int&gt;<sp/>empty;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(empty));</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal">TEST(OptionalTest,<sp/>WorksWithMoveOnly)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>Matcher&lt;SampleOptional&lt;std::unique_ptr&lt;int&gt;&gt;&gt;<sp/>m<sp/>=<sp/>Optional(Eq(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(SampleOptional&lt;std::unique_ptr&lt;int&gt;&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SampleVariantIntString<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>SampleVariantIntString(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>:<sp/>i_(i),<sp/>has_int_(true)<sp/>{}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>SampleVariantIntString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/>:<sp/>s_(s),<sp/>has_int_(false)<sp/>{}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>holds_alternative(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SampleVariantIntString&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value.has_int_<sp/>==<sp/>std::is_same&lt;T,<sp/>int&gt;::value;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SampleVariantIntString&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value.get_impl(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>get_impl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i_;<sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>get_impl(std::string*)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_;<sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>std::string<sp/>s_;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_int_;</highlight></codeline>
<codeline lineno="748"><highlight class="normal">};</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal">TEST(VariantTest,<sp/>DescribesSelf)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SampleVariantIntString&gt;<sp/>m<sp/>=<sp/>VariantWith&lt;int&gt;(Eq(1));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Describe(m),<sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;is<sp/>a<sp/>variant&lt;&gt;<sp/>with<sp/>value<sp/>of<sp/>type<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;.*&apos;<sp/>and<sp/>the<sp/>value<sp/>is<sp/>equal<sp/>to<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">TEST(VariantTest,<sp/>ExplainsSelf)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SampleVariantIntString&gt;<sp/>m<sp/>=<sp/>VariantWith&lt;int&gt;(Eq(1));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(m,<sp/>SampleVariantIntString(1)),</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(m,<sp/>SampleVariantIntString(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>is<sp/>not<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(m,<sp/>SampleVariantIntString(2)),</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>2<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal">TEST(VariantTest,<sp/>FullMatch)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>Matcher&lt;SampleVariantIntString&gt;<sp/>m<sp/>=<sp/>VariantWith&lt;int&gt;(Eq(1));</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(SampleVariantIntString(1)));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>VariantWith&lt;std::string&gt;(Eq(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(SampleVariantIntString(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal">TEST(VariantTest,<sp/>TypeDoesNotMatch)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>Matcher&lt;SampleVariantIntString&gt;<sp/>m<sp/>=<sp/>VariantWith&lt;int&gt;(Eq(1));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(SampleVariantIntString(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>VariantWith&lt;std::string&gt;(Eq(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(SampleVariantIntString(1)));</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">TEST(VariantTest,<sp/>InnerDoesNotMatch)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>Matcher&lt;SampleVariantIntString&gt;<sp/>m<sp/>=<sp/>VariantWith&lt;int&gt;(Eq(1));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(SampleVariantIntString(2)));</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>VariantWith&lt;std::string&gt;(Eq(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(SampleVariantIntString(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SampleAnyType<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SampleAnyType(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>:<sp/>index_(0),<sp/>i_(i)<sp/>{}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SampleAnyType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/>:<sp/>index_(1),<sp/>s_(s)<sp/>{}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>any_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SampleAnyType*<sp/>any)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>any-&gt;get_impl(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>std::string<sp/>s_;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>get_impl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_<sp/>==<sp/>0<sp/>?<sp/>&amp;i_<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string*<sp/>get_impl(std::string*)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_<sp/>==<sp/>1<sp/>?<sp/>&amp;s_<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal">};</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">TEST(AnyWithTest,<sp/>FullMatch)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>Matcher&lt;SampleAnyType&gt;<sp/>m<sp/>=<sp/>AnyWith&lt;int&gt;(Eq(1));</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(SampleAnyType(1)));</highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal">TEST(AnyWithTest,<sp/>TestBadCastType)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>Matcher&lt;SampleAnyType&gt;<sp/>m<sp/>=<sp/>AnyWith&lt;std::string&gt;(Eq(</highlight><highlight class="stringliteral">&quot;fail&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(SampleAnyType(1)));</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">TEST(AnyWithTest,<sp/>TestUseInContainers)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>std::vector&lt;SampleAnyType&gt;<sp/>a;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>a.emplace_back(1);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>a.emplace_back(2);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>a.emplace_back(3);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>ElementsAreArray({AnyWith&lt;int&gt;(1),<sp/>AnyWith&lt;int&gt;(2),<sp/>AnyWith&lt;int&gt;(3)}));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>std::vector&lt;SampleAnyType&gt;<sp/>b;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>b.emplace_back(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>b.emplace_back(</highlight><highlight class="stringliteral">&quot;merhaba&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>b.emplace_back(</highlight><highlight class="stringliteral">&quot;salut&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>EXPECT_THAT(b,<sp/>ElementsAreArray({AnyWith&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AnyWith&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;merhaba&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AnyWith&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;salut&quot;</highlight><highlight class="normal">)}));</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal">TEST(AnyWithTest,<sp/>TestCompare)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>EXPECT_THAT(SampleAnyType(1),<sp/>AnyWith&lt;int&gt;(Gt(0)));</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">TEST(AnyWithTest,<sp/>DescribesSelf)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>SampleAnyType&amp;&gt;<sp/>m<sp/>=<sp/>AnyWith&lt;int&gt;(Eq(1));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Describe(m),<sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>&apos;any&apos;<sp/>type<sp/>with<sp/>value<sp/>of<sp/>type<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;.*&apos;<sp/>and<sp/>the<sp/>value<sp/>is<sp/>equal<sp/>to<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal">TEST(AnyWithTest,<sp/>ExplainsSelf)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>SampleAnyType&amp;&gt;<sp/>m<sp/>=<sp/>AnyWith&lt;int&gt;(Eq(1));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(m,<sp/>SampleAnyType(1)),<sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(m,<sp/>SampleAnyType(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>is<sp/>not<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(m,<sp/>SampleAnyType(2)),<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>2<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Args&lt;k0,<sp/>...,<sp/>kn&gt;(m).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsZeroTemplateArg)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;int,<sp/>bool&gt;<sp/>t(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Args&lt;&gt;(Eq(std::tuple&lt;&gt;())));</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;&gt;(Ne(std::tuple&lt;&gt;()))));</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsOneTemplateArg)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;int,<sp/>bool&gt;<sp/>t(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Args&lt;0&gt;(Eq(std::make_tuple(5))));</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Args&lt;1&gt;(Eq(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;1&gt;(Eq(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)))));</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsTwoTemplateArgs)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;short,<sp/>int,<sp/>long&gt;<sp/>t(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">{4},<sp/>5,<sp/>6L);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;0,<sp/>1&gt;(Lt())));</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;1,<sp/>2&gt;(Lt())));</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;0,<sp/>2&gt;(Gt())));</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsRepeatedTemplateArgs)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;short,<sp/>int,<sp/>long&gt;<sp/>t(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">{4},<sp/>5,<sp/>6L);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;0,<sp/>0&gt;(Eq())));</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;1,<sp/>1&gt;(Ne())));</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsDecreasingTemplateArgs)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;short,<sp/>int,<sp/>long&gt;<sp/>t(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">{4},<sp/>5,<sp/>6L);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;2,<sp/>0&gt;(Gt())));</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;2,<sp/>1&gt;(Lt())));</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">MATCHER(SumIsZero,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(arg)<sp/>+<sp/>std::get&lt;1&gt;(arg)<sp/>+<sp/>std::get&lt;2&gt;(arg)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsMoreTemplateArgsThanArityOfOriginalTuple)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(-1,<sp/>2),<sp/>(Args&lt;0,<sp/>0,<sp/>1&gt;(SumIsZero())));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(1,<sp/>2),<sp/>Not(Args&lt;0,<sp/>0,<sp/>1&gt;(SumIsZero())));</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">TEST(ArgsTest,<sp/>CanBeNested)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;short,<sp/>int,<sp/>long,<sp/>int&gt;<sp/>t(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">{4},<sp/>5,<sp/>6L,<sp/>6);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;1,<sp/>2,<sp/>3&gt;(Args&lt;1,<sp/>2&gt;(Eq()))));</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;0,<sp/>1,<sp/>3&gt;(Args&lt;0,<sp/>2&gt;(Lt()))));</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">TEST(ArgsTest,<sp/>CanMatchTupleByValue)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::tuple&lt;char,<sp/>int,<sp/>int&gt;<sp/>Tuple3;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;Tuple3&gt;<sp/>m<sp/>=<sp/>Args&lt;1,<sp/>2&gt;(Lt());</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple3(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>1,<sp/>2)));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple3(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>2,<sp/>2)));</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal">TEST(ArgsTest,<sp/>CanMatchTupleByReference)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::tuple&lt;char,<sp/>char,<sp/>int&gt;<sp/>Tuple3;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>Tuple3&amp;&gt;<sp/>m<sp/>=<sp/>Args&lt;0,<sp/>1&gt;(Lt());</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple3(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>2)));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple3(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>2)));</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Validates<sp/>that<sp/>arg<sp/>is<sp/>printed<sp/>as<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal">MATCHER_P(PrintsAs,<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::PrintToString(arg)<sp/>==<sp/>str;<sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsTenTemplateArgs)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(0,<sp/>1L,<sp/>2,<sp/>3L,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9),</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Args&lt;9,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0&gt;(</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintsAs(</highlight><highlight class="stringliteral">&quot;(9,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0)&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(0,<sp/>1L,<sp/>2,<sp/>3L,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9),</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(Args&lt;9,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0&gt;(</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintsAs(</highlight><highlight class="stringliteral">&quot;(0,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0)&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal">TEST(ArgsTest,<sp/>DescirbesSelfCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;std::tuple&lt;int,<sp/>bool,<sp/>char&gt;&gt;<sp/>m<sp/>=<sp/>Args&lt;2,<sp/>0&gt;(Lt());</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>tuple<sp/>whose<sp/>fields<sp/>(#2,<sp/>#0)<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>first<sp/>&lt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">TEST(ArgsTest,<sp/>DescirbesNestedArgsCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>std::tuple&lt;int,<sp/>bool,<sp/>char,<sp/>int&gt;&amp;&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Args&lt;0,<sp/>2,<sp/>3&gt;(Args&lt;2,<sp/>0&gt;(Lt()));</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>tuple<sp/>whose<sp/>fields<sp/>(#0,<sp/>#2,<sp/>#3)<sp/>are<sp/>a<sp/>tuple<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#2,<sp/>#0)<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&lt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal">TEST(ArgsTest,<sp/>DescribesNegationCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;std::tuple&lt;int,<sp/>char&gt;&gt;<sp/>m<sp/>=<sp/>Args&lt;1,<sp/>0&gt;(Gt());</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>tuple<sp/>whose<sp/>fields<sp/>(#1,<sp/>#0)<sp/>aren&apos;t<sp/>a<sp/>pair<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>first<sp/>&gt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal">TEST(ArgsTest,<sp/>ExplainsMatchResultWithoutInnerExplanation)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;std::tuple&lt;bool,<sp/>int,<sp/>int&gt;&gt;<sp/>m<sp/>=<sp/>Args&lt;1,<sp/>2&gt;(Eq());</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#1,<sp/>#2)<sp/>are<sp/>(42,<sp/>42)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42,<sp/>42)));</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#1,<sp/>#2)<sp/>are<sp/>(42,<sp/>43)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42,<sp/>43)));</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>Args&lt;&gt;&apos;s<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LessThanMatcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;std::tuple&lt;char,<sp/>int&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/></highlight><highlight class="comment">/*os*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(std::tuple&lt;char,<sp/>int&gt;<sp/>value,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>std::get&lt;0&gt;(value)<sp/>-<sp/>std::get&lt;1&gt;(value);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>first<sp/>value<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diff</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>more<sp/>than<sp/>the<sp/>second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal">};</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">Matcher&lt;std::tuple&lt;char,<sp/>int&gt;&gt;<sp/>LessThan()<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LessThanMatcher);</highlight></codeline>
<codeline lineno="983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal">TEST(ArgsTest,<sp/>ExplainsMatchResultWithInnerExplanation)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;std::tuple&lt;char,<sp/>int,<sp/>int&gt;&gt;<sp/>m<sp/>=<sp/>Args&lt;0,<sp/>2&gt;(LessThan());</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#0,<sp/>#2)<sp/>are<sp/>(&apos;a&apos;<sp/>(97,<sp/>0x61),<sp/>42),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>first<sp/>value<sp/>is<sp/>55<sp/>more<sp/>than<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>std::make_tuple(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>42,<sp/>42)));</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#0,<sp/>#2)<sp/>are<sp/>(&apos;\\0&apos;,<sp/>43)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>std::make_tuple(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>42,<sp/>43)));</highlight></codeline>
<codeline lineno="993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>the<sp/>MATCHER*()<sp/>macro<sp/>family.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>simple<sp/>MATCHER()<sp/>definition<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal">MATCHER(IsEven,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(arg<sp/>%<sp/>2)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal">TEST(MatcherMacroTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>IsEven();</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(6));</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(7));</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>even)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>6));</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>7));</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>tests<sp/>that<sp/>the<sp/>description<sp/>string<sp/>can<sp/>reference<sp/>&apos;negation&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal">MATCHER(IsEven2,<sp/>negation<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>odd&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((arg<sp/>%<sp/>2)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>we<sp/>can<sp/>stream<sp/>to<sp/>result_listener,<sp/>a<sp/>listener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>supplied<sp/>by<sp/>the<sp/>MATCHER<sp/>macro<sp/>implicitly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>*result_listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>*result_listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>2<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(arg<sp/>%<sp/>2);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>tests<sp/>that<sp/>the<sp/>description<sp/>string<sp/>can<sp/>reference<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal">MATCHER_P2(EqSumOf,<sp/>x,<sp/>y,</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(negation<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>equal&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;equals&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>the<sp/>sum<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintToString(y))<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg<sp/>==<sp/>(x<sp/>+<sp/>y))<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>*result_listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>we<sp/>can<sp/>stream<sp/>to<sp/>the<sp/>underlying<sp/>stream<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result_listener.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_listener-&gt;stream()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*result_listener-&gt;stream()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;diff<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(x<sp/>+<sp/>y<sp/>-<sp/>arg);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>matcher<sp/>description<sp/>can<sp/>reference<sp/>&apos;negation&apos;<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matcher<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">TEST(MatcherMacroTest,<sp/>DescriptionCanReferenceNegationAndParameters)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m1<sp/>=<sp/>IsEven2();</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>odd&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m2<sp/>=<sp/>EqSumOf(5,<sp/>9);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;equals<sp/>the<sp/>sum<sp/>of<sp/>5<sp/>and<sp/>9&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>equal<sp/>the<sp/>sum<sp/>of<sp/>5<sp/>and<sp/>9&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>explaining<sp/>match<sp/>result<sp/>in<sp/>a<sp/>MATCHER*<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal">TEST(MatcherMacroTest,<sp/>CanExplainMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m1<sp/>=<sp/>IsEven2();</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>4));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;%<sp/>2<sp/>==<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>5));</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m2<sp/>=<sp/>EqSumOf(1,<sp/>2);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/>3));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;diff<sp/>==<sp/>-1&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/>4));</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>MATCHER()<sp/>can<sp/>reference<sp/>the<sp/>type<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>being<sp/>matched.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">MATCHER(IsEmptyString,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;::std::string,<sp/>arg_type&gt;();</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg.empty();</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal">MATCHER(IsEmptyStringByRef,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;const<sp/>::std::string&amp;,<sp/>arg_type&gt;();</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg.empty();</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal">TEST(MatcherMacroTest,<sp/>CanReferenceArgType)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;::std::string&gt;<sp/>m1<sp/>=<sp/>IsEmptyString();</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>::std::string&amp;&gt;<sp/>m2<sp/>=<sp/>IsEmptyStringByRef();</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MATCHER()<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">matcher_test<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">MATCHER(IsOdd,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(arg<sp/>%<sp/>2)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>matcher_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal">TEST(MatcherMacroTest,<sp/>WorksInNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>matcher_test::IsOdd();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(4));</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(5));</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Value()<sp/>can<sp/>be<sp/>used<sp/>to<sp/>compose<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal">MATCHER(IsPositiveOdd,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value(arg,<sp/>matcher_test::IsOdd())<sp/>&amp;&amp;<sp/>arg<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal">TEST(MatcherMacroTest,<sp/>CanBeComposedUsingValue)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>IsPositiveOdd());</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>Not(IsPositiveOdd()));</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-1,<sp/>Not(IsPositiveOdd()));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>simple<sp/>MATCHER_P()<sp/>definition<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal">MATCHER_P(IsGreaterThan32And,<sp/>n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>&gt;<sp/>32<sp/>&amp;&amp;<sp/>arg<sp/>&gt;<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal">TEST(MatcherPMacroTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>IsGreaterThan32And(5);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(36));</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(5));</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>greater<sp/>than<sp/>32<sp/>and<sp/>(n:<sp/>5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>greater<sp/>than<sp/>32<sp/>and<sp/>(n:<sp/>5))&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>36));</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>description<sp/>is<sp/>calculated<sp/>correctly<sp/>from<sp/>the<sp/>matcher<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal">MATCHER_P(_is_Greater_Than32and_,<sp/>n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>&gt;<sp/>32<sp/>&amp;&amp;<sp/>arg<sp/>&gt;<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal">TEST(MatcherPMacroTest,<sp/>GeneratesCorrectDescription)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>_is_Greater_Than32and_(5);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>greater<sp/>than<sp/>32<sp/>and<sp/>(n:<sp/>5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>greater<sp/>than<sp/>32<sp/>and<sp/>(n:<sp/>5))&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>36));</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>MATCHER_P<sp/>matcher<sp/>can<sp/>be<sp/>explicitly<sp/>instantiated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>reference<sp/>parameter<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UncopyableFoo<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>UncopyableFoo(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>value_(value)<sp/>{<sp/>(void)value_;<sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>UncopyableFoo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UncopyableFoo&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UncopyableFoo&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal">MATCHER_P(ReferencesUncopyable,<sp/>variable,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg<sp/>==<sp/>&amp;variable;<sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal">TEST(MatcherPMacroTest,<sp/>WorksWhenExplicitlyInstantiatedWithReference)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>UncopyableFoo<sp/>foo1(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">),<sp/>foo2(</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>UncopyableFoo&amp;&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReferencesUncopyable&lt;const<sp/>UncopyableFoo&amp;&gt;(foo1);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(foo1));</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(foo2));</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>the<sp/>address<sp/>of<sp/>the<sp/>parameter<sp/>printed,<sp/>as<sp/>most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>likely<sp/>it<sp/>will<sp/>just<sp/>annoy<sp/>the<sp/>user.<sp/><sp/>If<sp/>the<sp/>address<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interesting,<sp/>the<sp/>user<sp/>should<sp/>consider<sp/>passing<sp/>the<sp/>parameter<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;references<sp/>uncopyable<sp/>(variable:<sp/>1-byte<sp/>object<sp/>&lt;31&gt;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>MATCHER_Pn()<sp/>can<sp/>reference<sp/>the<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal">MATCHER_P3(ParamTypesAreIntLongAndChar,<sp/>foo,<sp/>bar,<sp/>baz,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int,<sp/>foo_type&gt;();</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;long,<sp/>bar_type&gt;();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;char,<sp/>baz_type&gt;();</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>CanReferenceParamTypes)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>ParamTypesAreIntLongAndChar(10,<sp/>20L,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>MATCHER_Pn<sp/>matcher<sp/>can<sp/>be<sp/>explicitly<sp/>instantiated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>parameter<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal">MATCHER_P2(ReferencesAnyOf,<sp/>variable1,<sp/>variable2,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg<sp/>==<sp/>&amp;variable1<sp/>||<sp/>&amp;arg<sp/>==<sp/>&amp;variable2;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>WorksWhenExplicitlyInstantiatedWithReferences)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>UncopyableFoo<sp/>foo1(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">),<sp/>foo2(</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">),<sp/>foo3(</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>UncopyableFoo&amp;&gt;<sp/>const_m<sp/>=</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReferencesAnyOf&lt;const<sp/>UncopyableFoo&amp;,<sp/>const<sp/>UncopyableFoo&amp;&gt;(foo1,<sp/>foo2);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(const_m.Matches(foo1));</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(const_m.Matches(foo2));</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(const_m.Matches(foo3));</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;UncopyableFoo&amp;&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReferencesAnyOf&lt;UncopyableFoo&amp;,<sp/>UncopyableFoo&amp;&gt;(foo1,<sp/>foo2);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(foo1));</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(foo2));</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(foo3));</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal">TEST(MatcherPnMacroTest,</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>GeneratesCorretDescriptionWhenExplicitlyInstantiatedWithReferences)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>UncopyableFoo<sp/>foo1(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">),<sp/>foo2(</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>UncopyableFoo&amp;&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReferencesAnyOf&lt;const<sp/>UncopyableFoo&amp;,<sp/>const<sp/>UncopyableFoo&amp;&gt;(foo1,<sp/>foo2);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>the<sp/>addresses<sp/>of<sp/>the<sp/>parameters<sp/>printed,<sp/>as<sp/>most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>likely<sp/>they<sp/>will<sp/>just<sp/>annoy<sp/>the<sp/>user.<sp/><sp/>If<sp/>the<sp/>addresses<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interesting,<sp/>the<sp/>user<sp/>should<sp/>consider<sp/>passing<sp/>the<sp/>parameters<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointers<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;references<sp/>any<sp/>of<sp/>(variable1:<sp/>1-byte<sp/>object<sp/>&lt;31&gt;,<sp/>variable2:<sp/>1-byte<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;object<sp/>&lt;32&gt;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>simple<sp/>MATCHER_P2()<sp/>definition<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal">MATCHER_P2(IsNotInClosedRange,<sp/>low,<sp/>hi,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>&lt;<sp/>low<sp/>||<sp/>arg<sp/>&gt;<sp/>hi;<sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>long&amp;&gt;<sp/>m<sp/>=<sp/>IsNotInClosedRange(10,<sp/>20);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(36L));</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(15L));</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>in<sp/>closed<sp/>range<sp/>(low:<sp/>10,<sp/>hi:<sp/>20)&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>not<sp/>in<sp/>closed<sp/>range<sp/>(low:<sp/>10,<sp/>hi:<sp/>20))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>36L));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>15L));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MATCHER*()<sp/>definitions<sp/>can<sp/>be<sp/>overloaded<sp/>on<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>parameters;<sp/>also<sp/>tests<sp/>MATCHER_Pn()<sp/>where<sp/>n<sp/>&gt;=<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal">MATCHER(EqualsSumOf,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">MATCHER_P(EqualsSumOf,<sp/>a,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">MATCHER_P2(EqualsSumOf,<sp/>a,<sp/>b,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">MATCHER_P3(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c;<sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">MATCHER_P4(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d;<sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">MATCHER_P5(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;<sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">MATCHER_P6(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">MATCHER_P7(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f<sp/>+<sp/>g;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal">MATCHER_P8(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f<sp/>+<sp/>g<sp/>+<sp/>h;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">MATCHER_P9(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f<sp/>+<sp/>g<sp/>+<sp/>h<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">MATCHER_P10(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f<sp/>+<sp/>g<sp/>+<sp/>h<sp/>+<sp/>i<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>CanBeOverloadedOnNumberOfParameters)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>EqualsSumOf());</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>EqualsSumOf(1));</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>EXPECT_THAT(12,<sp/>EqualsSumOf(10,<sp/>2));</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>EXPECT_THAT(123,<sp/>EqualsSumOf(100,<sp/>20,<sp/>3));</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1234,<sp/>EqualsSumOf(1000,<sp/>200,<sp/>30,<sp/>4));</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>EXPECT_THAT(12345,<sp/>EqualsSumOf(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5));</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdef&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefg&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefgh&quot;</highlight><highlight class="normal">,<sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefghi&quot;</highlight><highlight class="normal">,<sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefghij&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>Not(EqualsSumOf()));</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-1,<sp/>Not(EqualsSumOf(1)));</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-12,<sp/>Not(EqualsSumOf(10,<sp/>2)));</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-123,<sp/>Not(EqualsSumOf(100,<sp/>20,<sp/>3)));</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-1234,<sp/>Not(EqualsSumOf(1000,<sp/>200,<sp/>30,<sp/>4)));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-12345,<sp/>Not(EqualsSumOf(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5)));</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdef<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefg<sp/>&quot;</highlight><highlight class="normal">,<sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefgh<sp/>&quot;</highlight><highlight class="normal">,<sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefghi<sp/>&quot;</highlight><highlight class="normal">,<sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefghij<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>MATCHER_Pn()<sp/>definition<sp/>can<sp/>be<sp/>instantiated<sp/>with<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compatible<sp/>parameter<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>WorksForDifferentParameterTypes)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>EXPECT_THAT(123,<sp/>EqualsSumOf(100L,<sp/>20,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3)));</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcd&quot;</highlight><highlight class="normal">,<sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>EXPECT_THAT(124,<sp/>Not(EqualsSumOf(100L,<sp/>20,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3))));</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">,<sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>matcher<sp/>body<sp/>can<sp/>promote<sp/>the<sp/>parameter<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal">MATCHER_P2(EqConcat,<sp/>prefix,<sp/>suffix,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>lines<sp/>promote<sp/>the<sp/>two<sp/>parameters<sp/>to<sp/>desired<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>std::string<sp/>prefix_str(prefix);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>suffix_char<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(suffix);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>prefix_str<sp/>+<sp/>suffix_char;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>SimpleTypePromotion)<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>Matcher&lt;std::string&gt;<sp/>no_promo<sp/>=<sp/>EqConcat(std::string(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>std::string&amp;&gt;<sp/>promo<sp/>=<sp/>EqConcat(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(no_promo.Matches(</highlight><highlight class="stringliteral">&quot;fool&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(promo.Matches(</highlight><highlight class="stringliteral">&quot;fool&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(no_promo.Matches(</highlight><highlight class="stringliteral">&quot;foot&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(promo.Matches(</highlight><highlight class="stringliteral">&quot;foot&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>the<sp/>type<sp/>of<sp/>a<sp/>MATCHER*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>TypesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EqualsSumOf()<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>EqualsSumOfMatcher<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcher<sp/>a0<sp/>=<sp/>EqualsSumOf();</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EqualsSumOf(1)<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>EqualsSumOfMatcherP<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP&lt;int&gt;<sp/>a1<sp/>=<sp/>EqualsSumOf(1);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EqualsSumOf(p1,<sp/>...,<sp/>pk)<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>EqualsSumOfMatcherPk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP2&lt;int,<sp/>char&gt;<sp/>a2<sp/>=<sp/>EqualsSumOf(1,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP3&lt;int,<sp/>int,<sp/>char&gt;<sp/>a3<sp/>=<sp/>EqualsSumOf(1,<sp/>2,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP4&lt;int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a4<sp/>=<sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP5&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a5<sp/>=</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP6&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a6<sp/>=</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP7&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a7<sp/>=</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP8&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a8<sp/>=</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP9&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a9<sp/>=</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP10&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a10<sp/>=</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>&quot;unused<sp/>variable&quot;<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>(void)a0;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>(void)a1;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>(void)a2;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>(void)a3;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>(void)a4;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>(void)a5;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>(void)a6;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>(void)a7;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>(void)a8;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>(void)a9;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>(void)a10;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>matcher-typed<sp/>parameters<sp/>can<sp/>be<sp/>used<sp/>in<sp/>Value()<sp/>inside<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MATCHER_Pn<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Succeeds<sp/>if<sp/>arg<sp/>matches<sp/>exactly<sp/>2<sp/>of<sp/>the<sp/>3<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal">MATCHER_P3(TwoOf,<sp/>m1,<sp/>m2,<sp/>m3,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Value(arg,<sp/>m1))<sp/>+</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Value(arg,<sp/>m2))<sp/>+</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Value(arg,<sp/>m3));</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>==<sp/>2;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>CanUseMatcherTypedParameterInValue)<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>EXPECT_THAT(42,<sp/>TwoOf(Gt(0),<sp/>Lt(50),<sp/>Eq(10)));</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(TwoOf(Gt(-1),<sp/>Lt(1),<sp/>Eq(0))));</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Contains().Times().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal">INSTANTIATE_GTEST_MATCHER_TEST_P(ContainsTimes);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal">TEST(ContainsTimes,<sp/>ListMatchesWhenElementQuantityMatches)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>list&lt;int&gt;<sp/>some_list;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>some_list.push_back(3);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>some_list.push_back(1);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>some_list.push_back(2);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>some_list.push_back(3);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(3).Times(2));</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(2).Times(1));</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(Ge(2)).Times(3));</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(Ge(2)).Times(Gt(2)));</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(4).Times(0));</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(_).Times(4));</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Not(Contains(5).Times(1)));</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(5).Times(_));<sp/><sp/></highlight><highlight class="comment">//<sp/>Times(_)<sp/>always<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Not(Contains(3).Times(1)));</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(3).Times(Not(1)));</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>EXPECT_THAT(list&lt;int&gt;{},<sp/>Not(Contains(_)));</highlight></codeline>
<codeline lineno="1408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal">TEST_P(ContainsTimesP,<sp/>ExplainsMatchResultCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[2]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>Matcher&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int(&amp;)[2]&gt;<sp/>m<sp/>=<sp/>Contains(2).Times(3);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#1<sp/>matches<sp/>but<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>1<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(3).Times(0);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>no<sp/>element<sp/>that<sp/>matches<sp/>and<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>0<sp/>matches&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(3).Times(4);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;has<sp/>no<sp/>element<sp/>that<sp/>matches<sp/>and<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>0<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;match&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(2).Times(4);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#1<sp/>matches<sp/>but<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>1<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;match&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(GreaterThan(0)).Times(2);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>elements<sp/>(0,<sp/>1)<sp/>match<sp/>and<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>2<sp/>matches&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(GreaterThan(10)).Times(Gt(1));</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;has<sp/>no<sp/>element<sp/>that<sp/>matches<sp/>and<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>0<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;match&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(GreaterThan(0)).Times(GreaterThan&lt;size_t&gt;(5));</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>elements<sp/>(0,<sp/>1)<sp/>match<sp/>but<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>2<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;match,<sp/>which<sp/>is<sp/>3<sp/>less<sp/>than<sp/>5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal">TEST(ContainsTimes,<sp/>DescribesItselfCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;int&gt;&gt;<sp/>m<sp/>=<sp/>Contains(1).Times(2);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;quantity<sp/>of<sp/>elements<sp/>that<sp/>match<sp/>is<sp/>equal<sp/>to<sp/>1<sp/>is<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;int&gt;&gt;<sp/>m2<sp/>=<sp/>Not(m);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;quantity<sp/>of<sp/>elements<sp/>that<sp/>match<sp/>is<sp/>equal<sp/>to<sp/>1<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>AllOfArray()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal">TEST(AllOfArrayTest,<sp/>BasicForms)<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v0{};</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v1{1};</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v2{2,<sp/>3};</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v3{4,<sp/>4,<sp/>4};</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>AllOfArray(v0.begin(),<sp/>v0.end()));</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AllOfArray(v1.begin(),<sp/>v1.end()));</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AllOfArray(v1.begin(),<sp/>v1.end())));</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>Not(AllOfArray(v2.begin(),<sp/>v2.end())));</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>AllOfArray(v3.begin(),<sp/>v3.end()));</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>+<sp/><sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ar[6]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>4,<sp/>4};</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>AllOfArray(ar,<sp/>0));</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AllOfArray(ar,<sp/>1));</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AllOfArray(ar,<sp/>1)));</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>Not(AllOfArray(ar<sp/>+<sp/>1,<sp/>3)));</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>AllOfArray(ar<sp/>+<sp/>3,<sp/>3));</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>ar0[0];<sp/><sp/>Not<sp/>usable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ar1[1]<sp/>=<sp/>{1};</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ar2[2]<sp/>=<sp/>{2,<sp/>3};</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ar3[3]<sp/>=<sp/>{4,<sp/>4,<sp/>4};</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_THAT(0,<sp/>Not(AllOfArray(ar0)));<sp/><sp/>//<sp/>Cannot<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AllOfArray(ar1));</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AllOfArray(ar1)));</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>Not(AllOfArray(ar2)));</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>AllOfArray(ar3));</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>AllOfArray(v0));</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AllOfArray(v1));</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AllOfArray(v1)));</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>Not(AllOfArray(v2)));</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>AllOfArray(v3));</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>AllOfArray&lt;int&gt;({}));<sp/><sp/></highlight><highlight class="comment">//<sp/>Requires<sp/>template<sp/>arg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AllOfArray({1}));</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AllOfArray({1})));</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>Not(AllOfArray({2,<sp/>3})));</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>AllOfArray({4,<sp/>4,<sp/>4}));</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal">TEST(AllOfArrayTest,<sp/>Matchers)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>std::vector&lt;Matcher&lt;int&gt;&gt;<sp/>matchers{Ge(1),<sp/>Lt(2)};</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(AllOfArray(matchers)));</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AllOfArray(matchers));</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AllOfArray(matchers)));</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initializer_list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(AllOfArray({Ge(0),<sp/>Ge(1)})));</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AllOfArray({Ge(0),<sp/>Ge(1)}));</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal">INSTANTIATE_GTEST_MATCHER_TEST_P(AnyOfArrayTest);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal">TEST(AnyOfArrayTest,<sp/>BasicForms)<sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v0{};</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v1{1};</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v2{2,<sp/>3};</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(AnyOfArray(v0.begin(),<sp/>v0.end())));</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AnyOfArray(v1.begin(),<sp/>v1.end()));</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AnyOfArray(v1.begin(),<sp/>v1.end())));</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>AnyOfArray(v2.begin(),<sp/>v2.end()));</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>Not(AnyOfArray(v2.begin(),<sp/>v2.end())));</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>+<sp/><sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ar[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(AnyOfArray(ar,<sp/>0)));</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AnyOfArray(ar,<sp/>1));</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AnyOfArray(ar,<sp/>1)));</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>AnyOfArray(ar<sp/>+<sp/>1,<sp/>2));</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>Not(AnyOfArray(ar<sp/>+<sp/>1,<sp/>2)));</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>ar0[0];<sp/><sp/>Not<sp/>usable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ar1[1]<sp/>=<sp/>{1};</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ar2[2]<sp/>=<sp/>{2,<sp/>3};</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_THAT(0,<sp/>Not(AnyOfArray(ar0)));<sp/><sp/>//<sp/>Cannot<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AnyOfArray(ar1));</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AnyOfArray(ar1)));</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>AnyOfArray(ar2));</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>Not(AnyOfArray(ar2)));</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(AnyOfArray(v0)));</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AnyOfArray(v1));</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AnyOfArray(v1)));</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>AnyOfArray(v2));</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>Not(AnyOfArray(v2)));</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(AnyOfArray&lt;int&gt;({})));<sp/><sp/></highlight><highlight class="comment">//<sp/>Requires<sp/>template<sp/>arg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>AnyOfArray({1}));</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>Not(AnyOfArray({1})));</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>AnyOfArray({2,<sp/>3}));</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>Not(AnyOfArray({2,<sp/>3})));</highlight></codeline>
<codeline lineno="1555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">TEST(AnyOfArrayTest,<sp/>Matchers)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>negate<sp/>test<sp/>AllOfArrayTest.Matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>std::vector&lt;Matcher&lt;int&gt;&gt;<sp/>matchers{Lt(1),<sp/>Ge(2)};</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>AnyOfArray(matchers));</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>Not(AnyOfArray(matchers)));</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>AnyOfArray(matchers));</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initializer_list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>AnyOfArray({Lt(0),<sp/>Lt(1)}));</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>Not(AllOfArray({Lt(0),<sp/>Lt(1)})));</highlight></codeline>
<codeline lineno="1567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal">TEST_P(AnyOfArrayTestP,<sp/>ExplainsMatchResultCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>AnyOfArray<sp/>and<sp/>AllOfArray<sp/>use<sp/>the<sp/>same<sp/>underlying<sp/>template-template,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thus<sp/>it<sp/>is<sp/>sufficient<sp/>to<sp/>test<sp/>one<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>v0{};</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>v1{1};</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>v2{2,<sp/>3};</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m0<sp/>=<sp/>AnyOfArray(v0);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m1<sp/>=<sp/>AnyOfArray(v1);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m2<sp/>=<sp/>AnyOfArray(v2);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m0,<sp/>0));</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>1));</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>2));</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/>3));</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/>4));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">,<sp/>Describe(m0));</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>1)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>2)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>3)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m0));</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>1)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>2)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>3)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Explain<sp/>with<sp/>matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>g1<sp/>=<sp/>AnyOfArray({GreaterThan(1)});</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>g2<sp/>=<sp/>AnyOfArray({GreaterThan(1),<sp/>GreaterThan(2)});</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Explains<sp/>the<sp/>first<sp/>positive<sp/>match<sp/>and<sp/>all<sp/>prior<sp/>negative<sp/>matches...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>less<sp/>than<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Explain(g1,<sp/>0));</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>the<sp/>same<sp/>as<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Explain(g1,<sp/>1));</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Explain(g1,<sp/>2));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>less<sp/>than<sp/>1,<sp/>and<sp/>which<sp/>is<sp/>2<sp/>less<sp/>than<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(g2,<sp/>0));</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>the<sp/>same<sp/>as<sp/>1,<sp/>and<sp/>which<sp/>is<sp/>1<sp/>less<sp/>than<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(g2,<sp/>1));</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>1&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(g2,<sp/>2));</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal">MATCHER(IsNotNull,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>a<sp/>matcher<sp/>defined<sp/>using<sp/>MATCHER()<sp/>can<sp/>work<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>move-only<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal">TEST(MatcherMacroTest,<sp/>WorksOnMoveOnlyType)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>IsNotNull());</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::unique_ptr&lt;int&gt;(),<sp/>Not(IsNotNull()));</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal">MATCHER_P(UniquePointee,<sp/>pointee,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*arg<sp/>==<sp/>pointee;<sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>a<sp/>matcher<sp/>defined<sp/>using<sp/>MATCHER_P*()<sp/>can<sp/>work<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>move-only<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal">TEST(MatcherPMacroTest,<sp/>WorksOnMoveOnlyType)<sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>UniquePointee(3));</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(UniquePointee(2)));</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal">MATCHER(EnsureNoUnusedButMarkedUnusedWarning,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(arg<sp/>%<sp/>2)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal">TEST(MockMethodMockFunctionTest,<sp/>EnsureNoUnusedButMarkedUnusedWarning)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>error<sp/>&quot;-Wused-but-marked-unused&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/google/googletest/issues/4055</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>EnsureNoUnusedButMarkedUnusedWarning());</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::function&lt;void()&gt;<sp/>is<sp/>used<sp/>below<sp/>for<sp/>compatibility<sp/>with<sp/>older<sp/>copies<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GCC.<sp/>Normally,<sp/>a<sp/>raw<sp/>lambda<sp/>is<sp/>all<sp/>that<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>examples<sp/>from<sp/>documentation<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal">TEST(ThrowsTest,<sp/>Examples)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;([]()<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">);<sp/>}),</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Throws&lt;std::runtime_error&gt;());</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;([]()<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">);<sp/>}),</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ThrowsMessage&lt;std::runtime_error&gt;(HasSubstr(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal">TEST(ThrowsTest,<sp/>PrintsExceptionWhat)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;([]()<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;ABC123XYZ&quot;</highlight><highlight class="normal">);<sp/>}),</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ThrowsMessage&lt;std::runtime_error&gt;(HasSubstr(</highlight><highlight class="stringliteral">&quot;ABC123XYZ&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal">TEST(ThrowsTest,<sp/>DoesNotGenerateDuplicateCatchClauseWarning)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;([]()<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception();<sp/>}),</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throws&lt;std::exception&gt;());</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal">TEST(ThrowsTest,<sp/>CallableExecutedExactlyOnce)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;([&amp;a]()<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a++;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>10;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throws&lt;int&gt;());</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a,<sp/>1u);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;([&amp;a]()<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a++;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throws&lt;std::runtime_error&gt;());</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a,<sp/>2u);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;([&amp;a]()<sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a++;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrowsMessage&lt;std::runtime_error&gt;(HasSubstr(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a,<sp/>3u);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;([&amp;a]()<sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a++;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throws&lt;std::runtime_error&gt;(</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property(&amp;std::runtime_error::what,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a,<sp/>4u);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal">TEST(ThrowsTest,<sp/>Describe)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>Throws&lt;std::runtime_error&gt;();</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>matcher.DescribeTo(&amp;ss);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>explanation<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>EXPECT_THAT(explanation,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;std::runtime_error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal">TEST(ThrowsTest,<sp/>Success)<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>Throws&lt;std::runtime_error&gt;();</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.MatchAndExplain(</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/>throw<sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">);<sp/>},<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;std::runtime_error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal">TEST(ThrowsTest,<sp/>FailWrongType)<sp/>{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>Throws&lt;std::runtime_error&gt;();</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.MatchAndExplain(</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/>throw<sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">);<sp/>},<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;std::logic_error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;\&quot;error<sp/>message\&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal">TEST(ThrowsTest,<sp/>FailWrongTypeNonStd)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>Throws&lt;std::runtime_error&gt;();</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.MatchAndExplain([]()<sp/>{<sp/>throw<sp/>10;<sp/>},<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>of<sp/>an<sp/>unknown<sp/>type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal">TEST(ThrowsTest,<sp/>FailNoThrow)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>Throws&lt;std::runtime_error&gt;();</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.MatchAndExplain([]()<sp/>{<sp/>(void)0;<sp/>},<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>throw<sp/>any<sp/>exception&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ThrowsPredicateTest</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;Matcher&lt;std::function&lt;void()&gt;&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal">TEST_P(ThrowsPredicateTest,<sp/>Describe)<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/>matcher.DescribeTo(&amp;ss);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>explanation<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>EXPECT_THAT(explanation,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;std::runtime_error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>EXPECT_THAT(explanation,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal">TEST_P(ThrowsPredicateTest,<sp/>Success)<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.MatchAndExplain(</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/>throw<sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">);<sp/>},<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;std::runtime_error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal">TEST_P(ThrowsPredicateTest,<sp/>FailWrongType)<sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.MatchAndExplain(</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/>throw<sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">);<sp/>},<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;std::logic_error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;\&quot;error<sp/>message\&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal">TEST_P(ThrowsPredicateTest,<sp/>FailWrongTypeNonStd)<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.MatchAndExplain([]()<sp/>{<sp/>throw<sp/>10;<sp/>},<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>of<sp/>an<sp/>unknown<sp/>type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal">TEST_P(ThrowsPredicateTest,<sp/>FailNoThrow)<sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.MatchAndExplain([]()<sp/>{},<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>throw<sp/>any<sp/>exception&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>AllMessagePredicates,<sp/>ThrowsPredicateTest,</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>Values(Matcher&lt;std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;&gt;(</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrowsMessage&lt;std::runtime_error&gt;(HasSubstr(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">)))));</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Throws&lt;E1&gt;(Matcher&lt;E2&gt;{})<sp/>compiles<sp/>even<sp/>when<sp/>E2<sp/>!=<sp/>const<sp/>E1&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal">TEST(ThrowsPredicateCompilesTest,<sp/>ExceptionMatcherAcceptsBroadType)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrowsMessage&lt;std::runtime_error&gt;(HasSubstr(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher.Matches([]()<sp/>{<sp/>throw<sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">);<sp/>}));</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher.Matches([]()<sp/>{<sp/>throw<sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;wrong<sp/>message&quot;</highlight><highlight class="normal">);<sp/>}));</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;uint64_t&gt;<sp/>inner<sp/>=<sp/>Eq(10);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=<sp/>Throws&lt;uint32_t&gt;(inner);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(matcher.Matches([]()<sp/>{<sp/>throw<sp/>(uint32_t)10;<sp/>}));</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(matcher.Matches([]()<sp/>{<sp/>throw<sp/>(uint32_t)11;<sp/>}));</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ThrowsMessage(&quot;message&quot;)<sp/>is<sp/>equivalent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>ThrowsMessage(Eq&lt;std::string&gt;(&quot;message&quot;)).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal">TEST(ThrowsPredicateCompilesTest,<sp/>MessageMatcherAcceptsNonMatcher)<sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>Matcher&lt;std::function&lt;void()&gt;&gt;<sp/>matcher<sp/>=</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ThrowsMessage&lt;std::runtime_error&gt;(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher.Matches([]()<sp/>{<sp/>throw<sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">);<sp/>}));</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.Matches(</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/>throw<sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;wrong<sp/>error<sp/>message&quot;</highlight><highlight class="normal">);<sp/>}));</highlight></codeline>
<codeline lineno="1815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_matchers_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4244<sp/>4100</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-misc_test.cc"/>
  </compounddef>
</doxygen>
