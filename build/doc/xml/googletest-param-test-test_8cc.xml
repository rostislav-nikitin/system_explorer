<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="googletest-param-test-test_8cc" kind="file" language="C++">
    <compoundname>googletest-param-test-test.cc</compoundname>
    <includes refid="googletest-param-test-test_8h" local="yes">test/googletest-param-test-test.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iostream</includes>
    <includes local="no">list</includes>
    <includes local="no">set</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-internal-inl_8h" local="yes">src/gtest-internal-inl.h</includes>
    <incdepgraph>
      <node id="15">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="29">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="48">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="36">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="17">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc</label>
        <link refid="googletest-param-test-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>test/googletest-param-test-test.h</label>
        <link refid="googletest-param-test-test_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>algorithm</label>
      </node>
      <node id="38">
        <label>atomic</label>
      </node>
      <node id="52">
        <label>cassert</label>
      </node>
      <node id="23">
        <label>cerrno</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="18">
        <label>ctype.h</label>
      </node>
      <node id="61">
        <label>errno.h</label>
      </node>
      <node id="43">
        <label>float.h</label>
      </node>
      <node id="39">
        <label>functional</label>
      </node>
      <node id="6">
        <label>iomanip</label>
      </node>
      <node id="54">
        <label>iosfwd</label>
      </node>
      <node id="24">
        <label>iostream</label>
      </node>
      <node id="50">
        <label>iterator</label>
      </node>
      <node id="7">
        <label>limits</label>
      </node>
      <node id="59">
        <label>list</label>
      </node>
      <node id="25">
        <label>locale</label>
      </node>
      <node id="44">
        <label>map</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="9">
        <label>ostream</label>
      </node>
      <node id="33">
        <label>regex.h</label>
      </node>
      <node id="10">
        <label>set</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="19">
        <label>stddef.h</label>
      </node>
      <node id="20">
        <label>stdio.h</label>
      </node>
      <node id="21">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>string.h</label>
      </node>
      <node id="31">
        <label>strings.h</label>
      </node>
      <node id="27">
        <label>sys/stat.h</label>
      </node>
      <node id="28">
        <label>sys/types.h</label>
      </node>
      <node id="26">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>typeinfo</label>
      </node>
      <node id="32">
        <label>unistd.h</label>
      </node>
      <node id="41">
        <label>utility</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classDogAdder" prot="public">DogAdder</innerclass>
    <innerclass refid="classIntWrapper" prot="public">IntWrapper</innerclass>
    <innerclass refid="classNonDefaultConstructAssignString" prot="public">NonDefaultConstructAssignString</innerclass>
    <innerclass refid="classConstructFromT" prot="public">ConstructFromT</innerclass>
    <innerclass refid="classTestGenerationEnvironment" prot="public">TestGenerationEnvironment</innerclass>
    <innerclass refid="classTestGenerationTest" prot="public">TestGenerationTest</innerclass>
    <innerclass refid="classGeneratorEvaluationTest" prot="public">GeneratorEvaluationTest</innerclass>
    <innerclass refid="classExternalGeneratorTest" prot="public">ExternalGeneratorTest</innerclass>
    <innerclass refid="classMultipleInstantiationTest" prot="public">MultipleInstantiationTest</innerclass>
    <innerclass refid="classSeparateInstanceTest" prot="public">SeparateInstanceTest</innerclass>
    <innerclass refid="classNamingTest" prot="public">NamingTest</innerclass>
    <innerclass refid="classMacroNamingTest" prot="public">MacroNamingTest</innerclass>
    <innerclass refid="classMacroNamingTestNonParametrized" prot="public">MacroNamingTestNonParametrized</innerclass>
    <innerclass refid="classCustomFunctorNamingTest" prot="public">CustomFunctorNamingTest</innerclass>
    <innerclass refid="structCustomParamNameFunctor" prot="public">CustomParamNameFunctor</innerclass>
    <innerclass refid="classCustomFunctionNamingTest" prot="public">CustomFunctionNamingTest</innerclass>
    <innerclass refid="classCustomLambdaNamingTest" prot="public">CustomLambdaNamingTest</innerclass>
    <innerclass refid="classCustomIntegerNamingTest" prot="public">CustomIntegerNamingTest</innerclass>
    <innerclass refid="structCustomStruct" prot="public">CustomStruct</innerclass>
    <innerclass refid="classCustomStructNamingTest" prot="public">CustomStructNamingTest</innerclass>
    <innerclass refid="structStatefulNamingFunctor" prot="public">StatefulNamingFunctor</innerclass>
    <innerclass refid="classStatefulNamingTest" prot="public">StatefulNamingTest</innerclass>
    <innerclass refid="classUnstreamable" prot="public">Unstreamable</innerclass>
    <innerclass refid="classCommentTest" prot="public">CommentTest</innerclass>
    <innerclass refid="classNonParameterizedBaseTest" prot="public">NonParameterizedBaseTest</innerclass>
    <innerclass refid="classParameterizedDerivedTest" prot="public">ParameterizedDerivedTest</innerclass>
    <innerclass refid="classParameterizedDeathTest" prot="public">ParameterizedDeathTest</innerclass>
    <innerclass refid="classMyEnumTest" prot="public">MyEnumTest</innerclass>
    <innerclass refid="classworks__here_1_1NotUsedTest" prot="public">works_here::NotUsedTest</innerclass>
    <innerclass refid="classworks__here_1_1NotUsedTypeTest" prot="public">works_here::NotUsedTypeTest</innerclass>
    <innerclass refid="classworks__here_1_1NotInstantiatedTest" prot="public">works_here::NotInstantiatedTest</innerclass>
    <innerclass refid="classworks__here_1_1NotInstantiatedTypeTest" prot="public">works_here::NotInstantiatedTypeTest</innerclass>
    <innernamespace refid="namespaceworks__here">works_here</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="googletest-param-test-test_8cc_1a6414de581a925e7399b27c14e38f8a67" prot="public" static="no">
        <name>PREFIX_WITH_FOO</name>
        <param><defname>test_name</defname></param>
        <initializer>Foo##test_name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="856" column="9" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="856" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="googletest-param-test-test_8cc_1aeb9b224f65fb5b0b8f2323a6903d6a68" prot="public" static="no">
        <name>PREFIX_WITH_MACRO</name>
        <param><defname>test_name</defname></param>
        <initializer>Macro##test_name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="857" column="9" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="857" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="googletest-param-test-test_8cc_1a057c666e39cf0735f5e7e74747124787" prot="public" static="no" strong="no">
        <type></type>
        <name>MyEnums</name>
        <enumvalue id="googletest-param-test-test_8cc_1a057c666e39cf0735f5e7e74747124787ab4f50b5eb533127652f9dbca6bdf6c3d" prot="public">
          <name>ENUM1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="googletest-param-test-test_8cc_1a057c666e39cf0735f5e7e74747124787ac3a9f8169cecee80b1d6d262cc1b83bd" prot="public">
          <name>ENUM2</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="googletest-param-test-test_8cc_1a057c666e39cf0735f5e7e74747124787adc101d4c8d611f4312e54ef4d8b0f410" prot="public">
          <name>ENUM3</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1114" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1114" bodyend="1118"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="googletest-param-test-test_8cc_1aefe5c7eafc17e71cec010d92628bf84f" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int test_generation_params[]</definition>
        <argsstring>[]</argsstring>
        <name>test_generation_params</name>
        <initializer>= {36, 42, 72}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="666" column="11" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googletest-param-test-test_8cc_1a0f691f1461778d71f30b1fb1dea1cb50" prot="public" static="no" mutable="no">
        <type>ParamGenerator&lt; int &gt;</type>
        <definition>ParamGenerator&lt;int&gt; extern_gen</definition>
        <argsstring></argsstring>
        <name>extern_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="769" column="23" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test2-test.cc" bodystart="43" bodyend="-1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="769" declcolumn="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a4f874f103b3979e50bc676c7f6414dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>::std::string</type>
        <definition>::std::string PrintValue</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>PrintValue</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="72" column="15" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a11c99cfbf44746868aa44105130887f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void VerifyGenerator</definition>
        <argsstring>(const ParamGenerator&lt; T &gt; &amp;generator, const T(&amp;expected_values)[N])</argsstring>
        <name>VerifyGenerator</name>
        <param>
          <type>const ParamGenerator&lt; T &gt; &amp;</type>
          <declname>generator</declname>
        </param>
        <param>
          <type>const T(&amp;)</type>
          <declname>expected_values</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="80" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="80" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a85d74de6e554738555812410476b4eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void VerifyGeneratorIsEmpty</definition>
        <argsstring>(const ParamGenerator&lt; T &gt; &amp;generator)</argsstring>
        <name>VerifyGeneratorIsEmpty</name>
        <param>
          <type>const ParamGenerator&lt; T &gt; &amp;</type>
          <declname>generator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="120" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a884488b4ac035aaa0e1f799243479538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IteratorTest, ParamIteratorConformsToForwardIteratorConcept)</argsstring>
        <name>TEST</name>
        <param>
          <type>IteratorTest</type>
        </param>
        <param>
          <type>ParamIteratorConformsToForwardIteratorConcept</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="137" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="137" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1aa1294eff6c7aea20468f93a70e6b157d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeTest, IntRangeWithDefaultStep)</argsstring>
        <name>TEST</name>
        <param>
          <type>RangeTest</type>
        </param>
        <param>
          <type>IntRangeWithDefaultStep</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="172" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1acce71b74b2d6f3c2d456e37fd62769a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeTest, IntRangeSingleValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>RangeTest</type>
        </param>
        <param>
          <type>IntRangeSingleValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="180" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a905a71adae7909d42426aa13b7da5ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeTest, IntRangeEmpty)</argsstring>
        <name>TEST</name>
        <param>
          <type>RangeTest</type>
        </param>
        <param>
          <type>IntRangeEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="188" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a806821fc992661b6da02005f57482fd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeTest, IntRangeWithCustomStep)</argsstring>
        <name>TEST</name>
        <param>
          <type>RangeTest</type>
        </param>
        <param>
          <type>IntRangeWithCustomStep</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="195" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="195" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a87b9e66f957ddc505fc81cb14fd72339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeTest, IntRangeWithCustomStepOverUpperBound)</argsstring>
        <name>TEST</name>
        <param>
          <type>RangeTest</type>
        </param>
        <param>
          <type>IntRangeWithCustomStepOverUpperBound</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="205" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ae3c8adabec91bd63fd719e116c279eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeTest, WorksWithACustomType)</argsstring>
        <name>TEST</name>
        <param>
          <type>RangeTest</type>
        </param>
        <param>
          <type>WorksWithACustomType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="234" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="234" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a88be7527c7d77f3c89f80d84c80fd405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeTest, WorksWithACustomTypeWithDifferentIncrementType)</argsstring>
        <name>TEST</name>
        <param>
          <type>RangeTest</type>
        </param>
        <param>
          <type>WorksWithACustomTypeWithDifferentIncrementType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="268" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="268" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1abfcf3f3f6fcd742e3e85daf552f02b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesInTest, ValuesInArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesInTest</type>
        </param>
        <param>
          <type>ValuesInArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="283" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1aeeb7ce0b55e6d2cfc439149470c7af16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesInTest, ValuesInConstArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesInTest</type>
        </param>
        <param>
          <type>ValuesInConstArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="291" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="291" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ada74720d1b4b4c63cf08033f4509561b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesInTest, ValuesInSingleElementArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesInTest</type>
        </param>
        <param>
          <type>ValuesInSingleElementArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="299" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a562952744cd40b914d6547e83003c257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesInTest, ValuesInVector)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesInTest</type>
        </param>
        <param>
          <type>ValuesInVector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="307" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="307" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a231a43db61584a3f11662bdc78b6cc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesInTest, ValuesInIteratorRange)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesInTest</type>
        </param>
        <param>
          <type>ValuesInIteratorRange</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="320" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="320" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a38f446e378a9ff60bd6a1df2d533a1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesInTest, ValuesInSingleElementIteratorRange)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesInTest</type>
        </param>
        <param>
          <type>ValuesInSingleElementIteratorRange</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="334" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="334" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1aed44e3d25084500088fb9cb99e189939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesInTest, ValuesInEmptyIteratorRange)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesInTest</type>
        </param>
        <param>
          <type>ValuesInEmptyIteratorRange</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="346" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="346" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ad859819e6b2a7ec58c4fd509b5cfc26c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesTest, ValuesWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesTest</type>
        </param>
        <param>
          <type>ValuesWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="355" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="355" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a079a199d832d0c61689193e9c9a4fd1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesTest, ValuesWorksForValuesOfCompatibleTypes)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesTest</type>
        </param>
        <param>
          <type>ValuesWorksForValuesOfCompatibleTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="364" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="364" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a5d96d28bb6fd22c56222a4b358a8c65e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesTest, ValuesWorksForMaxLengthList)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesTest</type>
        </param>
        <param>
          <type>ValuesWorksForMaxLengthList</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="371" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="371" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1af5c833610dcfcdfed7bcaa5f2e7dcf16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ValuesTest, ValuesWithSingleParameter)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValuesTest</type>
        </param>
        <param>
          <type>ValuesWithSingleParameter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="388" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="388" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a3f3ae54fc86fcf5881329fb7e8e4b8ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(BoolTest, BoolWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>BoolTest</type>
        </param>
        <param>
          <type>BoolWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="396" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="396" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a44831b3cbd99dd9df97741b57ce5f54c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CombineTest, CombineWithTwoParameters)</argsstring>
        <name>TEST</name>
        <param>
          <type>CombineTest</type>
        </param>
        <param>
          <type>CombineWithTwoParameters</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="404" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="404" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1abb0566c1dd1e93b040122f62019342b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CombineTest, CombineWithThreeParameters)</argsstring>
        <name>TEST</name>
        <param>
          <type>CombineTest</type>
        </param>
        <param>
          <type>CombineWithThreeParameters</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="417" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="417" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a93f6f860828c8e67a9bf8b8e254d8bde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CombineTest, CombineWithFirstParameterSingleValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>CombineTest</type>
        </param>
        <param>
          <type>CombineWithFirstParameterSingleValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="431" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="431" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1aa3972149c4cee8b2e4aa42890cf6faca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CombineTest, CombineWithSecondParameterSingleValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>CombineTest</type>
        </param>
        <param>
          <type>CombineWithSecondParameterSingleValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="443" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="443" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a05e6de39d2004ec6509fd02c41b1f941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CombineTest, CombineWithFirstParameterEmptyRange)</argsstring>
        <name>TEST</name>
        <param>
          <type>CombineTest</type>
        </param>
        <param>
          <type>CombineWithFirstParameterEmptyRange</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="454" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="454" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1aa40c83cd556e38939e00465e2a18d035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CombineTest, CombineWithSecondParameterEmptyRange)</argsstring>
        <name>TEST</name>
        <param>
          <type>CombineTest</type>
        </param>
        <param>
          <type>CombineWithSecondParameterEmptyRange</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="462" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a9e14f2d8d5c981a66a27e50a597adc3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CombineTest, CombineWithMaxNumberOfParameters)</argsstring>
        <name>TEST</name>
        <param>
          <type>CombineTest</type>
        </param>
        <param>
          <type>CombineWithMaxNumberOfParameters</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="470" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="470" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a67908fbc85ddfdda8ce3e8a4282115f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CombineTest, NonDefaultConstructAssign)</argsstring>
        <name>TEST</name>
        <param>
          <type>CombineTest</type>
        </param>
        <param>
          <type>NonDefaultConstructAssign</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="501" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="501" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a44984096e0d2c8afc9b1a1ae383de5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ConvertTest, CombineWithTwoParameters)</argsstring>
        <name>TEST</name>
        <param>
          <type>ConvertTest</type>
        </param>
        <param>
          <type>CombineWithTwoParameters</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="544" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="544" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1aea6b5c0ab911d2d05275f579f69a6b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ConvertTest, NonDefaultConstructAssign)</argsstring>
        <name>TEST</name>
        <param>
          <type>ConvertTest</type>
        </param>
        <param>
          <type>NonDefaultConstructAssign</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="556" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="556" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1aca8e985a9ed651999aed02287e9e67ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParamGeneratorTest, AssignmentWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParamGeneratorTest</type>
        </param>
        <param>
          <type>AssignmentWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="588" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="588" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a6c5cf7b74d0cec5d5170659d1d31b560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(TestGenerationTest, TestsExpandedAndRun)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref></type>
        </param>
        <param>
          <type>TestsExpandedAndRun</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="733" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="733" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a9cc091d291c71bfd813289cc81f09789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(TestExpansionModule, TestGenerationTest, ValuesIn(test_generation_params))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>TestExpansionModule</type>
        </param>
        <param>
          <type><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref></type>
        </param>
        <param>
          <type>ValuesIn(test_generation_params)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="738" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="738" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1afb359adcaa80d8d4de1a139e16ddbbcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(GeneratorEvaluationTest, GeneratorsEvaluatedInMain)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classGeneratorEvaluationTest" kindref="compound">GeneratorEvaluationTest</ref></type>
        </param>
        <param>
          <type>GeneratorsEvaluatedInMain</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="761" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="761" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a272666f64d14841aa6bf7efd2eec2541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(GenEvalModule, GeneratorEvaluationTest, Values(GeneratorEvaluationTest::param_value()))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>GenEvalModule</type>
        </param>
        <param>
          <type><ref refid="classGeneratorEvaluationTest" kindref="compound">GeneratorEvaluationTest</ref></type>
        </param>
        <param>
          <type>Values(GeneratorEvaluationTest::param_value())</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="764" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="764" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a83249caca89bdaafc2b8b167ffe9e684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ExternalGeneratorTest, ExternalGenerator)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classExternalGeneratorTest" kindref="compound">ExternalGeneratorTest</ref></type>
        </param>
        <param>
          <type>ExternalGenerator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="771" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="771" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ae0474a45b8b9ae1be2776ec9f015b41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ExternalGeneratorModule, ExternalGeneratorTest, extern_gen)</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>ExternalGeneratorModule</type>
        </param>
        <param>
          <type><ref refid="classExternalGeneratorTest" kindref="compound">ExternalGeneratorTest</ref></type>
        </param>
        <param>
          <type>extern_gen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="776" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="776" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1aaa93e4bed0890e2fdf1d7ae232315753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ExternalInstantiationTest, IsMultipleOf33)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classExternalInstantiationTest" kindref="compound">ExternalInstantiationTest</ref></type>
        </param>
        <param>
          <type>IsMultipleOf33</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="783" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="783" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ad1bbb42b9a1b3bf455ee0dcb4f8c4fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(MultipleInstantiationTest, AllowsMultipleInstances)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classMultipleInstantiationTest" kindref="compound">MultipleInstantiationTest</ref></type>
        </param>
        <param>
          <type>AllowsMultipleInstances</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="790" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="790" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a0a3fa5eeb95de2a56489864c2437e2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(Sequence1, MultipleInstantiationTest, Values(1, 2))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>Sequence1</type>
        </param>
        <param>
          <type><ref refid="classMultipleInstantiationTest" kindref="compound">MultipleInstantiationTest</ref></type>
        </param>
        <param>
          <type>Values(1, 2)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="791" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="791" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a0e7002f6418f9df074f641bbc5ed2578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(Sequence2, MultipleInstantiationTest, Range(3, 5))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>Sequence2</type>
        </param>
        <param>
          <type><ref refid="classMultipleInstantiationTest" kindref="compound">MultipleInstantiationTest</ref></type>
        </param>
        <param>
          <type>Range(3, 5)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="792" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="792" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a08ff04af48f7685f0ccd9adf4adc1cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(InstantiationInMultipleTranslationUnitsTest, IsMultipleOf42)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classInstantiationInMultipleTranslationUnitsTest" kindref="compound">InstantiationInMultipleTranslationUnitsTest</ref></type>
        </param>
        <param>
          <type>IsMultipleOf42</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="799" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="799" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a139ab089376ec6854c62cd7db2dd6c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(Sequence1, InstantiationInMultipleTranslationUnitsTest, Values(42, 42 *2))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>Sequence1</type>
        </param>
        <param>
          <type><ref refid="classInstantiationInMultipleTranslationUnitsTest" kindref="compound">InstantiationInMultipleTranslationUnitsTest</ref></type>
        </param>
        <param>
          <type>Values(42, 42 *2)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="802" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="802" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ae517694af7a7a007acd12e9a7247afe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(SeparateInstanceTest, TestsRunInSeparateInstances)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classSeparateInstanceTest" kindref="compound">SeparateInstanceTest</ref></type>
        </param>
        <param>
          <type>TestsRunInSeparateInstances</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="825" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="825" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a9e6e439e505cb20d67aa06a1c6d0e9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(FourElemSequence, SeparateInstanceTest, Range(1, 4))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>FourElemSequence</type>
        </param>
        <param>
          <type><ref refid="classSeparateInstanceTest" kindref="compound">SeparateInstanceTest</ref></type>
        </param>
        <param>
          <type>Range(1, 4)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="829" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="829" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a1f8ae152b21130f3ca99bdeab97e872a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(NamingTest, TestsReportCorrectNamesAndParameters)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classNamingTest" kindref="compound">NamingTest</ref></type>
        </param>
        <param>
          <type>TestsReportCorrectNamesAndParameters</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="838" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="838" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a87cac0101217b77e84179b68e19cf84b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ZeroToFiveSequence, NamingTest, Range(0, 5))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>ZeroToFiveSequence</type>
        </param>
        <param>
          <type><ref refid="classNamingTest" kindref="compound">NamingTest</ref></type>
        </param>
        <param>
          <type>Range(0, 5)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="851" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="851" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a268b3f484920a6a3c08d911a47f07509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(PREFIX_WITH_MACRO(NamingTest), PREFIX_WITH_FOO(SomeTestName))</argsstring>
        <name>TEST_P</name>
        <param>
          <type>PREFIX_WITH_MACRO(<ref refid="classNamingTest" kindref="compound">NamingTest</ref>)</type>
        </param>
        <param>
          <type>PREFIX_WITH_FOO(SomeTestName)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="859" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="859" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a193f1b24b3c213b2636a14ed661813a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(FortyTwo, MacroNamingTest, Values(42))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>FortyTwo</type>
        </param>
        <param>
          <type><ref refid="classMacroNamingTest" kindref="compound">MacroNamingTest</ref></type>
        </param>
        <param>
          <type>Values(42)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="867" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="867" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a025432fa6a1d1a07929f6897f2dfdaea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PREFIX_WITH_MACRO(NamingTestNonParametrized), PREFIX_WITH_FOO(SomeTestName))</argsstring>
        <name>TEST_F</name>
        <param>
          <type>PREFIX_WITH_MACRO(NamingTestNonParametrized)</type>
        </param>
        <param>
          <type>PREFIX_WITH_FOO(SomeTestName)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="872" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="872" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a6500915131b0338f5157ed81a63d6d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MacroNameing, LookupNames)</argsstring>
        <name>TEST</name>
        <param>
          <type>MacroNameing</type>
        </param>
        <param>
          <type>LookupNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="881" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="881" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a64b9799ff848fbf906c2e5c93a66434a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(CustomFunctorNamingTest, CustomTestNames)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classCustomFunctorNamingTest" kindref="compound">CustomFunctorNamingTest</ref></type>
        </param>
        <param>
          <type>CustomTestNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="915" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="915" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a3b409037f9d18b063f5fd6c4dacc347d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(CustomParamNameFunctor, CustomFunctorNamingTest, Values(std::string(&quot;FunctorName&quot;)), CustomParamNameFunctor())</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type><ref refid="structCustomParamNameFunctor" kindref="compound">CustomParamNameFunctor</ref></type>
        </param>
        <param>
          <type><ref refid="classCustomFunctorNamingTest" kindref="compound">CustomFunctorNamingTest</ref></type>
        </param>
        <param>
          <type>Values(std::string(&quot;FunctorName&quot;))</type>
        </param>
        <param>
          <type><ref refid="structCustomParamNameFunctor" kindref="compound">CustomParamNameFunctor</ref>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="923" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="923" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a13b1886af30ed49d3501dc5cdc2ea195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(AllAllowedCharacters, CustomFunctorNamingTest, Values(&quot;abcdefghijklmnopqrstuvwxyz&quot;, &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, &quot;01234567890_&quot;), CustomParamNameFunctor())</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>AllAllowedCharacters</type>
        </param>
        <param>
          <type><ref refid="classCustomFunctorNamingTest" kindref="compound">CustomFunctorNamingTest</ref></type>
        </param>
        <param>
          <type>Values(&quot;abcdefghijklmnopqrstuvwxyz&quot;, &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, &quot;01234567890_&quot;)</type>
        </param>
        <param>
          <type><ref refid="structCustomParamNameFunctor" kindref="compound">CustomParamNameFunctor</ref>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="927" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="927" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a016a6f23e3fe3de5183e5493cf4bcc4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CustomParamNameFunction</definition>
        <argsstring>(const ::testing::TestParamInfo&lt; std::string &gt; &amp;inf)</argsstring>
        <name>CustomParamNameFunction</name>
        <param>
          <type>const <ref refid="structtesting_1_1TestParamInfo" kindref="compound">::testing::TestParamInfo</ref>&lt; std::string &gt; &amp;</type>
          <declname>inf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="932" column="20" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="932" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a72ff5cb3613a060e1a62f14fa3fa1b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(CustomFunctionNamingTest, CustomTestNames)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classCustomFunctionNamingTest" kindref="compound">CustomFunctionNamingTest</ref></type>
        </param>
        <param>
          <type>CustomTestNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="938" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="938" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a07a54a2169754db4a7b3923ce3b004c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(CustomParamNameFunction, CustomFunctionNamingTest, Values(std::string(&quot;FunctionName&quot;)), CustomParamNameFunction)</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>CustomParamNameFunction</type>
        </param>
        <param>
          <type><ref refid="classCustomFunctionNamingTest" kindref="compound">CustomFunctionNamingTest</ref></type>
        </param>
        <param>
          <type>Values(std::string(&quot;FunctionName&quot;))</type>
        </param>
        <param>
          <type>CustomParamNameFunction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="940" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="940" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a1a12716f19b207a803949487ced6f798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(CustomParamNameFunctionP, CustomFunctionNamingTest, Values(std::string(&quot;FunctionNameP&quot;)), &amp;CustomParamNameFunction)</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>CustomParamNameFunctionP</type>
        </param>
        <param>
          <type><ref refid="classCustomFunctionNamingTest" kindref="compound">CustomFunctionNamingTest</ref></type>
        </param>
        <param>
          <type>Values(std::string(&quot;FunctionNameP&quot;))</type>
        </param>
        <param>
          <type>&amp;</type>
          <declname>CustomParamNameFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="944" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="944" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1af74d3252b2f4affab1dec164f84f8a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(CustomLambdaNamingTest, CustomTestNames)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classCustomLambdaNamingTest" kindref="compound">CustomLambdaNamingTest</ref></type>
        </param>
        <param>
          <type>CustomTestNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="951" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="951" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a6ba446f001925b3f5081aece4f24401b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(CustomParamNameLambda, CustomLambdaNamingTest, Values(std::string(&quot;LambdaName&quot;)), [](const ::testing::TestParamInfo&lt; std::string &gt; &amp;inf) { return inf.param;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>CustomParamNameLambda</type>
        </param>
        <param>
          <type><ref refid="classCustomLambdaNamingTest" kindref="compound">CustomLambdaNamingTest</ref></type>
        </param>
        <param>
          <type>Values(std::string(&quot;LambdaName&quot;))</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const <ref refid="structtesting_1_1TestParamInfo" kindref="compound">::testing::TestParamInfo</ref>&lt; std::string &gt; &amp;inf) { return inf.param;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="953" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="953" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a19d5fdc7df4c845bc0f2e7c50368e2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CustomNamingTest, CheckNameRegistry)</argsstring>
        <name>TEST</name>
        <param>
          <type>CustomNamingTest</type>
        </param>
        <param>
          <type>CheckNameRegistry</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="959" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="959" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a0c9938b5941817c8181cab2de13ae24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(CustomIntegerNamingTest, TestsReportCorrectNames)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classCustomIntegerNamingTest" kindref="compound">CustomIntegerNamingTest</ref></type>
        </param>
        <param>
          <type>TestsReportCorrectNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="981" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="981" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ae11f3d793678cba59d7f2b5e8508da06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(PrintToString, CustomIntegerNamingTest, Range(0, 5), ::testing::PrintToStringParamName())</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>PrintToString</type>
        </param>
        <param>
          <type><ref refid="classCustomIntegerNamingTest" kindref="compound">CustomIntegerNamingTest</ref></type>
        </param>
        <param>
          <type>Range(0, 5)</type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1PrintToStringParamName" kindref="compound">::testing::PrintToStringParamName</ref>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="989" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="989" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ace98876cf2a052cf79eb12db5bc1817f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const CustomStruct &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="structCustomStruct" kindref="compound">CustomStruct</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="999" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="999" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a20d9b65a9ff30edb2daf274bc13ba3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(CustomStructNamingTest, TestsReportCorrectNames)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classCustomStructNamingTest" kindref="compound">CustomStructNamingTest</ref></type>
        </param>
        <param>
          <type>TestsReportCorrectNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1006" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1006" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a387c3e2c74686ab03b23325a384730b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(PrintToString, CustomStructNamingTest, Values(CustomStruct(0), CustomStruct(1)), ::testing::PrintToStringParamName())</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>PrintToString</type>
        </param>
        <param>
          <type><ref refid="classCustomStructNamingTest" kindref="compound">CustomStructNamingTest</ref></type>
        </param>
        <param>
          <type>Values(<ref refid="structCustomStruct" kindref="compound">CustomStruct</ref>(0), <ref refid="structCustomStruct" kindref="compound">CustomStruct</ref>(1))</type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1PrintToStringParamName" kindref="compound">::testing::PrintToStringParamName</ref>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1014" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="1014" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a567e8106d701ab56bdc7e610ef119450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(StatefulNamingTest, TestsReportCorrectNames)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classStatefulNamingTest" kindref="compound">StatefulNamingTest</ref></type>
        </param>
        <param>
          <type>TestsReportCorrectNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1036" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1036" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a260030f4afd03030d56cbddcc921bca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(StatefulNamingFunctor, StatefulNamingTest, Range(0, 5), StatefulNamingFunctor())</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type><ref refid="structStatefulNamingFunctor" kindref="compound">StatefulNamingFunctor</ref></type>
        </param>
        <param>
          <type><ref refid="classStatefulNamingTest" kindref="compound">StatefulNamingTest</ref></type>
        </param>
        <param>
          <type>Range(0, 5)</type>
        </param>
        <param>
          <type><ref refid="structStatefulNamingFunctor" kindref="compound">StatefulNamingFunctor</ref>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1045" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="1045" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a5c5935ee04b0f74f29114ed7e1fa2315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(CommentTest, TestsCorrectlyReportUnstreamableParams)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classCommentTest" kindref="compound">CommentTest</ref></type>
        </param>
        <param>
          <type>TestsCorrectlyReportUnstreamableParams</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1064" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1064" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ab4ce7793d1d1d75035b8af30c3548a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(InstantiationWithComments, CommentTest, Values(Unstreamable(1)))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>InstantiationWithComments</type>
        </param>
        <param>
          <type><ref refid="classCommentTest" kindref="compound">CommentTest</ref></type>
        </param>
        <param>
          <type>Values(<ref refid="classUnstreamable" kindref="compound">Unstreamable</ref>(1))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1071" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="1071" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1af8865fa8411285bd2492b5105f35a7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(NonParameterizedBaseTest, FixtureIsInitialized)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classNonParameterizedBaseTest" kindref="compound">NonParameterizedBaseTest</ref></type>
        </param>
        <param>
          <type>FixtureIsInitialized</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1096" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1096" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a92492aa8cc7fda6eb6438c6f7c74e478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ParameterizedDerivedTest, SeesSequence)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classParameterizedDerivedTest" kindref="compound">ParameterizedDerivedTest</ref></type>
        </param>
        <param>
          <type>SeesSequence</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1098" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1098" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a0eb7e27c6505d446a1bc3e4fe856a6b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ParameterizedDeathTest, GetParamDiesFromTestF)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classParameterizedDeathTest" kindref="compound">ParameterizedDeathTest</ref></type>
        </param>
        <param>
          <type>GetParamDiesFromTestF</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1106" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1106" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1ae4ac2e7a7e07517b845246e2f16b6e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(RangeZeroToFive, ParameterizedDerivedTest, Range(0, 5))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>RangeZeroToFive</type>
        </param>
        <param>
          <type><ref refid="classParameterizedDerivedTest" kindref="compound">ParameterizedDerivedTest</ref></type>
        </param>
        <param>
          <type>Range(0, 5)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1110" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="1110" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1af93c1bfa3f3b8f1670128c9afc5143b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(MyEnumTest, ChecksParamMoreThanZero)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classMyEnumTest" kindref="compound">MyEnumTest</ref></type>
        </param>
        <param>
          <type>ChecksParamMoreThanZero</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1122" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1122" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a6941458969980054942f74dd41cd731a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(MyEnumTests, MyEnumTest, ::testing::Values(ENUM1, ENUM2, 0))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>MyEnumTests</type>
        </param>
        <param>
          <type><ref refid="classMyEnumTest" kindref="compound">MyEnumTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(ENUM1, ENUM2, 0)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1123" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" declline="1123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-param-test-test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="1158" column="5" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="1158" bodyend="1173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>Google<sp/>Test<sp/>itself.<sp/>This<sp/>file<sp/>verifies<sp/>that<sp/>the<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generators<sp/>objects<sp/>produce<sp/>correct<sp/>parameter<sp/>sequences<sp/>and<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>runtime<sp/>instantiates<sp/>correct<sp/>tests<sp/>from<sp/>those<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test/googletest-param-test-test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/gtest-internal-inl.h&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>UnitTestOptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">using<sp/>::std::sort;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">using<sp/>::std::vector;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">using<sp/>::testing::AddGlobalTestEnvironment;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">using<sp/>::testing::Bool;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">using<sp/>::testing::Combine;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">using<sp/>::testing::ConvertGenerator;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">using<sp/>::testing::Message;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">using<sp/>::testing::Range;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">using<sp/>::testing::TestWithParam;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">using<sp/>::testing::Values;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">using<sp/>::testing::ValuesIn;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">using<sp/>::testing::internal::ParamGenerator;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">using<sp/>::testing::internal::UnitTestOptions;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>value<sp/>to<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME:<sp/>remove<sp/>PrintValue()<sp/>when<sp/>we<sp/>move<sp/>matchers<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_THAT()<sp/>from<sp/>Google<sp/>Mock<sp/>to<sp/>Google<sp/>Test.<sp/><sp/>At<sp/>that<sp/>time,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>write<sp/>EXPECT_THAT(x,<sp/>Eq(y))<sp/>to<sp/>compare<sp/>two<sp/>tuples<sp/>x<sp/>and<sp/>y,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_THAT()<sp/>and<sp/>the<sp/>matchers<sp/>know<sp/>how<sp/>to<sp/>print<sp/>tuples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">::std::string<sp/>PrintValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::PrintToString(value);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>a<sp/>sequence<sp/>generated<sp/>by<sp/>the<sp/>generator<sp/>and<sp/>accessed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>via<sp/>the<sp/>iterator<sp/>object<sp/>matches<sp/>the<sp/>expected<sp/>one<sp/>using<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VerifyGenerator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;T&gt;&amp;<sp/>generator,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;expected_values)[N])<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParamGenerator&lt;T&gt;::iterator<sp/>it<sp/>=<sp/>generator.begin();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(it<sp/>==<sp/>generator.end())</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;At<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>when<sp/>accessing<sp/>via<sp/>an<sp/>iterator<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;created<sp/>with<sp/>the<sp/>copy<sp/>constructor.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>use<sp/>EXPECT_EQ()<sp/>here<sp/>as<sp/>the<sp/>values<sp/>may<sp/>be<sp/>tuples,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>don&apos;t<sp/>support<sp/>&lt;&lt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(expected_values[i]<sp/>==<sp/>*it)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>i<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expected_values[i]<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>PrintValue(expected_values[i])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>*it<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PrintValue(*it)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>&apos;it&apos;<sp/>is<sp/>an<sp/>iterator<sp/>created<sp/>with<sp/>the<sp/>copy<sp/>constructor.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(it<sp/>==<sp/>generator.end())</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;At<sp/>the<sp/>presumed<sp/>end<sp/>of<sp/>sequence<sp/>when<sp/>accessing<sp/>via<sp/>an<sp/>iterator<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;created<sp/>with<sp/>the<sp/>copy<sp/>constructor.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>iterator<sp/>assignment.<sp/>The<sp/>following<sp/>lines<sp/>verify<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>sequence<sp/>accessed<sp/>via<sp/>an<sp/>iterator<sp/>initialized<sp/>via<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assignment<sp/>operator<sp/>(as<sp/>opposed<sp/>to<sp/>a<sp/>copy<sp/>constructor)<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>generator.begin();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(it<sp/>==<sp/>generator.end())</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;At<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>when<sp/>accessing<sp/>via<sp/>an<sp/>iterator<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;created<sp/>with<sp/>the<sp/>assignment<sp/>operator.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(expected_values[i]<sp/>==<sp/>*it)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>i<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expected_values[i]<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>PrintValue(expected_values[i])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>*it<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PrintValue(*it)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>&apos;it&apos;<sp/>is<sp/>an<sp/>iterator<sp/>created<sp/>with<sp/>the<sp/>copy<sp/>constructor.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(it<sp/>==<sp/>generator.end())</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;At<sp/>the<sp/>presumed<sp/>end<sp/>of<sp/>sequence<sp/>when<sp/>accessing<sp/>via<sp/>an<sp/>iterator<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;created<sp/>with<sp/>the<sp/>assignment<sp/>operator.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VerifyGeneratorIsEmpty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;T&gt;&amp;<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParamGenerator&lt;T&gt;::iterator<sp/>it<sp/>=<sp/>generator.begin();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(it<sp/>==<sp/>generator.end());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>generator.begin();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(it<sp/>==<sp/>generator.end());</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generator<sp/>tests.<sp/>They<sp/>test<sp/>that<sp/>each<sp/>of<sp/>the<sp/>provided<sp/>generator<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>an<sp/>expected<sp/>sequence<sp/>of<sp/>values.<sp/>The<sp/>general<sp/>test<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiates<sp/>a<sp/>generator<sp/>using<sp/>one<sp/>of<sp/>the<sp/>generator<sp/>functions,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>checks<sp/>the<sp/>sequence<sp/>produced<sp/>by<sp/>the<sp/>generator<sp/>using<sp/>its<sp/>iterator<sp/>API,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>resets<sp/>the<sp/>iterator<sp/>back<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>checks<sp/>the<sp/>sequence<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>iterators<sp/>produced<sp/>by<sp/>generator<sp/>functions<sp/>conform<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ForwardIterator<sp/>concept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">TEST(IteratorTest,<sp/>ParamIteratorConformsToForwardIteratorConcept)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Range(0,<sp/>10);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>ParamGenerator&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>gen.begin();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>iterator<sp/>initialization<sp/>works<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>ParamGenerator&lt;int&gt;::iterator<sp/>it2<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(*it<sp/>==<sp/>*it2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Initialized<sp/>iterators<sp/>must<sp/>point<sp/>to<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;element<sp/>same<sp/>as<sp/>its<sp/>source<sp/>points<sp/>to&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>iterator<sp/>assignment<sp/>works<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(*it<sp/>==<sp/>*it2);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>it2<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(*it<sp/>==<sp/>*it2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Assigned<sp/>iterators<sp/>must<sp/>point<sp/>to<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;element<sp/>same<sp/>as<sp/>its<sp/>source<sp/>points<sp/>to&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>prefix<sp/>operator++()<sp/>returns<sp/>*this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;it,<sp/>&amp;(++it))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Result<sp/>of<sp/>the<sp/>prefix<sp/>operator++<sp/>must<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;refer<sp/>to<sp/>the<sp/>original<sp/>object&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>result<sp/>of<sp/>the<sp/>postfix<sp/>operator++<sp/>points<sp/>to<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointed<sp/>to<sp/>by<sp/>the<sp/>original<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>original_value<sp/>=<sp/>*it;<sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>to<sp/>compute<sp/>it<sp/>outside<sp/>of<sp/>macro<sp/>call<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unaffected<sp/>by<sp/>the<sp/>parameter<sp/>evaluation<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>EXPECT_EQ(original_value,<sp/>*(it++));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>prefix<sp/>and<sp/>postfix<sp/>operator++()<sp/>advance<sp/>an<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>it2<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>++it2;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(*it<sp/>==<sp/>*it2);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Range()<sp/>generates<sp/>the<sp/>expected<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">TEST(RangeTest,<sp/>IntRangeWithDefaultStep)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Range(0,<sp/>3);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{0,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case.<sp/>Tests<sp/>that<sp/>Range()<sp/>generates<sp/>the<sp/>single<sp/>element<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>expected<sp/>when<sp/>provided<sp/>with<sp/>range<sp/>limits<sp/>that<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">TEST(RangeTest,<sp/>IntRangeSingleValue)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Range(0,<sp/>1);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case.<sp/>Tests<sp/>that<sp/>Range()<sp/>with<sp/>generates<sp/>empty<sp/>sequence<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supplied<sp/>with<sp/>an<sp/>empty<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">TEST(RangeTest,<sp/>IntRangeEmpty)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Range(0,<sp/>0);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>VerifyGeneratorIsEmpty(gen);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Range()<sp/>with<sp/>custom<sp/>step<sp/>(greater<sp/>then<sp/>one)<sp/>generates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>expected<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">TEST(RangeTest,<sp/>IntRangeWithCustomStep)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Range(0,<sp/>9,<sp/>3);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{0,<sp/>3,<sp/>6};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Range()<sp/>with<sp/>custom<sp/>step<sp/>(greater<sp/>then<sp/>one)<sp/>generates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>expected<sp/>sequence<sp/>when<sp/>the<sp/>last<sp/>element<sp/>does<sp/>not<sp/>fall<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>upper<sp/>range<sp/>limit.<sp/>Sequences<sp/>generated<sp/>by<sp/>Range()<sp/>must<sp/>not<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>elements<sp/>beyond<sp/>the<sp/>range<sp/>limits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">TEST(RangeTest,<sp/>IntRangeWithCustomStepOverUpperBound)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Range(0,<sp/>4,<sp/>3);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{0,<sp/>3};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>Range<sp/>works<sp/>with<sp/>user-defined<sp/>types<sp/>that<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copy<sp/>constructor,<sp/>operator=(),<sp/>operator+(),<sp/>and<sp/>operator&lt;().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="classDogAdder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDogAdder" kindref="compound">DogAdder</ref><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>&amp;<sp/>other)<sp/>:<sp/>value_(other.value_.c_str())<sp/>{}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>value_<sp/>=<sp/>other.value_;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>value_<sp/>&lt;&lt;<sp/>other.value_;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>(msg.GetString().c_str());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>&lt;<sp/>other.value_;<sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>std::string<sp/>value_;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">TEST(RangeTest,<sp/>WorksWithACustomType)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;DogAdder&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Range(<ref refid="classDogAdder" kindref="compound">DogAdder</ref>(</highlight><highlight class="stringliteral">&quot;cat&quot;</highlight><highlight class="normal">),<sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>(</highlight><highlight class="stringliteral">&quot;catdogdog&quot;</highlight><highlight class="normal">),<sp/><ref refid="classDogAdder" kindref="compound">DogAdder</ref>(</highlight><highlight class="stringliteral">&quot;dog&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>ParamGenerator&lt;DogAdder&gt;::iterator<sp/>it<sp/>=<sp/>gen.begin();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(it<sp/>==<sp/>gen.end());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;cat&quot;</highlight><highlight class="normal">,<sp/>it-&gt;value().c_str());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(++it<sp/>==<sp/>gen.end());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;catdog&quot;</highlight><highlight class="normal">,<sp/>it-&gt;value().c_str());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(++it<sp/>==<sp/>gen.end());</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classIntWrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref>&amp;<sp/>other)<sp/>:<sp/>value_(other.value_)<sp/>{}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>value_<sp/>=<sp/>other.value_;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operator+()<sp/>adds<sp/>a<sp/>different<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref><sp/>operator+(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref>(value_<sp/>+<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>&lt;<sp/>other.value_;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">TEST(RangeTest,<sp/>WorksWithACustomTypeWithDifferentIncrementType)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;IntWrapper&gt;<sp/>gen<sp/>=<sp/>Range(<ref refid="classIntWrapper" kindref="compound">IntWrapper</ref>(0),<sp/><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref>(2));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>ParamGenerator&lt;IntWrapper&gt;::iterator<sp/>it<sp/>=<sp/>gen.begin();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(it<sp/>==<sp/>gen.end());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>it-&gt;value());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(++it<sp/>==<sp/>gen.end());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>it-&gt;value());</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(++it<sp/>==<sp/>gen.end());</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ValuesIn()<sp/>with<sp/>an<sp/>array<sp/>parameter<sp/>generates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>expected<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">TEST(ValuesInTest,<sp/>ValuesInArray)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array[]<sp/>=<sp/>{3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>ValuesIn(array);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>array);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ValuesIn()<sp/>with<sp/>a<sp/>const<sp/>array<sp/>parameter<sp/>generates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>expected<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">TEST(ValuesInTest,<sp/>ValuesInConstArray)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array[]<sp/>=<sp/>{3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>ValuesIn(array);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>array);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case.<sp/>Tests<sp/>that<sp/>ValuesIn()<sp/>with<sp/>an<sp/>array<sp/>parameter<sp/>containing<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>single<sp/>element<sp/>generates<sp/>the<sp/>single<sp/>element<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">TEST(ValuesInTest,<sp/>ValuesInSingleElementArray)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array[]<sp/>=<sp/>{42};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>ValuesIn(array);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>array);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ValuesIn()<sp/>generates<sp/>the<sp/>expected<sp/>sequence<sp/>for<sp/>an<sp/>STL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>container<sp/>(vector).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">TEST(ValuesInTest,<sp/>ValuesInVector)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::vector&lt;int&gt;<sp/>ContainerType;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>ContainerType<sp/>values;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>values.push_back(3);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>values.push_back(5);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>values.push_back(8);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>ValuesIn(values);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ValuesIn()<sp/>generates<sp/>the<sp/>expected<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">TEST(ValuesInTest,<sp/>ValuesInIteratorRange)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::vector&lt;int&gt;<sp/>ContainerType;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>ContainerType<sp/>values;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>values.push_back(3);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>values.push_back(5);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>values.push_back(8);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>ValuesIn(values.begin(),<sp/>values.end());</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case.<sp/>Tests<sp/>that<sp/>ValuesIn()<sp/>provided<sp/>with<sp/>an<sp/>iterator<sp/>range<sp/>specifying<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>single<sp/>value<sp/>generates<sp/>a<sp/>single-element<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">TEST(ValuesInTest,<sp/>ValuesInSingleElementIteratorRange)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::vector&lt;int&gt;<sp/>ContainerType;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>ContainerType<sp/>values;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>values.push_back(42);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>ValuesIn(values.begin(),<sp/>values.end());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{42};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case.<sp/>Tests<sp/>that<sp/>ValuesIn()<sp/>provided<sp/>with<sp/>an<sp/>empty<sp/>iterator<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>an<sp/>empty<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">TEST(ValuesInTest,<sp/>ValuesInEmptyIteratorRange)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::vector&lt;int&gt;<sp/>ContainerType;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>ContainerType<sp/>values;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>ValuesIn(values.begin(),<sp/>values.end());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>VerifyGeneratorIsEmpty(gen);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>Values()<sp/>generates<sp/>the<sp/>expected<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">TEST(ValuesTest,<sp/>ValuesWorks)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Values(3,<sp/>5,<sp/>8);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Values()<sp/>generates<sp/>the<sp/>expected<sp/>sequences<sp/>from<sp/>elements<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>types<sp/>convertible<sp/>to<sp/>ParamGenerator&apos;s<sp/>parameter<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">TEST(ValuesTest,<sp/>ValuesWorksForValuesOfCompatibleTypes)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;double&gt;<sp/>gen<sp/>=<sp/>Values(3,<sp/>5.0f,<sp/>8.0);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{3.0,<sp/>5.0,<sp/>8.0};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">TEST(ValuesTest,<sp/>ValuesWorksForMaxLengthList)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Values(10,<sp/>20,<sp/>30,<sp/>40,<sp/>50,<sp/>60,<sp/>70,<sp/>80,<sp/>90,<sp/>100,<sp/>110,<sp/>120,<sp/>130,<sp/>140,<sp/>150,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>160,<sp/>170,<sp/>180,<sp/>190,<sp/>200,<sp/>210,<sp/>220,<sp/>230,<sp/>240,<sp/>250,<sp/>260,<sp/>270,<sp/>280,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>290,<sp/>300,<sp/>310,<sp/>320,<sp/>330,<sp/>340,<sp/>350,<sp/>360,<sp/>370,<sp/>380,<sp/>390,<sp/>400,<sp/>410,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>420,<sp/>430,<sp/>440,<sp/>450,<sp/>460,<sp/>470,<sp/>480,<sp/>490,<sp/>500);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>10,<sp/><sp/>20,<sp/><sp/>30,<sp/><sp/>40,<sp/><sp/>50,<sp/><sp/>60,<sp/><sp/>70,<sp/><sp/>80,<sp/><sp/>90,<sp/><sp/>100,<sp/>110,<sp/>120,<sp/>130,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>140,<sp/>150,<sp/>160,<sp/>170,<sp/>180,<sp/>190,<sp/>200,<sp/>210,<sp/>220,<sp/>230,<sp/>240,<sp/>250,<sp/>260,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>270,<sp/>280,<sp/>290,<sp/>300,<sp/>310,<sp/>320,<sp/>330,<sp/>340,<sp/>350,<sp/>360,<sp/>370,<sp/>380,<sp/>390,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>400,<sp/>410,<sp/>420,<sp/>430,<sp/>440,<sp/>450,<sp/>460,<sp/>470,<sp/>480,<sp/>490,<sp/>500};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case<sp/>test.<sp/>Tests<sp/>that<sp/>single-parameter<sp/>Values()<sp/>generates<sp/>the<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>single<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">TEST(ValuesTest,<sp/>ValuesWithSingleParameter)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Values(42);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{42};</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Bool()<sp/>generates<sp/>sequence<sp/>(false,<sp/>true).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">TEST(BoolTest,<sp/>BoolWorks)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;bool&gt;<sp/>gen<sp/>=<sp/><ref refid="structBool" kindref="compound">Bool</ref>();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Combine()<sp/>with<sp/>two<sp/>parameters<sp/>generates<sp/>the<sp/>expected<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">TEST(CombineTest,<sp/>CombineWithTwoParameters)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>foo<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;std::tuple&lt;const<sp/>char*,<sp/>int&gt;&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(foo,<sp/>bar),<sp/>Values(3,<sp/>4));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>std::tuple&lt;const<sp/>char*,<sp/>int&gt;<sp/>expected_values[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(foo,<sp/>3),<sp/>std::make_tuple(foo,<sp/>4),<sp/>std::make_tuple(bar,<sp/>3),</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(bar,<sp/>4)};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Combine()<sp/>with<sp/>three<sp/>parameters<sp/>generates<sp/>the<sp/>expected<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">TEST(CombineTest,<sp/>CombineWithThreeParameters)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;std::tuple&lt;int,<sp/>int,<sp/>int&gt;&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(0,<sp/>1),<sp/>Values(3,<sp/>4),<sp/>Values(5,<sp/>6));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>std::tuple&lt;int,<sp/>int,<sp/>int&gt;<sp/>expected_values[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(0,<sp/>3,<sp/>5),<sp/>std::make_tuple(0,<sp/>3,<sp/>6),</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(0,<sp/>4,<sp/>5),<sp/>std::make_tuple(0,<sp/>4,<sp/>6),</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(1,<sp/>3,<sp/>5),<sp/>std::make_tuple(1,<sp/>3,<sp/>6),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(1,<sp/>4,<sp/>5),<sp/>std::make_tuple(1,<sp/>4,<sp/>6)};</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>Combine()<sp/>with<sp/>the<sp/>first<sp/>parameter<sp/>generating<sp/>a<sp/>single<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sequence<sp/>generates<sp/>a<sp/>sequence<sp/>with<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>equal<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>sequence<sp/>generated<sp/>by<sp/>the<sp/>second<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">TEST(CombineTest,<sp/>CombineWithFirstParameterSingleValue)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;std::tuple&lt;int,<sp/>int&gt;&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(42),<sp/>Values(0,<sp/>1));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>std::tuple&lt;int,<sp/>int&gt;<sp/>expected_values[]<sp/>=<sp/>{std::make_tuple(42,<sp/>0),</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(42,<sp/>1)};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>Combine()<sp/>with<sp/>the<sp/>second<sp/>parameter<sp/>generating<sp/>a<sp/>single<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sequence<sp/>generates<sp/>a<sp/>sequence<sp/>with<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>equal<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>sequence<sp/>generated<sp/>by<sp/>the<sp/>first<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">TEST(CombineTest,<sp/>CombineWithSecondParameterSingleValue)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;std::tuple&lt;int,<sp/>int&gt;&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(0,<sp/>1),<sp/>Values(42));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>std::tuple&lt;int,<sp/>int&gt;<sp/>expected_values[]<sp/>=<sp/>{std::make_tuple(0,<sp/>42),</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(1,<sp/>42)};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>the<sp/>first<sp/>parameter<sp/>produces<sp/>an<sp/>empty<sp/>sequence,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Combine()<sp/>produces<sp/>an<sp/>empty<sp/>sequence,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">TEST(CombineTest,<sp/>CombineWithFirstParameterEmptyRange)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;std::tuple&lt;int,<sp/>int&gt;&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Range(0,<sp/>0),<sp/>Values(0,<sp/>1));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>VerifyGeneratorIsEmpty(gen);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>the<sp/>second<sp/>parameter<sp/>produces<sp/>an<sp/>empty<sp/>sequence,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Combine()<sp/>produces<sp/>an<sp/>empty<sp/>sequence,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">TEST(CombineTest,<sp/>CombineWithSecondParameterEmptyRange)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;std::tuple&lt;int,<sp/>int&gt;&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(0,<sp/>1),<sp/>Range(1,<sp/>1));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>VerifyGeneratorIsEmpty(gen);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case.<sp/>Tests<sp/>that<sp/>combine<sp/>works<sp/>with<sp/>the<sp/>maximum<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>parameters<sp/>supported<sp/>by<sp/>Google<sp/>Test<sp/>(currently<sp/>10).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">TEST(CombineTest,<sp/>CombineWithMaxNumberOfParameters)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>foo<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;const<sp/>char*,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int&gt;&gt;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(foo,<sp/>bar),<sp/>Values(1),<sp/>Values(2),<sp/>Values(3),<sp/>Values(4),</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(5),<sp/>Values(6),<sp/>Values(7),<sp/>Values(8),<sp/>Values(9));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>std::tuple&lt;const<sp/>char*,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int&gt;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_values[]<sp/>=<sp/>{std::make_tuple(foo,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9),</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(bar,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9)};</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="classNonDefaultConstructAssignString" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/>:<sp/>str_(s)<sp/>{}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>&amp;)<sp/>=</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>&amp;<sp/>operator=(</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">~NonDefaultConstructAssignString</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_;<sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>std::string<sp/>str_;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">TEST(CombineTest,<sp/>NonDefaultConstructAssign)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;std::tuple&lt;int,<sp/>NonDefaultConstructAssignString&gt;&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(0,<sp/>1),<sp/>Values(<ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>ParamGenerator&lt;std::tuple&lt;int,<sp/>NonDefaultConstructAssignString&gt;&gt;::iterator</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>gen.begin();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>std::get&lt;0&gt;(*it));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>std::get&lt;1&gt;(*it).str());</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>std::get&lt;0&gt;(*it));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/>std::get&lt;1&gt;(*it).str());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>std::get&lt;0&gt;(*it));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>std::get&lt;1&gt;(*it).str());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>std::get&lt;0&gt;(*it));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/>std::get&lt;1&gt;(*it).str());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(it<sp/>==<sp/>gen.end());</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="529" refid="classConstructFromT" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classConstructFromT" kindref="compound">ConstructFromT</ref><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classConstructFromT" kindref="compound">ConstructFromT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)<sp/>:<sp/>t_(t)<sp/>{}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>!=<sp/>1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><ref refid="classConstructFromT" kindref="compound">ConstructFromT</ref>(Args&amp;&amp;...<sp/>args)<sp/>:<sp/>t_(std::forward&lt;Args&gt;(args)...)<sp/>{}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classConstructFromT" kindref="compound">ConstructFromT</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.t_<sp/>==<sp/>t_;<sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t_;<sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>T<sp/>t_;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">};</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">TEST(ConvertTest,<sp/>CombineWithTwoParameters)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>foo<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;ConstructFromT&lt;std::tuple&lt;const<sp/>char*,<sp/>int&gt;&gt;&gt;<sp/>gen<sp/>=</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ConvertGenerator&lt;std::tuple&lt;const<sp/>char*,<sp/>int&gt;&gt;(</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(foo,<sp/>bar),<sp/>Values(3,<sp/>4)));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><ref refid="classConstructFromT" kindref="compound">ConstructFromT&lt;std::tuple&lt;const char*, int&gt;</ref>&gt;<sp/>expected_values[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{foo,<sp/>3},<sp/>{foo,<sp/>4},<sp/>{bar,<sp/>3},<sp/>{bar,<sp/>4}};</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal">TEST(ConvertTest,<sp/>NonDefaultConstructAssign)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classConstructFromT" kindref="compound">ConstructFromT&lt;std::tuple&lt;int, NonDefaultConstructAssignString&gt;</ref>&gt;&gt;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gen<sp/>=<sp/>ConvertGenerator&lt;std::tuple&lt;int,<sp/>NonDefaultConstructAssignString&gt;&gt;(</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Combine(Values(0,<sp/>1),<sp/>Values(<ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classNonDefaultConstructAssignString" kindref="compound">NonDefaultConstructAssignString</ref>(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>ParamGenerator&lt;<ref refid="classConstructFromT" kindref="compound">ConstructFromT</ref>&lt;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;int,<sp/>NonDefaultConstructAssignString&gt;&gt;&gt;::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gen.begin();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>std::get&lt;0&gt;(it-&gt;get()));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>std::get&lt;1&gt;(it-&gt;get()).str());</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>std::get&lt;0&gt;(it-&gt;get()));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/>std::get&lt;1&gt;(it-&gt;get()).str());</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>std::get&lt;0&gt;(it-&gt;get()));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>std::get&lt;1&gt;(it-&gt;get()).str());</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>std::get&lt;0&gt;(it-&gt;get()));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/>std::get&lt;1&gt;(it-&gt;get()).str());</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(it<sp/>==<sp/>gen.end());</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>generator<sp/>produces<sp/>correct<sp/>sequence<sp/>after<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assigned<sp/>from<sp/>another<sp/>generator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">TEST(ParamGeneratorTest,<sp/>AssignmentWorks)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>ParamGenerator&lt;int&gt;<sp/>gen<sp/>=<sp/>Values(1,<sp/>2);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>gen2<sp/>=<sp/>Values(3,<sp/>4);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>gen<sp/>=<sp/>gen2;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_values[]<sp/>=<sp/>{3,<sp/>4};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>VerifyGenerator(gen,<sp/>expected_values);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>tests<sp/>are<sp/>expanded<sp/>and<sp/>run<sp/>as<sp/>specified:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>test<sp/>per<sp/>element<sp/>from<sp/>the<sp/>sequence<sp/>produced<sp/>by<sp/>the<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>in<sp/>INSTANTIATE_TEST_SUITE_P.<sp/>It<sp/>also<sp/>verifies<sp/>that<sp/>the<sp/>test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fixture<sp/>constructor,<sp/>SetUp(),<sp/>and<sp/>TearDown()<sp/>have<sp/>run<sp/>and<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supplied<sp/>with<sp/>the<sp/>correct<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>use<sp/>of<sp/>environment<sp/>object<sp/>allows<sp/>detection<sp/>of<sp/>the<sp/>case<sp/>where<sp/>no<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>case<sp/>functionality<sp/>is<sp/>run<sp/>at<sp/>all.<sp/>In<sp/>this<sp/>case<sp/>TearDownTestSuite<sp/>will<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>able<sp/>to<sp/>detect<sp/>missing<sp/>tests,<sp/>naturally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kExpectedCalls&gt;</highlight></codeline>
<codeline lineno="607" refid="classTestGenerationEnvironment" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment" kindref="compound">::testing::Environment</ref><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref>*<sp/>Instance()<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref>*<sp/>instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FixtureConstructorExecuted()<sp/>{<sp/>fixture_constructor_count_++;<sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpExecuted()<sp/>{<sp/>set_up_count_++;<sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownExecuted()<sp/>{<sp/>tear_down_count_++;<sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestBodyExecuted()<sp/>{<sp/>test_body_count_++;<sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>all<sp/>MultipleTestGenerationTest<sp/>tests<sp/>have<sp/>been<sp/>de-selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>filter<sp/>flag,<sp/>the<sp/>following<sp/>checks<sp/>make<sp/>no<sp/>sense.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>perform_check<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kExpectedCalls;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TestsExpandedAndRun/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UnitTestOptions::FilterMatchesTest(</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TestExpansionModule/MultipleTestGenerationTest&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.GetString().c_str()))<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perform_check<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(perform_check)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kExpectedCalls,<sp/>fixture_constructor_count_)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fixture<sp/>constructor<sp/>of<sp/>ParamTestGenerationTest<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>not<sp/>been<sp/>run<sp/>as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kExpectedCalls,<sp/>set_up_count_)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fixture<sp/>SetUp<sp/>method<sp/>of<sp/>ParamTestGenerationTest<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>not<sp/>been<sp/>run<sp/>as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kExpectedCalls,<sp/>tear_down_count_)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fixture<sp/>TearDown<sp/>method<sp/>of<sp/>ParamTestGenerationTest<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>not<sp/>been<sp/>run<sp/>as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kExpectedCalls,<sp/>test_body_count_)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>in<sp/>ParamTestGenerationTest<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>not<sp/>been<sp/>run<sp/>as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref>()</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>fixture_constructor_count_(0),</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_up_count_(0),</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tear_down_count_(0),</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_body_count_(0)<sp/>{}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fixture_constructor_count_;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_up_count_;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tear_down_count_;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_body_count_;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment</ref>&amp;)<sp/>=</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal">};</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_generation_params[]<sp/>=<sp/>{36,<sp/>42,<sp/>72};</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668" refid="classTestGenerationTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>PARAMETER_COUNT<sp/>=</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_generation_params)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_generation_params[0])</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">TestGenerationEnvironment&lt;PARAMETER_COUNT&gt;</ref><sp/><ref refid="classTestGenerationEnvironment" kindref="compound">Environment</ref>;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>Environment::Instance()-&gt;FixtureConstructorExecuted();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>current_parameter_<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>Environment::Instance()-&gt;SetUpExecuted();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(current_parameter_,<sp/>GetParam());</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>Environment::Instance()-&gt;TearDownExecuted();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(current_parameter_,<sp/>GetParam());</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_tests_in_test_case_selected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PARAMETER_COUNT;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Message<sp/>test_name;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TestsExpandedAndRun/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!UnitTestOptions::FilterMatchesTest(</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TestExpansionModule/MultipleTestGenerationTest&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_name.GetString()))<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_tests_in_test_case_selected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(all_tests_in_test_case_selected)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;When<sp/>running<sp/>the<sp/>TestGenerationTest<sp/>test<sp/>case<sp/>all<sp/>of<sp/>its<sp/>tests\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;must<sp/>be<sp/>selected<sp/>by<sp/>the<sp/>filter<sp/>flag<sp/>for<sp/>the<sp/>test<sp/>case<sp/>to<sp/>pass.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>not<sp/>all<sp/>of<sp/>them<sp/>are<sp/>enabled,<sp/>we<sp/>can&apos;t<sp/>reliably<sp/>conclude\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;that<sp/>the<sp/>correct<sp/>number<sp/>of<sp/>tests<sp/>have<sp/>been<sp/>generated.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>collected_parameters_.clear();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>expected_values(test_generation_params,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_generation_params<sp/>+<sp/>PARAMETER_COUNT);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>execution<sp/>order<sp/>is<sp/>not<sp/>guaranteed<sp/>by<sp/>Google<sp/>Test,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>the<sp/>order<sp/>of<sp/>values<sp/>in<sp/>collected_parameters_<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>and<sp/>we<sp/>have<sp/>to<sp/>sort<sp/>to<sp/>compare.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(expected_values.begin(),<sp/>expected_values.end());</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(collected_parameters_.begin(),<sp/>collected_parameters_.end());</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(collected_parameters_<sp/>==<sp/>expected_values);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_parameter_;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>collected_parameters_;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">};</highlight></codeline>
<codeline lineno="731"><highlight class="normal">vector&lt;int&gt;<sp/>TestGenerationTest::collected_parameters_;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal">TEST_P(<ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref>,<sp/>TestsExpandedAndRun)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>Environment::Instance()-&gt;TestBodyExecuted();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>EXPECT_EQ(current_parameter_,<sp/>GetParam());</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>collected_parameters_.push_back(GetParam());</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(TestExpansionModule,<sp/><ref refid="classTestGenerationTest" kindref="compound">TestGenerationTest</ref>,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValuesIn(test_generation_params));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>element<sp/>sequence<sp/>(third<sp/>parameter<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INSTANTIATE_TEST_SUITE_P)<sp/>is<sp/>evaluated<sp/>in<sp/>InitGoogleTest()<sp/>and<sp/>neither<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>call<sp/>site<sp/>of<sp/>INSTANTIATE_TEST_SUITE_P<sp/>nor<sp/>in<sp/>RUN_ALL_TESTS().<sp/><sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that,<sp/>we<sp/>declare<sp/>param_value_<sp/>to<sp/>be<sp/>a<sp/>static<sp/>member<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GeneratorEvaluationTest<sp/>and<sp/>initialize<sp/>it<sp/>to<sp/>0.<sp/><sp/>We<sp/>set<sp/>it<sp/>to<sp/>1<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>main(),<sp/>just<sp/>before<sp/>invocation<sp/>of<sp/>InitGoogleTest().<sp/><sp/>After<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="comment">//<sp/>InitGoogleTest(),<sp/>we<sp/>set<sp/>the<sp/>value<sp/>to<sp/>2.<sp/><sp/>If<sp/>the<sp/>sequence<sp/>is<sp/>evaluated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>before<sp/>or<sp/>after<sp/>InitGoogleTest,<sp/>INSTANTIATE_TEST_SUITE_P<sp/>will<sp/>create<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>with<sp/>parameter<sp/>other<sp/>than<sp/>1,<sp/>and<sp/>the<sp/>test<sp/>body<sp/>will<sp/>fail<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="classGeneratorEvaluationTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGeneratorEvaluationTest" kindref="compound">GeneratorEvaluationTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param_value()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>param_value_;<sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_param_value(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param_value)<sp/>{<sp/>param_value_<sp/>=<sp/>param_value;<sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param_value_;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">};</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GeneratorEvaluationTest::param_value_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">TEST_P(<ref refid="classGeneratorEvaluationTest" kindref="compound">GeneratorEvaluationTest</ref>,<sp/>GeneratorsEvaluatedInMain)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>GetParam());</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(GenEvalModule,<sp/><ref refid="classGeneratorEvaluationTest" kindref="compound">GeneratorEvaluationTest</ref>,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(GeneratorEvaluationTest::param_value()));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>generators<sp/>defined<sp/>in<sp/>a<sp/>different<sp/>translation<sp/>unit<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functional.<sp/>Generator<sp/>extern_gen<sp/>is<sp/>defined<sp/>in<sp/>gtest-param-test_test2.cc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ParamGenerator&lt;int&gt;<sp/>extern_gen;</highlight></codeline>
<codeline lineno="770" refid="classExternalGeneratorTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classExternalGeneratorTest" kindref="compound">ExternalGeneratorTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="771"><highlight class="normal">TEST_P(<ref refid="classExternalGeneratorTest" kindref="compound">ExternalGeneratorTest</ref>,<sp/>ExternalGenerator)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sequence<sp/>produced<sp/>by<sp/>extern_gen<sp/>contains<sp/>only<sp/>a<sp/>single<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>verify<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GetParam(),<sp/>33);</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(ExternalGeneratorModule,<sp/><ref refid="classExternalGeneratorTest" kindref="compound">ExternalGeneratorTest</ref>,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern_gen);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>parameterized<sp/>test<sp/>case<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>one<sp/>translation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unit<sp/>and<sp/>instantiated<sp/>in<sp/>another.<sp/>This<sp/>test<sp/>will<sp/>be<sp/>instantiated<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gtest-param-test_test2.cc.<sp/>ExternalInstantiationTest<sp/>fixture<sp/>class<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined<sp/>in<sp/>gtest-param-test_test.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">TEST_P(<ref refid="classExternalInstantiationTest" kindref="compound">ExternalInstantiationTest</ref>,<sp/>IsMultipleOf33)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>GetParam()<sp/>%<sp/>33);</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>parameterized<sp/>test<sp/>case<sp/>can<sp/>be<sp/>instantiated<sp/>with<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789" refid="classMultipleInstantiationTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMultipleInstantiationTest" kindref="compound">MultipleInstantiationTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="790"><highlight class="normal">TEST_P(<ref refid="classMultipleInstantiationTest" kindref="compound">MultipleInstantiationTest</ref>,<sp/>AllowsMultipleInstances)<sp/>{}</highlight></codeline>
<codeline lineno="791"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(Sequence1,<sp/><ref refid="classMultipleInstantiationTest" kindref="compound">MultipleInstantiationTest</ref>,<sp/>Values(1,<sp/>2));</highlight></codeline>
<codeline lineno="792"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(Sequence2,<sp/><ref refid="classMultipleInstantiationTest" kindref="compound">MultipleInstantiationTest</ref>,<sp/>Range(3,<sp/>5));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>parameterized<sp/>test<sp/>case<sp/>can<sp/>be<sp/>instantiated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>multiple<sp/>translation<sp/>units.<sp/>This<sp/>test<sp/>will<sp/>be<sp/>instantiated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>here<sp/>and<sp/>in<sp/>gtest-param-test_test2.cc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>InstantiationInMultipleTranslationUnitsTest<sp/>fixture<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>defined<sp/>in<sp/>gtest-param-test_test.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal">TEST_P(<ref refid="classInstantiationInMultipleTranslationUnitsTest" kindref="compound">InstantiationInMultipleTranslationUnitsTest</ref>,<sp/>IsMultipleOf42)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>GetParam()<sp/>%<sp/>42);</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(Sequence1,<sp/><ref refid="classInstantiationInMultipleTranslationUnitsTest" kindref="compound">InstantiationInMultipleTranslationUnitsTest</ref>,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(42,<sp/>42<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>each<sp/>iteration<sp/>of<sp/>parameterized<sp/>test<sp/>runs<sp/>in<sp/>a<sp/>separate<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807" refid="classSeparateInstanceTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSeparateInstanceTest" kindref="compound">SeparateInstanceTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><ref refid="classSeparateInstanceTest" kindref="compound">SeparateInstanceTest</ref>()<sp/>:<sp/>count_(0)<sp/>{}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GE(global_count_,<sp/>2)</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>some<sp/>(but<sp/>not<sp/>all)<sp/>SeparateInstanceTest<sp/>tests<sp/>have<sp/>been<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filtered<sp/>out<sp/>this<sp/>test<sp/>will<sp/>fail.<sp/>Make<sp/>sure<sp/>that<sp/>all<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GeneratorEvaluationTest<sp/>are<sp/>selected<sp/>or<sp/>de-selected<sp/>together<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;by<sp/>the<sp/>test<sp/>filter.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>global_count_;</highlight></codeline>
<codeline lineno="822"><highlight class="normal">};</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SeparateInstanceTest::global_count_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal">TEST_P(<ref refid="classSeparateInstanceTest" kindref="compound">SeparateInstanceTest</ref>,<sp/>TestsRunInSeparateInstances)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>count_++);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>global_count_++;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(FourElemSequence,<sp/><ref refid="classSeparateInstanceTest" kindref="compound">SeparateInstanceTest</ref>,<sp/>Range(1,<sp/>4));</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>all<sp/>instantiations<sp/>of<sp/>a<sp/>test<sp/>have<sp/>named<sp/>appropriately.<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined<sp/>with<sp/>TEST_P(TestSuiteName,<sp/>TestName)<sp/>and<sp/>instantiated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INSTANTIATE_TEST_SUITE_P(SequenceName,<sp/>TestSuiteName,<sp/>generator)<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>named<sp/>SequenceName/TestSuiteName.TestName/i,<sp/>where<sp/>i<sp/>is<sp/>the<sp/>0-based<sp/>index<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>sequence<sp/>element<sp/>used<sp/>to<sp/>instantiate<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836" refid="classNamingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNamingTest" kindref="compound">NamingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal">TEST_P(<ref refid="classNamingTest" kindref="compound">NamingTest</ref>,<sp/>TestsReportCorrectNamesAndParameters)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>const<sp/>::testing::TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ZeroToFiveSequence/NamingTest&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>Message<sp/>index_stream;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>index_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TestsReportCorrectNamesAndParameters/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetParam();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(index_stream.GetString().c_str(),<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>EXPECT_EQ(::testing::PrintToString(GetParam()),<sp/>test_info-&gt;value_param());</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(ZeroToFiveSequence,<sp/><ref refid="classNamingTest" kindref="compound">NamingTest</ref>,<sp/>Range(0,<sp/>5));</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>macros<sp/>in<sp/>test<sp/>names<sp/>are<sp/>expanded<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854" refid="classMacroNamingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMacroNamingTest" kindref="compound">MacroNamingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PREFIX_WITH_FOO(test_name)<sp/>Foo##test_name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PREFIX_WITH_MACRO(test_name)<sp/>Macro##test_name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal">TEST_P(PREFIX_WITH_MACRO(<ref refid="classNamingTest" kindref="compound">NamingTest</ref>),<sp/>PREFIX_WITH_FOO(SomeTestName))<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>const<sp/>::testing::TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;FortyTwo/MacroNamingTest&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;FooSomeTestName/0&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(FortyTwo,<sp/><ref refid="classMacroNamingTest" kindref="compound">MacroNamingTest</ref>,<sp/>Values(42));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>same<sp/>thing<sp/>for<sp/>non-parametrized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="classMacroNamingTestNonParametrized" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMacroNamingTestNonParametrized" kindref="compound">MacroNamingTestNonParametrized</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal">TEST_F(PREFIX_WITH_MACRO(NamingTestNonParametrized),</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PREFIX_WITH_FOO(SomeTestName))<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>const<sp/>::testing::TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;MacroNamingTestNonParametrized&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;FooSomeTestName&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal">TEST(MacroNameing,<sp/>LookupNames)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>std::set&lt;std::string&gt;<sp/>know_suite_names,<sp/>know_test_names;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ins<sp/>=<sp/>testing::UnitTest::GetInstance();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">testing::TestSuite</ref>*<sp/>suite<sp/>=<sp/>ins-&gt;GetTestSuite(ts++))<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>know_suite_names.insert(suite-&gt;name());</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ti<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">testing::TestInfo</ref>*<sp/>info<sp/>=<sp/>suite-&gt;GetTestInfo(ti++))<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>know_test_names.insert(std::string(suite-&gt;name())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>info-&gt;name());</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>expected<sp/>form<sp/>of<sp/>the<sp/>test<sp/>suit<sp/>name<sp/>actually<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>EXPECT_NE(<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>know_suite_names.find(</highlight><highlight class="stringliteral">&quot;FortyTwo/MacroNamingTest&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>know_suite_names.end());</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>EXPECT_NE(know_suite_names.find(</highlight><highlight class="stringliteral">&quot;MacroNamingTestNonParametrized&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>know_suite_names.end());</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>expected<sp/>form<sp/>of<sp/>the<sp/>test<sp/>name<sp/>actually<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>EXPECT_NE(<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>know_test_names.find(</highlight><highlight class="stringliteral">&quot;FortyTwo/MacroNamingTest.FooSomeTestName/0&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>know_test_names.end());</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>EXPECT_NE(</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>know_test_names.find(</highlight><highlight class="stringliteral">&quot;MacroNamingTestNonParametrized.FooSomeTestName&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>know_test_names.end());</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>user<sp/>supplied<sp/>custom<sp/>parameter<sp/>names<sp/>are<sp/>working<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>test<sp/>with<sp/>a<sp/>builtin<sp/>helper<sp/>method<sp/>which<sp/>uses<sp/>PrintToString,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>well<sp/>as<sp/>a<sp/>custom<sp/>function<sp/>and<sp/>custom<sp/>functor<sp/>to<sp/>ensure<sp/>all<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uses<sp/>work<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914" refid="classCustomFunctorNamingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCustomFunctorNamingTest" kindref="compound">CustomFunctorNamingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;std::string&gt;<sp/>{};</highlight></codeline>
<codeline lineno="915"><highlight class="normal">TEST_P(<ref refid="classCustomFunctorNamingTest" kindref="compound">CustomFunctorNamingTest</ref>,<sp/>CustomTestNames)<sp/>{}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917" refid="structCustomParamNameFunctor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCustomParamNameFunctor" kindref="compound">CustomParamNameFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>std::string<sp/>operator()(const<sp/>::testing::TestParamInfo&lt;std::string&gt;&amp;<sp/>inf)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf.param;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal">};</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(<ref refid="structCustomParamNameFunctor" kindref="compound">CustomParamNameFunctor</ref>,<sp/><ref refid="classCustomFunctorNamingTest" kindref="compound">CustomFunctorNamingTest</ref>,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(std::string(</highlight><highlight class="stringliteral">&quot;FunctorName&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCustomParamNameFunctor" kindref="compound">CustomParamNameFunctor</ref>());</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(AllAllowedCharacters,<sp/><ref refid="classCustomFunctorNamingTest" kindref="compound">CustomFunctorNamingTest</ref>,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(</highlight><highlight class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;01234567890_&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCustomParamNameFunctor" kindref="compound">CustomParamNameFunctor</ref>());</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>CustomParamNameFunction(</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::testing::TestParamInfo&lt;std::string&gt;&amp;<sp/>inf)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf.param;</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="classCustomFunctionNamingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCustomFunctionNamingTest" kindref="compound">CustomFunctionNamingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;std::string&gt;<sp/>{};</highlight></codeline>
<codeline lineno="938"><highlight class="normal">TEST_P(<ref refid="classCustomFunctionNamingTest" kindref="compound">CustomFunctionNamingTest</ref>,<sp/>CustomTestNames)<sp/>{}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(CustomParamNameFunction,<sp/><ref refid="classCustomFunctionNamingTest" kindref="compound">CustomFunctionNamingTest</ref>,</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(std::string(</highlight><highlight class="stringliteral">&quot;FunctionName&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CustomParamNameFunction);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(CustomParamNameFunctionP,<sp/><ref refid="classCustomFunctionNamingTest" kindref="compound">CustomFunctionNamingTest</ref>,</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(std::string(</highlight><highlight class="stringliteral">&quot;FunctionNameP&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;CustomParamNameFunction);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>custom<sp/>naming<sp/>with<sp/>a<sp/>lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950" refid="classCustomLambdaNamingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCustomLambdaNamingTest" kindref="compound">CustomLambdaNamingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;std::string&gt;<sp/>{};</highlight></codeline>
<codeline lineno="951"><highlight class="normal">TEST_P(<ref refid="classCustomLambdaNamingTest" kindref="compound">CustomLambdaNamingTest</ref>,<sp/>CustomTestNames)<sp/>{}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(CustomParamNameLambda,<sp/><ref refid="classCustomLambdaNamingTest" kindref="compound">CustomLambdaNamingTest</ref>,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(std::string(</highlight><highlight class="stringliteral">&quot;LambdaName&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](const<sp/>::testing::TestParamInfo&lt;std::string&gt;&amp;<sp/>inf)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf.param;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal">TEST(CustomNamingTest,<sp/>CheckNameRegistry)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>unit_test<sp/>=<sp/>::testing::UnitTest::GetInstance();</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>std::set&lt;std::string&gt;<sp/>test_names;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>suite_num<sp/>=<sp/>0;<sp/>suite_num<sp/>&lt;<sp/>unit_test-&gt;total_test_suite_count();</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++suite_num)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::testing::TestSuite*<sp/>test_suite<sp/>=<sp/>unit_test-&gt;GetTestSuite(suite_num);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_num<sp/>=<sp/>0;<sp/>test_num<sp/>&lt;<sp/>test_suite-&gt;total_test_count();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++test_num)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::testing::TestInfo*<sp/>test_info<sp/>=<sp/>test_suite-&gt;GetTestInfo(test_num);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_names.insert(std::string(test_info-&gt;name()));</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1u,<sp/>test_names.count(</highlight><highlight class="stringliteral">&quot;CustomTestNames/FunctorName&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1u,<sp/>test_names.count(</highlight><highlight class="stringliteral">&quot;CustomTestNames/FunctionName&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1u,<sp/>test_names.count(</highlight><highlight class="stringliteral">&quot;CustomTestNames/FunctionNameP&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1u,<sp/>test_names.count(</highlight><highlight class="stringliteral">&quot;CustomTestNames/LambdaName&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>a<sp/>numeric<sp/>name<sp/>to<sp/>ensure<sp/>PrintToStringParamName<sp/>works<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979" refid="classCustomIntegerNamingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCustomIntegerNamingTest" kindref="compound">CustomIntegerNamingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">TEST_P(<ref refid="classCustomIntegerNamingTest" kindref="compound">CustomIntegerNamingTest</ref>,<sp/>TestsReportCorrectNames)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>const<sp/>::testing::TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>Message<sp/>test_name_stream;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>test_name_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TestsReportCorrectNames/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetParam();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(test_name_stream.GetString().c_str(),<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(PrintToString,<sp/><ref refid="classCustomIntegerNamingTest" kindref="compound">CustomIntegerNamingTest</ref>,<sp/>Range(0,<sp/>5),</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1PrintToStringParamName" kindref="compound">::testing::PrintToStringParamName</ref>());</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>a<sp/>custom<sp/>struct<sp/>with<sp/>PrintToString.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994" refid="structCustomStruct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCustomStruct" kindref="compound">CustomStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structCustomStruct" kindref="compound">CustomStruct</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>x(value)<sp/>{}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="997"><highlight class="normal">};</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCustomStruct" kindref="compound">CustomStruct</ref>&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>stream<sp/>&lt;&lt;<sp/>val.x;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004" refid="classCustomStructNamingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCustomStructNamingTest" kindref="compound">CustomStructNamingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;CustomStruct&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal">TEST_P(<ref refid="classCustomStructNamingTest" kindref="compound">CustomStructNamingTest</ref>,<sp/>TestsReportCorrectNames)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>const<sp/>::testing::TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>Message<sp/>test_name_stream;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>test_name_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TestsReportCorrectNames/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetParam();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(test_name_stream.GetString().c_str(),<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(PrintToString,<sp/><ref refid="classCustomStructNamingTest" kindref="compound">CustomStructNamingTest</ref>,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(<ref refid="structCustomStruct" kindref="compound">CustomStruct</ref>(0),<sp/><ref refid="structCustomStruct" kindref="compound">CustomStruct</ref>(1)),</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1PrintToStringParamName" kindref="compound">::testing::PrintToStringParamName</ref>());</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>using<sp/>a<sp/>stateful<sp/>parameter<sp/>naming<sp/>function<sp/>works<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020" refid="structStatefulNamingFunctor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStatefulNamingFunctor" kindref="compound">StatefulNamingFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><ref refid="structStatefulNamingFunctor" kindref="compound">StatefulNamingFunctor</ref>()<sp/>:<sp/>sum(0)<sp/>{}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>std::string<sp/>operator()(const<sp/>::testing::TestParamInfo&lt;int&gt;&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>info.param<sp/>+<sp/>sum;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>info.param;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::PrintToString(value);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030" refid="classStatefulNamingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classStatefulNamingTest" kindref="compound">StatefulNamingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">::testing::TestWithParam</ref>&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><ref refid="classStatefulNamingTest" kindref="compound">StatefulNamingTest</ref>()<sp/>:<sp/>sum_(0)<sp/>{}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum_;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal">TEST_P(<ref refid="classStatefulNamingTest" kindref="compound">StatefulNamingTest</ref>,<sp/>TestsReportCorrectNames)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>const<sp/>::testing::TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>sum_<sp/>+=<sp/>GetParam();</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>Message<sp/>test_name_stream;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>test_name_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TestsReportCorrectNames/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sum_;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(test_name_stream.GetString().c_str(),<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(<ref refid="structStatefulNamingFunctor" kindref="compound">StatefulNamingFunctor</ref>,<sp/><ref refid="classStatefulNamingTest" kindref="compound">StatefulNamingTest</ref>,<sp/>Range(0,<sp/>5),</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStatefulNamingFunctor" kindref="compound">StatefulNamingFunctor</ref>());</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>that<sp/>cannot<sp/>be<sp/>streamed<sp/>into<sp/>an<sp/>ostream.<sp/><sp/>It<sp/>needs<sp/>to<sp/>be<sp/>copyable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(and,<sp/>in<sp/>case<sp/>of<sp/>MSVC,<sp/>also<sp/>assignable)<sp/>in<sp/>order<sp/>to<sp/>be<sp/>a<sp/>test<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type.<sp/><sp/>Its<sp/>default<sp/>copy<sp/>constructor<sp/>and<sp/>assignment<sp/>operator<sp/>do<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>what<sp/>we<sp/>need.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052" refid="classUnstreamable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classUnstreamable" kindref="compound">Unstreamable</ref><sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classUnstreamable" kindref="compound">Unstreamable</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-Wunused-private-field:<sp/>dummy<sp/>accessor<sp/>for<sp/>`value_`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>dummy_value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="classCommentTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCommentTest" kindref="compound">CommentTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;Unstreamable&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal">TEST_P(<ref refid="classCommentTest" kindref="compound">CommentTest</ref>,<sp/>TestsCorrectlyReportUnstreamableParams)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>const<sp/>::testing::TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>EXPECT_EQ(::testing::PrintToString(GetParam()),<sp/>test_info-&gt;value_param());</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(InstantiationWithComments,<sp/><ref refid="classCommentTest" kindref="compound">CommentTest</ref>,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Values(<ref refid="classUnstreamable" kindref="compound">Unstreamable</ref>(1)));</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>we<sp/>can<sp/>create<sp/>a<sp/>hierarchy<sp/>of<sp/>test<sp/>fixtures,<sp/>where<sp/>the<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>fixture<sp/>is<sp/>not<sp/>parameterized<sp/>and<sp/>the<sp/>derived<sp/>class<sp/>is.<sp/>In<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ParameterizedDerivedTest<sp/>inherits<sp/>from<sp/>NonParameterizedBaseTest.<sp/><sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>perform<sp/>simple<sp/>tests<sp/>on<sp/>both.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078" refid="classNonParameterizedBaseTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNonParameterizedBaseTest" kindref="compound">NonParameterizedBaseTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><ref refid="classNonParameterizedBaseTest" kindref="compound">NonParameterizedBaseTest</ref>()<sp/>:<sp/>n_(17)<sp/>{}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086" refid="classParameterizedDerivedTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classParameterizedDerivedTest" kindref="compound">ParameterizedDerivedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classNonParameterizedBaseTest" kindref="compound">NonParameterizedBaseTest</ref>,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1WithParamInterface" kindref="compound">::testing::WithParamInterface</ref>&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><ref refid="classParameterizedDerivedTest" kindref="compound">ParameterizedDerivedTest</ref>()<sp/>:<sp/>count_(0)<sp/>{}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>global_count_;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ParameterizedDerivedTest::global_count_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal">TEST_F(<ref refid="classNonParameterizedBaseTest" kindref="compound">NonParameterizedBaseTest</ref>,<sp/>FixtureIsInitialized)<sp/>{<sp/>EXPECT_EQ(17,<sp/>n_);<sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal">TEST_P(<ref refid="classParameterizedDerivedTest" kindref="compound">ParameterizedDerivedTest</ref>,<sp/>SeesSequence)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>n_);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>count_++);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GetParam(),<sp/>global_count_++);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="classParameterizedDeathTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classParameterizedDeathTest" kindref="compound">ParameterizedDeathTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">::testing::TestWithParam</ref>&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal">TEST_F(<ref refid="classParameterizedDeathTest" kindref="compound">ParameterizedDeathTest</ref>,<sp/>GetParamDiesFromTestF)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(GetParam(),<sp/></highlight><highlight class="stringliteral">&quot;.*<sp/>value-parameterized<sp/>test<sp/>.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(RangeZeroToFive,<sp/><ref refid="classParameterizedDerivedTest" kindref="compound">ParameterizedDerivedTest</ref>,</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range(0,<sp/>5));</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>param<sp/>generator<sp/>working<sp/>with<sp/>Enums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>MyEnums<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>ENUM1<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>ENUM2<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>ENUM3<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120" refid="classMyEnumTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMyEnumTest" kindref="compound">MyEnumTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">testing::TestWithParam</ref>&lt;MyEnums&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal">TEST_P(<ref refid="classMyEnumTest" kindref="compound">MyEnumTest</ref>,<sp/>ChecksParamMoreThanZero)<sp/>{<sp/>EXPECT_GE(10,<sp/>GetParam());<sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(MyEnumTests,<sp/><ref refid="classMyEnumTest" kindref="compound">MyEnumTest</ref>,</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Values(ENUM1,<sp/>ENUM2,<sp/>0));</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">works_here<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Never<sp/>used<sp/>not<sp/>instantiated,<sp/>this<sp/>should<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128" refid="classworks__here_1_1NotUsedTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classworks__here_1_1NotUsedTest" kindref="compound">NotUsedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">testing::TestWithParam</ref>&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="comment">//<sp/>Never<sp/>used<sp/>not<sp/>instantiated,<sp/>this<sp/>should<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1133" refid="classworks__here_1_1NotUsedTypeTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classworks__here_1_1NotUsedTypeTest" kindref="compound">NotUsedTypeTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classworks__here_1_1NotUsedTypeTest" kindref="compound">NotUsedTypeTest</ref>);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>but<sp/>not<sp/>instantiated,<sp/>this<sp/>would<sp/>fail.<sp/>but...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="classworks__here_1_1NotInstantiatedTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classworks__here_1_1NotInstantiatedTest" kindref="compound">NotInstantiatedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">testing::TestWithParam</ref>&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>...<sp/>we<sp/>mark<sp/>is<sp/>as<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal">GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(<ref refid="classworks__here_1_1NotInstantiatedTest" kindref="compound">NotInstantiatedTest</ref>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal">TEST_P(<ref refid="classworks__here_1_1NotInstantiatedTest" kindref="compound">NotInstantiatedTest</ref>,<sp/>Used)<sp/>{}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">OtherName<sp/>=<sp/>NotInstantiatedTest;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(OtherName);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">TEST_P(OtherName,<sp/>Used)<sp/>{}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>but<sp/>not<sp/>instantiated,<sp/>this<sp/>would<sp/>fail.<sp/>but...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1149" refid="classworks__here_1_1NotInstantiatedTypeTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classworks__here_1_1NotInstantiatedTypeTest" kindref="compound">NotInstantiatedTypeTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classworks__here_1_1NotInstantiatedTypeTest" kindref="compound">NotInstantiatedTypeTest</ref>);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>...<sp/>we<sp/>mark<sp/>is<sp/>as<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal">GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(<ref refid="classworks__here_1_1NotInstantiatedTypeTest" kindref="compound">NotInstantiatedTypeTest</ref>);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal">TYPED_TEST_P(<ref refid="classworks__here_1_1NotInstantiatedTypeTest" kindref="compound">NotInstantiatedTypeTest</ref>,<sp/>Used)<sp/>{}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(NotInstantiatedTypeTest,<sp/>Used);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>works_here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>in<sp/>TestGenerationTest<sp/>test<sp/>suite.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>AddGlobalTestEnvironment(TestGenerationTest::Environment::Instance());</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>in<sp/>GeneratorEvaluationTest<sp/>test<sp/>suite.<sp/>Tests<sp/>that<sp/>the<sp/>updated<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>picked<sp/>up<sp/>for<sp/>instantiating<sp/>tests<sp/>in<sp/>GeneratorEvaluationTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>GeneratorEvaluationTest::set_param_value(1);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>in<sp/>GeneratorEvaluationTest<sp/>test<sp/>suite.<sp/>Tests<sp/>that<sp/>value<sp/>updated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>will<sp/>NOT<sp/>be<sp/>used<sp/>for<sp/>instantiating<sp/>tests<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GeneratorEvaluationTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>GeneratorEvaluationTest::set_param_value(2);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc"/>
  </compounddef>
</doxygen>
