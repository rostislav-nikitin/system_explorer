<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classMock" kind="class" language="C++" prot="public">
    <compoundname>Mock</compoundname>
    <basecompoundref refid="classInterface" prot="public" virt="non-virtual">Interface</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classMock_1a2e57c412a35293646fa930d01d4c35e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::Mock</definition>
        <argsstring>()=default</argsstring>
        <name>Mock</name>
        <qualifiedname>Mock::Mock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-nice-strict_test.cc" line="43" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1ae710f23cafb1a2f17772e8805d6312d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD0</definition>
        <argsstring>(DoThis, void())</argsstring>
        <name>MOCK_METHOD0</name>
        <qualifiedname>Mock::MOCK_METHOD0</qualifiedname>
        <param>
          <type>DoThis</type>
        </param>
        <param>
          <type>void()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-nice-strict_test.cc" line="45" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1a2e57c412a35293646fa930d01d4c35e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::Mock</definition>
        <argsstring>()=default</argsstring>
        <name>Mock</name>
        <qualifiedname>Mock::Mock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="211" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1ada59eea6991953353f332e3ea1e74444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(VoidFromString, void(char *str))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>VoidFromString</type>
        </param>
        <param>
          <type>void(char *str)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="213" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1a2db4d82b6f92b4e462929f651ac4c3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(StringFromString, char *(char *str))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>StringFromString</type>
        </param>
        <param>
          <type>char *</type>
          <array>char *str</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="214" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1ae73b4ee90bf6d84205d2b1c17f0b8433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(IntFromString, int(char *str))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>IntFromString</type>
        </param>
        <param>
          <type>int(char *str)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="215" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1a2cece30a3ea92b34f612f8032fe3a0f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(IntRefFromString, int &amp;(char *str))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>IntRefFromString</type>
        </param>
        <param>
          <type>int &amp;</type>
          <array>char *str</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="216" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1ac70c052254fa9816bd759c006062dc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(VoidFromFunc, void(void(*func)(char *str)))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>VoidFromFunc</type>
        </param>
        <param>
          <type>void(void(*func)(char *str))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="217" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1ae2379efbc030f1adf8b032be3bdf081d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(VoidFromIntRef, void(int &amp;n))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>VoidFromIntRef</type>
        </param>
        <param>
          <type>void(int &amp;n)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="218" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1a3fd62026610c5d3d3aeaaf2ade3e18aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(VoidFromFloat, void(float n))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>VoidFromFloat</type>
        </param>
        <param>
          <type>void(float n)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="219" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1a890668928abcd28d4d39df164e7b6dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(VoidFromDouble, void(double n))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>VoidFromDouble</type>
        </param>
        <param>
          <type>void(double n)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="220" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1a50e2bda4375a59bb89fd5652bd33eb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::MOCK_METHOD1</definition>
        <argsstring>(VoidFromVector, void(const std::vector&lt; int &gt; &amp;v))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>Mock::MOCK_METHOD1</qualifiedname>
        <param>
          <type>VoidFromVector</type>
        </param>
        <param>
          <type>void(const std::vector&lt; int &gt; &amp;v)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="221" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classMock_1a59027812dcb632daceca8044894ee212" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::Mock</definition>
        <argsstring>(const Mock &amp;)=delete</argsstring>
        <name>Mock</name>
        <qualifiedname>Mock::Mock</qualifiedname>
        <param>
          <type>const <ref refid="classMock" kindref="compound">Mock</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-nice-strict_test.cc" line="48" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1ad4d6ff9997bccc42d1e5fa3d5cc9e802" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMock" kindref="compound">Mock</ref> &amp;</type>
        <definition>Mock &amp; Mock::operator=</definition>
        <argsstring>(const Mock &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>Mock::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classMock" kindref="compound">Mock</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-nice-strict_test.cc" line="49" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1a59027812dcb632daceca8044894ee212" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mock::Mock</definition>
        <argsstring>(const Mock &amp;)=delete</argsstring>
        <name>Mock</name>
        <qualifiedname>Mock::Mock</qualifiedname>
        <param>
          <type>const <ref refid="classMock" kindref="compound">Mock</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="224" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMock_1ad4d6ff9997bccc42d1e5fa3d5cc9e802" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMock" kindref="compound">Mock</ref> &amp;</type>
        <definition>Mock &amp; Mock::operator=</definition>
        <argsstring>(const Mock &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>Mock::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classMock" kindref="compound">Mock</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="225" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Interface</label>
        <link refid="classInterface"/>
      </node>
      <node id="1">
        <label>Mock</label>
        <link refid="classMock"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Interface</label>
        <link refid="classInterface"/>
      </node>
      <node id="1">
        <label>Mock</label>
        <link refid="classMock"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-nice-strict_test.cc" line="41" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-nice-strict_test.cc" bodystart="41" bodyend="50"/>
    <listofallmembers>
      <member refid="classInterface_1ab34c8a5fd2236a6b009f86a4e5851b61" prot="public" virt="pure-virtual"><scope>Mock</scope><name>IntFromString</name></member>
      <member refid="classInterface_1a7ec1c3391dfd90b36f25a7eddabcf383" prot="public" virt="pure-virtual"><scope>Mock</scope><name>IntRefFromString</name></member>
      <member refid="classMock_1a2e57c412a35293646fa930d01d4c35e0" prot="public" virt="non-virtual"><scope>Mock</scope><name>Mock</name></member>
      <member refid="classMock_1a59027812dcb632daceca8044894ee212" prot="private" virt="non-virtual"><scope>Mock</scope><name>Mock</name></member>
      <member refid="classMock_1a2e57c412a35293646fa930d01d4c35e0" prot="public" virt="non-virtual"><scope>Mock</scope><name>Mock</name></member>
      <member refid="classMock_1a59027812dcb632daceca8044894ee212" prot="private" virt="non-virtual"><scope>Mock</scope><name>Mock</name></member>
      <member refid="classMock_1ae710f23cafb1a2f17772e8805d6312d2" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD0</name></member>
      <member refid="classMock_1ada59eea6991953353f332e3ea1e74444" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1a2db4d82b6f92b4e462929f651ac4c3b1" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1ae73b4ee90bf6d84205d2b1c17f0b8433" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1a2cece30a3ea92b34f612f8032fe3a0f9" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1ac70c052254fa9816bd759c006062dc47" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1ae2379efbc030f1adf8b032be3bdf081d" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1a3fd62026610c5d3d3aeaaf2ade3e18aa" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1a890668928abcd28d4d39df164e7b6dd8" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1a50e2bda4375a59bb89fd5652bd33eb0f" prot="public" virt="non-virtual"><scope>Mock</scope><name>MOCK_METHOD1</name></member>
      <member refid="classMock_1ad4d6ff9997bccc42d1e5fa3d5cc9e802" prot="private" virt="non-virtual"><scope>Mock</scope><name>operator=</name></member>
      <member refid="classMock_1ad4d6ff9997bccc42d1e5fa3d5cc9e802" prot="private" virt="non-virtual"><scope>Mock</scope><name>operator=</name></member>
      <member refid="classInterface_1ab26cc619f7b08203bcd3840449b23f8d" prot="public" virt="pure-virtual"><scope>Mock</scope><name>StringFromString</name></member>
      <member refid="classInterface_1aa56524017aabdbe46510648c711ab8a8" prot="public" virt="pure-virtual"><scope>Mock</scope><name>VoidFromDouble</name></member>
      <member refid="classInterface_1ae2b3e9411c893a45642d3af632752c66" prot="public" virt="pure-virtual"><scope>Mock</scope><name>VoidFromFloat</name></member>
      <member refid="classInterface_1a7dab3c82b857a9a5f52b3ce6f7df547f" prot="public" virt="pure-virtual"><scope>Mock</scope><name>VoidFromFunc</name></member>
      <member refid="classInterface_1aa43fb56650a57b6b3e7743e54e50cb86" prot="public" virt="pure-virtual"><scope>Mock</scope><name>VoidFromIntRef</name></member>
      <member refid="classInterface_1a65d6ae604e7e9a513aec72c9c94e0b97" prot="public" virt="pure-virtual"><scope>Mock</scope><name>VoidFromString</name></member>
      <member refid="classInterface_1ae84fe7e53f881db2f823ad35d004927a" prot="public" virt="pure-virtual"><scope>Mock</scope><name>VoidFromVector</name></member>
      <member refid="classInterface_1a7c171febd7287540790a9b7d0382cd61" prot="public" virt="virtual"><scope>Mock</scope><name>~Interface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
