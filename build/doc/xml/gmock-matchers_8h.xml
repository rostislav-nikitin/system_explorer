<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock-matchers_8h" kind="file" language="C++">
    <compoundname>gmock-matchers.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">exception</includes>
    <includes local="no">functional</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">ios</includes>
    <includes local="no">iterator</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gmock-internal-utils_8h" local="yes">gmock/internal/gmock-internal-utils.h</includes>
    <includes refid="gmock-port_8h" local="yes">gmock/internal/gmock-port.h</includes>
    <includes refid="gmock-pp_8h" local="yes">gmock/internal/gmock-pp.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="internal_2custom_2gmock-matchers_8h" local="yes">gmock/internal/custom/gmock-matchers.h</includes>
    <includedby refid="gmock-more-matchers_8h" local="yes">build/_deps/googletest-src/googlemock/include/gmock/gmock-more-matchers.h</includedby>
    <includedby refid="gmock-spec-builders_8h" local="yes">build/_deps/googletest-src/googlemock/include/gmock/gmock-spec-builders.h</includedby>
    <includedby refid="gmock_8h" local="yes">build/_deps/googletest-src/googlemock/include/gmock/gmock.h</includedby>
    <includedby refid="gmock-matchers_8cc" local="yes">build/_deps/googletest-src/googlemock/src/gmock-matchers.cc</includedby>
    <includedby refid="gmock-matchers__test_8h" local="yes">build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="24">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="17">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="44">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="34">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="57">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="25">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="20">
        <label>assert.h</label>
      </node>
      <node id="49">
        <label>atomic</label>
      </node>
      <node id="60">
        <label>cassert</label>
      </node>
      <node id="29">
        <label>cerrno</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="41">
        <label>cstddef</label>
      </node>
      <node id="22">
        <label>cstdint</label>
      </node>
      <node id="26">
        <label>ctype.h</label>
      </node>
      <node id="4">
        <label>exception</label>
      </node>
      <node id="52">
        <label>float.h</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="6">
        <label>initializer_list</label>
      </node>
      <node id="42">
        <label>iomanip</label>
      </node>
      <node id="7">
        <label>ios</label>
      </node>
      <node id="62">
        <label>iosfwd</label>
      </node>
      <node id="23">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>iterator</label>
      </node>
      <node id="9">
        <label>limits</label>
      </node>
      <node id="30">
        <label>locale</label>
      </node>
      <node id="53">
        <label>map</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
      <node id="11">
        <label>ostream</label>
      </node>
      <node id="38">
        <label>regex.h</label>
      </node>
      <node id="43">
        <label>set</label>
      </node>
      <node id="12">
        <label>sstream</label>
      </node>
      <node id="27">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>stdio.h</label>
      </node>
      <node id="21">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="28">
        <label>string.h</label>
      </node>
      <node id="36">
        <label>strings.h</label>
      </node>
      <node id="32">
        <label>sys/stat.h</label>
      </node>
      <node id="33">
        <label>sys/types.h</label>
      </node>
      <node id="31">
        <label>tuple</label>
      </node>
      <node id="14">
        <label>type_traits</label>
      </node>
      <node id="39">
        <label>typeinfo</label>
      </node>
      <node id="37">
        <label>unistd.h</label>
      </node>
      <node id="15">
        <label>utility</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h</label>
        <link refid="gmock-matchers__test_8h_source"/>
      </node>
      <node id="5">
        <label>build/_deps/googletest-src/googlemock/test/gmock_link_test.h</label>
        <link refid="gmock__link__test_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="gmock-matchers_8h_1a2e98579585b1c3e77613384612912612" prot="public" static="no">
        <name>GMOCK_MAYBE_5046_</name>
        <briefdescription>
<para>&lt;&lt; DiffStrings(str, arg); </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="283" column="10" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a41d888579850c16583baea33ee8d057e" prot="public" static="no">
        <name>ASSERT_THAT</name>
        <param><defname>value</defname></param>
        <param><defname>matcher</defname></param>
        <initializer>  ASSERT_PRED_FORMAT1(              \
      ::testing::internal::MakePredicateFormatterFromMatcher(matcher), value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5439" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1ac31e206123aa702e1152bb2735b31409" prot="public" static="no">
        <name>EXPECT_THAT</name>
        <param><defname>value</defname></param>
        <param><defname>matcher</defname></param>
        <initializer>  EXPECT_PRED_FORMAT1(              \
      ::testing::internal::MakePredicateFormatterFromMatcher(matcher), value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5442" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1af4fe73ff8e2b0494f4970b575b65ddff" prot="public" static="no">
        <name>MATCHER</name>
        <param><defname>name</defname></param>
        <param><defname>description</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5447" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1acb7ae915efa2fd8d3f6ea7313198afb6" prot="public" static="no">
        <name>MATCHER_P</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP, description, (#p0), (p0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5489" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a78efce3ad21c8f68223f5c2d09f2e79d" prot="public" static="no">
        <name>MATCHER_P2</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP2, description, (#p0, #p1), \
                         (p0, p1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5491" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a507103c6251f8bf4393ec119d9e34d34" prot="public" static="no">
        <name>MATCHER_P3</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP3, description, (#p0, #p1, #p2), \
                         (p0, p1, p2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5494" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a6ec420ed6bc3ad073f19a4e32dd1f38f" prot="public" static="no">
        <name>MATCHER_P4</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP4, description, \
                         (#p0, #p1, #p2, #p3), (p0, p1, p2, p3))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5497" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a3a9589cd79e2dbdb4e09981510c9c42e" prot="public" static="no">
        <name>MATCHER_P5</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <param><defname>p4</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP5, description, \
                         (#p0, #p1, #p2, #p3, #p4), (p0, p1, p2, p3, p4))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5500" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1aceda758bb064965b2b9a7e0e96085861" prot="public" static="no">
        <name>MATCHER_P6</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <param><defname>p4</defname></param>
        <param><defname>p5</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP6, description,  \
                         (#p0, #p1, #p2, #p3, #p4, #p5),      \
                         (p0, p1, p2, p3, p4, p5))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5503" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a2948ce54387a83c33fa98ba0c73eb11f" prot="public" static="no">
        <name>MATCHER_P7</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <param><defname>p4</defname></param>
        <param><defname>p5</defname></param>
        <param><defname>p6</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP7, description,      \
                         (#p0, #p1, #p2, #p3, #p4, #p5, #p6),     \
                         (p0, p1, p2, p3, p4, p5, p6))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5507" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1ad86c95b03df37fada38e18d8eb9e53bc" prot="public" static="no">
        <name>MATCHER_P8</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <param><defname>p4</defname></param>
        <param><defname>p5</defname></param>
        <param><defname>p6</defname></param>
        <param><defname>p7</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP8, description,          \
                         (#p0, #p1, #p2, #p3, #p4, #p5, #p6, #p7),    \
                         (p0, p1, p2, p3, p4, p5, p6, p7))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5511" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a2dc1db146d4112c9fde1c2708807e43e" prot="public" static="no">
        <name>MATCHER_P9</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <param><defname>p4</defname></param>
        <param><defname>p5</defname></param>
        <param><defname>p6</defname></param>
        <param><defname>p7</defname></param>
        <param><defname>p8</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP9, description,              \
                         (#p0, #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8),   \
                         (p0, p1, p2, p3, p4, p5, p6, p7, p8))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5515" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1aa6a3925eeb8bcb4b6b3465cc4ff26650" prot="public" static="no">
        <name>MATCHER_P10</name>
        <param><defname>name</defname></param>
        <param><defname>p0</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <param><defname>p4</defname></param>
        <param><defname>p5</defname></param>
        <param><defname>p6</defname></param>
        <param><defname>p7</defname></param>
        <param><defname>p8</defname></param>
        <param><defname>p9</defname></param>
        <param><defname>description</defname></param>
        <initializer>  GMOCK_INTERNAL_MATCHER(name, name##MatcherP10, description,                  \
                         (#p0, #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9),   \
                         (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5519" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a87aa7af5048196126e751369bfdcc4b6" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER</name>
        <param><defname>name</defname></param>
        <param><defname>full_name</defname></param>
        <param><defname>description</defname></param>
        <param><defname>arg_names</defname></param>
        <param><defname>args</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5524" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1adfd413a8ac26cd2ca9958a7b29785b95" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS</name>
        <param><defname>args</defname></param>
        <initializer>  GMOCK_PP_TAIL(                                     \
      GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAM, , args))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5575" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1aededeca1f4e0a3f5f4829d2b6aeac804" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAM</name>
        <param><defname>i_unused</defname></param>
        <param><defname>data_unused</defname></param>
        <param><defname>arg</defname></param>
        <initializer>  , typename arg##_type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5578" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1af245b0c188fee5974dbd3aa94cd088cd" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_TYPE_PARAMS</name>
        <param><defname>args</defname></param>
        <initializer>  GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_TYPE_PARAM, , args))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5581" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a1a0b62d49dd862d686d9a77bbe9c9d78" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_TYPE_PARAM</name>
        <param><defname>i_unused</defname></param>
        <param><defname>data_unused</defname></param>
        <param><defname>arg</defname></param>
        <initializer>  , arg##_type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5583" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1aa3461e0db993def698d90857e1dab051" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS</name>
        <param><defname>args</defname></param>
        <initializer>  GMOCK_PP_TAIL(dummy_first GMOCK_PP_FOR_EACH(     \
      GMOCK_INTERNAL_MATCHER_FUNCTION_ARG, , args))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5586" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1aa11e7b647b95fae02faf87c66d11a5de" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_FUNCTION_ARG</name>
        <param><defname>i</defname></param>
        <param><defname>data_unused</defname></param>
        <param><defname>arg</defname></param>
        <initializer>  , arg##_type gmock_p##i</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5589" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1ab2c9f348799a4a7fb8bdf057ea7612c4" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_FORWARD_ARGS</name>
        <param><defname>args</defname></param>
        <initializer>  GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_FORWARD_ARG, , args))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5592" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1af72c6c834adf41a98a3acea09a9ac8de" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_FORWARD_ARG</name>
        <param><defname>i</defname></param>
        <param><defname>data_unused</defname></param>
        <param><defname>arg</defname></param>
        <initializer>  , arg(::std::forward&lt;arg##_type&gt;(gmock_p##i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5594" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a8593d7b8f5afec57ec40cccdd7ff4451" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_MEMBERS</name>
        <param><defname>args</defname></param>
        <initializer>  GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_MEMBER, , args)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5597" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a459c45f397c098b7073ee10709f25149" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_MEMBER</name>
        <param><defname>i_unused</defname></param>
        <param><defname>data_unused</defname></param>
        <param><defname>arg</defname></param>
        <initializer>  const arg##_type arg;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5599" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a1def3c14d8b7e67b800378815902c124" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_MEMBERS_USAGE</name>
        <param><defname>args</defname></param>
        <initializer>  GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_MEMBER_USAGE, , args))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5602" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1ad0e526b054d34325a2106bab915f7ddc" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_MEMBER_USAGE</name>
        <param><defname>i_unused</defname></param>
        <param><defname>data_unused</defname></param>
        <param><defname>arg</defname></param>
        <initializer>, arg</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5604" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1aa3153cbe7c469f4348d793b45a1ae7ec" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_ARGS_USAGE</name>
        <param><defname>args</defname></param>
        <initializer>  GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_ARG_USAGE, , args))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5606" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gmock-matchers_8h_1a952fc28b423abd068fdec27c072faa95" prot="public" static="no">
        <name>GMOCK_INTERNAL_MATCHER_ARG_USAGE</name>
        <param><defname>i</defname></param>
        <param><defname>data_unused</defname></param>
        <param><defname>arg_unused</defname></param>
        <initializer>  , gmock_p##i</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="5608" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gmock-matchers_8h_1a76d5edfe42aefbbbf81289a6a12f3761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GTEST_DISABLE_MSC_WARNINGS_PUSH_</definition>
        <argsstring>(4251 GMOCK_MAYBE_5046_) namespace testing</argsstring>
        <name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name>
        <param>
          <type>4251</type>
          <declname>GMOCK_MAYBE_5046_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" line="286" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h" bodystart="286" bodyend="5614"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>MATCHER*<sp/>family<sp/>of<sp/>macros<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>namespace<sp/>scope<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>custom<sp/>matchers<sp/>easily.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Basic<sp/>Usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER(name,<sp/>description_string)<sp/>{<sp/>statements;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>a<sp/>matcher<sp/>with<sp/>the<sp/>given<sp/>name<sp/>that<sp/>executes<sp/>the<sp/>statements,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>must<sp/>return<sp/>a<sp/>bool<sp/>to<sp/>indicate<sp/>if<sp/>the<sp/>match<sp/>succeeds.<sp/><sp/>Inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>statements,<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>the<sp/>value<sp/>being<sp/>matched<sp/>by<sp/>&apos;arg&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>refer<sp/>to<sp/>its<sp/>type<sp/>by<sp/>&apos;arg_type&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>description<sp/>string<sp/>documents<sp/>what<sp/>the<sp/>matcher<sp/>does,<sp/>and<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>generate<sp/>the<sp/>failure<sp/>message<sp/>when<sp/>the<sp/>match<sp/>fails.<sp/><sp/>Since<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MATCHER()<sp/>is<sp/>usually<sp/>defined<sp/>in<sp/>a<sp/>header<sp/>file<sp/>shared<sp/>by<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>source<sp/>files,<sp/>we<sp/>require<sp/>the<sp/>description<sp/>to<sp/>be<sp/>a<sp/>C-string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>literal<sp/>to<sp/>avoid<sp/>possible<sp/>side<sp/>effects.<sp/><sp/>It<sp/>can<sp/>be<sp/>empty,<sp/>in<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>case<sp/>we&apos;ll<sp/>use<sp/>the<sp/>sequence<sp/>of<sp/>words<sp/>in<sp/>the<sp/>matcher<sp/>name<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>description.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER(IsEven,<sp/>&quot;&quot;)<sp/>{<sp/>return<sp/>(arg<sp/>%<sp/>2)<sp/>==<sp/>0;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>you<sp/>to<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Expects<sp/>mock_foo.Bar(n)<sp/>to<sp/>be<sp/>called<sp/>where<sp/>n<sp/>is<sp/>even.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(mock_foo,<sp/>Bar(IsEven()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Verifies<sp/>that<sp/>the<sp/>value<sp/>of<sp/>some_expression<sp/>is<sp/>even.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(some_expression,<sp/>IsEven());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>above<sp/>assertion<sp/>fails,<sp/>it<sp/>will<sp/>print<sp/>something<sp/>like:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Value<sp/>of:<sp/>some_expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>is<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Actual:<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>description<sp/>&quot;is<sp/>even&quot;<sp/>is<sp/>automatically<sp/>calculated<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matcher<sp/>name<sp/>IsEven.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Argument<sp/>Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>type<sp/>of<sp/>the<sp/>value<sp/>being<sp/>matched<sp/>(arg_type)<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>determined<sp/>by<sp/>the<sp/>context<sp/>in<sp/>which<sp/>you<sp/>use<sp/>the<sp/>matcher<sp/>and<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supplied<sp/>to<sp/>you<sp/>by<sp/>the<sp/>compiler,<sp/>so<sp/>you<sp/>don&apos;t<sp/>need<sp/>to<sp/>worry<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>declaring<sp/>it<sp/>(nor<sp/>can<sp/>you).<sp/><sp/>This<sp/>allows<sp/>the<sp/>matcher<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>polymorphic.<sp/><sp/>For<sp/>example,<sp/>IsEven()<sp/>can<sp/>be<sp/>used<sp/>to<sp/>match<sp/>any<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>value<sp/>of<sp/>&quot;(arg<sp/>%<sp/>2)<sp/>==<sp/>0&quot;<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>bool.<sp/><sp/>In<sp/>the<sp/>&quot;Bar(IsEven())&quot;<sp/>example<sp/>above,<sp/>if<sp/>method<sp/>Bar()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>takes<sp/>an<sp/>int,<sp/>&apos;arg_type&apos;<sp/>will<sp/>be<sp/>int;<sp/>if<sp/>it<sp/>takes<sp/>an<sp/>unsigned<sp/>long,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;arg_type&apos;<sp/>will<sp/>be<sp/>unsigned<sp/>long;<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameterizing<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sometimes<sp/>you&apos;ll<sp/>want<sp/>to<sp/>parameterize<sp/>the<sp/>matcher.<sp/><sp/>For<sp/>that<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>use<sp/>another<sp/>macro:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER_P(name,<sp/>param_name,<sp/>description_string)<sp/>{<sp/>statements;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER_P(HasAbsoluteValue,<sp/>value,<sp/>&quot;&quot;)<sp/>{<sp/>return<sp/>abs(arg)<sp/>==<sp/>value;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>allow<sp/>you<sp/>to<sp/>write:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(Blah(&quot;a&quot;),<sp/>HasAbsoluteValue(n));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>may<sp/>lead<sp/>to<sp/>this<sp/>message<sp/>(assuming<sp/>n<sp/>is<sp/>10):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Value<sp/>of:<sp/>Blah(&quot;a&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>has<sp/>absolute<sp/>value<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Actual:<sp/>-9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>both<sp/>the<sp/>matcher<sp/>description<sp/>and<sp/>its<sp/>parameter<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>printed,<sp/>making<sp/>the<sp/>message<sp/>human-friendly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>matcher<sp/>definition<sp/>body,<sp/>you<sp/>can<sp/>write<sp/>&apos;foo_type&apos;<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>the<sp/>type<sp/>of<sp/>a<sp/>parameter<sp/>named<sp/>&apos;foo&apos;.<sp/><sp/>For<sp/>example,<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>body<sp/>of<sp/>MATCHER_P(HasAbsoluteValue,<sp/>value)<sp/>above,<sp/>you<sp/>can<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;value_type&apos;<sp/>to<sp/>refer<sp/>to<sp/>the<sp/>type<sp/>of<sp/>&apos;value&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>also<sp/>provide<sp/>MATCHER_P2,<sp/>MATCHER_P3,<sp/>...,<sp/>up<sp/>to<sp/>MATCHER_P$n<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>multi-parameter<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Describing<sp/>Parameterized<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>argument<sp/>to<sp/>MATCHER*()<sp/>is<sp/>a<sp/>string-typed<sp/>expression.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expression<sp/>can<sp/>reference<sp/>all<sp/>of<sp/>the<sp/>matcher&apos;s<sp/>parameters<sp/>and<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>special<sp/>bool-typed<sp/>variable<sp/>named<sp/>&apos;negation&apos;.<sp/><sp/>When<sp/>&apos;negation&apos;<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>false,<sp/>the<sp/>expression<sp/>should<sp/>evaluate<sp/>to<sp/>the<sp/>matcher&apos;s<sp/>description;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>it<sp/>should<sp/>evaluate<sp/>to<sp/>the<sp/>description<sp/>of<sp/>the<sp/>negation<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>matcher.<sp/><sp/>For<sp/>example,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>using<sp/>testing::PrintToString;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER_P2(InClosedRange,<sp/>low,<sp/>hi,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(negation<sp/>?<sp/>&quot;is<sp/>not&quot;<sp/>:<sp/>&quot;is&quot;)<sp/>+<sp/>&quot;<sp/>in<sp/>range<sp/>[&quot;<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(low)<sp/>+<sp/>&quot;,<sp/>&quot;<sp/>+<sp/>PrintToString(hi)<sp/>+<sp/>&quot;]&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>low<sp/>&lt;=<sp/>arg<sp/>&amp;&amp;<sp/>arg<sp/>&lt;=<sp/>hi;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(3,<sp/>InClosedRange(4,<sp/>6));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(3,<sp/>Not(InClosedRange(2,<sp/>4)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>generate<sp/>two<sp/>failures<sp/>that<sp/>contain<sp/>the<sp/>text:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>is<sp/>in<sp/>range<sp/>[4,<sp/>6]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>is<sp/>not<sp/>in<sp/>range<sp/>[2,<sp/>4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>specify<sp/>&quot;&quot;<sp/>as<sp/>the<sp/>description,<sp/>the<sp/>failure<sp/>message<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contain<sp/>the<sp/>sequence<sp/>of<sp/>words<sp/>in<sp/>the<sp/>matcher<sp/>name<sp/>followed<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter<sp/>values<sp/>printed<sp/>as<sp/>a<sp/>tuple.<sp/><sp/>For<sp/>example,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER_P2(InClosedRange,<sp/>low,<sp/>hi,<sp/>&quot;&quot;)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(3,<sp/>InClosedRange(4,<sp/>6));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(3,<sp/>Not(InClosedRange(2,<sp/>4)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>generate<sp/>two<sp/>failures<sp/>that<sp/>contain<sp/>the<sp/>text:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>in<sp/>closed<sp/>range<sp/>(4,<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>not<sp/>(in<sp/>closed<sp/>range<sp/>(2,<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Types<sp/>of<sp/>Matcher<sp/>Parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>purpose<sp/>of<sp/>typing,<sp/>you<sp/>can<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER_Pk(Foo,<sp/>p1,<sp/>...,<sp/>pk,<sp/>description_string)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>shorthand<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>template<sp/>&lt;typename<sp/>p1_type,<sp/>...,<sp/>typename<sp/>pk_type&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>FooMatcherPk&lt;p1_type,<sp/>...,<sp/>pk_type&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Foo(p1_type<sp/>p1,<sp/>...,<sp/>pk_type<sp/>pk)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>you<sp/>write<sp/>Foo(v1,<sp/>...,<sp/>vk),<sp/>the<sp/>compiler<sp/>infers<sp/>the<sp/>types<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>parameters<sp/>v1,<sp/>...,<sp/>and<sp/>vk<sp/>for<sp/>you.<sp/><sp/>If<sp/>you<sp/>are<sp/>not<sp/>happy<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>result<sp/>of<sp/>the<sp/>type<sp/>inference,<sp/>you<sp/>can<sp/>specify<sp/>the<sp/>types<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>explicitly<sp/>instantiating<sp/>the<sp/>template,<sp/>as<sp/>in<sp/>Foo&lt;long,<sp/>bool&gt;(5,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>false).<sp/><sp/>As<sp/>said<sp/>earlier,<sp/>you<sp/>don&apos;t<sp/>get<sp/>to<sp/>(or<sp/>need<sp/>to)<sp/>specify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;arg_type&apos;<sp/>as<sp/>that&apos;s<sp/>determined<sp/>by<sp/>the<sp/>context<sp/>in<sp/>which<sp/>the<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>used.<sp/><sp/>You<sp/>can<sp/>assign<sp/>the<sp/>result<sp/>of<sp/>expression<sp/>Foo(p1,<sp/>...,<sp/>pk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>variable<sp/>of<sp/>type<sp/>FooMatcherPk&lt;p1_type,<sp/>...,<sp/>pk_type&gt;.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>useful<sp/>when<sp/>composing<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>you<sp/>can<sp/>instantiate<sp/>a<sp/>matcher<sp/>template<sp/>with<sp/>reference<sp/>types,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>passing<sp/>the<sp/>parameters<sp/>by<sp/>pointer<sp/>usually<sp/>makes<sp/>your<sp/>code<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>readable.<sp/><sp/>If,<sp/>however,<sp/>you<sp/>still<sp/>want<sp/>to<sp/>pass<sp/>a<sp/>parameter<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference,<sp/>be<sp/>aware<sp/>that<sp/>in<sp/>the<sp/>failure<sp/>message<sp/>generated<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matcher<sp/>you<sp/>will<sp/>see<sp/>the<sp/>value<sp/>of<sp/>the<sp/>referenced<sp/>object<sp/>but<sp/>not<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explaining<sp/>Match<sp/>Results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sometimes<sp/>the<sp/>matcher<sp/>description<sp/>alone<sp/>isn&apos;t<sp/>enough<sp/>to<sp/>explain<sp/>why</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>match<sp/>has<sp/>failed<sp/>or<sp/>succeeded.<sp/><sp/>For<sp/>example,<sp/>when<sp/>expecting<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>long<sp/>string,<sp/>it<sp/>can<sp/>be<sp/>very<sp/>helpful<sp/>to<sp/>also<sp/>print<sp/>the<sp/>diff<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>expected<sp/>string<sp/>and<sp/>the<sp/>actual<sp/>one.<sp/><sp/>To<sp/>achieve<sp/>that,<sp/>you<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optionally<sp/>stream<sp/>additional<sp/>information<sp/>to<sp/>a<sp/>special<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>named<sp/>result_listener,<sp/>whose<sp/>type<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MatchResultListener:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER_P(EqualsLongString,<sp/>str,<sp/>&quot;&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(arg<sp/>==<sp/>str)<sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*result_listener<sp/>&lt;&lt;<sp/>&quot;the<sp/>difference:<sp/>&quot;</highlight></codeline>
<codeline lineno="212"><highlight class="comment"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloading<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>overload<sp/>matchers<sp/>with<sp/>different<sp/>numbers<sp/>of<sp/>parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER_P(Blah,<sp/>a,<sp/>description_string1)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MATCHER_P2(Blah,<sp/>a,<sp/>b,<sp/>description_string2)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Caveats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>defining<sp/>a<sp/>new<sp/>matcher,<sp/>you<sp/>should<sp/>also<sp/>consider<sp/>implementing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MatcherInterface<sp/>or<sp/>using<sp/>MakePolymorphicMatcher().<sp/><sp/>These</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>approaches<sp/>require<sp/>more<sp/>work<sp/>than<sp/>the<sp/>MATCHER*<sp/>macros,<sp/>but<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>give<sp/>you<sp/>more<sp/>control<sp/>on<sp/>the<sp/>types<sp/>of<sp/>the<sp/>value<sp/>being<sp/>matched<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>matcher<sp/>parameters,<sp/>which<sp/>may<sp/>leads<sp/>to<sp/>better<sp/>compiler<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>messages<sp/>when<sp/>the<sp/>matcher<sp/>is<sp/>used<sp/>wrong.<sp/><sp/>They<sp/>also<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overloading<sp/>matchers<sp/>based<sp/>on<sp/>parameter<sp/>types<sp/>(as<sp/>opposed<sp/>to<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>the<sp/>number<sp/>of<sp/>parameters).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MATCHER*()<sp/>can<sp/>only<sp/>be<sp/>used<sp/>in<sp/>a<sp/>namespace<sp/>scope<sp/>as<sp/>templates<sp/>cannot<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>declared<sp/>inside<sp/>of<sp/>a<sp/>local<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>More<sp/>Information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>learn<sp/>more<sp/>about<sp/>using<sp/>these<sp/>macros,<sp/>please<sp/>search<sp/>for<sp/>&apos;MATCHER&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>also<sp/>implements<sp/>some<sp/>commonly<sp/>used<sp/>argument<sp/>matchers.<sp/><sp/>More</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matchers<sp/>can<sp/>be<sp/>defined<sp/>by<sp/>the<sp/>user<sp/>implementing<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MatcherInterface&lt;T&gt;<sp/>interface<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>googletest/include/gtest/gtest-matchers.h<sp/>for<sp/>the<sp/>definition<sp/>of<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matcher,<sp/>class<sp/>MatcherInterface,<sp/>and<sp/>others.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>private,<sp/>include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>friend<sp/>gmock/.*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ios&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-internal-utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-pp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>warning<sp/>C5046<sp/>is<sp/>new<sp/>as<sp/>of<sp/>VS2017<sp/>version<sp/>15.8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1915</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_MAYBE_5046_<sp/>5046</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_MAYBE_5046_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>4251<sp/>GMOCK_MAYBE_5046_<sp/></highlight><highlight class="comment">/*<sp/>class<sp/>A<sp/>needs<sp/>to<sp/>have<sp/>dll-interface<sp/>to<sp/>be<sp/>used<sp/>by</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients<sp/>of<sp/>class<sp/>B<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Symbol<sp/>involving<sp/>type<sp/>with<sp/>internal<sp/>linkage<sp/>not<sp/>defined<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>implement<sp/>a<sp/>matcher<sp/>Foo<sp/>for<sp/>type<sp/>T,<sp/>define:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>a<sp/>class<sp/>FooMatcherImpl<sp/>that<sp/>implements<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>MatcherInterface&lt;T&gt;<sp/>interface,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>a<sp/>factory<sp/>function<sp/>that<sp/>creates<sp/>a<sp/>Matcher&lt;T&gt;<sp/>object<sp/>from<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>FooMatcherImpl*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>two-level<sp/>delegation<sp/>design<sp/>makes<sp/>it<sp/>possible<sp/>to<sp/>allow<sp/>a<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>write<sp/>&quot;v&quot;<sp/>instead<sp/>of<sp/>&quot;Eq(v)&quot;<sp/>where<sp/>a<sp/>Matcher<sp/>is<sp/>expected,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>impossible<sp/>if<sp/>we<sp/>pass<sp/>matchers<sp/>by<sp/>pointers.<sp/><sp/>It<sp/>also<sp/>eases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ownership<sp/>management<sp/>as<sp/>Matcher<sp/>objects<sp/>can<sp/>now<sp/>be<sp/>copied<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>plain<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>match<sp/>result<sp/>listener<sp/>that<sp/>stores<sp/>the<sp/>explanation<sp/>in<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StringMatchResultListener<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatchResultListener<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>StringMatchResultListener()<sp/>:<sp/>MatchResultListener(&amp;ss_)<sp/>{}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>explanation<sp/>accumulated<sp/>so<sp/>far.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>std::string<sp/>str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss_.str();<sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>explanation<sp/>accumulated<sp/>so<sp/>far.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>{<sp/>ss_.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss_;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>StringMatchResultListener(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringMatchResultListener&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>StringMatchResultListener&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringMatchResultListener&amp;)<sp/>=</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">};</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Anything<sp/>inside<sp/>the<sp/>&apos;internal&apos;<sp/>namespace<sp/>IS<sp/>INTERNAL<sp/>IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>IN<sp/>USER<sp/>CODE!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>MatcherCastImpl<sp/>class<sp/>template<sp/>is<sp/>a<sp/>helper<sp/>for<sp/>implementing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MatcherCast().<sp/><sp/>We<sp/>need<sp/>this<sp/>helper<sp/>in<sp/>order<sp/>to<sp/>partially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialize<sp/>the<sp/>implementation<sp/>of<sp/>MatcherCast()<sp/>(C++<sp/>allows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class/struct<sp/>templates<sp/>to<sp/>be<sp/>partially<sp/>specialized,<sp/>but<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>templates.).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>general<sp/>version<sp/>is<sp/>used<sp/>when<sp/>MatcherCast()&apos;s<sp/>argument<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>polymorphic<sp/>matcher<sp/>(i.e.<sp/>something<sp/>that<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matcher<sp/>but<sp/>is<sp/>not<sp/>one<sp/>yet;<sp/>for<sp/>example,<sp/>Eq(value))<sp/>or<sp/>a<sp/>value<sp/>(for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>example,<sp/>&quot;hello&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MatcherCastImpl<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>Cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>polymorphic_matcher_or_value)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M<sp/>can<sp/>be<sp/>a<sp/>polymorphic<sp/>matcher,<sp/>in<sp/>which<sp/>case<sp/>we<sp/>want<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>conversion<sp/>operator<sp/>to<sp/>create<sp/>Matcher&lt;T&gt;.<sp/><sp/>Or<sp/>it<sp/>can<sp/>be<sp/>a<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>should<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>Matcher&lt;T&gt;&apos;s<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>call<sp/>Matcher&lt;T&gt;(polymorphic_matcher_or_value)<sp/>when<sp/>M<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>polymorphic<sp/>matcher<sp/>because<sp/>it&apos;ll<sp/>be<sp/>ambiguous<sp/>if<sp/>T<sp/>has<sp/>an<sp/>implicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor<sp/>from<sp/>M<sp/>(this<sp/>usually<sp/>happens<sp/>when<sp/>T<sp/>has<sp/>an<sp/>implicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor<sp/>from<sp/>any<sp/>type).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>won&apos;t<sp/>work<sp/>to<sp/>unconditionally<sp/>implicit_cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>polymorphic_matcher_or_value<sp/>to<sp/>Matcher&lt;T&gt;<sp/>because<sp/>it<sp/>won&apos;t<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>user-defined<sp/>conversion<sp/>from<sp/>M<sp/>to<sp/>T<sp/>if<sp/>one<sp/>exists<sp/>(assuming<sp/>M<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>value).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CastImpl(polymorphic_matcher_or_value,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;M,<sp/>Matcher&lt;T&gt;&gt;{},</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;M,<sp/>T&gt;{});</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Ignore&gt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>CastImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>polymorphic_matcher_or_value,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type<sp/></highlight><highlight class="comment">/*<sp/>convertible_to_matcher<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;bool,<sp/>Ignore&gt;)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M<sp/>is<sp/>implicitly<sp/>convertible<sp/>to<sp/>Matcher&lt;T&gt;,<sp/>which<sp/>means<sp/>that<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M<sp/>is<sp/>a<sp/>polymorphic<sp/>matcher<sp/>or<sp/>Matcher&lt;T&gt;<sp/>has<sp/>an<sp/>implicit<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>M.<sp/><sp/>In<sp/>both<sp/>cases<sp/>using<sp/>the<sp/>implicit<sp/>conversion<sp/>will<sp/>produce<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>if<sp/>T<sp/>has<sp/>an<sp/>implicit<sp/>constructor<sp/>from<sp/>M,<sp/>it<sp/>won&apos;t<sp/>be<sp/>called<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creating<sp/>Matcher&lt;T&gt;<sp/>would<sp/>require<sp/>a<sp/>chain<sp/>of<sp/>two<sp/>user-defined<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(first<sp/>to<sp/>create<sp/>T<sp/>from<sp/>M<sp/>and<sp/>then<sp/>to<sp/>create<sp/>Matcher&lt;T&gt;<sp/>from<sp/>T).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>polymorphic_matcher_or_value;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>M<sp/>can&apos;t<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>Matcher&lt;T&gt;,<sp/>so<sp/>M<sp/>isn&apos;t<sp/>a<sp/>polymorphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher.<sp/>It&apos;s<sp/>a<sp/>value<sp/>of<sp/>a<sp/>type<sp/>implicitly<sp/>convertible<sp/>to<sp/>T.<sp/>Use<sp/>direct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialization<sp/>to<sp/>create<sp/>a<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>CastImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>value,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type<sp/></highlight><highlight class="comment">/*<sp/>convertible_to_matcher<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type<sp/></highlight><highlight class="comment">/*<sp/>convertible_to_T<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;(ImplicitCast_&lt;T&gt;(value));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>M<sp/>can&apos;t<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>either<sp/>Matcher&lt;T&gt;<sp/>or<sp/>T.<sp/>Attempt<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>polymorphic<sp/>matcher<sp/>Eq(value)<sp/>in<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>first<sp/>attempt<sp/>to<sp/>perform<sp/>an<sp/>implicit<sp/>cast<sp/>on<sp/>the<sp/>value<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>fall<sp/>back<sp/>to<sp/>the<sp/>polymorphic<sp/>Eq()<sp/>matcher<sp/>afterwards<sp/>because<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>latter<sp/>calls<sp/>bool<sp/>operator==(const<sp/>Lhs&amp;<sp/>lhs,<sp/>const<sp/>Rhs&amp;<sp/>rhs)<sp/>in<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>might<sp/>be<sp/>undefined<sp/>even<sp/>when<sp/>Rhs<sp/>is<sp/>implicitly<sp/>convertible<sp/>to<sp/>Lhs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>std::pair&lt;const<sp/>int,<sp/>int&gt;<sp/>vs.<sp/>std::pair&lt;int,<sp/>int&gt;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>define<sp/>this<sp/>method<sp/>inline<sp/>as<sp/>we<sp/>need<sp/>the<sp/>declaration<sp/>of<sp/>Eq().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>CastImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>value,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type<sp/></highlight><highlight class="comment">/*<sp/>convertible_to_matcher<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type<sp/></highlight><highlight class="comment">/*<sp/>convertible_to_T<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">};</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>more<sp/>specialized<sp/>version<sp/>is<sp/>used<sp/>when<sp/>MatcherCast()&apos;s<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>already<sp/>a<sp/>Matcher.<sp/><sp/>This<sp/>only<sp/>compiles<sp/>when<sp/>type<sp/>T<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statically<sp/>converted<sp/>to<sp/>type<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MatcherCastImpl&lt;T,<sp/>Matcher&lt;U&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>Cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;U&gt;&amp;<sp/>source_matcher)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl(source_matcher));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;U&gt;&amp;<sp/>source_matcher)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>source_matcher_(source_matcher)<sp/>{}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>delegate<sp/>the<sp/>matching<sp/>logic<sp/>to<sp/>the<sp/>source<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(T<sp/>x,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FromType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_pointer&lt;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;T&gt;::type&gt;::type&gt;::type;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ToType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_pointer&lt;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;U&gt;::type&gt;::type&gt;::type;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>allow<sp/>implicitly<sp/>converting<sp/>base*/&amp;<sp/>to<sp/>derived*/&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>trigger<sp/>if<sp/>only<sp/>one<sp/>of<sp/>them<sp/>is<sp/>a<sp/>pointer.<sp/>That<sp/>implies<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>regular<sp/>conversion<sp/>and<sp/>not<sp/>a<sp/>down_cast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_pointer&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::value<sp/>!=</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_pointer&lt;typename<sp/>std::remove_reference&lt;U&gt;::type&gt;::value)<sp/>||</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;FromType,<sp/>ToType&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_base_of&lt;FromType,<sp/>ToType&gt;::value,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>implicitly<sp/>convert<sp/>from<sp/>&lt;base&gt;<sp/>to<sp/>&lt;derived&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>cast<sp/>to<sp/>`U`<sp/>explicitly<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>let<sp/>implicit<sp/>conversions<sp/>do<sp/>the<sp/>trick.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">CastType<sp/>=</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;std::is_convertible&lt;T&amp;,<sp/>const<sp/>U&amp;&gt;::value,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;,<sp/>U&gt;::type;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source_matcher_.MatchAndExplain(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">CastType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x),</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;U&gt;<sp/>source_matcher_;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="453"><highlight class="normal">};</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>even<sp/>more<sp/>specialized<sp/>version<sp/>is<sp/>used<sp/>for<sp/>efficiently<sp/>casting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>matcher<sp/>to<sp/>its<sp/>own<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MatcherCastImpl&lt;T,<sp/>Matcher&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>Cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;&amp;<sp/>matcher)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher;<sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal">};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Template<sp/>specialization<sp/>for<sp/>parameterless<sp/>Matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MatcherBaseImpl<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>MatcherBaseImpl()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>operator<sp/>::testing::Matcher&lt;T&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(runtime/explicit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::Matcher&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived::template<sp/>gmock_Impl&lt;T&gt;());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal">};</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Template<sp/>specialization<sp/>for<sp/>Matcher<sp/>with<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MatcherBaseImpl&lt;Derived&lt;Ts...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>constructor<sp/>explicit<sp/>for<sp/>single<sp/>argument<sp/>T<sp/>to<sp/>avoid<sp/>implicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conversions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E<sp/>=<sp/>std::enable_if&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>==<sp/>1&gt;,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MatcherBaseImpl(Ts...<sp/>params)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>params_(std::forward&lt;Ts&gt;(params)...)<sp/>{}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E<sp/>=<sp/>std::enable_if&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>!=<sp/>1&gt;,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E::type&gt;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>MatcherBaseImpl(Ts...<sp/>params)<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>params_(std::forward&lt;Ts&gt;(params)...)<sp/>{}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>operator<sp/>::testing::Matcher&lt;F&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(runtime/explicit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Apply&lt;F&gt;(MakeIndexSequence&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)&gt;{});</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/>std::size_t...<sp/>tuple_ids&gt;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">::testing::Matcher&lt;F&gt;</ref><sp/>Apply(IndexSequence&lt;tuple_ids...&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::Matcher&lt;F&gt;(</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&lt;Ts...&gt;::template<sp/>gmock_Impl&lt;F&gt;(</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;tuple_ids&gt;(params_)...));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;Ts...&gt;<sp/>params_;</highlight></codeline>
<codeline lineno="505"><highlight class="normal">};</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>be<sp/>safe<sp/>and<sp/>clear,<sp/>casting<sp/>between<sp/>different<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types<sp/>is<sp/>done<sp/>explicitly<sp/>via<sp/>MatcherCast&lt;T&gt;(m),<sp/>which<sp/>takes<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matcher<sp/>m<sp/>and<sp/>returns<sp/>a<sp/>Matcher&lt;T&gt;.<sp/><sp/>It<sp/>compiles<sp/>only<sp/>when<sp/>T<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statically<sp/>converted<sp/>to<sp/>the<sp/>argument<sp/>type<sp/>of<sp/>m.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>MatcherCast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::MatcherCastImpl&lt;T,<sp/>M&gt;::Cast(matcher);</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>handles<sp/>polymorphic<sp/>matchers<sp/>and<sp/>values<sp/>only<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>monomorphic<sp/>matchers<sp/>are<sp/>handled<sp/>by<sp/>the<sp/>next<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>SafeMatcherCast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>polymorphic_matcher_or_value)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatcherCast&lt;T&gt;(polymorphic_matcher_or_value);</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>handles<sp/>monomorphic<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>general,<sp/>if<sp/>type<sp/>T<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>type<sp/>U,<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>safely<sp/>convert<sp/>a<sp/>Matcher&lt;U&gt;<sp/>to<sp/>a<sp/>Matcher&lt;T&gt;<sp/>(i.e.<sp/>Matcher<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contravariant):<sp/>just<sp/>keep<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>original<sp/>Matcher&lt;U&gt;,<sp/>convert<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>from<sp/>type<sp/>T<sp/>to<sp/>U,<sp/>and<sp/>then<sp/>pass<sp/>it<sp/>to<sp/>the<sp/>underlying<sp/>Matcher&lt;U&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>only<sp/>exception<sp/>is<sp/>when<sp/>U<sp/>is<sp/>a<sp/>reference<sp/>and<sp/>T<sp/>is<sp/>not,<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>underlying<sp/>Matcher&lt;U&gt;<sp/>may<sp/>be<sp/>interested<sp/>in<sp/>the<sp/>argument&apos;s<sp/>address,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>preserved<sp/>in<sp/>the<sp/>conversion<sp/>from<sp/>T<sp/>to<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>SafeMatcherCast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;U&gt;&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>that<sp/>T<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_convertible&lt;const<sp/>T&amp;,<sp/>const<sp/>U&amp;&gt;::value,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T<sp/>must<sp/>be<sp/>implicitly<sp/>convertible<sp/>to<sp/>U&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>that<sp/>we<sp/>are<sp/>not<sp/>converting<sp/>a<sp/>non-reference<sp/>type<sp/>T<sp/>to<sp/>a<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_reference&lt;T&gt;::value<sp/>||<sp/>!std::is_reference&lt;U&gt;::value,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>non<sp/>reference<sp/>arg<sp/>to<sp/>reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>both<sp/>T<sp/>and<sp/>U<sp/>are<sp/>arithmetic<sp/>types,<sp/>enforce<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>is<sp/>not<sp/>lossy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(T)<sp/>RawT;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(U)<sp/>RawU;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kTIsOther<sp/>=<sp/>GMOCK_KIND_OF_(RawT)<sp/>==<sp/>internal::kOther;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kUIsOther<sp/>=<sp/>GMOCK_KIND_OF_(RawU)<sp/>==<sp/>internal::kOther;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kTIsOther<sp/>||<sp/>kUIsOther<sp/>||</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(internal::LosslessArithmeticConvertible&lt;RawT,<sp/>RawU&gt;::value),</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;conversion<sp/>of<sp/>arithmetic<sp/>types<sp/>must<sp/>be<sp/>lossless&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatcherCast&lt;T&gt;(matcher);</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A&lt;T&gt;()<sp/>returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>value<sp/>of<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="558"><highlight class="normal">Matcher&lt;T&gt;<sp/>A();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Anything<sp/>inside<sp/>the<sp/>&apos;internal&apos;<sp/>namespace<sp/>IS<sp/>INTERNAL<sp/>IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>IN<sp/>USER<sp/>CODE!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>explanation<sp/>is<sp/>not<sp/>empty,<sp/>prints<sp/>it<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintIfNotEmpty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>explanation,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!explanation.empty()<sp/>&amp;&amp;<sp/>os<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>explanation;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>given<sp/>type<sp/>name<sp/>is<sp/>easy<sp/>to<sp/>read<sp/>by<sp/>a<sp/>human.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>to<sp/>decide<sp/>whether<sp/>printing<sp/>the<sp/>type<sp/>of<sp/>a<sp/>value<sp/>might</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>helpful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsReadableTypeName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>type_name)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>consider<sp/>a<sp/>type<sp/>name<sp/>readable<sp/>if<sp/>it&apos;s<sp/>short<sp/>or<sp/>doesn&apos;t<sp/>contain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>template<sp/>or<sp/>function<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(type_name.length()<sp/>&lt;=<sp/>20<sp/>||</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name.find_first_of(</highlight><highlight class="stringliteral">&quot;&lt;(&quot;</highlight><highlight class="normal">)<sp/>==<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>the<sp/>value<sp/>against<sp/>the<sp/>given<sp/>matcher,<sp/>prints<sp/>the<sp/>value<sp/>and<sp/>explains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>match<sp/>result<sp/>to<sp/>the<sp/>listener.<sp/>Returns<sp/>the<sp/>match<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;listener&apos;<sp/>must<sp/>not<sp/>be<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Value<sp/>cannot<sp/>be<sp/>passed<sp/>by<sp/>const<sp/>reference,<sp/>because<sp/>some<sp/>matchers<sp/>take<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-const<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(Value&amp;<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;&amp;<sp/>matcher,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>interested,<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>construct<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inner<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher.Matches(value);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>inner_listener;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>matcher.MatchAndExplain(value,<sp/>&amp;inner_listener);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>UniversalPrint(value,<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>type_name<sp/>=<sp/>GetTypeName&lt;Value&gt;();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsReadableTypeName(type_name))</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener-&gt;stream()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(of<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>PrintIfNotEmpty(inner_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>internal<sp/>helper<sp/>class<sp/>for<sp/>doing<sp/>compile-time<sp/>loop<sp/>on<sp/>a<sp/>tuple&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TuplePrefix<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TuplePrefix&lt;N&gt;::Matches(matcher_tuple,<sp/>value_tuple)<sp/>returns<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>first<sp/>N<sp/>fields<sp/>of<sp/>matcher_tuple<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>N<sp/>fields<sp/>of<sp/>value_tuple,<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueTuple&gt;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Matches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple&amp;<sp/>matcher_tuple,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueTuple&amp;<sp/>value_tuple)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TuplePrefix&lt;N<sp/>-<sp/>1&gt;::Matches(matcher_tuple,<sp/>value_tuple)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;N<sp/>-<sp/>1&gt;(matcher_tuple).Matches(std::get&lt;N<sp/>-<sp/>1&gt;(value_tuple));</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TuplePrefix&lt;N&gt;::ExplainMatchFailuresTo(matchers,<sp/>values,<sp/>os)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>describes<sp/>failures<sp/>in<sp/>matching<sp/>the<sp/>first<sp/>N<sp/>fields<sp/>of<sp/>matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>against<sp/>the<sp/>first<sp/>N<sp/>fields<sp/>of<sp/>values.<sp/><sp/>If<sp/>there<sp/>is<sp/>no<sp/>failure,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>will<sp/>be<sp/>streamed<sp/>to<sp/>os.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueTuple&gt;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExplainMatchFailuresTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple&amp;<sp/>matchers,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueTuple&amp;<sp/>values,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>describes<sp/>failures<sp/>in<sp/>the<sp/>first<sp/>N<sp/>-<sp/>1<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>TuplePrefix&lt;N<sp/>-<sp/>1&gt;::ExplainMatchFailuresTo(matchers,<sp/>values,<sp/>os);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>describes<sp/>the<sp/>failure<sp/>(if<sp/>any)<sp/>in<sp/>the<sp/>(N<sp/>-<sp/>1)-th<sp/>(0-based)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;N<sp/>-<sp/>1,<sp/>MatcherTuple&gt;::type<sp/>matcher<sp/>=</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;N<sp/>-<sp/>1&gt;(matchers);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;N<sp/>-<sp/>1,<sp/>ValueTuple&gt;::type<sp/>Value;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value<sp/>=<sp/>std::get&lt;N<sp/>-<sp/>1&gt;(values);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!matcher.MatchAndExplain(value,<sp/>&amp;listener))<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>N<sp/>-<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;N<sp/>-<sp/>1&gt;(matchers).DescribeTo(os);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>remove<sp/>the<sp/>reference<sp/>in<sp/>type<sp/>Value<sp/>to<sp/>prevent<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>universal<sp/>printer<sp/>from<sp/>printing<sp/>the<sp/>address<sp/>of<sp/>value,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isn&apos;t<sp/>interesting<sp/>to<sp/>the<sp/>user<sp/>most<sp/>of<sp/>the<sp/>time.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher&apos;s<sp/>MatchAndExplain()<sp/>method<sp/>handles<sp/>the<sp/>case<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>address<sp/>is<sp/>interesting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::UniversalPrint(value,<sp/>os);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(listener.str(),<sp/>os);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal">};</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TuplePrefix&lt;0&gt;<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueTuple&gt;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Matches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple&amp;<sp/></highlight><highlight class="comment">/*<sp/>matcher_tuple<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueTuple&amp;<sp/></highlight><highlight class="comment">/*<sp/>value_tuple<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueTuple&gt;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExplainMatchFailuresTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple&amp;<sp/></highlight><highlight class="comment">/*<sp/>matchers<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueTuple&amp;<sp/></highlight><highlight class="comment">/*<sp/>values<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/></highlight><highlight class="comment">/*<sp/>os<sp/>*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="673"><highlight class="normal">};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TupleMatches(matcher_tuple,<sp/>value_tuple)<sp/>returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>matchers<sp/>in<sp/>matcher_tuple<sp/>match<sp/>the<sp/>corresponding<sp/>fields<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value_tuple.<sp/><sp/>It<sp/>is<sp/>a<sp/>compiler<sp/>error<sp/>if<sp/>matcher_tuple<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value_tuple<sp/>have<sp/>different<sp/>number<sp/>of<sp/>fields<sp/>or<sp/>incompatible<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueTuple&gt;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TupleMatches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple&amp;<sp/>matcher_tuple,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueTuple&amp;<sp/>value_tuple)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>matcher_tuple<sp/>and<sp/>value_tuple<sp/>have<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::tuple_size&lt;MatcherTuple&gt;::value<sp/>==</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple_size&lt;ValueTuple&gt;::value,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;matcher<sp/>and<sp/>value<sp/>have<sp/>different<sp/>numbers<sp/>of<sp/>fields&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TuplePrefix&lt;std::tuple_size&lt;ValueTuple&gt;::value&gt;::Matches(matcher_tuple,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_tuple);</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Describes<sp/>failures<sp/>in<sp/>matching<sp/>matchers<sp/>against<sp/>values.<sp/><sp/>If<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>no<sp/>failure,<sp/>nothing<sp/>will<sp/>be<sp/>streamed<sp/>to<sp/>os.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueTuple&gt;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExplainMatchFailureTupleTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple&amp;<sp/>matchers,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueTuple&amp;<sp/>values,<sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>TuplePrefix&lt;std::tuple_size&lt;MatcherTuple&gt;::value&gt;::ExplainMatchFailuresTo(</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers,<sp/>values,<sp/>os);</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TransformTupleValues<sp/>and<sp/>its<sp/>helper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TransformTupleValuesHelper<sp/>hides<sp/>the<sp/>internal<sp/>machinery<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TransformTupleValues<sp/>uses<sp/>to<sp/>implement<sp/>a<sp/>tuple<sp/>traversal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutIter&gt;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TransformTupleValuesHelper<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple_size&lt;Tuple&gt;<sp/>TupleSize;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>member<sp/>of<sp/>tuple<sp/>&apos;t&apos;,<sp/>taken<sp/>in<sp/>order,<sp/>evaluates<sp/>&apos;*out++<sp/>=<sp/>f(t)&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>final<sp/>value<sp/>of<sp/>&apos;out&apos;<sp/>in<sp/>case<sp/>the<sp/>caller<sp/>needs<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>OutIter<sp/>Run(Func<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>t,<sp/>OutIter<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IterateOverTuple&lt;Tuple,<sp/>TupleSize::value&gt;()(f,<sp/>t,<sp/>out);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tup,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kRemainingSize&gt;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IterateOverTuple<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>OutIter<sp/>operator()(Func<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tup&amp;<sp/>t,<sp/>OutIter<sp/>out)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>f(::std::get&lt;TupleSize::value<sp/>-<sp/>kRemainingSize&gt;(t));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IterateOverTuple&lt;Tup,<sp/>kRemainingSize<sp/>-<sp/>1&gt;()(f,<sp/>t,<sp/>out);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tup&gt;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IterateOverTuple&lt;Tup,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>OutIter<sp/>operator()(Func<sp/></highlight><highlight class="comment">/*<sp/>f<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tup&amp;<sp/></highlight><highlight class="comment">/*<sp/>t<sp/>*/</highlight><highlight class="normal">,<sp/>OutIter<sp/>out)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="731"><highlight class="normal">};</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Successively<sp/>invokes<sp/>&apos;f(element)&apos;<sp/>on<sp/>each<sp/>element<sp/>of<sp/>the<sp/>tuple<sp/>&apos;t&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appending<sp/>each<sp/>result<sp/>to<sp/>the<sp/>&apos;out&apos;<sp/>iterator.<sp/>Returns<sp/>the<sp/>final<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>&apos;out&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutIter&gt;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">OutIter<sp/>TransformTupleValues(Func<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>t,<sp/>OutIter<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TransformTupleValuesHelper&lt;Tuple,<sp/>Func,<sp/>OutIter&gt;::Run(f,<sp/>t,<sp/>out);</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>_,<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>value<sp/>of<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type.<sp/><sp/>This<sp/>is<sp/>a<sp/>polymorphic<sp/>matcher,<sp/>so<sp/>we<sp/>need<sp/>a<sp/>template<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conversion<sp/>operator<sp/>to<sp/>make<sp/>it<sp/>appearing<sp/>as<sp/>a<sp/>Matcher&lt;T&gt;<sp/>for<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AnythingMatcher<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">is_gtest_matcher<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/></highlight><highlight class="comment">/*<sp/>x<sp/>*/</highlight><highlight class="normal">,<sp/>std::ostream*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>mostly<sp/>for<sp/>completeness&apos;<sp/>sake,<sp/>as<sp/>it&apos;s<sp/>not<sp/>very<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>write<sp/>Not(A&lt;bool&gt;()).<sp/><sp/>However<sp/>we<sp/>cannot<sp/>completely<sp/>rule<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>such<sp/>a<sp/>possibility,<sp/>and<sp/>it<sp/>doesn&apos;t<sp/>hurt<sp/>to<sp/>be<sp/>prepared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal">};</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>IsNull()<sp/>matcher,<sp/>which<sp/>matches<sp/>any<sp/>raw<sp/>or<sp/>smart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer<sp/>that<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IsNullMatcher<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er&gt;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Pointer&amp;<sp/>p,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>NULL&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NULL&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal">};</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>NotNull()<sp/>matcher,<sp/>which<sp/>matches<sp/>any<sp/>raw<sp/>or<sp/>smart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer<sp/>that<sp/>is<sp/>not<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NotNullMatcher<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er&gt;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Pointer&amp;<sp/>p,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NULL&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>NULL&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal">};</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ref(variable)<sp/>matches<sp/>any<sp/>argument<sp/>that<sp/>is<sp/>a<sp/>reference<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;variable&apos;.<sp/><sp/>This<sp/>matcher<sp/>is<sp/>polymorphic<sp/>as<sp/>it<sp/>can<sp/>match<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>super<sp/>type<sp/>of<sp/>the<sp/>type<sp/>of<sp/>&apos;variable&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>RefMatcher<sp/>template<sp/>class<sp/>implements<sp/>Ref(variable).<sp/><sp/>It<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>be<sp/>instantiated<sp/>with<sp/>a<sp/>reference<sp/>type.<sp/><sp/>This<sp/>prevents<sp/>a<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>mistakenly<sp/>using<sp/>Ref(x)<sp/>to<sp/>match<sp/>a<sp/>non-reference<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument.<sp/><sp/>For<sp/>example,<sp/>the<sp/>following<sp/>will<sp/>righteously<sp/>cause<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler<sp/>error:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>int<sp/>n;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Matcher&lt;int&gt;<sp/>m1<sp/>=<sp/>Ref(n);<sp/><sp/><sp/>//<sp/>This<sp/>won&apos;t<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m2<sp/>=<sp/>Ref(n);<sp/><sp/>//<sp/>This<sp/>will<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RefMatcher;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RefMatcher&lt;T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>is<sp/>a<sp/>generic<sp/>framework<sp/>and<sp/>thus<sp/>needs<sp/>to<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mocking<sp/>any<sp/>function<sp/>types,<sp/>including<sp/>those<sp/>that<sp/>take<sp/>non-const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reference<sp/>arguments.<sp/><sp/>Therefore<sp/>the<sp/>template<sp/>parameter<sp/>T<sp/>(and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Super<sp/>below)<sp/>can<sp/>be<sp/>instantiated<sp/>to<sp/>either<sp/>a<sp/>const<sp/>type<sp/>or<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-const<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RefMatcher()<sp/>takes<sp/>a<sp/>T&amp;<sp/>instead<sp/>of<sp/>const<sp/>T&amp;,<sp/>as<sp/>we<sp/>want<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compiler<sp/>to<sp/>catch<sp/>using<sp/>Ref(const_value)<sp/>as<sp/>a<sp/>matcher<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>RefMatcher(T&amp;<sp/>x)<sp/>:<sp/>object_(x)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Super&gt;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Super&amp;&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>passing<sp/>object_<sp/>(type<sp/>T&amp;)<sp/>to<sp/>Impl(),<sp/>which<sp/>expects<sp/>a<sp/>Super&amp;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>make<sp/>sure<sp/>that<sp/>Super<sp/>is<sp/>a<sp/>super<sp/>type<sp/>of<sp/>T.<sp/><sp/>In<sp/>particular,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>catches<sp/>using<sp/>Ref(const_value)<sp/>as<sp/>a<sp/>matcher<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-const<sp/>reference,<sp/>as<sp/>you<sp/>cannot<sp/>implicitly<sp/>convert<sp/>a<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reference<sp/>to<sp/>a<sp/>non-const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;Super&gt;(object_));</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Super&gt;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Super&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(Super&amp;<sp/>x)<sp/>:<sp/>object_(x)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MatchAndExplain()<sp/>takes<sp/>a<sp/>Super&amp;<sp/>(as<sp/>opposed<sp/>to<sp/>const<sp/>Super&amp;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>order<sp/>to<sp/>match<sp/>the<sp/>interface<sp/>MatcherInterface&lt;Super&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Super&amp;<sp/>x,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>located<sp/>@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;x);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;x<sp/>==<sp/>&amp;object_;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;references<sp/>the<sp/>variable<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrinter&lt;Super&amp;&gt;::Print(object_,<sp/>os);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>reference<sp/>the<sp/>variable<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrinter&lt;Super&amp;&gt;::Print(object_,<sp/>os);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Super&amp;<sp/>object_;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>T&amp;<sp/>object_;</highlight></codeline>
<codeline lineno="858"><highlight class="normal">};</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Polymorphic<sp/>helper<sp/>functions<sp/>for<sp/>narrow<sp/>and<sp/>wide<sp/>string<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CaseInsensitiveCStringEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::CaseInsensitiveCStringEquals(lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CaseInsensitiveCStringEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>lhs,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::CaseInsensitiveWideCStringEquals(lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>String<sp/>comparison<sp/>for<sp/>narrow<sp/>or<sp/>wide<sp/>strings<sp/>that<sp/>can<sp/>have<sp/>embedded<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CaseInsensitiveStringEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>the<sp/>heads<sp/>equal?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!CaseInsensitiveCStringEquals(s1.c_str(),<sp/>s2.c_str()))<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>equal<sp/>heads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType::value_type<sp/>nul<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>s1.find(nul),<sp/>i2<sp/>=<sp/>s2.find(nul);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>we<sp/>at<sp/>the<sp/>end<sp/>of<sp/>either<sp/>s1<sp/>or<sp/>s2?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1<sp/>==<sp/>StringType::npos<sp/>||<sp/>i2<sp/>==<sp/>StringType::npos)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i1<sp/>==<sp/>i2;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>the<sp/>tails<sp/>equal?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CaseInsensitiveStringEquals(s1.substr(i1<sp/>+<sp/>1),<sp/>s2.substr(i2<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>String<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>equality-based<sp/>string<sp/>matchers<sp/>like<sp/>StrEq,<sp/>StrCaseNe,<sp/>and<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StrEqualityMatcher<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>StrEqualityMatcher(StringType<sp/>str,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expect_eq,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>case_sensitive)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>string_(std::move(str)),</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect_eq_(expect_eq),</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case_sensitive_(case_sensitive)<sp/>{}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringView&amp;<sp/>s,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>fail<sp/>to<sp/>compile<sp/>if<sp/>StringView<sp/>is<sp/>used<sp/>with<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>str<sp/>=<sp/>std::string(s);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplain(str,<sp/>listener);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accepts<sp/>pointer<sp/>types,<sp/>particularly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(CharType*<sp/>s,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!expect_eq_;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplain(StringType(s),<sp/>listener);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>anything<sp/>that<sp/>can<sp/>convert<sp/>to<sp/>StringType.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>template,<sp/>not<sp/>just<sp/>a<sp/>plain<sp/>function<sp/>with<sp/>const<sp/>StringType&amp;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>StringView<sp/>has<sp/>some<sp/>interfering<sp/>non-explicit<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcheeStringType&gt;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcheeStringType&amp;<sp/>s,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType<sp/>s2(s);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>eq<sp/>=<sp/>case_sensitive_<sp/>?<sp/>s2<sp/>==<sp/>string_</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>CaseInsensitiveStringEquals(s2,<sp/>string_);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expect_eq_<sp/>==<sp/>eq;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>DescribeToHelper(expect_eq_,<sp/>os);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>DescribeToHelper(!expect_eq_,<sp/>os);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeToHelper(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expect_eq,<sp/>::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>(expect_eq<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;equal<sp/>to<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!case_sensitive_)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(ignoring<sp/>case)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(string_,<sp/>os);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType<sp/>string_;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expect_eq_;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>case_sensitive_;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">};</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>HasSubstr(substring)<sp/>matcher,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>Matcher&lt;T&gt;<sp/>as<sp/>long<sp/>as<sp/>T<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">HasSubstrMatcher<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>HasSubstrMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>substring)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>substring_(substring)<sp/>{}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringView&amp;<sp/>s,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>fail<sp/>to<sp/>compile<sp/>if<sp/>StringView<sp/>is<sp/>used<sp/>with<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>str<sp/>=<sp/>std::string(s);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplain(str,<sp/>listener);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accepts<sp/>pointer<sp/>types,<sp/>particularly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(CharType*<sp/>s,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>MatchAndExplain(StringType(s),<sp/>listener);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>anything<sp/>that<sp/>can<sp/>convert<sp/>to<sp/>StringType.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>template,<sp/>not<sp/>just<sp/>a<sp/>plain<sp/>function<sp/>with<sp/>const<sp/>StringType&amp;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>StringView<sp/>has<sp/>some<sp/>interfering<sp/>non-explicit<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcheeStringType&gt;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcheeStringType&amp;<sp/>s,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StringType(s).find(substring_)<sp/>!=<sp/>StringType::npos;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>this<sp/>matcher<sp/>matches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>substring<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(substring_,<sp/>os);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>no<sp/>substring<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(substring_,<sp/>os);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType<sp/>substring_;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>StartsWith(substring)<sp/>matcher,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>Matcher&lt;T&gt;<sp/>as<sp/>long<sp/>as<sp/>T<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StartsWithMatcher<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>StartsWithMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>prefix)<sp/>:<sp/>prefix_(prefix)<sp/>{}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringView&amp;<sp/>s,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>fail<sp/>to<sp/>compile<sp/>if<sp/>StringView<sp/>is<sp/>used<sp/>with<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>str<sp/>=<sp/>std::string(s);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplain(str,<sp/>listener);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accepts<sp/>pointer<sp/>types,<sp/>particularly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(CharType*<sp/>s,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>MatchAndExplain(StringType(s),<sp/>listener);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>anything<sp/>that<sp/>can<sp/>convert<sp/>to<sp/>StringType.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>template,<sp/>not<sp/>just<sp/>a<sp/>plain<sp/>function<sp/>with<sp/>const<sp/>StringType&amp;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>StringView<sp/>has<sp/>some<sp/>interfering<sp/>non-explicit<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcheeStringType&gt;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcheeStringType&amp;<sp/>s,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>s2(s);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s2.length()<sp/>&gt;=<sp/>prefix_.length()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2.substr(0,<sp/>prefix_.length())<sp/>==<sp/>prefix_;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;starts<sp/>with<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(prefix_,<sp/>os);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>start<sp/>with<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(prefix_,<sp/>os);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType<sp/>prefix_;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>EndsWith(substring)<sp/>matcher,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>Matcher&lt;T&gt;<sp/>as<sp/>long<sp/>as<sp/>T<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EndsWithMatcher<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>EndsWithMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>suffix)<sp/>:<sp/>suffix_(suffix)<sp/>{}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringView&amp;<sp/>s,</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>fail<sp/>to<sp/>compile<sp/>if<sp/>StringView<sp/>is<sp/>used<sp/>with<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>str<sp/>=<sp/>std::string(s);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplain(str,<sp/>listener);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accepts<sp/>pointer<sp/>types,<sp/>particularly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(CharType*<sp/>s,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>MatchAndExplain(StringType(s),<sp/>listener);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>anything<sp/>that<sp/>can<sp/>convert<sp/>to<sp/>StringType.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>template,<sp/>not<sp/>just<sp/>a<sp/>plain<sp/>function<sp/>with<sp/>const<sp/>StringType&amp;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>StringView<sp/>has<sp/>some<sp/>interfering<sp/>non-explicit<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcheeStringType&gt;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcheeStringType&amp;<sp/>s,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>s2(s);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s2.length()<sp/>&gt;=<sp/>suffix_.length()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2.substr(s2.length()<sp/>-<sp/>suffix_.length())<sp/>==<sp/>suffix_;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ends<sp/>with<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(suffix_,<sp/>os);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>end<sp/>with<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(suffix_,<sp/>os);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType<sp/>suffix_;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>WhenBase64Unescaped(matcher)<sp/>matcher,<sp/>which<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>as<sp/>a<sp/>Matcher&lt;T&gt;<sp/>as<sp/>long<sp/>as<sp/>T<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WhenBase64UnescapedMatcher<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">is_gtest_matcher<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>WhenBase64UnescapedMatcher(</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>std::string&amp;&gt;&amp;<sp/>internal_matcher)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>internal_matcher_(internal_matcher)<sp/>{}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>anything<sp/>that<sp/>can<sp/>convert<sp/>to<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcheeStringType&gt;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcheeStringType&amp;<sp/>s,</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s2(s);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>(needed<sp/>for<sp/>working<sp/>with<sp/>string_view).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>unescaped;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!internal::Base64Unescape(s2,<sp/>&amp;unescaped))<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>a<sp/>valid<sp/>base64<sp/>escaped<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(unescaped,<sp/>internal_matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;matches<sp/>after<sp/>Base64Unescape<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>match<sp/>after<sp/>Base64Unescape<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>std::string&amp;&gt;<sp/>internal_matcher_;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>matcher<sp/>that<sp/>compares<sp/>the<sp/>two<sp/>fields<sp/>of<sp/>a<sp/>2-tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>one<sp/>of<sp/>the<sp/>==,<sp/>&lt;=,<sp/>&lt;,<sp/>etc,<sp/>operators.<sp/><sp/>The<sp/>two<sp/>fields<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compared<sp/>don&apos;t<sp/>have<sp/>to<sp/>have<sp/>the<sp/>same<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matcher<sp/>defined<sp/>here<sp/>is<sp/>polymorphic<sp/>(for<sp/>example,<sp/>Eq()<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>match<sp/>a<sp/>std::tuple&lt;int,<sp/>short&gt;,<sp/>a<sp/>std::tuple&lt;const<sp/>long&amp;,<sp/>double&gt;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>etc).<sp/><sp/>Therefore<sp/>we<sp/>use<sp/>a<sp/>template<sp/>type<sp/>conversion<sp/>operator<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op&gt;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PairMatchBase<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;::std::tuple&lt;T1,<sp/>T2&gt;&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;::std::tuple&lt;T1,<sp/>T2&gt;&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>::std::tuple&lt;T1,<sp/>T2&gt;&amp;&gt;);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>::std::tuple&lt;T1,<sp/>T2&gt;&amp;&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>::std::tuple&lt;T1,<sp/>T2&gt;&amp;&gt;);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>static<sp/>::std::ostream&amp;<sp/>GetDesc(::std::ostream&amp;<sp/>os)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>D::Desc();</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Tuple&gt;<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Tuple<sp/>args,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Op()(::std::get&lt;0&gt;(args),<sp/>::std::get&lt;1&gt;(args));</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;are<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetDesc;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;aren&apos;t<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetDesc;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Eq2Matcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>PairMatchBase&lt;Eq2Matcher,<sp/>std::equal_to&lt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Desc()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;an<sp/>equal<sp/>pair&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ne2Matcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>PairMatchBase&lt;Ne2Matcher,<sp/>std::not_equal_to&lt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Desc()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;an<sp/>unequal<sp/>pair&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Lt2Matcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>PairMatchBase&lt;Lt2Matcher,<sp/>std::less&lt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Desc()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&lt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Gt2Matcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>PairMatchBase&lt;Gt2Matcher,<sp/>std::greater&lt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Desc()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&gt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Le2Matcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>PairMatchBase&lt;Le2Matcher,<sp/>std::less_equal&lt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Desc()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&lt;=<sp/>the<sp/>second&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ge2Matcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>PairMatchBase&lt;Ge2Matcher,<sp/>std::greater_equal&lt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Desc()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&gt;=<sp/>the<sp/>second&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Not(...)<sp/>matcher<sp/>for<sp/>a<sp/>particular<sp/>argument<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>not<sp/>nest<sp/>it<sp/>inside<sp/>the<sp/>NotMatcher<sp/>class<sp/>template,<sp/>as<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>prevent<sp/>different<sp/>instantiations<sp/>of<sp/>NotMatcher<sp/>from<sp/>sharing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>NotMatcherImpl&lt;T&gt;<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NotMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;const<sp/>T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>NotMatcherImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;&amp;<sp/>matcher)<sp/>:<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!matcher_.MatchAndExplain(x,<sp/>listener);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Not(m)<sp/>matcher,<sp/>which<sp/>matches<sp/>a<sp/>value<sp/>that<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>match<sp/>matcher<sp/>m.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NotMatcher<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>NotMatcher(InnerMatcher<sp/>matcher)<sp/>:<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>type<sp/>conversion<sp/>operator<sp/>allows<sp/>Not(m)<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>match<sp/>any<sp/>type<sp/>m<sp/>can<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotMatcherImpl&lt;T&gt;(SafeMatcherCast&lt;T&gt;(matcher_)));</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>InnerMatcher<sp/>matcher_;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>AllOf(m1,<sp/>m2)<sp/>matcher<sp/>for<sp/>a<sp/>particular<sp/>argument<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T.<sp/>We<sp/>do<sp/>not<sp/>nest<sp/>it<sp/>inside<sp/>the<sp/>BothOfMatcher<sp/>class<sp/>template,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>will<sp/>prevent<sp/>different<sp/>instantiations<sp/>of<sp/>BothOfMatcher<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sharing<sp/>the<sp/>same<sp/>BothOfMatcherImpl&lt;T&gt;<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AllOfMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;const<sp/>T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>AllOfMatcherImpl(std::vector&lt;Matcher&lt;T&gt;&gt;<sp/>matchers)</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matchers_(std::move(matchers))<sp/>{}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matchers_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>and<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers_[i].DescribeTo(os);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matchers_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>or<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers_[i].DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>either<sp/>matcher1_<sp/>or<sp/>matcher2_<sp/>doesn&apos;t<sp/>match<sp/>x,<sp/>we<sp/>only<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>explain<sp/>why<sp/>one<sp/>of<sp/>them<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>all_match_result;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matchers_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>slistener;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchers_[i].MatchAndExplain(x,<sp/>&amp;slistener))<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_match_result.empty())<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_match_result<sp/>=<sp/>slistener.str();</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/>slistener.str();</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result.empty())<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_match_result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_match_result<sp/>+=<sp/>result;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>slistener.str();</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>we<sp/>need<sp/>to<sp/>explain<sp/>why<sp/>*both*<sp/>of<sp/>them<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>all_match_result;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Matcher&lt;T&gt;&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VariadicMatcher<sp/>is<sp/>used<sp/>for<sp/>the<sp/>variadic<sp/>implementation<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AllOf(m_1,<sp/>m_2,<sp/>...)<sp/>and<sp/>AnyOf(m_1,<sp/>m_2,<sp/>...).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CombiningMatcher&lt;T&gt;<sp/>is<sp/>used<sp/>to<sp/>recursively<sp/>combine<sp/>the<sp/>provided<sp/>matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(of<sp/>type<sp/>Args...).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CombiningMatcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VariadicMatcher<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>VariadicMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>matchers)<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matchers_(matchers...)<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>at<sp/>least<sp/>one<sp/>matcher.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>VariadicMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VariadicMatcher&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>VariadicMatcher&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VariadicMatcher&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>type<sp/>conversion<sp/>operator<sp/>allows<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>VariadicMatcher&lt;Matcher1,<sp/>Matcher2...&gt;<sp/>object<sp/>to<sp/>match<sp/>any<sp/>type<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>of<sp/>the<sp/>provided<sp/>matchers<sp/>(Matcher1,<sp/>Matcher2,<sp/>...)<sp/>can<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Matcher&lt;T&gt;&gt;<sp/>values;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>CreateVariadicMatcher&lt;T&gt;(&amp;values,<sp/>std::integral_constant&lt;size_t,<sp/>0&gt;());</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CombiningMatcher&lt;T&gt;(std::move(values)));</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateVariadicMatcher(std::vector&lt;Matcher&lt;T&gt;&gt;*<sp/>values,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;size_t,<sp/>I&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>values-&gt;push_back(SafeMatcherCast&lt;T&gt;(std::get&lt;I&gt;(matchers_)));</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>CreateVariadicMatcher&lt;T&gt;(values,<sp/>std::integral_constant&lt;size_t,<sp/>I<sp/>+<sp/>1&gt;());</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateVariadicMatcher(</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Matcher&lt;T&gt;&gt;*,</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>std::tuple&lt;Args...&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">AllOfMatcher<sp/>=<sp/>VariadicMatcher&lt;AllOfMatcherImpl,<sp/>Args...&gt;;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>AnyOf(m1,<sp/>m2)<sp/>matcher<sp/>for<sp/>a<sp/>particular<sp/>argument<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T.<sp/><sp/>We<sp/>do<sp/>not<sp/>nest<sp/>it<sp/>inside<sp/>the<sp/>AnyOfMatcher<sp/>class<sp/>template,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>will<sp/>prevent<sp/>different<sp/>instantiations<sp/>of<sp/>AnyOfMatcher<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sharing<sp/>the<sp/>same<sp/>EitherOfMatcherImpl&lt;T&gt;<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AnyOfMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;const<sp/>T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>AnyOfMatcherImpl(std::vector&lt;Matcher&lt;T&gt;&gt;<sp/>matchers)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matchers_(std::move(matchers))<sp/>{}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matchers_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>or<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers_[i].DescribeTo(os);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matchers_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>and<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers_[i].DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>no_match_result;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>either<sp/>matcher1_<sp/>or<sp/>matcher2_<sp/>matches<sp/>x,<sp/>we<sp/>just<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explain<sp/>why<sp/>*one*<sp/>of<sp/>them<sp/>matches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matchers_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>slistener;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchers_[i].MatchAndExplain(x,<sp/>&amp;slistener))<sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>slistener.str();</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(no_match_result.empty())<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no_match_result<sp/>=<sp/>slistener.str();</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/>slistener.str();</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result.empty())<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no_match_result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no_match_result<sp/>+=<sp/>result;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>we<sp/>need<sp/>to<sp/>explain<sp/>why<sp/>*both*<sp/>of<sp/>them<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>no_match_result;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Matcher&lt;T&gt;&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AnyOfMatcher<sp/>is<sp/>used<sp/>for<sp/>the<sp/>variadic<sp/>implementation<sp/>of<sp/>AnyOf(m_1,<sp/>m_2,<sp/>...).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">AnyOfMatcher<sp/>=<sp/>VariadicMatcher&lt;AnyOfMatcherImpl,<sp/>Args...&gt;;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ConditionalMatcher<sp/>is<sp/>the<sp/>implementation<sp/>of<sp/>Conditional(cond,<sp/>m1,<sp/>m2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTrue,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherFalse&gt;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConditionalMatcher<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>ConditionalMatcher(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition,<sp/>MatcherTrue<sp/>matcher_true,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatcherFalse<sp/>matcher_false)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>condition_(condition),</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_true_(std::move(matcher_true)),</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_false_(std::move(matcher_false))<sp/>{}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(runtime/explicit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>condition_<sp/>?<sp/>SafeMatcherCast&lt;T&gt;(matcher_true_)</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SafeMatcherCast&lt;T&gt;(matcher_false_);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition_;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>MatcherTrue<sp/>matcher_true_;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>MatcherFalse<sp/>matcher_false_;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wrapper<sp/>for<sp/>implementation<sp/>of<sp/>Any/AllOfArray().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MatcherImpl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SomeOfArrayMatcher<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>the<sp/>matcher<sp/>from<sp/>a<sp/>sequence<sp/>of<sp/>element<sp/>values<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>SomeOfArrayMatcher(Iter<sp/>first,<sp/>Iter<sp/>last)<sp/>:<sp/>matchers_(first,<sp/>last)<sp/>{}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;U&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RawU<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;U&gt;::type;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Matcher&lt;RawU&gt;&gt;<sp/>matchers;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>matchers.reserve(matchers_.size());</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>matcher<sp/>:<sp/>matchers_)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers.push_back(MatcherCast&lt;RawU&gt;(matcher));</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;U&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatcherImpl&lt;RawU&gt;(std::move(matchers)));</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>const<sp/>::std::vector&lt;T&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">AllOfArrayMatcher<sp/>=<sp/>SomeOfArrayMatcher&lt;AllOfMatcherImpl,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">AnyOfArrayMatcher<sp/>=<sp/>SomeOfArrayMatcher&lt;AnyOfMatcherImpl,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>implementing<sp/>Truly(pred),<sp/>which<sp/>turns<sp/>a<sp/>predicate<sp/>into<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TrulyMatcher<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TrulyMatcher(Predicate<sp/>pred)<sp/>:<sp/>predicate_(pred)<sp/>{}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>template<sp/>allows<sp/>Truly(pred)<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>type<sp/>T<sp/>where<sp/>T<sp/>is<sp/>the<sp/>argument<sp/>type<sp/>of<sp/>predicate<sp/>&apos;pred&apos;.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>argument<sp/>is<sp/>passed<sp/>by<sp/>reference<sp/>as<sp/>the<sp/>predicate<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interested<sp/>in<sp/>the<sp/>address<sp/>of<sp/>the<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(T&amp;<sp/>x,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Without<sp/>the<sp/>if-statement,<sp/>MSVC<sp/>sometimes<sp/>warns<sp/>about<sp/>converting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>value<sp/>to<sp/>bool<sp/>(warning<sp/>4800).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>write<sp/>&apos;return<sp/>!!predicate_(x);&apos;<sp/>as<sp/>that<sp/>doesn&apos;t<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>predicate_(x)<sp/>returns<sp/>a<sp/>class<sp/>convertible<sp/>to<sp/>bool<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>having<sp/>no<sp/>operator!().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predicate_(x))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;didn&apos;t<sp/>satisfy<sp/>the<sp/>given<sp/>predicate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;satisfies<sp/>the<sp/>given<sp/>predicate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>satisfy<sp/>the<sp/>given<sp/>predicate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>Predicate<sp/>predicate_;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>implementing<sp/>Matches(matcher),<sp/>which<sp/>turns<sp/>a<sp/>matcher<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MatcherAsPredicate<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MatcherAsPredicate(M<sp/>matcher)<sp/>:<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>operator()<sp/>allows<sp/>Matches(m)<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>predicate<sp/>on<sp/>type<sp/>T<sp/>where<sp/>m<sp/>is<sp/>a<sp/>matcher<sp/>on<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>argument<sp/>x<sp/>is<sp/>passed<sp/>by<sp/>reference<sp/>instead<sp/>of<sp/>by<sp/>value,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>matcher<sp/>may<sp/>be<sp/>interested<sp/>in<sp/>its<sp/>address<sp/>(e.g.<sp/>as<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matches(Ref(n))(x)).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>let<sp/>matcher_<sp/>commit<sp/>to<sp/>a<sp/>particular<sp/>type<sp/>here<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>MatcherAsPredicate<sp/>object<sp/>was<sp/>constructed.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allows<sp/>us<sp/>to<sp/>write<sp/>Matches(m)<sp/>where<sp/>m<sp/>is<sp/>a<sp/>polymorphic<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>Eq(5)).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>write<sp/>Matcher&lt;T&gt;(matcher_).Matches(x)<sp/>here,<sp/>it<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compile<sp/>when<sp/>matcher_<sp/>has<sp/>type<sp/>Matcher&lt;const<sp/>T&amp;&gt;;<sp/>if<sp/>we<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Matcher&lt;const<sp/>T&amp;&gt;(matcher_).Matches(x)<sp/>here,<sp/>it<sp/>won&apos;t<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>matcher_<sp/>has<sp/>type<sp/>Matcher&lt;T&gt;;<sp/>if<sp/>we<sp/>just<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_.Matches(x),<sp/>it<sp/>won&apos;t<sp/>compile<sp/>when<sp/>matcher_<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>polymorphic,<sp/>e.g.<sp/>Eq(5).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MatcherCast&lt;const<sp/>T&amp;&gt;()<sp/>is<sp/>necessary<sp/>for<sp/>making<sp/>the<sp/>code<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>all<sp/>of<sp/>the<sp/>above<sp/>situations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatcherCast&lt;const<sp/>T&amp;&gt;(matcher_).Matches(x);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>M<sp/>matcher_;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>implementing<sp/>ASSERT_THAT()<sp/>and<sp/>EXPECT_THAT().<sp/><sp/>The<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>M<sp/>must<sp/>be<sp/>a<sp/>type<sp/>that<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>a<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PredicateFormatterFromMatcher<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>PredicateFormatterFromMatcher(M<sp/>m)<sp/>:<sp/>matcher_(std::move(m))<sp/>{}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>()<sp/>operator<sp/>allows<sp/>a<sp/>PredicateFormatterFromMatcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>to<sp/>act<sp/>as<sp/>a<sp/>predicate-formatter<sp/>suitable<sp/>for<sp/>using<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test&apos;s<sp/>EXPECT_PRED_FORMAT1()<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value_text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>convert<sp/>matcher_<sp/>to<sp/>a<sp/>Matcher&lt;const<sp/>T&amp;&gt;<sp/>*now*<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>PredicateFormatterFromMatcher<sp/>object<sp/>was<sp/>constructed,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>matcher_<sp/>may<sp/>be<sp/>polymorphic<sp/>(e.g.<sp/>NotNull())<sp/>and<sp/>we<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>know<sp/>which<sp/>type<sp/>to<sp/>instantiate<sp/>it<sp/>to<sp/>until<sp/>we<sp/>actually<sp/>see<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>x<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>write<sp/>SafeMatcherCast&lt;const<sp/>T&amp;&gt;(matcher_)<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Matcher&lt;const<sp/>T&amp;&gt;(matcher_),<sp/>as<sp/>the<sp/>latter<sp/>won&apos;t<sp/>compile<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_<sp/>has<sp/>type<sp/>Matcher&lt;T&gt;<sp/>(e.g.<sp/>An&lt;int&gt;()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>write<sp/>MatcherCast&lt;const<sp/>T&amp;&gt;<sp/>either,<sp/>as<sp/>that<sp/>allows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>potentially<sp/>unsafe<sp/>downcasting<sp/>of<sp/>the<sp/>matcher<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>T&amp;&gt;<sp/>matcher<sp/>=<sp/>SafeMatcherCast&lt;const<sp/>T&amp;&gt;(matcher_);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>expected<sp/>path<sp/>here<sp/>is<sp/>that<sp/>the<sp/>matcher<sp/>should<sp/>match<sp/>(i.e.<sp/>that<sp/>most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tests<sp/>pass)<sp/>so<sp/>optimize<sp/>for<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matcher.Matches(x))<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value_text<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher.DescribeTo(&amp;ss);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rerun<sp/>the<sp/>matcher<sp/>to<sp/>&quot;PrintAndExplain&quot;<sp/>the<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MatchPrintAndExplain(x,<sp/>matcher,<sp/>&amp;listener))<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>The<sp/>matcher<sp/>failed<sp/>on<sp/>the<sp/>initial<sp/>attempt;<sp/>but<sp/>passed<sp/>when<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rerun<sp/>to<sp/>generate<sp/>the<sp/>explanation.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>ss.str();</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M<sp/>matcher_;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>function<sp/>for<sp/>converting<sp/>a<sp/>matcher<sp/>to<sp/>a<sp/>predicate-formatter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>without<sp/>the<sp/>user<sp/>needing<sp/>to<sp/>explicitly<sp/>write<sp/>the<sp/>type.<sp/><sp/>This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>implementing<sp/>ASSERT_THAT()<sp/>and<sp/>EXPECT_THAT().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>detail:<sp/>&apos;matcher&apos;<sp/>is<sp/>received<sp/>by-value<sp/>to<sp/>force<sp/>decaying.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PredicateFormatterFromMatcher&lt;M&gt;<sp/>MakePredicateFormatterFromMatcher(</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PredicateFormatterFromMatcher&lt;M&gt;(std::move(matcher));</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>IsNan()<sp/>matcher,<sp/>which<sp/>matches<sp/>any<sp/>floating<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>that<sp/>is<sp/>Nan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IsNanMatcher<sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FloatType&gt;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatType&amp;<sp/>f,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(::std::isnan)(f);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>floating<sp/>point<sp/>equality<sp/>matcher,<sp/>which<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>two<sp/>float<sp/>values<sp/>using<sp/>ULP-based<sp/>approximation<sp/>or,<sp/>optionally,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user-specified<sp/>epsilon.<sp/><sp/>The<sp/>template<sp/>is<sp/>meant<sp/>to<sp/>be<sp/>instantiated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatType<sp/>being<sp/>either<sp/>float<sp/>or<sp/>double.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FloatType&gt;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FloatingEqMatcher<sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>for<sp/>FloatingEqMatcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>matcher&apos;s<sp/>input<sp/>will<sp/>be<sp/>compared<sp/>with<sp/>expected.<sp/><sp/>The<sp/>matcher<sp/>treats<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NANs<sp/>as<sp/>equal<sp/>if<sp/>nan_eq_nan<sp/>is<sp/>true.<sp/><sp/>Otherwise,<sp/>under<sp/>IEEE<sp/>standards,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>equality<sp/>comparisons<sp/>between<sp/>NANs<sp/>will<sp/>always<sp/>return<sp/>false.<sp/><sp/>We<sp/>specify<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>negative<sp/>max_abs_error_<sp/>term<sp/>to<sp/>indicate<sp/>that<sp/>ULP-based<sp/>approximation<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>used<sp/>for<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>FloatingEqMatcher(FloatType<sp/>expected,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan)</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expected_(expected),<sp/>nan_eq_nan_(nan_eq_nan),<sp/>max_abs_error_(-1)<sp/>{}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>that<sp/>supports<sp/>a<sp/>user-specified<sp/>max_abs_error<sp/>that<sp/>will<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>comparison<sp/>instead<sp/>of<sp/>ULP-based<sp/>approximation.<sp/><sp/>The<sp/>max<sp/>absolute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>non-negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>FloatingEqMatcher(FloatType<sp/>expected,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FloatType<sp/>max_abs_error)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expected_(expected),</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nan_eq_nan_(nan_eq_nan),</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_abs_error_(max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(max_abs_error<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>where<sp/>max_abs_error<sp/>is&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_abs_error;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>floating<sp/>point<sp/>equality<sp/>matcher<sp/>as<sp/>a<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl(FloatType<sp/>expected,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan,<sp/>FloatType<sp/>max_abs_error)</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expected_(expected),</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nan_eq_nan_(nan_eq_nan),</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_abs_error_(max_abs_error)<sp/>{}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(T<sp/>value,</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatingPoint&lt;FloatType&gt;<sp/>actual(value),<sp/>expected(expected_);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>NaNs<sp/>first,<sp/>if<sp/>nan_eq_nan_<sp/>is<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual.is_nan()<sp/>||<sp/>expected.is_nan())<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual.is_nan()<sp/>&amp;&amp;<sp/>expected.is_nan())<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan_eq_nan_;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>is<sp/>nan;<sp/>the<sp/>other<sp/>is<sp/>not<sp/>nan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasMaxAbsError())<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>perform<sp/>an<sp/>equality<sp/>check<sp/>so<sp/>that<sp/>inf<sp/>will<sp/>match<sp/>inf,<sp/>regardless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>error<sp/>bounds.<sp/><sp/>If<sp/>the<sp/>result<sp/>of<sp/>value<sp/>-<sp/>expected_<sp/>would<sp/>result<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overflow<sp/>or<sp/>if<sp/>either<sp/>value<sp/>is<sp/>inf,<sp/>the<sp/>default<sp/>result<sp/>is<sp/>infinity,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>should<sp/>only<sp/>match<sp/>if<sp/>max_abs_error_<sp/>is<sp/>also<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>expected_)<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatType<sp/>diff<sp/>=<sp/>value<sp/>-<sp/>expected_;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::std::fabs(diff)<sp/>&lt;=<sp/>max_abs_error_)<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected_;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>actual.AlmostEquals(expected);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>os-&gt;precision()<sp/>returns<sp/>the<sp/>previously<sp/>set<sp/>precision,<sp/>which<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>to<sp/>restore<sp/>the<sp/>ostream<sp/>to<sp/>its<sp/>original<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>outputting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::std::streamsize<sp/>old_precision<sp/>=</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os-&gt;precision(::std::numeric_limits&lt;FloatType&gt;::digits10<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FloatingPoint&lt;FloatType&gt;(expected_).is_nan())<sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nan_eq_nan_)<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected_;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasMaxAbsError())<sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_abs_error_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os-&gt;precision(old_precision);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>before,<sp/>get<sp/>original<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::std::streamsize<sp/>old_precision<sp/>=</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os-&gt;precision(::std::numeric_limits&lt;FloatType&gt;::digits10<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FloatingPoint&lt;FloatType&gt;(expected_).is_nan())<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nan_eq_nan_)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected_;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasMaxAbsError())<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(absolute<sp/>error<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_abs_error_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>original<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os-&gt;precision(old_precision);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasMaxAbsError()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_abs_error_<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatType<sp/>expected_;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan_;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>max_abs_error<sp/>will<sp/>be<sp/>used<sp/>for<sp/>value<sp/>comparison<sp/>when<sp/>&gt;=<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatType<sp/>max_abs_error_;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>3<sp/>type<sp/>conversion<sp/>operators<sp/>allow<sp/>FloatEq(expected)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveFloatEq(expected)<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>Matcher&lt;float&gt;,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matcher&lt;const<sp/>float&amp;&gt;,<sp/>or<sp/>a<sp/>Matcher&lt;float&amp;&gt;,<sp/>but<sp/>nothing<sp/>else.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;FloatType&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;FloatType&gt;(expected_,<sp/>nan_eq_nan_,<sp/>max_abs_error_));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>FloatType&amp;&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>FloatType&amp;&gt;(expected_,<sp/>nan_eq_nan_,<sp/>max_abs_error_));</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;FloatType&amp;&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;FloatType&amp;&gt;(expected_,<sp/>nan_eq_nan_,<sp/>max_abs_error_));</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatType<sp/>expected_;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan_;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>max_abs_error<sp/>will<sp/>be<sp/>used<sp/>for<sp/>value<sp/>comparison<sp/>when<sp/>&gt;=<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatType<sp/>max_abs_error_;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>2-tuple<sp/>(&quot;binary&quot;)<sp/>wrapper<sp/>around<sp/>FloatingEqMatcher:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatingEq2Matcher()<sp/>matches<sp/>(x,<sp/>y)<sp/>by<sp/>matching<sp/>FloatingEqMatcher(x,<sp/>false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>against<sp/>y,<sp/>and<sp/>FloatingEq2Matcher(e)<sp/>matches<sp/>FloatingEqMatcher(x,<sp/>false,<sp/>e)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>against<sp/>y.<sp/>The<sp/>former<sp/>implements<sp/>&quot;Eq&quot;,<sp/>the<sp/>latter<sp/>&quot;Near&quot;.<sp/>At<sp/>present,<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>no<sp/>version<sp/>that<sp/>compares<sp/>NaNs<sp/>as<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FloatType&gt;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FloatingEq2Matcher<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>FloatingEq2Matcher()<sp/>{<sp/>Init(-1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FloatingEq2Matcher(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan)<sp/>{<sp/>Init(-1,<sp/>nan_eq_nan);<sp/>}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FloatingEq2Matcher(FloatType<sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>Init(max_abs_error,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>FloatingEq2Matcher(FloatType<sp/>max_abs_error,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>Init(max_abs_error,<sp/>nan_eq_nan);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;::std::tuple&lt;T1,<sp/>T2&gt;&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;::std::tuple&lt;T1,<sp/>T2&gt;&gt;(max_abs_error_,<sp/>nan_eq_nan_));</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>::std::tuple&lt;T1,<sp/>T2&gt;&amp;&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>::std::tuple&lt;T1,<sp/>T2&gt;&amp;&gt;(max_abs_error_,<sp/>nan_eq_nan_));</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>static<sp/>::std::ostream&amp;<sp/>GetDesc(::std::ostream&amp;<sp/>os)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Tuple&gt;<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl(FloatType<sp/>max_abs_error,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan)</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>max_abs_error_(max_abs_error),<sp/>nan_eq_nan_(nan_eq_nan)<sp/>{}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Tuple<sp/>args,</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_abs_error_<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FloatingEqMatcher&lt;FloatType&gt;<sp/>fm(::std::get&lt;0&gt;(args),<sp/>nan_eq_nan_);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Matcher&lt;FloatType&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fm).MatchAndExplain(</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::get&lt;1&gt;(args),<sp/>listener);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FloatingEqMatcher&lt;FloatType&gt;<sp/>fm(::std::get&lt;0&gt;(args),<sp/>nan_eq_nan_,</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_abs_error_);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Matcher&lt;FloatType&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fm).MatchAndExplain(</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::get&lt;1&gt;(args),<sp/>listener);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;are<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetDesc;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;aren&apos;t<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetDesc;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>FloatType<sp/>max_abs_error_;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan_;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init(FloatType<sp/>max_abs_error_val,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan_val)<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>max_abs_error_<sp/>=<sp/>max_abs_error_val;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>nan_eq_nan_<sp/>=<sp/>nan_eq_nan_val;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>FloatType<sp/>max_abs_error_;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nan_eq_nan_;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Pointee(m)<sp/>matcher<sp/>for<sp/>matching<sp/>a<sp/>pointer<sp/>whose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointee<sp/>matches<sp/>matcher<sp/>m.<sp/><sp/>The<sp/>pointer<sp/>can<sp/>be<sp/>either<sp/>raw<sp/>or<sp/>smart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PointeeMatcher<sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>PointeeMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>matcher)<sp/>:<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>type<sp/>conversion<sp/>operator<sp/>template<sp/>allows<sp/>Pointee(m)<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>as<sp/>a<sp/>matcher<sp/>for<sp/>any<sp/>pointer<sp/>type<sp/>whose<sp/>pointee<sp/>type<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compatible<sp/>with<sp/>the<sp/>inner<sp/>matcher,<sp/>where<sp/>type<sp/>Pointer<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>either<sp/>a<sp/>raw<sp/>pointer<sp/>or<sp/>a<sp/>smart<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>reason<sp/>we<sp/>do<sp/>this<sp/>instead<sp/>of<sp/>relying<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MakePolymorphicMatcher()<sp/>is<sp/>that<sp/>the<sp/>latter<sp/>is<sp/>not<sp/>flexible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enough<sp/>for<sp/>implementing<sp/>the<sp/>DescribeTo()<sp/>method<sp/>of<sp/>Pointee().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er&gt;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Pointer&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Pointer&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>Pointer&amp;&gt;(matcher_));</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>monomorphic<sp/>implementation<sp/>that<sp/>works<sp/>for<sp/>a<sp/>particular<sp/>pointer<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er&gt;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Pointer&gt;<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Pointee<sp/>=</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::pointer_traits&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer)&gt;::element_type;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matcher_(MatcherCast&lt;const<sp/>Pointee&amp;&gt;(matcher))<sp/>{}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;points<sp/>to<sp/>a<sp/>value<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>point<sp/>to<sp/>a<sp/>value<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Pointer<sp/>pointer,</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetRawPointer(pointer)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(*pointer,<sp/>matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>Pointee&amp;&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher<sp/>matcher_;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Pointer(m)<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Pointer(m)<sp/>matcher<sp/>for<sp/>matching<sp/>a<sp/>pointer<sp/>that<sp/>matches<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight><highlight class="comment">//<sp/>m.<sp/><sp/>The<sp/>pointer<sp/>can<sp/>be<sp/>either<sp/>raw<sp/>or<sp/>smart,<sp/>and<sp/>will<sp/>match<sp/>`m`<sp/>against<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>raw<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PointerMatcher<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>PointerMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>matcher)<sp/>:<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>type<sp/>conversion<sp/>operator<sp/>template<sp/>allows<sp/>Pointer(m)<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>as<sp/>a<sp/>matcher<sp/>for<sp/>any<sp/>pointer<sp/>type<sp/>whose<sp/>pointer<sp/>type<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compatible<sp/>with<sp/>the<sp/>inner<sp/>matcher,<sp/>where<sp/>type<sp/>PointerType<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>either<sp/>a<sp/>raw<sp/>pointer<sp/>or<sp/>a<sp/>smart<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>reason<sp/>we<sp/>do<sp/>this<sp/>instead<sp/>of<sp/>relying<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MakePolymorphicMatcher()<sp/>is<sp/>that<sp/>the<sp/>latter<sp/>is<sp/>not<sp/>flexible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enough<sp/>for<sp/>implementing<sp/>the<sp/>DescribeTo()<sp/>method<sp/>of<sp/>Pointer().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">erType&gt;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;PointerType&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;PointerType&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>PointerType&amp;&gt;(matcher_));</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>monomorphic<sp/>implementation<sp/>that<sp/>works<sp/>for<sp/>a<sp/>particular<sp/>pointer<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">erType&gt;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;PointerType&gt;<sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Pointer<sp/>=</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::pointer_traits&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PointerType)&gt;::element_type*;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matcher_(MatcherCast&lt;Pointer&gt;(matcher))<sp/>{}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>a<sp/>pointer<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>a<sp/>pointer<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(PointerType<sp/>pointer,</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>a<sp/>pointer<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>p<sp/>=<sp/>GetRawPointer(pointer);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(p,<sp/>matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;Pointer&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher<sp/>matcher_;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>WhenDynamicCastTo&lt;T&gt;(m)<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>pointer<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>that<sp/>matches<sp/>inner_matcher<sp/>when<sp/>dynamic_cast&lt;T&gt;<sp/>is<sp/>applied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>of<sp/>dynamic_cast&lt;To&gt;<sp/>is<sp/>forwarded<sp/>to<sp/>the<sp/>inner<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>To<sp/>is<sp/>a<sp/>pointer<sp/>and<sp/>the<sp/>cast<sp/>fails,<sp/>the<sp/>inner<sp/>matcher<sp/>will<sp/>receive<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>To<sp/>is<sp/>a<sp/>reference<sp/>and<sp/>the<sp/>cast<sp/>fails,<sp/>this<sp/>matcher<sp/>returns<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>immediately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WhenDynamicCastToMatcherBase<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>WhenDynamicCastToMatcherBase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;To&gt;&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>GetCastTypeDescription(os);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>GetCastTypeDescription(os);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;To&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetToName()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetTypeName&lt;To&gt;();<sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GetCastTypeDescription(::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;when<sp/>dynamic_cast<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetToName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Primary<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>is<sp/>a<sp/>pointer.<sp/>Cast<sp/>and<sp/>forward<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WhenDynamicCastToMatcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>WhenDynamicCastToMatcherBase&lt;To&gt;<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>WhenDynamicCastToMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;To&gt;&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>WhenDynamicCastToMatcherBase&lt;To&gt;(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From&gt;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(From<sp/>from,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>To<sp/>to<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">To</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(from);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(to,<sp/>this-&gt;matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialize<sp/>for<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>return<sp/>false<sp/>if<sp/>the<sp/>dynamic_cast<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WhenDynamicCastToMatcher&lt;To&amp;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>WhenDynamicCastToMatcherBase&lt;To&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>WhenDynamicCastToMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;To&amp;&gt;&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>WhenDynamicCastToMatcherBase&lt;To&amp;&gt;(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From&gt;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(From&amp;<sp/>from,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>an<sp/>std::bad_cast<sp/>here,<sp/>so<sp/>do<sp/>the<sp/>cast<sp/>with<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>To*<sp/>to<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">To*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;from);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>cannot<sp/>be<sp/>dynamic_cast<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;GetToName();</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(*to,<sp/>this-&gt;matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Field()<sp/>matcher<sp/>for<sp/>matching<sp/>a<sp/>field<sp/>(i.e.<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable)<sp/>of<sp/>an<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FieldType&gt;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FieldMatcher<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>FieldMatcher(FieldType<sp/>Class::*field,</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>FieldType&amp;&gt;&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>field_(field),<sp/>matcher_(matcher),<sp/>whose_field_(</highlight><highlight class="stringliteral">&quot;whose<sp/>given<sp/>field<sp/>&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/>FieldMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>field_name,<sp/>FieldType<sp/>Class::*field,</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>FieldType&amp;&gt;&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>field_(field),</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_(matcher),</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whose_field_(</highlight><highlight class="stringliteral">&quot;whose<sp/>field<sp/>`&quot;</highlight><highlight class="normal"><sp/>+<sp/>field_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;`<sp/>&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>whose_field_;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>whose_field_;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>The<sp/>dispatch<sp/>on<sp/>std::is_pointer<sp/>was<sp/>introduced<sp/>as<sp/>a<sp/>workaround<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>compiler<sp/>bug,<sp/>and<sp/>can<sp/>now<sp/>be<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::is_pointer&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;T&gt;::type&gt;::type(),</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value,<sp/>listener);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(std::false_type<sp/></highlight><highlight class="comment">/*<sp/>is_not_pointer<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Class&amp;<sp/>obj,</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>whose_field_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(obj.*field_,<sp/>matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(std::true_type<sp/></highlight><highlight class="comment">/*<sp/>is_pointer<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Class*<sp/>p,</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>an<sp/>object<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>*p<sp/>has<sp/>a<sp/>field,<sp/>it<sp/>must<sp/>be<sp/>a<sp/>class/struct/union<sp/>type<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thus<sp/>cannot<sp/>be<sp/>a<sp/>pointer.<sp/><sp/>Therefore<sp/>we<sp/>pass<sp/>false_type()<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(std::false_type(),<sp/>*p,<sp/>listener);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FieldType<sp/>Class::*field_;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>FieldType&amp;&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Contains<sp/>either<sp/>&quot;whose<sp/>given<sp/>field<sp/>&quot;<sp/>if<sp/>the<sp/>name<sp/>of<sp/>the<sp/>field<sp/>is<sp/>unknown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>&quot;whose<sp/>field<sp/>`name_of_field`<sp/>&quot;<sp/>if<sp/>the<sp/>name<sp/>is<sp/>known.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>whose_field_;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Property()<sp/>matcher<sp/>for<sp/>matching<sp/>a<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(i.e.<sp/>return<sp/>value<sp/>of<sp/>a<sp/>getter<sp/>method)<sp/>of<sp/>an<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Property<sp/>is<sp/>a<sp/>const-qualified<sp/>member<sp/>function<sp/>of<sp/>Class<sp/>returning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PropertyType.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Property&gt;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PropertyMatcher<sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PropertyType&amp;<sp/>RefToConstProperty;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>PropertyMatcher(Property<sp/>property,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;RefToConstProperty&gt;&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>property_(property),</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_(matcher),</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whose_property_(</highlight><highlight class="stringliteral">&quot;whose<sp/>given<sp/>property<sp/>&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>PropertyMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>property_name,<sp/>Property<sp/>property,</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;RefToConstProperty&gt;&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>property_(property),</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_(matcher),</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whose_property_(</highlight><highlight class="stringliteral">&quot;whose<sp/>property<sp/>`&quot;</highlight><highlight class="normal"><sp/>+<sp/>property_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;`<sp/>&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>whose_property_;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>whose_property_;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::is_pointer&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;T&gt;::type&gt;::type(),</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value,<sp/>listener);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(std::false_type<sp/></highlight><highlight class="comment">/*<sp/>is_not_pointer<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Class&amp;<sp/>obj,</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>whose_property_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>pass<sp/>the<sp/>return<sp/>value<sp/>(for<sp/>example,<sp/>int)<sp/>to<sp/>MatchPrintAndExplain,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>takes<sp/>a<sp/>non-const<sp/>reference<sp/>as<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>RefToConstProperty<sp/>result<sp/>=<sp/>(obj.*property_)();</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(result,<sp/>matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(std::true_type<sp/></highlight><highlight class="comment">/*<sp/>is_pointer<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Class*<sp/>p,</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>an<sp/>object<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>*p<sp/>has<sp/>a<sp/>property<sp/>method,<sp/>it<sp/>must<sp/>be<sp/>a<sp/>class/struct/union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>and<sp/>thus<sp/>cannot<sp/>be<sp/>a<sp/>pointer.<sp/><sp/>Therefore<sp/>we<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>false_type()<sp/>as<sp/>the<sp/>first<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(std::false_type(),<sp/>*p,<sp/>listener);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/>Property<sp/>property_;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;RefToConstProperty&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Contains<sp/>either<sp/>&quot;whose<sp/>given<sp/>property<sp/>&quot;<sp/>if<sp/>the<sp/>name<sp/>of<sp/>the<sp/>property<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unknown<sp/>or<sp/>&quot;whose<sp/>property<sp/>`name_of_property`<sp/>&quot;<sp/>if<sp/>the<sp/>name<sp/>is<sp/>known.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>whose_property_;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>traits<sp/>specifying<sp/>various<sp/>features<sp/>of<sp/>different<sp/>functors<sp/>for<sp/>ResultOf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>template<sp/>specifies<sp/>features<sp/>for<sp/>functor<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor&gt;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CallableTraits<sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Functor<sp/>StorageType;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckIsValid(Functor<sp/></highlight><highlight class="comment">/*<sp/>functor<sp/>*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Invoke(Functor<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>arg)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(f(arg))<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(arg);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>function<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResType&gt;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CallableTraits&lt;ResType<sp/>(*)(ArgType)&gt;<sp/>{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ResType<sp/>ResultType;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ResType<sp/>(*StorageType)(ArgType);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckIsValid(ResType<sp/>(*f)(ArgType))<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(f<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>function<sp/>pointer<sp/>is<sp/>passed<sp/>into<sp/>ResultOf().&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ResType<sp/>Invoke(ResType<sp/>(*f)(ArgType),<sp/>T<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*f)(arg);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>ResultOf()<sp/>matcher<sp/>for<sp/>matching<sp/>a<sp/>return<sp/>value<sp/>of<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unary<sp/>function<sp/>of<sp/>an<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Callable,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ResultOfMatcher<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>ResultOfMatcher(Callable<sp/>callable,<sp/>InnerMatcher<sp/>matcher)</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ResultOfMatcher(</highlight><highlight class="comment">/*result_description=*/</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::move(callable),</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(matcher))<sp/>{}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>ResultOfMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>result_description,<sp/>Callable<sp/>callable,</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InnerMatcher<sp/>matcher)</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>result_description_(result_description),</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callable_(std::move(callable)),</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_(std::move(matcher))<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>CallableTraits&lt;Callable&gt;::CheckIsValid(callable_);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;(</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>T&amp;&gt;(result_description_,<sp/>callable_,<sp/>matcher_));</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CallableTraits&lt;Callable&gt;::StorageType<sp/>CallableStorageType;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ResultType<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(CallableTraits&lt;Callable&gt;::template<sp/>Invoke&lt;T&gt;(</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;CallableStorageType&gt;(),<sp/>std::declval&lt;T&gt;()));</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>result_description,</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallableStorageType&amp;<sp/>callable,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>result_description_(result_description),</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callable_(callable),</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_(MatcherCast&lt;ResultType&gt;(matcher))<sp/>{}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_description_.empty())<sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>mapped<sp/>by<sp/>the<sp/>given<sp/>callable<sp/>to<sp/>a<sp/>value<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result_description_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_description_.empty())<sp/>{</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>mapped<sp/>by<sp/>the<sp/>given<sp/>callable<sp/>to<sp/>a<sp/>value<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result_description_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(T<sp/>obj,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_description_.empty())<sp/>{</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>mapped<sp/>by<sp/>the<sp/>given<sp/>callable<sp/>to<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result_description_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>pass<sp/>the<sp/>return<sp/>value<sp/>directly<sp/>to<sp/>MatchPrintAndExplain,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>takes<sp/>a<sp/>non-const<sp/>reference<sp/>as<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>specifying<sp/>template<sp/>argument<sp/>explicitly<sp/>is<sp/>needed<sp/>because<sp/>T<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>a<sp/>non-const<sp/>reference<sp/>(e.g.<sp/>Matcher&lt;Uncopyable&amp;&gt;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResultType<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallableTraits&lt;Callable&gt;::template<sp/>Invoke&lt;T&gt;(callable_,<sp/>obj);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(result,<sp/>matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>result_description_;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Functors<sp/>often<sp/>define<sp/>operator()<sp/>as<sp/>non-const<sp/>method<sp/>even<sp/>though</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>actually<sp/>stateless.<sp/>But<sp/>we<sp/>need<sp/>to<sp/>use<sp/>them<sp/>even<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;this&apos;<sp/>is<sp/>a<sp/>const<sp/>pointer.<sp/>It&apos;s<sp/>the<sp/>user&apos;s<sp/>responsibility<sp/>not<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>stateful<sp/>callables<sp/>with<sp/>ResultOf(),<sp/>which<sp/>doesn&apos;t<sp/>guarantee</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>times<sp/>the<sp/>callable<sp/>will<sp/>be<sp/>invoked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>CallableStorageType<sp/>callable_;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;ResultType&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>result_description_;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallableStorageType<sp/>callable_;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher<sp/>matcher_;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>matcher<sp/>that<sp/>checks<sp/>the<sp/>size<sp/>of<sp/>an<sp/>STL-style<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SizeMatcher&gt;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SizeIsMatcher<sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SizeIsMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeMatcher&amp;<sp/>size_matcher)</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size_matcher_(size_matcher)<sp/>{}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>Container&amp;&gt;(size_matcher_));</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Container&gt;<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SizeType<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;Container&gt;().size());</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeMatcher&amp;<sp/>size_matcher)</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size_matcher_(MatcherCast&lt;SizeType&gt;(size_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>size<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>size<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Container<sp/>container,</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SizeType<sp/>size<sp/>=<sp/>container.size();</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>size_listener;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>size_matcher_.MatchAndExplain(size,<sp/>&amp;size_listener);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>size</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(result<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(size_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;SizeType&gt;<sp/>size_matcher_;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeMatcher<sp/>size_matcher_;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>matcher<sp/>that<sp/>checks<sp/>the<sp/>begin()..end()<sp/>distance<sp/>of<sp/>an<sp/>STL-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DistanceMatcher&gt;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BeginEndDistanceIsMatcher<sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BeginEndDistanceIsMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistanceMatcher&amp;<sp/>distance_matcher)</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>distance_matcher_(distance_matcher)<sp/>{}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>Container&amp;&gt;(distance_matcher_));</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Container&gt;<sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Container)&gt;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainerView;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ContainerView::type::const_iterator&gt;::difference_type</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DistanceType;</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistanceMatcher&amp;<sp/>distance_matcher)</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>distance_matcher_(MatcherCast&lt;DistanceType&gt;(distance_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>distance_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>distance_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Container<sp/>container,</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::begin;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::end;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DistanceType<sp/>distance<sp/>=<sp/>std::distance(begin(container),<sp/>end(container));</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>distance_listener;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance_matcher_.MatchAndExplain(distance,<sp/>&amp;distance_listener);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>distance</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(result<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(distance_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;DistanceType&gt;<sp/>distance_matcher_;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistanceMatcher<sp/>distance_matcher_;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>an<sp/>equality<sp/>matcher<sp/>for<sp/>any<sp/>STL-style<sp/>container<sp/>whose<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>==.<sp/>This<sp/>matcher<sp/>is<sp/>like<sp/>Eq(),<sp/>but<sp/>its<sp/>failure<sp/>explanations<sp/>provide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>more<sp/>detailed<sp/>information<sp/>that<sp/>is<sp/>useful<sp/>when<sp/>the<sp/>container<sp/>is<sp/>used<sp/>as<sp/>a<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>failure<sp/>message<sp/>reports<sp/>elements<sp/>that<sp/>are<sp/>in<sp/>one<sp/>of<sp/>the<sp/>operands<sp/>but<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>other.<sp/>The<sp/>failure<sp/>messages<sp/>do<sp/>not<sp/>report<sp/>duplicate<sp/>or<sp/>out-of-order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>elements<sp/>in<sp/>the<sp/>containers<sp/>(which<sp/>don&apos;t<sp/>properly<sp/>matter<sp/>to<sp/>sets,<sp/>but<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>occur<sp/>if<sp/>the<sp/>containers<sp/>are<sp/>vectors<sp/>or<sp/>lists,<sp/>for<sp/>example).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Uses<sp/>the<sp/>container&apos;s<sp/>const_iterator,<sp/>value_type,<sp/>operator<sp/>==,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>begin(),<sp/>and<sp/>end().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ContainerEqMatcher<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;Container&gt;<sp/>View;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::type<sp/>StlContainer;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::const_reference<sp/>StlContainerReference;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_const&lt;Container&gt;::value,</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Container<sp/>type<sp/>must<sp/>not<sp/>be<sp/>const&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_reference&lt;Container&gt;::value,</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Container<sp/>type<sp/>must<sp/>not<sp/>be<sp/>a<sp/>reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>make<sp/>a<sp/>copy<sp/>of<sp/>expected<sp/>in<sp/>case<sp/>the<sp/>elements<sp/>in<sp/>it<sp/>are<sp/>modified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>this<sp/>matcher<sp/>is<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ContainerEqMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>expected)</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expected_(View::Copy(expected))<sp/>{}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;equals<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(expected_,<sp/>os);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>equal<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(expected_,<sp/>os);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsContainer&gt;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LhsContainer&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;LhsContainer&gt;::type&gt;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsView;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>StlContainerReference<sp/>lhs_stl_container<sp/>=<sp/>LhsView::ConstReference(lhs);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_stl_container<sp/>==<sp/>expected_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::ostream*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>os<sp/>=<sp/>listener-&gt;stream();</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Something<sp/>is<sp/>different.<sp/>Check<sp/>for<sp/>extra<sp/>values<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printed_header<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>lhs_stl_container.begin();<sp/>it<sp/>!=<sp/>lhs_stl_container.end();</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal::ArrayAwareFind(expected_.begin(),<sp/>expected_.end(),<sp/>*it)<sp/>==</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_.end())<sp/>{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printed_header)<sp/>{</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printed_header<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrint(*it,<sp/>os);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>check<sp/>for<sp/>missing<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printed_header2<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>expected_.begin();<sp/>it<sp/>!=<sp/>expected_.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal::ArrayAwareFind(lhs_stl_container.begin(),</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs_stl_container.end(),</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it)<sp/>==<sp/>lhs_stl_container.end())<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printed_header2)<sp/>{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>(printed_header<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;,\nand&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;which&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printed_header2<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrint(*it,<sp/>os);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StlContainer<sp/>expected_;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comparator<sp/>functor<sp/>that<sp/>uses<sp/>the<sp/>&lt;<sp/>operator<sp/>to<sp/>compare<sp/>two<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LessComparator<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&lt;<sp/>rhs;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>WhenSortedBy(comparator,<sp/>container_matcher).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Comparator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ContainerMatcher&gt;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WhenSortedByMatcher<sp/>{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/>WhenSortedByMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Comparator&amp;<sp/>comparator,</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContainerMatcher&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>comparator_(comparator),<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsContainer&gt;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;LhsContainer&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;LhsContainer&gt;(comparator_,<sp/>matcher_));</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsContainer&gt;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;LhsContainer&gt;<sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsContainer)&gt;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsView;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsView::type<sp/>LhsStlContainer;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsView::const_reference<sp/>LhsStlContainerReference;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transforms<sp/>std::pair&lt;const<sp/>Key,<sp/>Value&gt;<sp/>into<sp/>std::pair&lt;Key,<sp/>Value&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>we<sp/>can<sp/>match<sp/>associative<sp/>containers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RemoveConstFromKey&lt;typename<sp/>LhsStlContainer::value_type&gt;::type</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsValue;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Comparator&amp;<sp/>comparator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContainerMatcher&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>comparator_(comparator),<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(when<sp/>sorted)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(when<sp/>sorted)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(LhsContainer<sp/>lhs,</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LhsStlContainerReference<sp/>lhs_stl_container<sp/>=<sp/>LhsView::ConstReference(lhs);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::vector&lt;LhsValue&gt;<sp/>sorted_container(lhs_stl_container.begin(),</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs_stl_container.end());</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::sort(sorted_container.begin(),<sp/>sorted_container.end(),</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comparator_);</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>interested,<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>the<sp/>inner<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher_.Matches(sorted_container);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrint(sorted_container,<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>when<sp/>sorted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>inner_listener;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.MatchAndExplain(sorted_container,<sp/>&amp;inner_listener);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(inner_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Comparator<sp/>comparator_;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>::std::vector&lt;LhsValue&gt;&amp;&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Impl&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Impl&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Comparator<sp/>comparator_;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContainerMatcher<sp/>matcher_;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>Pointwise(tuple_matcher,<sp/>rhs_container).<sp/><sp/>tuple_matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>able<sp/>to<sp/>be<sp/>safely<sp/>cast<sp/>to<sp/>Matcher&lt;std::tuple&lt;const<sp/>T1&amp;,<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T2&amp;&gt;<sp/>&gt;,<sp/>where<sp/>T1<sp/>and<sp/>T2<sp/>are<sp/>the<sp/>types<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>LHS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>container<sp/>and<sp/>the<sp/>RHS<sp/>container<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TupleMatcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsContainer&gt;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PointwiseMatcher<sp/>{</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!IsHashTable&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(RhsContainer)&gt;::value,</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;use<sp/>UnorderedPointwise<sp/>with<sp/>hash<sp/>tables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;RhsContainer&gt;<sp/>RhsView;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsView::type<sp/>RhsStlContainer;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsStlContainer::value_type<sp/>RhsValue;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_const&lt;RhsContainer&gt;::value,</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RhsContainer<sp/>type<sp/>must<sp/>not<sp/>be<sp/>const&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_reference&lt;RhsContainer&gt;::value,</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RhsContainer<sp/>type<sp/>must<sp/>not<sp/>be<sp/>a<sp/>reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Like<sp/>ContainerEq,<sp/>we<sp/>make<sp/>a<sp/>copy<sp/>of<sp/>rhs<sp/>in<sp/>case<sp/>the<sp/>elements<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>are<sp/>modified<sp/>after<sp/>this<sp/>matcher<sp/>is<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/>PointwiseMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TupleMatcher&amp;<sp/>tuple_matcher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RhsContainer&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>tuple_matcher_(tuple_matcher),<sp/>rhs_(RhsView::Copy(rhs))<sp/>{}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsContainer&gt;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;LhsContainer&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!IsHashTable&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(LhsContainer)&gt;::value,</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;use<sp/>UnorderedPointwise<sp/>with<sp/>hash<sp/>tables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;LhsContainer&gt;(</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>LhsContainer&amp;&gt;(tuple_matcher_,<sp/>rhs_));</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsContainer&gt;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;LhsContainer&gt;<sp/>{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsContainer)&gt;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsView;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsView::type<sp/>LhsStlContainer;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsView::const_reference<sp/>LhsStlContainerReference;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsStlContainer::value_type<sp/>LhsValue;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>pass<sp/>the<sp/>LHS<sp/>value<sp/>and<sp/>the<sp/>RHS<sp/>value<sp/>to<sp/>the<sp/>inner<sp/>matcher<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reference,<sp/>as<sp/>they<sp/>may<sp/>be<sp/>expensive<sp/>to<sp/>copy.<sp/><sp/>We<sp/>must<sp/>use<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>pair<sp/>here,<sp/>as<sp/>a<sp/>pair<sp/>cannot<sp/>hold<sp/>references<sp/>(C++<sp/>98,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>20.2.2<sp/>[lib.pairs]).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>::std::tuple&lt;const<sp/>LhsValue&amp;,<sp/>const<sp/>RhsValue&amp;&gt;<sp/>InnerMatcherArg;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TupleMatcher&amp;<sp/>tuple_matcher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RhsStlContainer&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mono_tuple_matcher_<sp/>holds<sp/>a<sp/>monomorphic<sp/>version<sp/>of<sp/>the<sp/>tuple<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>mono_tuple_matcher_(SafeMatcherCast&lt;InnerMatcherArg&gt;(tuple_matcher)),</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_(rhs)<sp/>{}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;contains<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_.size()</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>values,<sp/>where<sp/>each<sp/>value<sp/>and<sp/>its<sp/>corresponding<sp/>value<sp/>in<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrinter&lt;RhsStlContainer&gt;::Print(rhs_,<sp/>os);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mono_tuple_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>contain<sp/>exactly<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_.size()</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>values,<sp/>or<sp/>contains<sp/>a<sp/>value<sp/>x<sp/>at<sp/>some<sp/>index<sp/>i&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>where<sp/>x<sp/>and<sp/>the<sp/>i-th<sp/>value<sp/>of<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrint(rhs_,<sp/>os);</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mono_tuple_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(LhsContainer<sp/>lhs,</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LhsStlContainerReference<sp/>lhs_stl_container<sp/>=<sp/>LhsView::ConstReference(lhs);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>actual_size<sp/>=<sp/>lhs_stl_container.size();</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_size<sp/>!=<sp/>rhs_.size())<sp/>{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>contains<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>values&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>lhs_stl_container.begin();</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>rhs_.begin();</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>actual_size;<sp/>++i,<sp/>++left,<sp/>++right)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>inner_listener;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>InnerMatcherArg<sp/>as<sp/>a<sp/>temporarily<sp/>object<sp/>to<sp/>avoid<sp/>it<sp/>outlives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*left<sp/>and<sp/>*right.<sp/>Dereference<sp/>or<sp/>the<sp/>conversion<sp/>to<sp/>`const<sp/>T&amp;`<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>temp<sp/>objects,<sp/>e.g.<sp/>for<sp/>vector&lt;bool&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mono_tuple_matcher_.MatchAndExplain(</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InnerMatcherArg(ImplicitCast_&lt;const<sp/>LhsValue&amp;&gt;(*left),</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImplicitCast_&lt;const<sp/>RhsValue&amp;&gt;(*right)),</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;inner_listener))<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>value<sp/>pair<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrint(*left,<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrint(*right,<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>at<sp/>index<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>don&apos;t<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(inner_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mono_tuple_matcher_.Matches(</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InnerMatcherArg(ImplicitCast_&lt;const<sp/>LhsValue&amp;&gt;(*left),</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImplicitCast_&lt;const<sp/>RhsValue&amp;&gt;(*right))))</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;InnerMatcherArg&gt;<sp/>mono_tuple_matcher_;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RhsStlContainer<sp/>rhs_;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TupleMatcher<sp/>tuple_matcher_;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RhsStlContainer<sp/>rhs_;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Holds<sp/>the<sp/>logic<sp/>common<sp/>to<sp/>ContainsMatcherImpl<sp/>and<sp/>EachMatcherImpl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">QuantifierMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Container&gt;<sp/>{</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(Container)<sp/>RawContainer;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>StlContainerView&lt;RawContainer&gt;<sp/>View;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::type<sp/>StlContainer;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::const_reference<sp/>StlContainerReference;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StlContainer::value_type<sp/>Element;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>QuantifierMatcherImpl(InnerMatcher<sp/>inner_matcher)</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>inner_matcher_(</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::SafeMatcherCast&lt;const<sp/>Element&amp;&gt;(inner_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>whether:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>All<sp/>elements<sp/>in<sp/>the<sp/>container<sp/>match,<sp/>if<sp/>all_elements_should_match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Any<sp/>element<sp/>in<sp/>the<sp/>container<sp/>matches,<sp/>if<sp/>!all_elements_should_match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_elements_should_match,<sp/>Container<sp/>container,</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>StlContainerReference<sp/>stl_container<sp/>=<sp/>View::ConstReference(container);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>stl_container.begin();<sp/>it<sp/>!=<sp/>stl_container.end();</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>inner_listener;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches<sp/>=<sp/>inner_matcher_.MatchAndExplain(*it,<sp/>&amp;inner_listener);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches<sp/>!=<sp/>all_elements_should_match)<sp/>{</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(matches<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(inner_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!all_elements_should_match;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_elements_should_match;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplainImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;size_t&gt;&amp;<sp/>count_matcher,</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Container<sp/>container,</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>StlContainerReference<sp/>stl_container<sp/>=<sp/>View::ConstReference(container);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>match_elements;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>stl_container.begin();<sp/>it<sp/>!=<sp/>stl_container.end();</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>inner_listener;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches<sp/>=<sp/>inner_matcher_.MatchAndExplain(*it,<sp/>&amp;inner_listener);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches)<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_elements.push_back(i);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match_elements.empty())<sp/>{</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>no<sp/>element<sp/>that<sp/>matches&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match_elements.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>match_elements[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>elements<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>e<sp/>:<sp/>match_elements)<sp/>{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>sep<sp/>&lt;&lt;<sp/>e;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>count_listener;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count_matcher.MatchAndExplain(match_elements.size(),<sp/>&amp;count_listener))<sp/>{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>match_elements.size()</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(count_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match_elements.empty())<sp/>{</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>but&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>whose<sp/>match<sp/>quantity<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>match_elements.size()</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(count_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>Element&amp;&gt;<sp/>inner_matcher_;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>Contains(element_matcher)<sp/>for<sp/>the<sp/>given<sp/>argument<sp/>type<sp/>Container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Symmetric<sp/>to<sp/>EachMatcherImpl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ContainsMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QuantifierMatcherImpl&lt;Container&gt;<sp/>{</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ContainsMatcherImpl(InnerMatcher<sp/>inner_matcher)</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>QuantifierMatcherImpl&lt;Container&gt;(inner_matcher)<sp/>{}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;contains<sp/>at<sp/>least<sp/>one<sp/>element<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;inner_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>contain<sp/>any<sp/>element<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;inner_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Container<sp/>container,</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;MatchAndExplainImpl(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>container,<sp/>listener);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2807"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>Each(element_matcher)<sp/>for<sp/>the<sp/>given<sp/>argument<sp/>type<sp/>Container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Symmetric<sp/>to<sp/>ContainsMatcherImpl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EachMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QuantifierMatcherImpl&lt;Container&gt;<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>EachMatcherImpl(InnerMatcher<sp/>inner_matcher)</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>QuantifierMatcherImpl&lt;Container&gt;(inner_matcher)<sp/>{}</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;only<sp/>contains<sp/>elements<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;inner_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;contains<sp/>some<sp/>element<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;inner_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Container<sp/>container,</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;MatchAndExplainImpl(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>container,<sp/>listener);</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2833"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>Contains(element_matcher).Times(n)<sp/>for<sp/>the<sp/>given<sp/>argument<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ContainsTimesMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QuantifierMatcherImpl&lt;Container&gt;<sp/>{</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ContainsTimesMatcherImpl(InnerMatcher<sp/>inner_matcher,</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matcher&lt;size_t&gt;<sp/>count_matcher)</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>QuantifierMatcherImpl&lt;Container&gt;(inner_matcher),</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count_matcher_(std::move(count_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;quantity<sp/>of<sp/>elements<sp/>that<sp/>match<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;inner_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>count_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;quantity<sp/>of<sp/>elements<sp/>that<sp/>match<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;inner_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>count_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Container<sp/>container,</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;MatchAndExplainImpl(count_matcher_,<sp/>container,<sp/>listener);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;size_t&gt;<sp/>count_matcher_;</highlight></codeline>
<codeline lineno="2867"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>polymorphic<sp/>Contains(element_matcher).Times(n).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ContainsTimesMatcher<sp/>{</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ContainsTimesMatcher(M<sp/>m,<sp/>Matcher&lt;size_t&gt;<sp/>count_matcher)</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>inner_matcher_(m),<sp/>count_matcher_(std::move(count_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ContainsTimesMatcherImpl&lt;const<sp/>Container&amp;&gt;(</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inner_matcher_,<sp/>count_matcher_));</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M<sp/>inner_matcher_;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;size_t&gt;<sp/>count_matcher_;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>polymorphic<sp/>Contains(element_matcher).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ContainsMatcher<sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ContainsMatcher(M<sp/>m)<sp/>:<sp/>inner_matcher_(m)<sp/>{}</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ContainsMatcherImpl&lt;const<sp/>Container&amp;&gt;(inner_matcher_));</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/>ContainsTimesMatcher&lt;M&gt;<sp/>Times(Matcher&lt;size_t&gt;<sp/>count_matcher)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ContainsTimesMatcher&lt;M&gt;(inner_matcher_,<sp/>std::move(count_matcher));</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M<sp/>inner_matcher_;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>polymorphic<sp/>Each(element_matcher).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EachMatcher<sp/>{</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>EachMatcher(M<sp/>m)<sp/>:<sp/>inner_matcher_(m)<sp/>{}</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EachMatcherImpl&lt;const<sp/>Container&amp;&gt;(inner_matcher_));</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M<sp/>inner_matcher_;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Rank1<sp/>{};</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Rank0<sp/>:<sp/>Rank1<sp/>{};</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pair_getters<sp/>{</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::get;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>First(T&amp;<sp/>x,<sp/>Rank1)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(get&lt;0&gt;(x))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;0&gt;(x);</highlight></codeline>
<codeline lineno="2931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>First(T&amp;<sp/>x,<sp/>Rank0)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">((x.first))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.first;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Second(T&amp;<sp/>x,<sp/>Rank1)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(get&lt;1&gt;(x))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;1&gt;(x);</highlight></codeline>
<codeline lineno="2940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Second(T&amp;<sp/>x,<sp/>Rank0)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">((x.second))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.second;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2945"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pair_getters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>Key(inner_matcher)<sp/>for<sp/>the<sp/>given<sp/>argument<sp/>pair<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Key(inner_matcher)<sp/>matches<sp/>an<sp/>std::pair<sp/>whose<sp/>&apos;first&apos;<sp/>field<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inner_matcher.<sp/><sp/>For<sp/>example,<sp/>Contains(Key(Ge(5)))<sp/>can<sp/>be<sp/>used<sp/>to<sp/>match<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::map<sp/>that<sp/>contains<sp/>at<sp/>least<sp/>one<sp/>element<sp/>whose<sp/>key<sp/>is<sp/>&gt;=<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PairType&gt;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KeyMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;PairType&gt;<sp/>{</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(PairType)<sp/>RawPairType;</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawPairType::first_type<sp/>KeyType;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>KeyMatcherImpl(InnerMatcher<sp/>inner_matcher)</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>inner_matcher_(</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::SafeMatcherCast&lt;const<sp/>KeyType&amp;&gt;(inner_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>&apos;key_value.first&apos;<sp/>(the<sp/>key)<sp/>matches<sp/>the<sp/>inner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(PairType<sp/>key_value,</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>inner_listener;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>inner_matcher_.MatchAndExplain(</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair_getters::First(key_value,<sp/>Rank0()),<sp/>&amp;inner_listener);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>explanation<sp/>=<sp/>inner_listener.str();</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!explanation.empty())<sp/>{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>first<sp/>field<sp/>is<sp/>a<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>explanation;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>key<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>the<sp/>negation<sp/>of<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>have<sp/>a<sp/>key<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>KeyType&amp;&gt;<sp/>inner_matcher_;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>polymorphic<sp/>Key(matcher_for_key).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KeyMatcher<sp/>{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>KeyMatcher(M<sp/>m)<sp/>:<sp/>matcher_for_key_(m)<sp/>{}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PairType&gt;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;PairType&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;PairType&gt;(</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KeyMatcherImpl&lt;const<sp/>PairType&amp;&gt;(matcher_for_key_));</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M<sp/>matcher_for_key_;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>polymorphic<sp/>Address(matcher_for_address).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AddressMatcher<sp/>{</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>AddressMatcher(InnerMatcher<sp/>m)<sp/>:<sp/>matcher_(m)<sp/>{}</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Type&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Type&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>Type&amp;&gt;(matcher_));</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>monomorphic<sp/>implementation<sp/>that<sp/>works<sp/>for<sp/>a<sp/>particular<sp/>object<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Address<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(Type)<sp/>*;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matcher_(MatcherCast&lt;Address&gt;(matcher))<sp/>{}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>address<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>have<sp/>address<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Type<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>address<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>address<sp/>=<sp/>std::addressof(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchPrintAndExplain(address,<sp/>matcher_,<sp/>listener);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;Address&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher<sp/>matcher_;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>Pair(first_matcher,<sp/>second_matcher)<sp/>for<sp/>the<sp/>given<sp/>argument<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>with<sp/>its<sp/>two<sp/>matchers.<sp/>See<sp/>Pair()<sp/>function<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PairType&gt;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PairMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;PairType&gt;<sp/>{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(PairType)<sp/>RawPairType;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawPairType::first_type<sp/>FirstType;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawPairType::second_type<sp/>SecondType;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FirstMatcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SecondMatcher&gt;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>PairMatcherImpl(FirstMatcher<sp/>first_matcher,<sp/>SecondMatcher<sp/>second_matcher)</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>first_matcher_(</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::SafeMatcherCast&lt;const<sp/>FirstType&amp;&gt;(first_matcher)),</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_matcher_(</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::SafeMatcherCast&lt;const<sp/>SecondType&amp;&gt;(second_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>first<sp/>field<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/>first_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>has<sp/>a<sp/>second<sp/>field<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/>second_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>the<sp/>negation<sp/>of<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>first<sp/>field<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/>first_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>or<sp/>has<sp/>a<sp/>second<sp/>field<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/>second_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>&apos;a_pair.first&apos;<sp/>matches<sp/>first_matcher<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;a_pair.second&apos;<sp/>matches<sp/>second_matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(PairType<sp/>a_pair,</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>interested,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>construct<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first_matcher_.Matches(pair_getters::First(a_pair,<sp/>Rank0()))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_matcher_.Matches(pair_getters::Second(a_pair,<sp/>Rank0()));</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>first_inner_listener;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first_matcher_.MatchAndExplain(pair_getters::First(a_pair,<sp/>Rank0()),</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;first_inner_listener))<sp/>{</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>first<sp/>field<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(first_inner_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>second_inner_listener;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!second_matcher_.MatchAndExplain(pair_getters::Second(a_pair,<sp/>Rank0()),</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;second_inner_listener))<sp/>{</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>second<sp/>field<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(second_inner_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/>ExplainSuccess(first_inner_listener.str(),<sp/>second_inner_listener.str(),</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener);</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExplainSuccess(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>first_explanation,</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>second_explanation,</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>both<sp/>fields<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first_explanation.empty())<sp/>{</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>where<sp/>the<sp/>first<sp/>field<sp/>is<sp/>a<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_explanation;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!second_explanation.empty())<sp/>{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first_explanation.empty())<sp/>{</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;and<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>second<sp/>field<sp/>is<sp/>a<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>second_explanation;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>FirstType&amp;&gt;<sp/>first_matcher_;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>SecondType&amp;&gt;<sp/>second_matcher_;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>polymorphic<sp/>Pair(first_matcher,<sp/>second_matcher).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FirstMatcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SecondMatcher&gt;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PairMatcher<sp/>{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/>PairMatcher(FirstMatcher<sp/>first_matcher,<sp/>SecondMatcher<sp/>second_matcher)</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>first_matcher_(first_matcher),<sp/>second_matcher_(second_matcher)<sp/>{}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PairType&gt;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;PairType&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;PairType&gt;(</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PairMatcherImpl&lt;const<sp/>PairType&amp;&gt;(first_matcher_,<sp/>second_matcher_));</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FirstMatcher<sp/>first_matcher_;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SecondMatcher<sp/>second_matcher_;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>IndexSequence&lt;I...&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::tie(get&lt;I&gt;(t)...))<sp/>{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::tuple_size&lt;T&gt;::value<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(I),</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>arguments<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>number<sp/>of<sp/>fields.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(get&lt;I&gt;(t)...);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_structured_bindings)<sp/>&amp;&amp;<sp/>__cpp_structured_bindings<sp/>&gt;=<sp/>201606</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;1&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;2&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b);</highlight></codeline>
<codeline lineno="3171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;3&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;4&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;5&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;6&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f);</highlight></codeline>
<codeline lineno="3191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;7&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;8&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h);</highlight></codeline>
<codeline lineno="3201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;9&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i);</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;10&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;11&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k);</highlight></codeline>
<codeline lineno="3216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;12&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;13&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;14&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;15&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o);</highlight></codeline>
<codeline lineno="3236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;16&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p);</highlight></codeline>
<codeline lineno="3241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;17&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p,<sp/>q]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p,<sp/>q);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;18&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p,<sp/>q,<sp/>r]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p,<sp/>q,<sp/>r);</highlight></codeline>
<codeline lineno="3251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStructImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>MakeIndexSequence&lt;19&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p,<sp/>q,<sp/>r,<sp/>s]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p,<sp/>q,<sp/>r,<sp/>s);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(__cpp_structured_bindings)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>UnpackStruct(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">((UnpackStructImpl)(t,<sp/>MakeIndexSequence&lt;I&gt;{},<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(UnpackStructImpl)(t,<sp/>MakeIndexSequence&lt;I&gt;{},<sp/>0);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>do<sp/>comma<sp/>folding<sp/>in<sp/>C++11.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>array<sp/>ensures<sp/>left-to-right<sp/>order<sp/>of<sp/>evaluation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Usage:<sp/>VariadicExpand({expr...});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VariadicExpand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;)[N])<sp/>{}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Struct,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StructSize&gt;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FieldsAreMatcherImpl;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Struct,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FieldsAreMatcherImpl&lt;Struct,<sp/>IndexSequence&lt;I...&gt;&gt;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Struct&gt;<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UnpackedType<sp/>=</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(UnpackStruct&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(I)&gt;(std::declval&lt;const<sp/>Struct&amp;&gt;()));</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MatchersType<sp/>=<sp/>std::tuple&lt;</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Matcher&lt;const<sp/>typename<sp/>std::tuple_element&lt;I,<sp/>UnpackedType&gt;::type&amp;&gt;...&gt;;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Inner&gt;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FieldsAreMatcherImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Inner&amp;<sp/>matchers)</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matchers_(testing::SafeMatcherCast&lt;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>typename<sp/>std::tuple_element&lt;I,<sp/>UnpackedType&gt;::type&amp;&gt;(</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;I&gt;(matchers))...)<sp/>{}</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/>VariadicExpand(</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{(*os<sp/>&lt;&lt;<sp/>separator<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>field<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>I<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>that<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;I&gt;(matchers_).DescribeTo(os),<sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>&quot;</highlight><highlight class="normal">)...});</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/>VariadicExpand({(*os<sp/>&lt;&lt;<sp/>separator<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>field<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>I<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>that<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;I&gt;(matchers_).DescribeNegationTo(os),</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>or<sp/>&quot;</highlight><highlight class="normal">)...});</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Struct<sp/>t,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchInternal((UnpackStruct&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(I)&gt;)(t),<sp/>listener);</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchInternal(UnpackedType<sp/>tuple,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>interested,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>construct<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>good<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VariadicExpand({good<sp/>=<sp/>good<sp/>&amp;&amp;<sp/>std::get&lt;I&gt;(matchers_).Matches(</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;I&gt;(tuple))...});</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>good;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>failed_pos<sp/>=<sp/>~size_t{};</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;StringMatchResultListener&gt;<sp/>inner_listener(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(I));</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>VariadicExpand(</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{failed_pos<sp/>==<sp/>~size_t{}<sp/>&amp;&amp;<sp/>!std::get&lt;I&gt;(matchers_).MatchAndExplain(</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;I&gt;(tuple),<sp/>&amp;inner_listener[I])</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>failed_pos<sp/>=<sp/>I</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>0<sp/>...});</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failed_pos<sp/>!=<sp/>~</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{})<sp/>{</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>field<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>failed_pos<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(inner_listener[failed_pos].str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>all<sp/>elements<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>where&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(I);<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>str<sp/>=<sp/>inner_listener[index].str();</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str.empty())<sp/>{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>separator<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>field<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>a<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str;</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>MatchersType<sp/>matchers_;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Inner&gt;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FieldsAreMatcher<sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FieldsAreMatcher(Inner...<sp/>inner)<sp/>:<sp/>matchers_(std::move(inner)...)<sp/>{}</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Struct&gt;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Struct&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Struct&gt;(</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FieldsAreMatcherImpl&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Struct&amp;,<sp/>IndexSequenceFor&lt;Inner...&gt;&gt;(</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers_));</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/>std::tuple&lt;Inner...&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>ElementsAre()<sp/>and<sp/>ElementsAreArray().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ElementsAreMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Container&gt;<sp/>{</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(Container)<sp/>RawContainer;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;RawContainer&gt;<sp/>View;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::type<sp/>StlContainer;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::const_reference<sp/>StlContainerReference;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StlContainer::value_type<sp/>Element;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>the<sp/>matcher<sp/>from<sp/>a<sp/>sequence<sp/>of<sp/>element<sp/>values<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIter&gt;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/>ElementsAreMatcherImpl(InputIter<sp/>first,<sp/>InputIter<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(first<sp/>!=<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers_.push_back(MatcherCast&lt;const<sp/>Element&amp;&gt;(*first++));</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>empty&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>1<sp/>element<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers_[0].DescribeTo(os);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Elements(count())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>where\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers_[i].DescribeTo(os);</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>count())<sp/>{</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>the<sp/>negation<sp/>of<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>empty&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>have<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Elements(count())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>or\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers_[i].DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>count())<sp/>{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>or\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Container<sp/>container,</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>work<sp/>with<sp/>stream-like<sp/>&quot;containers&quot;,<sp/>we<sp/>must<sp/>only<sp/>walk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>through<sp/>the<sp/>elements<sp/>in<sp/>one<sp/>pass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listener_interested<sp/>=<sp/>listener-&gt;IsInterested();</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explanations[i]<sp/>is<sp/>the<sp/>explanation<sp/>of<sp/>the<sp/>element<sp/>at<sp/>index<sp/>i.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::vector&lt;std::string&gt;<sp/>explanations(count());</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>StlContainerReference<sp/>stl_container<sp/>=<sp/>View::ConstReference(container);</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>stl_container.begin();</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>exam_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mismatch_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>we<sp/>found<sp/>a<sp/>mismatched<sp/>element<sp/>yet?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>the<sp/>elements<sp/>and<sp/>matchers<sp/>in<sp/>pairs,<sp/>until<sp/>we<sp/>reach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>end<sp/>of<sp/>either<sp/>the<sp/>elements<sp/>or<sp/>the<sp/>matchers,<sp/>or<sp/>until<sp/>we<sp/>find<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mismatch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>stl_container.end()<sp/>&amp;&amp;<sp/>exam_pos<sp/>!=<sp/>count();<sp/>++it,<sp/>++exam_pos)<sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match;<sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>the<sp/>current<sp/>element<sp/>match<sp/>the<sp/>current<sp/>matcher?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener_interested)<sp/>{</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>s;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match<sp/>=<sp/>matchers_[exam_pos].MatchAndExplain(*it,<sp/>&amp;s);</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>explanations[exam_pos]<sp/>=<sp/>s.str();</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match<sp/>=<sp/>matchers_[exam_pos].Matches(*it);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!match)<sp/>{</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mismatch_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>mismatch_found<sp/>is<sp/>true,<sp/>&apos;exam_pos&apos;<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>mismatch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>how<sp/>many<sp/>elements<sp/>the<sp/>actual<sp/>container<sp/>has.<sp/><sp/>We<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calling<sp/>size()<sp/>s.t.<sp/>this<sp/>code<sp/>works<sp/>for<sp/>stream-like<sp/>&quot;containers&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>don&apos;t<sp/>define<sp/>size().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>actual_count<sp/>=<sp/>exam_pos;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>stl_container.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++actual_count;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_count<sp/>!=<sp/>count())<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>element<sp/>count<sp/>doesn&apos;t<sp/>match.<sp/><sp/>If<sp/>the<sp/>container<sp/>is<sp/>empty,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there&apos;s<sp/>no<sp/>need<sp/>to<sp/>explain<sp/>anything<sp/>as<sp/>Google<sp/>Mock<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prints<sp/>the<sp/>empty<sp/>container.<sp/><sp/>Otherwise<sp/>we<sp/>just<sp/>need<sp/>to<sp/>show</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>elements<sp/>there<sp/>actually<sp/>are.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener_interested<sp/>&amp;&amp;<sp/>(actual_count<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Elements(actual_count);</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mismatch_found)<sp/>{</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>element<sp/>count<sp/>matches,<sp/>but<sp/>the<sp/>exam_pos-th<sp/>element<sp/>doesn&apos;t<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener_interested)<sp/>{</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>exam_pos<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(explanations[exam_pos],<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Every<sp/>element<sp/>matches<sp/>its<sp/>expectation.<sp/><sp/>We<sp/>need<sp/>to<sp/>explain<sp/>why</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>obvious<sp/>ones<sp/>can<sp/>be<sp/>skipped).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener_interested)<sp/>{</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reason_printed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s<sp/>=<sp/>explanations[i];</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.empty())<sp/>{</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reason_printed)<sp/>{</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\nand<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason_printed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Message<sp/>Elements(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Message()<sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/>(count<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>element&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matchers_.size();<sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/>::std::vector&lt;Matcher&lt;const<sp/>Element&amp;&gt;&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="3508"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Connectivity<sp/>matrix<sp/>of<sp/>(elements<sp/>X<sp/>matchers),<sp/>in<sp/>element-major<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initially,<sp/>there<sp/>are<sp/>no<sp/>edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>NextGraph()<sp/>to<sp/>iterate<sp/>over<sp/>all<sp/>possible<sp/>edge<sp/>configurations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>Randomize()<sp/>to<sp/>generate<sp/>a<sp/>random<sp/>edge<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>MatchMatrix<sp/>{</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/>MatchMatrix(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_matchers)</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>num_elements_(num_elements),</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_matchers_(num_matchers),</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched_(num_elements_<sp/>*<sp/>num_matchers_,<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>LhsSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_elements_;<sp/>}</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>RhsSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_matchers_;<sp/>}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasEdge(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilhs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matched_[SpaceIndex(ilhs,<sp/>irhs)]<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetEdge(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilhs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>matched_[SpaceIndex(ilhs,<sp/>irhs)]<sp/>=<sp/>b<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Treating<sp/>the<sp/>connectivity<sp/>matrix<sp/>as<sp/>a<sp/>(LhsSize()*RhsSize())-bit<sp/>number,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>adds<sp/>1<sp/>to<sp/>that<sp/>number;<sp/>returns<sp/>false<sp/>if<sp/>incrementing<sp/>the<sp/>graph<sp/>left<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NextGraph();</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Randomize();</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/>std::string<sp/>DebugString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SpaceIndex(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilhs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ilhs<sp/>*<sp/>num_matchers_<sp/>+<sp/>irhs;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_elements_;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_matchers_;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>element<sp/>is<sp/>a<sp/>char<sp/>interpreted<sp/>as<sp/>bool.<sp/>They<sp/>are<sp/>stored<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>flattened<sp/>array<sp/>in<sp/>lhs-major<sp/>order,<sp/>use<sp/>&apos;SpaceIndex()&apos;<sp/>to<sp/>translate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>(ilhs,<sp/>irhs)<sp/>matrix<sp/>coordinate<sp/>into<sp/>an<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>::std::vector&lt;char&gt;<sp/>matched_;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal">typedef<sp/>::std::pair&lt;size_t,<sp/>size_t&gt;<sp/>ElementMatcherPair;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal">typedef<sp/>::std::vector&lt;ElementMatcherPair&gt;<sp/>ElementMatcherPairs;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>maximum<sp/>bipartite<sp/>matching<sp/>for<sp/>the<sp/>specified<sp/>graph<sp/>&apos;g&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matching<sp/>is<sp/>represented<sp/>as<sp/>a<sp/>vector<sp/>of<sp/>{element,<sp/>matcher}<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal">GTEST_API_<sp/>ElementMatcherPairs<sp/>FindMaxBipartiteMatching(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatchMatrix&amp;<sp/>g);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnorderedMatcherRequire<sp/>{</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Flags<sp/>{</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>Superset<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>0,</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>Subset<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>1,</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/>ExactMatch<sp/>=<sp/>Superset<sp/>|<sp/>Subset,</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3566"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Untyped<sp/>base<sp/>class<sp/>for<sp/>implementing<sp/>UnorderedElementsAre.<sp/><sp/>By</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>putting<sp/>logic<sp/>that&apos;s<sp/>not<sp/>specific<sp/>to<sp/>the<sp/>element<sp/>type<sp/>here,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reduce<sp/>binary<sp/>bloat<sp/>and<sp/>increase<sp/>compilation<sp/>speed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>UnorderedElementsAreMatcherImplBase<sp/>{</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>UnorderedElementsAreMatcherImplBase(</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UnorderedMatcherRequire::Flags<sp/>matcher_flags)</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>match_flags_(matcher_flags)<sp/>{}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>vector<sp/>of<sp/>matcher<sp/>describers,<sp/>one<sp/>for<sp/>each<sp/>element<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>own<sp/>the<sp/>describers<sp/>(and<sp/>thus<sp/>can<sp/>be<sp/>used<sp/>only<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>matchers<sp/>are<sp/>alive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::vector&lt;const<sp/>MatcherDescriberInterface*&gt;<sp/>MatcherDescriberVec;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>this<sp/>UnorderedElementsAre<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeToImpl(::std::ostream*<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>the<sp/>negation<sp/>of<sp/>this<sp/>UnorderedElementsAre<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationToImpl(::std::ostream*<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VerifyMatchMatrix(const<sp/>::std::vector&lt;std::string&gt;&amp;<sp/>element_printouts,</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatchMatrix&amp;<sp/>matrix,</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FindPairing(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatchMatrix&amp;<sp/>matrix,</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/>MatcherDescriberVec&amp;<sp/>matcher_describers()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher_describers_;<sp/>}</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Message<sp/>Elements(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Message()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>element&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(n<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/>UnorderedMatcherRequire::Flags<sp/>match_flags()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match_flags_;<sp/>}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/>UnorderedMatcherRequire::Flags<sp/>match_flags_;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/>MatcherDescriberVec<sp/>matcher_describers_;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>UnorderedElementsAre,<sp/>UnorderedElementsAreArray,<sp/>IsSubsetOf,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSupersetOf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnorderedElementsAreMatcherImpl</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Container&gt;,</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>UnorderedElementsAreMatcherImplBase<sp/>{</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(Container)<sp/>RawContainer;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;RawContainer&gt;<sp/>View;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::type<sp/>StlContainer;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::const_reference<sp/>StlContainerReference;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StlContainer::value_type<sp/>Element;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIter&gt;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/>UnorderedElementsAreMatcherImpl(UnorderedMatcherRequire::Flags<sp/>matcher_flags,</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIter<sp/>first,<sp/>InputIter<sp/>last)</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>UnorderedElementsAreMatcherImplBase(matcher_flags)<sp/>{</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first<sp/>!=<sp/>last;<sp/>++first)<sp/>{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers_.push_back(MatcherCast&lt;const<sp/>Element&amp;&gt;(*first));</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>m<sp/>:<sp/>matchers_)<sp/>{</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher_describers().push_back(m.GetDescriber());</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnorderedElementsAreMatcherImplBase::DescribeToImpl(os);</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>the<sp/>negation<sp/>of<sp/>this<sp/>matcher<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnorderedElementsAreMatcherImplBase::DescribeNegationToImpl(os);</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Container<sp/>container,</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>StlContainerReference<sp/>stl_container<sp/>=<sp/>View::ConstReference(container);</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::vector&lt;std::string&gt;<sp/>element_printouts;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>MatchMatrix<sp/>matrix<sp/>=</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AnalyzeElements(stl_container.begin(),<sp/>stl_container.end(),</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;element_printouts,<sp/>listener);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VerifyMatchMatrix(element_printouts,<sp/>matrix,<sp/>listener)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindPairing(matrix,<sp/>listener);</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ElementIter&gt;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/>MatchMatrix<sp/>AnalyzeElements(ElementIter<sp/>elem_first,<sp/>ElementIter<sp/>elem_last,</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::vector&lt;std::string&gt;*<sp/>element_printouts,</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/>element_printouts-&gt;clear();</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::vector&lt;char&gt;<sp/>did_match;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_elements<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/>DummyMatchResultListener<sp/>dummy;</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>elem_first<sp/>!=<sp/>elem_last;<sp/>++num_elements,<sp/>++elem_first)<sp/>{</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_printouts-&gt;push_back(PrintToString(*elem_first));</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs<sp/>=<sp/>0;<sp/>irhs<sp/>!=<sp/>matchers_.size();<sp/>++irhs)<sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>did_match.push_back(</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers_[irhs].MatchAndExplain(*elem_first,<sp/>&amp;dummy));</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/>MatchMatrix<sp/>matrix(num_elements,<sp/>matchers_.size());</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::vector&lt;char&gt;::const_iterator<sp/>did_match_iter<sp/>=<sp/>did_match.begin();</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilhs<sp/>=<sp/>0;<sp/>ilhs<sp/>!=<sp/>num_elements;<sp/>++ilhs)<sp/>{</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs<sp/>=<sp/>0;<sp/>irhs<sp/>!=<sp/>matchers_.size();<sp/>++irhs)<sp/>{</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix.SetEdge(ilhs,<sp/>irhs,<sp/>*did_match_iter++<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/>::std::vector&lt;Matcher&lt;const<sp/>Element&amp;&gt;&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functor<sp/>for<sp/>use<sp/>in<sp/>TransformTuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>MatcherCast&lt;Target&gt;<sp/>on<sp/>an<sp/>input<sp/>argument<sp/>of<sp/>any<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Target&gt;</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CastAndAppendTransform<sp/>{</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg&gt;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/>Matcher&lt;Target&gt;<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg&amp;<sp/>a)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatcherCast&lt;Target&gt;(a);</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3695"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>UnorderedElementsAre.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTuple&gt;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnorderedElementsAreMatcher<sp/>{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>UnorderedElementsAreMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple&amp;<sp/>args)</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matchers_(args)<sp/>{}</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(Container)<sp/>RawContainer;</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;RawContainer&gt;::type<sp/>View;</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::value_type<sp/>Element;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>::std::vector&lt;Matcher&lt;const<sp/>Element&amp;&gt;&gt;<sp/>MatcherVec;</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/>MatcherVec<sp/>matchers;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/>matchers.reserve(::std::tuple_size&lt;MatcherTuple&gt;::value);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/>TransformTupleValues(CastAndAppendTransform&lt;const<sp/>Element&amp;&gt;(),<sp/>matchers_,</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::back_inserter(matchers));</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UnorderedElementsAreMatcherImpl&lt;const<sp/>Container&amp;&gt;(</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnorderedMatcherRequire::ExactMatch,<sp/>matchers.begin(),</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers.end()));</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple<sp/>matchers_;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>ElementsAre.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTuple&gt;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ElementsAreMatcher<sp/>{</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ElementsAreMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple&amp;<sp/>args)<sp/>:<sp/>matchers_(args)<sp/>{}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!IsHashTable&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(Container)&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::tuple_size&lt;MatcherTuple&gt;::value<sp/>&lt;<sp/>2,</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;use<sp/>UnorderedElementsAre<sp/>with<sp/>hash<sp/>tables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(Container)<sp/>RawContainer;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;RawContainer&gt;::type<sp/>View;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View::value_type<sp/>Element;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>::std::vector&lt;Matcher&lt;const<sp/>Element&amp;&gt;&gt;<sp/>MatcherVec;</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/>MatcherVec<sp/>matchers;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/>matchers.reserve(::std::tuple_size&lt;MatcherTuple&gt;::value);</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/>TransformTupleValues(CastAndAppendTransform&lt;const<sp/>Element&amp;&gt;(),<sp/>matchers_,</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::back_inserter(matchers));</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ElementsAreMatcherImpl&lt;const<sp/>Container&amp;&gt;(</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers.begin(),<sp/>matchers.end()));</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherTuple<sp/>matchers_;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>UnorderedElementsAreArray(),<sp/>IsSubsetOf(),<sp/>and<sp/>IsSupersetOf().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnorderedElementsAreArrayMatcher<sp/>{</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>UnorderedElementsAreArrayMatcher(UnorderedMatcherRequire::Flags<sp/>match_flags,</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter<sp/>first,<sp/>Iter<sp/>last)</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>match_flags_(match_flags),<sp/>matchers_(first,<sp/>last)<sp/>{}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UnorderedElementsAreMatcherImpl&lt;const<sp/>Container&amp;&gt;(</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_flags_,<sp/>matchers_.begin(),<sp/>matchers_.end()));</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/>UnorderedMatcherRequire::Flags<sp/>match_flags_;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/>::std::vector&lt;T&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>ElementsAreArray().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ElementsAreArrayMatcher<sp/>{</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/>ElementsAreArrayMatcher(Iter<sp/>first,<sp/>Iter<sp/>last)<sp/>:<sp/>matchers_(first,<sp/>last)<sp/>{}</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!IsHashTable&lt;GTEST_REMOVE_REFERENCE_AND_CONST_(Container)&gt;::value,</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;use<sp/>UnorderedElementsAreArray<sp/>with<sp/>hash<sp/>tables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"></highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Container&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ElementsAreMatcherImpl&lt;const<sp/>Container&amp;&gt;(</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers_.begin(),<sp/>matchers_.end()));</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/>const<sp/>::std::vector&lt;T&gt;<sp/>matchers_;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>2-tuple<sp/>matcher<sp/>tm<sp/>of<sp/>type<sp/>Tuple2Matcher<sp/>and<sp/>a<sp/>value<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>type<sp/>Second,<sp/>BoundSecondMatcher&lt;Tuple2Matcher,<sp/>Second&gt;(tm,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second)<sp/>is<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>value<sp/>x<sp/>if<sp/>and<sp/>only<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tm<sp/>matches<sp/>tuple<sp/>(x,<sp/>second).<sp/><sp/>Useful<sp/>for<sp/>implementing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedPointwise()<sp/>in<sp/>terms<sp/>of<sp/>UnorderedElementsAreArray().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BoundSecondMatcher<sp/>is<sp/>copyable<sp/>and<sp/>assignable,<sp/>as<sp/>we<sp/>need<sp/>to<sp/>put</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instances<sp/>of<sp/>this<sp/>class<sp/>in<sp/>a<sp/>vector<sp/>when<sp/>implementing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedPointwise().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple2Matcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Second&gt;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BoundSecondMatcher<sp/>{</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/>BoundSecondMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple2Matcher&amp;<sp/>tm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Second&amp;<sp/>second)</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>tuple2_matcher_(tm),<sp/>second_value_(second)<sp/>{}</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/>BoundSecondMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundSecondMatcher&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;T&gt;(tuple2_matcher_,<sp/>second_value_));</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>define<sp/>this<sp/>for<sp/>UnorderedPointwise()<sp/>to<sp/>compile<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C++98<sp/>mode,<sp/>as<sp/>it<sp/>puts<sp/>BoundSecondMatcher<sp/>instances<sp/>in<sp/>a<sp/>vector,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>requires<sp/>the<sp/>elements<sp/>to<sp/>be<sp/>assignable<sp/>in<sp/>C++98.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compiler<sp/>cannot<sp/>generate<sp/>the<sp/>operator=<sp/>for<sp/>us,<sp/>as<sp/>Tuple2Matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>Second<sp/>may<sp/>not<sp/>be<sp/>assignable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>this<sp/>should<sp/>never<sp/>be<sp/>called,<sp/>so<sp/>the<sp/>implementation<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>assert.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundSecondMatcher&amp;<sp/></highlight><highlight class="comment">/*rhs*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_LOG_(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BoundSecondMatcher<sp/>should<sp/>never<sp/>be<sp/>assigned.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>::std::tuple&lt;T,<sp/>Second&gt;<sp/>ArgTuple;</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple2Matcher&amp;<sp/>tm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Second&amp;<sp/>second)</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>mono_tuple2_matcher_(SafeMatcherCast&lt;const<sp/>ArgTuple&amp;&gt;(tm)),</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_value_(second)<sp/>{}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;and<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrint(second_value_,<sp/>os);</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mono_tuple2_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(T<sp/>x,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mono_tuple2_matcher_.MatchAndExplain(ArgTuple(x,<sp/>second_value_),</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>ArgTuple&amp;&gt;<sp/>mono_tuple2_matcher_;</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Second<sp/>second_value_;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple2Matcher<sp/>tuple2_matcher_;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Second<sp/>second_value_;</highlight></codeline>
<codeline lineno="3858"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>2-tuple<sp/>matcher<sp/>tm<sp/>and<sp/>a<sp/>value<sp/>second,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MatcherBindSecond(tm,<sp/>second)<sp/>returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>x<sp/>if<sp/>and<sp/>only<sp/>if<sp/>tm<sp/>matches<sp/>tuple<sp/>(x,<sp/>second).<sp/><sp/>Useful<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementing<sp/>UnorderedPointwise()<sp/>in<sp/>terms<sp/>of<sp/>UnorderedElementsAreArray().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple2Matcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Second&gt;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal">BoundSecondMatcher&lt;Tuple2Matcher,<sp/>Second&gt;<sp/>MatcherBindSecond(</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple2Matcher&amp;<sp/>tm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Second&amp;<sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BoundSecondMatcher&lt;Tuple2Matcher,<sp/>Second&gt;(tm,<sp/>second);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>description<sp/>for<sp/>a<sp/>matcher<sp/>defined<sp/>using<sp/>the<sp/>MATCHER*()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macro<sp/>where<sp/>the<sp/>user-supplied<sp/>description<sp/>string<sp/>is<sp/>&quot;&quot;,<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;negation&apos;<sp/>is<sp/>false;<sp/>otherwise<sp/>returns<sp/>the<sp/>description<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>negation<sp/>of<sp/>the<sp/>matcher.<sp/><sp/>&apos;param_values&apos;<sp/>contains<sp/>a<sp/>list<sp/>of<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>the<sp/>print-out<sp/>of<sp/>the<sp/>matcher&apos;s<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>FormatMatcherDescription(</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>matcher_name,</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>char*&gt;&amp;<sp/>param_names,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Strings&amp;<sp/>param_values);</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>matcher<sp/>that<sp/>checks<sp/>the<sp/>value<sp/>of<sp/>a<sp/>optional&lt;&gt;<sp/>type<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueMatcher&gt;</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">OptionalMatcher<sp/>{</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>OptionalMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueMatcher&amp;<sp/>value_matcher)</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_matcher_(value_matcher)<sp/>{}</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Optional&gt;</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;Optional&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matcher&lt;Optional&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;const<sp/>Optional&amp;&gt;(value_matcher_));</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Optional&gt;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;Optional&gt;<sp/>{</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(Optional)<sp/>OptionalView;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OptionalView::value_type<sp/>ValueType;</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueMatcher&amp;<sp/>value_matcher)</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_matcher_(MatcherCast&lt;ValueType&gt;(value_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(Optional<sp/>optional,</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!optional)<sp/>{</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>not<sp/>engaged&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueType&amp;<sp/>value<sp/>=<sp/>*optional;</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>value_listener;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>value_matcher_.MatchAndExplain(value,<sp/>&amp;value_listener);</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PrintToString(value)</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(match<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintIfNotEmpty(value_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;ValueType&gt;<sp/>value_matcher_;</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueMatcher<sp/>value_matcher_;</highlight></codeline>
<codeline lineno="3930"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">variant_matcher<sp/>{</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloads<sp/>to<sp/>allow<sp/>VariantMatcher<sp/>to<sp/>do<sp/>proper<sp/>ADL<sp/>lookup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>holds_alternative()<sp/>{}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get()<sp/>{}</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>matcher<sp/>that<sp/>checks<sp/>the<sp/>value<sp/>of<sp/>a<sp/>variant&lt;&gt;<sp/>type<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VariantMatcher<sp/>{</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>VariantMatcher(<ref refid="classtesting_1_1Matcher" kindref="compound">::testing::Matcher&lt;const T&amp;&gt;</ref><sp/>matcher)</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matcher_(std::move(matcher))<sp/>{}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variant&gt;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Variant&amp;<sp/>value,</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::get;</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>holds_alternative&lt;T&gt;(value)<sp/>&amp;&amp;<sp/>matcher_.Matches(get&lt;T&gt;(value));</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!holds_alternative&lt;T&gt;(value))<sp/>{</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>is<sp/>not<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>elem<sp/>=<sp/>get&lt;T&gt;(value);</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>elem_listener;</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>matcher_.MatchAndExplain(elem,<sp/>&amp;elem_listener);</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PrintToString(elem)</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(match<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintIfNotEmpty(elem_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>a<sp/>variant&lt;&gt;<sp/>with<sp/>value<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName()</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>and<sp/>the<sp/>value<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>a<sp/>variant&lt;&gt;<sp/>with<sp/>value<sp/>of<sp/>type<sp/>other<sp/>than<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName()</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>or<sp/>the<sp/>value<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetTypeName()<sp/>{</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::GetTypeName&lt;T&gt;());</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>element<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/>const<sp/>::testing::Matcher&lt;const<sp/>T&amp;&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>variant_matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">any_cast_matcher<sp/>{</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloads<sp/>to<sp/>allow<sp/>AnyCastMatcher<sp/>to<sp/>do<sp/>proper<sp/>ADL<sp/>lookup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>any_cast()<sp/>{}</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>matcher<sp/>that<sp/>any_casts<sp/>the<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AnyCastMatcher<sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>AnyCastMatcher(const<sp/>::testing::Matcher&lt;const<sp/>T&amp;&gt;&amp;<sp/>matcher)</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matcher_(matcher)<sp/>{}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AnyType&gt;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AnyType&amp;<sp/>value,</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!listener-&gt;IsInterested())<sp/>{</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>ptr<sp/>=<sp/>any_cast&lt;T&gt;(&amp;value);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>matcher_.Matches(*ptr);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>elem<sp/>=<sp/>any_cast&lt;T&gt;(&amp;value);</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elem<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>is<sp/>not<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>elem_listener;</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>matcher_.MatchAndExplain(*elem,<sp/>&amp;elem_listener);</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PrintToString(*elem)</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(match<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matches&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintIfNotEmpty(elem_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>&apos;any&apos;<sp/>type<sp/>with<sp/>value<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName()</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>and<sp/>the<sp/>value<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>&apos;any&apos;<sp/>type<sp/>with<sp/>value<sp/>of<sp/>type<sp/>other<sp/>than<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName()</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>or<sp/>the<sp/>value<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetTypeName()<sp/>{</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::GetTypeName&lt;T&gt;());</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>element<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/>const<sp/>::testing::Matcher&lt;const<sp/>T&amp;&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>any_cast_matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Args()<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ArgsTuple,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>k&gt;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ArgsMatcherImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;ArgsTuple&gt;<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RawArgsTuple<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;ArgsTuple&gt;::type;</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SelectedArgs<sp/>=</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;typename<sp/>std::tuple_element&lt;k,<sp/>RawArgsTuple&gt;::type...&gt;;</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MonomorphicInnerMatcher<sp/>=<sp/>Matcher&lt;const<sp/>SelectedArgs&amp;&gt;;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ArgsMatcherImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>inner_matcher)</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>inner_matcher_(SafeMatcherCast&lt;const<sp/>SelectedArgs&amp;&gt;(inner_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(ArgsTuple<sp/>args,</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>spurious<sp/>C4100<sp/>on<sp/>MSVC&lt;=15.7<sp/>when<sp/>k<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)args;</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SelectedArgs&amp;<sp/>selected_args<sp/>=</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(std::get&lt;k&gt;(args)...);</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!listener-&gt;IsInterested())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inner_matcher_.Matches(selected_args);</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintIndices(listener-&gt;stream());</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;are<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PrintToString(selected_args);</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/>StringMatchResultListener<sp/>inner_listener;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inner_matcher_.MatchAndExplain(selected_args,<sp/>&amp;inner_listener);</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintIfNotEmpty(inner_listener.str(),<sp/>listener-&gt;stream());</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>tuple<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintIndices(os);</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>tuple<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintIndices(os);</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>selected<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintIndices(::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>spurious<sp/>C4189<sp/>on<sp/>MSVC&lt;=15.7<sp/>when<sp/>k<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)sep;</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>static_cast<sp/>to<sp/>void<sp/>is<sp/>needed<sp/>to<sp/>silence<sp/>Clang&apos;s<sp/>-Wcomma<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>pattern<sp/>looks<sp/>suspiciously<sp/>like<sp/>we<sp/>may<sp/>have<sp/>mismatched<sp/>parentheses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>may<sp/>have<sp/>been<sp/>trying<sp/>to<sp/>use<sp/>the<sp/>first<sp/>operation<sp/>of<sp/>the<sp/>comma<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>member<sp/>of<sp/>the<sp/>array,<sp/>so<sp/>Clang<sp/>warns<sp/>that<sp/>we<sp/>may<sp/>have<sp/>made<sp/>a<sp/>mistake.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dummy[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*os<sp/>&lt;&lt;<sp/>sep<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>k),<sp/>sep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">)...};</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)dummy;</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/>MonomorphicInnerMatcher<sp/>inner_matcher_;</highlight></codeline>
<codeline lineno="4116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">InnerMatcher,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>k&gt;</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ArgsMatcher<sp/>{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ArgsMatcher(InnerMatcher<sp/>inner_matcher)</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>inner_matcher_(std::move(inner_matcher))<sp/>{}</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"></highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgsTuple&gt;</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Matcher&lt;ArgsTuple&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArgsMatcherImpl&lt;ArgsTuple,<sp/>k...&gt;(inner_matcher_));</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/>InnerMatcher<sp/>inner_matcher_;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"></highlight></codeline>
<codeline lineno="4135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ElementsAreArray(iterator_first,<sp/>iterator_last)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ElementsAreArray(pointer,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ElementsAreArray(array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ElementsAreArray(container)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ElementsAreArray({<sp/>e1,<sp/>e2,<sp/>...,<sp/>en<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ElementsAreArray()<sp/>functions<sp/>are<sp/>like<sp/>ElementsAre(...),<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>they<sp/>are<sp/>given<sp/>a<sp/>homogeneous<sp/>sequence<sp/>rather<sp/>than<sp/>taking<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>element<sp/>as<sp/>a<sp/>function<sp/>argument.<sp/>The<sp/>sequence<sp/>can<sp/>be<sp/>specified<sp/>as<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>array,<sp/>a<sp/>pointer<sp/>and<sp/>count,<sp/>a<sp/>vector,<sp/>an<sp/>initializer<sp/>list,<sp/>or<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STL<sp/>iterator<sp/>range.<sp/>In<sp/>each<sp/>of<sp/>these<sp/>cases,<sp/>the<sp/>underlying<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>either<sp/>a<sp/>sequence<sp/>of<sp/>values<sp/>or<sp/>a<sp/>sequence<sp/>of<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>forms<sp/>of<sp/>ElementsAreArray()<sp/>make<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>matcher<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::ElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type&gt;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal">ElementsAreArray(Iter<sp/>first,<sp/>Iter<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type<sp/>T;</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ElementsAreArrayMatcher&lt;T&gt;(first,<sp/>last);</highlight></codeline>
<codeline lineno="4156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ElementsAreArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>pointer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ElementsAreArray(pointer,<sp/>pointer<sp/>+<sp/>count))<sp/>{</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ElementsAreArray(pointer,<sp/>pointer<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="4162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ElementsAreArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;array)[N])</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ElementsAreArray(array,<sp/>N))<sp/>{</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ElementsAreArray(array,<sp/>N);</highlight></codeline>
<codeline lineno="4168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ElementsAreArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>container)</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ElementsAreArray(container.begin(),<sp/>container.end()))<sp/>{</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ElementsAreArray(container.begin(),<sp/>container.end());</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ElementsAreArray(::std::initializer_list&lt;T&gt;<sp/>xs)</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ElementsAreArray(xs.begin(),<sp/>xs.end()))<sp/>{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ElementsAreArray(xs.begin(),<sp/>xs.end());</highlight></codeline>
<codeline lineno="4180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedElementsAreArray(iterator_first,<sp/>iterator_last)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedElementsAreArray(pointer,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedElementsAreArray(array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedElementsAreArray(container)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedElementsAreArray({<sp/>e1,<sp/>e2,<sp/>...,<sp/>en<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedElementsAreArray()<sp/>verifies<sp/>that<sp/>a<sp/>bijective<sp/>mapping<sp/>onto<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>collection<sp/>of<sp/>matchers<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matchers<sp/>can<sp/>be<sp/>specified<sp/>as<sp/>an<sp/>array,<sp/>a<sp/>pointer<sp/>and<sp/>count,<sp/>a<sp/>container,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>initializer<sp/>list,<sp/>or<sp/>an<sp/>STL<sp/>iterator<sp/>range.<sp/>In<sp/>each<sp/>of<sp/>these<sp/>cases,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>underlying<sp/>matchers<sp/>can<sp/>be<sp/>either<sp/>values<sp/>or<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type&gt;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal">UnorderedElementsAreArray(Iter<sp/>first,<sp/>Iter<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type<sp/>T;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;(</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::UnorderedMatcherRequire::ExactMatch,<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="4202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>UnorderedElementsAreArray(</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>pointer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnorderedElementsAreArray(pointer,<sp/>pointer<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="4208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>UnorderedElementsAreArray(</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;array)[N])<sp/>{</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnorderedElementsAreArray(array,<sp/>N);</highlight></codeline>
<codeline lineno="4214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type&gt;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal">UnorderedElementsAreArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnorderedElementsAreArray(container.begin(),<sp/>container.end());</highlight></codeline>
<codeline lineno="4221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>UnorderedElementsAreArray(</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::initializer_list&lt;T&gt;<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnorderedElementsAreArray(xs.begin(),<sp/>xs.end());</highlight></codeline>
<codeline lineno="4227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_<sp/>is<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>anything<sp/>of<sp/>any<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>definition<sp/>is<sp/>fine<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>The<sp/>C++<sp/>standard<sp/>permits<sp/>using<sp/>the<sp/>name<sp/>_<sp/>in<sp/>a<sp/>namespace<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>the<sp/>global<sp/>namespace<sp/>or<sp/>::std.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>The<sp/>AnythingMatcher<sp/>class<sp/>has<sp/>no<sp/>data<sp/>member<sp/>or<sp/>constructor,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>it&apos;s<sp/>OK<sp/>to<sp/>create<sp/>global<sp/>variables<sp/>of<sp/>this<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>3.<sp/>c-style<sp/>has<sp/>approved<sp/>of<sp/>using<sp/>_<sp/>in<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::AnythingMatcher<sp/>_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>value<sp/>of<sp/>the<sp/>given<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>A()<sp/>{</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>value<sp/>of<sp/>the<sp/>given<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;<sp/>An()<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_;</highlight></codeline>
<codeline lineno="4249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="4252"><highlight class="normal">Matcher&lt;T&gt;<sp/>internal::MatcherCastImpl&lt;T,<sp/>M&gt;::CastImpl(</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>value,<sp/>std::false_type<sp/></highlight><highlight class="comment">/*<sp/>convertible_to_matcher<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/>std::false_type<sp/></highlight><highlight class="comment">/*<sp/>convertible_to_T<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eq(value);</highlight></codeline>
<codeline lineno="4256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>NULL<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::IsNullMatcher&gt;<sp/>IsNull()<sp/>{</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::IsNullMatcher());</highlight></codeline>
<codeline lineno="4261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>non-NULL<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>convenient<sp/>as<sp/>Not(NULL)<sp/>doesn&apos;t<sp/>compile<sp/>(the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thinks<sp/>that<sp/>that<sp/>expression<sp/>is<sp/>comparing<sp/>a<sp/>pointer<sp/>with<sp/>an<sp/>integer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4266"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::NotNullMatcher&gt;<sp/>NotNull()<sp/>{</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::NotNullMatcher());</highlight></codeline>
<codeline lineno="4268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>argument<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>references<sp/>variable<sp/>x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::RefMatcher&lt;T&amp;&gt;<sp/>Ref(T&amp;<sp/>x)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::RefMatcher&lt;T&amp;&gt;(x);</highlight></codeline>
<codeline lineno="4275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>NaN<sp/>floating<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::IsNanMatcher&gt;<sp/>IsNan()<sp/>{</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::IsNanMatcher());</highlight></codeline>
<codeline lineno="4280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>double<sp/>argument<sp/>approximately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>equal<sp/>to<sp/>rhs,<sp/>where<sp/>two<sp/>NANs<sp/>are<sp/>considered<sp/>unequal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;double&gt;<sp/>DoubleEq(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;double&gt;(rhs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>double<sp/>argument<sp/>approximately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>equal<sp/>to<sp/>rhs,<sp/>including<sp/>NaN<sp/>values<sp/>when<sp/>rhs<sp/>is<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;double&gt;<sp/>NanSensitiveDoubleEq(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;double&gt;(rhs,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>double<sp/>argument<sp/>approximately<sp/>equal<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rhs,<sp/>up<sp/>to<sp/>the<sp/>specified<sp/>max<sp/>absolute<sp/>error<sp/>bound,<sp/>where<sp/>two<sp/>NANs<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>considered<sp/>unequal.<sp/><sp/>The<sp/>max<sp/>absolute<sp/>error<sp/>bound<sp/>must<sp/>be<sp/>non-negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;double&gt;<sp/>DoubleNear(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs,</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;double&gt;(rhs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>max_abs_error);</highlight></codeline>
<codeline lineno="4300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>double<sp/>argument<sp/>approximately<sp/>equal<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rhs,<sp/>up<sp/>to<sp/>the<sp/>specified<sp/>max<sp/>absolute<sp/>error<sp/>bound,<sp/>including<sp/>NaN<sp/>values<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rhs<sp/>is<sp/>NaN.<sp/><sp/>The<sp/>max<sp/>absolute<sp/>error<sp/>bound<sp/>must<sp/>be<sp/>non-negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;double&gt;<sp/>NanSensitiveDoubleNear(</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;double&gt;(rhs,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>max_abs_error);</highlight></codeline>
<codeline lineno="4308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>float<sp/>argument<sp/>approximately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>equal<sp/>to<sp/>rhs,<sp/>where<sp/>two<sp/>NANs<sp/>are<sp/>considered<sp/>unequal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;float&gt;<sp/>FloatEq(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;float&gt;(rhs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>float<sp/>argument<sp/>approximately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>equal<sp/>to<sp/>rhs,<sp/>including<sp/>NaN<sp/>values<sp/>when<sp/>rhs<sp/>is<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;float&gt;<sp/>NanSensitiveFloatEq(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;float&gt;(rhs,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>float<sp/>argument<sp/>approximately<sp/>equal<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rhs,<sp/>up<sp/>to<sp/>the<sp/>specified<sp/>max<sp/>absolute<sp/>error<sp/>bound,<sp/>where<sp/>two<sp/>NANs<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>considered<sp/>unequal.<sp/><sp/>The<sp/>max<sp/>absolute<sp/>error<sp/>bound<sp/>must<sp/>be<sp/>non-negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;float&gt;<sp/>FloatNear(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rhs,</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;float&gt;(rhs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>max_abs_error);</highlight></codeline>
<codeline lineno="4328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>float<sp/>argument<sp/>approximately<sp/>equal<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rhs,<sp/>up<sp/>to<sp/>the<sp/>specified<sp/>max<sp/>absolute<sp/>error<sp/>bound,<sp/>including<sp/>NaN<sp/>values<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rhs<sp/>is<sp/>NaN.<sp/><sp/>The<sp/>max<sp/>absolute<sp/>error<sp/>bound<sp/>must<sp/>be<sp/>non-negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;float&gt;<sp/>NanSensitiveFloatNear(</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rhs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEqMatcher&lt;float&gt;(rhs,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>max_abs_error);</highlight></codeline>
<codeline lineno="4336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>pointer<sp/>(raw<sp/>or<sp/>smart)<sp/>that<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>value<sp/>that<sp/>matches<sp/>inner_matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::PointeeMatcher&lt;InnerMatcher&gt;<sp/>Pointee(</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>inner_matcher)<sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::PointeeMatcher&lt;InnerMatcher&gt;(inner_matcher);</highlight></codeline>
<codeline lineno="4344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>pointer<sp/>or<sp/>reference<sp/>that<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inner_matcher<sp/>when<sp/>dynamic_cast&lt;To&gt;<sp/>is<sp/>applied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>of<sp/>dynamic_cast&lt;To&gt;<sp/>is<sp/>forwarded<sp/>to<sp/>the<sp/>inner<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>To<sp/>is<sp/>a<sp/>pointer<sp/>and<sp/>the<sp/>cast<sp/>fails,<sp/>the<sp/>inner<sp/>matcher<sp/>will<sp/>receive<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>To<sp/>is<sp/>a<sp/>reference<sp/>and<sp/>the<sp/>cast<sp/>fails,<sp/>this<sp/>matcher<sp/>returns<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>immediately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::WhenDynamicCastToMatcher&lt;To&gt;&gt;</highlight></codeline>
<codeline lineno="4355"><highlight class="normal">WhenDynamicCastTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;To&gt;&amp;<sp/>inner_matcher)<sp/>{</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::WhenDynamicCastToMatcher&lt;To&gt;(inner_matcher));</highlight></codeline>
<codeline lineno="4358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4360"><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>field<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;matcher&apos;.<sp/><sp/>For<sp/>example,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Field(&amp;Foo::number,<sp/>Ge(5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>a<sp/>Foo<sp/>object<sp/>x<sp/>if<sp/>and<sp/>only<sp/>if<sp/>x.number<sp/>&gt;=<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FieldType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FieldMatcher&gt;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::FieldMatcher&lt;Class,<sp/>FieldType&gt;&gt;<sp/>Field(</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/>FieldType<sp/>Class::*field,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FieldMatcher&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::FieldMatcher&lt;Class,<sp/>FieldType&gt;(</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>field,<sp/>MatcherCast&lt;const<sp/>FieldType&amp;&gt;(matcher)));</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>call<sp/>to<sp/>MatcherCast()<sp/>is<sp/>required<sp/>for<sp/>supporting<sp/>inner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matchers<sp/>of<sp/>compatible<sp/>types.<sp/><sp/>For<sp/>example,<sp/>it<sp/>allows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Field(&amp;Foo::bar,<sp/>m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>compile<sp/>where<sp/>bar<sp/>is<sp/>an<sp/>int32<sp/>and<sp/>m<sp/>is<sp/>a<sp/>matcher<sp/>for<sp/>int64.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>Field()<sp/>but<sp/>also<sp/>takes<sp/>the<sp/>name<sp/>of<sp/>the<sp/>field<sp/>to<sp/>provide<sp/>better<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FieldType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FieldMatcher&gt;</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::FieldMatcher&lt;Class,<sp/>FieldType&gt;&gt;<sp/>Field(</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>field_name,<sp/>FieldType<sp/>Class::*field,</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FieldMatcher&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::FieldMatcher&lt;Class,<sp/>FieldType&gt;(</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>field_name,<sp/>field,<sp/>MatcherCast&lt;const<sp/>FieldType&amp;&gt;(matcher)));</highlight></codeline>
<codeline lineno="4384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>&apos;matcher&apos;.<sp/><sp/>For<sp/>example,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Property(&amp;Foo::str,<sp/>StartsWith(&quot;hi&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>a<sp/>Foo<sp/>object<sp/>x<sp/>if<sp/>and<sp/>only<sp/>if<sp/>x.str()<sp/>starts<sp/>with<sp/>&quot;hi&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyMatcher&gt;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::PropertyMatcher&lt;</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/>Class,<sp/>PropertyType,<sp/>PropertyType<sp/>(Class::*)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="4393"><highlight class="normal">Property(PropertyType<sp/>(Class::*property)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PropertyMatcher&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::PropertyMatcher&lt;Class,<sp/>PropertyType,</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PropertyType<sp/>(Class::*)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;(</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>property,<sp/>MatcherCast&lt;const<sp/>PropertyType&amp;&gt;(matcher)));</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>call<sp/>to<sp/>MatcherCast()<sp/>is<sp/>required<sp/>for<sp/>supporting<sp/>inner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matchers<sp/>of<sp/>compatible<sp/>types.<sp/><sp/>For<sp/>example,<sp/>it<sp/>allows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Property(&amp;Foo::bar,<sp/>m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>compile<sp/>where<sp/>bar()<sp/>returns<sp/>an<sp/>int32<sp/>and<sp/>m<sp/>is<sp/>a<sp/>matcher<sp/>for<sp/>int64.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>Property()<sp/>above,<sp/>but<sp/>also<sp/>takes<sp/>the<sp/>name<sp/>of<sp/>the<sp/>property<sp/>to<sp/>provide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>better<sp/>error<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyMatcher&gt;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::PropertyMatcher&lt;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/>Class,<sp/>PropertyType,<sp/>PropertyType<sp/>(Class::*)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="4410"><highlight class="normal">Property(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>property_name,</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PropertyType<sp/>(Class::*property)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PropertyMatcher&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::PropertyMatcher&lt;Class,<sp/>PropertyType,</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PropertyType<sp/>(Class::*)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;(</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>property_name,<sp/>property,<sp/>MatcherCast&lt;const<sp/>PropertyType&amp;&gt;(matcher)));</highlight></codeline>
<codeline lineno="4417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>same<sp/>as<sp/>above<sp/>but<sp/>for<sp/>reference-qualified<sp/>member<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyMatcher&gt;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::PropertyMatcher&lt;</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>Class,<sp/>PropertyType,<sp/>PropertyType<sp/>(Class::*)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&gt;&gt;</highlight></codeline>
<codeline lineno="4423"><highlight class="normal">Property(PropertyType<sp/>(Class::*property)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PropertyMatcher&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::PropertyMatcher&lt;Class,<sp/>PropertyType,</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PropertyType<sp/>(Class::*)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&gt;(</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>property,<sp/>MatcherCast&lt;const<sp/>PropertyType&amp;&gt;(matcher)));</highlight></codeline>
<codeline lineno="4429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Three-argument<sp/>form<sp/>for<sp/>reference-qualified<sp/>member<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PropertyMatcher&gt;</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::PropertyMatcher&lt;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/>Class,<sp/>PropertyType,<sp/>PropertyType<sp/>(Class::*)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&gt;&gt;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal">Property(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>property_name,</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PropertyType<sp/>(Class::*property)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PropertyMatcher&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::PropertyMatcher&lt;Class,<sp/>PropertyType,</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PropertyType<sp/>(Class::*)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&gt;(</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>property_name,<sp/>property,<sp/>MatcherCast&lt;const<sp/>PropertyType&amp;&gt;(matcher)));</highlight></codeline>
<codeline lineno="4442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>an<sp/>object<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>result<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>applying<sp/>a<sp/>callable<sp/>to<sp/>x<sp/>matches<sp/>&apos;matcher&apos;.<sp/>For<sp/>example,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ResultOf(f,<sp/>StartsWith(&quot;hi&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>a<sp/>Foo<sp/>object<sp/>x<sp/>if<sp/>and<sp/>only<sp/>if<sp/>f(x)<sp/>starts<sp/>with<sp/>&quot;hi&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`callable`<sp/>parameter<sp/>can<sp/>be<sp/>a<sp/>function,<sp/>function<sp/>pointer,<sp/>or<sp/>a<sp/>functor.<sp/>It<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>required<sp/>to<sp/>keep<sp/>no<sp/>state<sp/>affecting<sp/>the<sp/>results<sp/>of<sp/>the<sp/>calls<sp/>on<sp/>it<sp/>and<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>assumptions<sp/>about<sp/>how<sp/>many<sp/>calls<sp/>will<sp/>be<sp/>made.<sp/>Any<sp/>state<sp/>it<sp/>keeps<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>protected<sp/>from<sp/>the<sp/>concurrent<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Callable,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="4453"><highlight class="normal">internal::ResultOfMatcher&lt;Callable,<sp/>InnerMatcher&gt;<sp/>ResultOf(</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/>Callable<sp/>callable,<sp/>InnerMatcher<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ResultOfMatcher&lt;Callable,<sp/>InnerMatcher&gt;(std::move(callable),</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(matcher));</highlight></codeline>
<codeline lineno="4457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>ResultOf()<sp/>above,<sp/>but<sp/>also<sp/>takes<sp/>a<sp/>description<sp/>of<sp/>the<sp/>`callable`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>result<sp/>to<sp/>provide<sp/>better<sp/>error<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Callable,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="4462"><highlight class="normal">internal::ResultOfMatcher&lt;Callable,<sp/>InnerMatcher&gt;<sp/>ResultOf(</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>result_description,<sp/>Callable<sp/>callable,</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/>InnerMatcher<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ResultOfMatcher&lt;Callable,<sp/>InnerMatcher&gt;(</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_description,<sp/>std::move(callable),<sp/>std::move(matcher));</highlight></codeline>
<codeline lineno="4467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>String<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>equal<sp/>to<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4473"><highlight class="normal">PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;std::string&gt;&gt;<sp/>StrEq(</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringLike&lt;T&gt;&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StrEqualityMatcher&lt;std::string&gt;(std::string(str),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>not<sp/>equal<sp/>to<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal">PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;std::string&gt;&gt;<sp/>StrNe(</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringLike&lt;T&gt;&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StrEqualityMatcher&lt;std::string&gt;(std::string(str),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>equal<sp/>to<sp/>str,<sp/>ignoring<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4489"><highlight class="normal">PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;std::string&gt;&gt;<sp/>StrCaseEq(</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringLike&lt;T&gt;&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StrEqualityMatcher&lt;std::string&gt;(std::string(str),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>not<sp/>equal<sp/>to<sp/>str,<sp/>ignoring<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4497"><highlight class="normal">PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;std::string&gt;&gt;<sp/>StrCaseNe(</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringLike&lt;T&gt;&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::StrEqualityMatcher&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(str),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>string,<sp/>std::string,<sp/>or<sp/>C<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>contains<sp/>the<sp/>given<sp/>substring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal">PolymorphicMatcher&lt;internal::HasSubstrMatcher&lt;std::string&gt;&gt;<sp/>HasSubstr(</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringLike&lt;T&gt;&amp;<sp/>substring)<sp/>{</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::HasSubstrMatcher&lt;std::string&gt;(std::string(substring)));</highlight></codeline>
<codeline lineno="4510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>that<sp/>starts<sp/>with<sp/>&apos;prefix&apos;<sp/>(case-sensitive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal">PolymorphicMatcher&lt;internal::StartsWithMatcher&lt;std::string&gt;&gt;<sp/>StartsWith(</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringLike&lt;T&gt;&amp;<sp/>prefix)<sp/>{</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StartsWithMatcher&lt;std::string&gt;(std::string(prefix)));</highlight></codeline>
<codeline lineno="4518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>that<sp/>ends<sp/>with<sp/>&apos;suffix&apos;<sp/>(case-sensitive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4522"><highlight class="normal">PolymorphicMatcher&lt;internal::EndsWithMatcher&lt;std::string&gt;&gt;<sp/>EndsWith(</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringLike&lt;T&gt;&amp;<sp/>suffix)<sp/>{</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::EndsWithMatcher&lt;std::string&gt;(std::string(suffix)));</highlight></codeline>
<codeline lineno="4526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wide<sp/>string<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>equal<sp/>to<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;std::wstring&gt;&gt;<sp/>StrEq(</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StrEqualityMatcher&lt;std::wstring&gt;(str,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight></codeline>
<codeline lineno="4538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>not<sp/>equal<sp/>to<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;std::wstring&gt;&gt;<sp/>StrNe(</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StrEqualityMatcher&lt;std::wstring&gt;(str,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>equal<sp/>to<sp/>str,<sp/>ignoring<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;std::wstring&gt;&gt;<sp/>StrCaseEq(</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StrEqualityMatcher&lt;std::wstring&gt;(str,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>not<sp/>equal<sp/>to<sp/>str,<sp/>ignoring<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;std::wstring&gt;&gt;<sp/>StrCaseNe(</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StrEqualityMatcher&lt;std::wstring&gt;(str,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>::wstring,<sp/>std::wstring,<sp/>or<sp/>C<sp/>wide<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>contains<sp/>the<sp/>given<sp/>substring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::HasSubstrMatcher&lt;std::wstring&gt;&gt;<sp/>HasSubstr(</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>substring)<sp/>{</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::HasSubstrMatcher&lt;std::wstring&gt;(substring));</highlight></codeline>
<codeline lineno="4565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>that<sp/>starts<sp/>with<sp/>&apos;prefix&apos;<sp/>(case-sensitive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::StartsWithMatcher&lt;std::wstring&gt;&gt;<sp/>StartsWith(</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>prefix)<sp/>{</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::StartsWithMatcher&lt;std::wstring&gt;(prefix));</highlight></codeline>
<codeline lineno="4572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>string<sp/>that<sp/>ends<sp/>with<sp/>&apos;suffix&apos;<sp/>(case-sensitive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::EndsWithMatcher&lt;std::wstring&gt;&gt;<sp/>EndsWith(</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>suffix)<sp/>{</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::EndsWithMatcher&lt;std::wstring&gt;(suffix));</highlight></codeline>
<codeline lineno="4579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>field<sp/>==<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::Eq2Matcher<sp/>Eq()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::Eq2Matcher();<sp/>}</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>field<sp/>&gt;=<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::Ge2Matcher<sp/>Ge()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::Ge2Matcher();<sp/>}</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>field<sp/>&gt;<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::Gt2Matcher<sp/>Gt()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::Gt2Matcher();<sp/>}</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>field<sp/>&lt;=<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::Le2Matcher<sp/>Le()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::Le2Matcher();<sp/>}</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>field<sp/>&lt;<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::Lt2Matcher<sp/>Lt()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::Lt2Matcher();<sp/>}</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>field<sp/>!=<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::Ne2Matcher<sp/>Ne()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::Ne2Matcher();<sp/>}</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatEq(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;float&gt;<sp/>FloatEq()<sp/>{</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;float&gt;();</highlight></codeline>
<codeline lineno="4611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleEq(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4615"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;double&gt;<sp/>DoubleEq()<sp/>{</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;double&gt;();</highlight></codeline>
<codeline lineno="4617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatEq(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field<sp/>with<sp/>NaN<sp/>equality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;float&gt;<sp/>NanSensitiveFloatEq()<sp/>{</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;float&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleEq(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field<sp/>with<sp/>NaN<sp/>equality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;double&gt;<sp/>NanSensitiveDoubleEq()<sp/>{</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;double&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"></highlight></codeline>
<codeline lineno="4631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatNear(first<sp/>field,<sp/>max_abs_error)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4633"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;float&gt;<sp/>FloatNear(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;float&gt;(max_abs_error);</highlight></codeline>
<codeline lineno="4635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"></highlight></codeline>
<codeline lineno="4637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleNear(first<sp/>field,<sp/>max_abs_error)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;double&gt;<sp/>DoubleNear(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;double&gt;(max_abs_error);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatNear(first<sp/>field,<sp/>max_abs_error)<sp/>matches<sp/>the<sp/>second<sp/>field<sp/>with<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>equality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4646"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;float&gt;<sp/>NanSensitiveFloatNear(</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;float&gt;(max_abs_error,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleNear(first<sp/>field,<sp/>max_abs_error)<sp/>matches<sp/>the<sp/>second<sp/>field<sp/>with<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>equality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;double&gt;<sp/>NanSensitiveDoubleNear(</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_abs_error)<sp/>{</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingEq2Matcher&lt;double&gt;(max_abs_error,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>any<sp/>value<sp/>of<sp/>type<sp/>T<sp/>that<sp/>m<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::NotMatcher&lt;InnerMatcher&gt;<sp/>Not(InnerMatcher<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::NotMatcher&lt;InnerMatcher&gt;(m);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"></highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>anything<sp/>that<sp/>satisfies<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate.<sp/><sp/>The<sp/>predicate<sp/>can<sp/>be<sp/>any<sp/>unary<sp/>function<sp/>or<sp/>functor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whose<sp/>return<sp/>type<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4669"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;internal::TrulyMatcher&lt;Predicate&gt;&gt;<sp/>Truly(</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/>Predicate<sp/>pred)<sp/>{</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::TrulyMatcher&lt;Predicate&gt;(pred));</highlight></codeline>
<codeline lineno="4673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"></highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>the<sp/>container<sp/>size.<sp/>The<sp/>container<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>both<sp/>size()<sp/>and<sp/>size_type<sp/>which<sp/>all<sp/>STL-like<sp/>containers<sp/>provide.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>parameter<sp/>&apos;size&apos;<sp/>can<sp/>be<sp/>a<sp/>value<sp/>of<sp/>type<sp/>size_type<sp/>as<sp/>well<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matcher.<sp/>For<sp/>instance:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(container,<sp/>SizeIs(2));<sp/><sp/><sp/><sp/><sp/>//<sp/>Checks<sp/>container<sp/>has<sp/>2<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(container,<sp/>SizeIs(Le(2));<sp/><sp/>//<sp/>Checks<sp/>container<sp/>has<sp/>at<sp/>most<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SizeMatcher&gt;</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::SizeIsMatcher&lt;SizeMatcher&gt;<sp/>SizeIs(</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeMatcher&amp;<sp/>size_matcher)<sp/>{</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::SizeIsMatcher&lt;SizeMatcher&gt;(size_matcher);</highlight></codeline>
<codeline lineno="4685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>the<sp/>distance<sp/>between<sp/>the<sp/>container&apos;s<sp/>begin()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterator<sp/>and<sp/>its<sp/>end()<sp/>iterator,<sp/>i.e.<sp/>the<sp/>size<sp/>of<sp/>the<sp/>container.<sp/>This<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>SizeIs<sp/>with<sp/>containers<sp/>such<sp/>as<sp/>std::forward_list<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>implement<sp/>size().<sp/>The<sp/>container<sp/>must<sp/>provide<sp/>const_iterator<sp/>(with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>valid<sp/>iterator_traits),<sp/>begin()<sp/>and<sp/>end().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DistanceMatcher&gt;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::BeginEndDistanceIsMatcher&lt;DistanceMatcher&gt;<sp/>BeginEndDistanceIs(</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistanceMatcher&amp;<sp/>distance_matcher)<sp/>{</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::BeginEndDistanceIsMatcher&lt;DistanceMatcher&gt;(distance_matcher);</highlight></codeline>
<codeline lineno="4696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>an<sp/>equal<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>matcher<sp/>behaves<sp/>like<sp/>Eq(),<sp/>but<sp/>in<sp/>the<sp/>event<sp/>of<sp/>mismatch<sp/>lists<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>values<sp/>that<sp/>are<sp/>included<sp/>in<sp/>one<sp/>container<sp/>but<sp/>not<sp/>the<sp/>other.<sp/>(Duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>values<sp/>and<sp/>order<sp/>differences<sp/>are<sp/>not<sp/>explained.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::ContainerEqMatcher&lt;typename<sp/>std::remove_const&lt;Container&gt;::type&gt;&gt;</highlight></codeline>
<codeline lineno="4705"><highlight class="normal">ContainerEq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::ContainerEqMatcher&lt;Container&gt;(rhs));</highlight></codeline>
<codeline lineno="4707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>container<sp/>that,<sp/>when<sp/>sorted<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>comparator,<sp/>matches<sp/>container_matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Comparator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ContainerMatcher&gt;</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::WhenSortedByMatcher&lt;Comparator,<sp/>ContainerMatcher&gt;<sp/>WhenSortedBy(</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Comparator&amp;<sp/>comparator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContainerMatcher&amp;<sp/>container_matcher)<sp/>{</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::WhenSortedByMatcher&lt;Comparator,<sp/>ContainerMatcher&gt;(</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comparator,<sp/>container_matcher);</highlight></codeline>
<codeline lineno="4716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>container<sp/>that,<sp/>when<sp/>sorted<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>&lt;<sp/>operator,<sp/>matches<sp/>container_matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ContainerMatcher&gt;</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::WhenSortedByMatcher&lt;internal::LessComparator,<sp/>ContainerMatcher&gt;</highlight></codeline>
<codeline lineno="4722"><highlight class="normal">WhenSorted(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContainerMatcher&amp;<sp/>container_matcher)<sp/>{</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::WhenSortedByMatcher&lt;internal::LessComparator,</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainerMatcher&gt;(</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::LessComparator(),<sp/>container_matcher);</highlight></codeline>
<codeline lineno="4726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>an<sp/>STL-style<sp/>container<sp/>or<sp/>a<sp/>native<sp/>array<sp/>that<sp/>contains<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>number<sp/>of<sp/>elements<sp/>as<sp/>in<sp/>rhs,<sp/>where<sp/>its<sp/>i-th<sp/>element<sp/>and<sp/>rhs&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>i-th<sp/>element<sp/>(as<sp/>a<sp/>pair)<sp/>satisfy<sp/>the<sp/>given<sp/>pair<sp/>matcher,<sp/>for<sp/>all<sp/>i.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TupleMatcher<sp/>must<sp/>be<sp/>able<sp/>to<sp/>be<sp/>safely<sp/>cast<sp/>to<sp/>Matcher&lt;std::tuple&lt;const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T1&amp;,<sp/>const<sp/>T2&amp;&gt;<sp/>&gt;,<sp/>where<sp/>T1<sp/>and<sp/>T2<sp/>are<sp/>the<sp/>types<sp/>of<sp/>elements<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LHS<sp/>container<sp/>and<sp/>the<sp/>RHS<sp/>container<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TupleMatcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::PointwiseMatcher&lt;TupleMatcher,</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;Container&gt;::type&gt;</highlight></codeline>
<codeline lineno="4737"><highlight class="normal">Pointwise(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TupleMatcher&amp;<sp/>tuple_matcher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::PointwiseMatcher&lt;TupleMatcher,<sp/>Container&gt;(tuple_matcher,</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs);</highlight></codeline>
<codeline lineno="4740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Supports<sp/>the<sp/>Pointwise(m,<sp/>{a,<sp/>b,<sp/>c})<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TupleMatcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::PointwiseMatcher&lt;TupleMatcher,<sp/>std::vector&lt;T&gt;&gt;<sp/>Pointwise(</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TupleMatcher&amp;<sp/>tuple_matcher,<sp/>std::initializer_list&lt;T&gt;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Pointwise(tuple_matcher,<sp/>std::vector&lt;T&gt;(rhs));</highlight></codeline>
<codeline lineno="4747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnorderedPointwise(pair_matcher,<sp/>rhs)<sp/>matches<sp/>an<sp/>STL-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>container<sp/>or<sp/>a<sp/>native<sp/>array<sp/>that<sp/>contains<sp/>the<sp/>same<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>elements<sp/>as<sp/>in<sp/>rhs,<sp/>where<sp/>in<sp/>some<sp/>permutation<sp/>of<sp/>the<sp/>container,<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>i-th<sp/>element<sp/>and<sp/>rhs&apos;s<sp/>i-th<sp/>element<sp/>(as<sp/>a<sp/>pair)<sp/>satisfy<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pair<sp/>matcher,<sp/>for<sp/>all<sp/>i.<sp/><sp/>Tuple2Matcher<sp/>must<sp/>be<sp/>able<sp/>to<sp/>be<sp/>safely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cast<sp/>to<sp/>Matcher&lt;std::tuple&lt;const<sp/>T1&amp;,<sp/>const<sp/>T2&amp;&gt;<sp/>&gt;,<sp/>where<sp/>T1<sp/>and<sp/>T2<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>types<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>LHS<sp/>container<sp/>and<sp/>the<sp/>RHS<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>like<sp/>Pointwise(pair_matcher,<sp/>rhs),<sp/>except<sp/>that<sp/>the<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order<sp/>doesn&apos;t<sp/>matter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4760"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple2Matcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsContainer&gt;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::BoundSecondMatcher&lt;</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple2Matcher,</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;RhsContainer&gt;::type&gt;::type::value_type&gt;&gt;</highlight></codeline>
<codeline lineno="4766"><highlight class="normal">UnorderedPointwise(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple2Matcher&amp;<sp/>tuple2_matcher,</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RhsContainer&amp;<sp/>rhs_container)<sp/>{</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RhsView<sp/>allows<sp/>the<sp/>same<sp/>code<sp/>to<sp/>handle<sp/>RhsContainer<sp/>being<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>STL-style<sp/>container<sp/>and<sp/>it<sp/>being<sp/>a<sp/>native<sp/>C-style<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::StlContainerView&lt;RhsContainer&gt;<sp/>RhsView;</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsView::type<sp/>RhsStlContainer;</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsStlContainer::value_type<sp/>Second;</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RhsStlContainer&amp;<sp/>rhs_stl_container<sp/>=</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RhsView::ConstReference(rhs_container);</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"></highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>matcher<sp/>for<sp/>each<sp/>element<sp/>in<sp/>rhs_container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/>::std::vector&lt;internal::BoundSecondMatcher&lt;Tuple2Matcher,<sp/>Second&gt;&gt;<sp/>matchers;</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>rhs_stl_container.begin();<sp/>it<sp/>!=<sp/>rhs_stl_container.end();</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/>matchers.push_back(internal::MatcherBindSecond(tuple2_matcher,<sp/>*it));</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegate<sp/>the<sp/>work<sp/>to<sp/>UnorderedElementsAreArray().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnorderedElementsAreArray(matchers);</highlight></codeline>
<codeline lineno="4785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Supports<sp/>the<sp/>UnorderedPointwise(m,<sp/>{a,<sp/>b,<sp/>c})<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple2Matcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::BoundSecondMatcher&lt;Tuple2Matcher,<sp/>T&gt;&gt;</highlight></codeline>
<codeline lineno="4791"><highlight class="normal">UnorderedPointwise(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple2Matcher&amp;<sp/>tuple2_matcher,</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::initializer_list&lt;T&gt;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnorderedPointwise(tuple2_matcher,<sp/>std::vector&lt;T&gt;(rhs));</highlight></codeline>
<codeline lineno="4794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>an<sp/>STL-style<sp/>container<sp/>or<sp/>a<sp/>native<sp/>array<sp/>that<sp/>contains<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>least<sp/>one<sp/>element<sp/>matching<sp/>the<sp/>given<sp/>value<sp/>or<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4800"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>::std::set&lt;int&gt;<sp/>page_ids;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>page_ids.insert(3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>page_ids.insert(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_ids,<sp/>Contains(1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4804"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_ids,<sp/>Contains(Gt(2)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4805"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_ids,<sp/>Not(Contains(4)));<sp/><sp/>//<sp/>See<sp/>below<sp/>for<sp/>Times(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4807"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>::std::map&lt;int,<sp/>size_t&gt;<sp/>page_lengths;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>page_lengths[1]<sp/>=<sp/>100;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_lengths,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Contains(::std::pair&lt;const<sp/>int,<sp/>size_t&gt;(1,<sp/>100)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char*<sp/>user_ids[]<sp/>=<sp/>{<sp/>&quot;joe&quot;,<sp/>&quot;mike&quot;,<sp/>&quot;tom&quot;<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(user_ids,<sp/>Contains(Eq(::std::string(&quot;tom&quot;))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4815"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matcher<sp/>supports<sp/>a<sp/>modifier<sp/>`Times`<sp/>that<sp/>allows<sp/>to<sp/>check<sp/>for<sp/>arbitrary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>occurrences<sp/>including<sp/>testing<sp/>for<sp/>absence<sp/>with<sp/>Times(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>::std::vector&lt;int&gt;<sp/>ids;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ids.insert(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ids.insert(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ids.insert(3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(ids,<sp/>Contains(1).Times(2));<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1<sp/>occurs<sp/>2<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4824"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(ids,<sp/>Contains(2).Times(0));<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2<sp/>is<sp/>not<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(ids,<sp/>Contains(3).Times(Ge(1)));<sp/><sp/>//<sp/>3<sp/>occurs<sp/>at<sp/>least<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::ContainsMatcher&lt;M&gt;<sp/>Contains(M<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ContainsMatcher&lt;M&gt;(matcher);</highlight></codeline>
<codeline lineno="4830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSupersetOf(iterator_first,<sp/>iterator_last)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSupersetOf(pointer,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSupersetOf(array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSupersetOf(container)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSupersetOf({e1,<sp/>e2,<sp/>...,<sp/>en})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4837"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSupersetOf()<sp/>verifies<sp/>that<sp/>a<sp/>surjective<sp/>partial<sp/>mapping<sp/>onto<sp/>a<sp/>collection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>matchers<sp/>exists.<sp/>In<sp/>other<sp/>words,<sp/>a<sp/>container<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSupersetOf({e1,<sp/>...,<sp/>en})<sp/>if<sp/>and<sp/>only<sp/>if<sp/>there<sp/>is<sp/>a<sp/>permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{y1,<sp/>...,<sp/>yn}<sp/>of<sp/>some<sp/>of<sp/>the<sp/>container&apos;s<sp/>elements<sp/>where<sp/>y1<sp/>matches<sp/>e1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>...,<sp/>and<sp/>yn<sp/>matches<sp/>en.<sp/>Obviously,<sp/>the<sp/>size<sp/>of<sp/>the<sp/>container<sp/>must<sp/>be<sp/>&gt;=<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>order<sp/>to<sp/>have<sp/>a<sp/>match.<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>{1,<sp/>2,<sp/>3}<sp/>matches<sp/>IsSupersetOf({Ge(3),<sp/>Ne(0)}),<sp/>as<sp/>3<sp/>matches<sp/>Ge(3)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1<sp/>matches<sp/>Ne(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>{1,<sp/>2}<sp/>doesn&apos;t<sp/>match<sp/>IsSupersetOf({Eq(1),<sp/>Lt(2)}),<sp/>even<sp/>though<sp/>1<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>both<sp/>Eq(1)<sp/>and<sp/>Lt(2).<sp/>The<sp/>reason<sp/>is<sp/>that<sp/>different<sp/>matchers<sp/>must<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>elements<sp/>in<sp/>different<sp/>slots<sp/>of<sp/>the<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>{1,<sp/>1,<sp/>2}<sp/>matches<sp/>IsSupersetOf({Eq(1),<sp/>Lt(2)}),<sp/>as<sp/>(the<sp/>first)<sp/>1<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Eq(1)<sp/>and<sp/>(the<sp/>second)<sp/>1<sp/>matches<sp/>Lt(2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>{1,<sp/>2,<sp/>3}<sp/>matches<sp/>IsSupersetOf(Gt(1),<sp/>Gt(1)),<sp/>as<sp/>2<sp/>matches<sp/>(the<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4853"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Gt(1)<sp/>and<sp/>3<sp/>matches<sp/>(the<sp/>second)<sp/>Gt(1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4854"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matchers<sp/>can<sp/>be<sp/>specified<sp/>as<sp/>an<sp/>array,<sp/>a<sp/>pointer<sp/>and<sp/>count,<sp/>a<sp/>container,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>initializer<sp/>list,<sp/>or<sp/>an<sp/>STL<sp/>iterator<sp/>range.<sp/>In<sp/>each<sp/>of<sp/>these<sp/>cases,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>underlying<sp/>matchers<sp/>can<sp/>be<sp/>either<sp/>values<sp/>or<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type&gt;</highlight></codeline>
<codeline lineno="4862"><highlight class="normal">IsSupersetOf(Iter<sp/>first,<sp/>Iter<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type<sp/>T;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;(</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::UnorderedMatcherRequire::Superset,<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="4866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"></highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>IsSupersetOf(</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>pointer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSupersetOf(pointer,<sp/>pointer<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="4872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"></highlight></codeline>
<codeline lineno="4874"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>IsSupersetOf(</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;array)[N])<sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSupersetOf(array,<sp/>N);</highlight></codeline>
<codeline lineno="4878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"></highlight></codeline>
<codeline lineno="4880"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type&gt;</highlight></codeline>
<codeline lineno="4883"><highlight class="normal">IsSupersetOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSupersetOf(container.begin(),<sp/>container.end());</highlight></codeline>
<codeline lineno="4885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>IsSupersetOf(</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::initializer_list&lt;T&gt;<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSupersetOf(xs.begin(),<sp/>xs.end());</highlight></codeline>
<codeline lineno="4891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubsetOf(iterator_first,<sp/>iterator_last)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubsetOf(pointer,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubsetOf(array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubsetOf(container)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubsetOf({e1,<sp/>e2,<sp/>...,<sp/>en})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubsetOf()<sp/>verifies<sp/>that<sp/>an<sp/>injective<sp/>mapping<sp/>onto<sp/>a<sp/>collection<sp/>of<sp/>matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exists.<sp/><sp/>In<sp/>other<sp/>words,<sp/>a<sp/>container<sp/>matches<sp/>IsSubsetOf({e1,<sp/>...,<sp/>en})<sp/>if<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>if<sp/>there<sp/>is<sp/>a<sp/>subset<sp/>of<sp/>matchers<sp/>{m1,<sp/>...,<sp/>mk}<sp/>which<sp/>would<sp/>match<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>container<sp/>using<sp/>UnorderedElementsAre.<sp/><sp/>Obviously,<sp/>the<sp/>size<sp/>of<sp/>the<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>&lt;=<sp/>n<sp/>in<sp/>order<sp/>to<sp/>have<sp/>a<sp/>match.<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>{1}<sp/>matches<sp/>IsSubsetOf({Gt(0),<sp/>Lt(0)}),<sp/>as<sp/>1<sp/>matches<sp/>Gt(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>{1,<sp/>-1}<sp/>matches<sp/>IsSubsetOf({Lt(0),<sp/>Gt(0)}),<sp/>as<sp/>1<sp/>matches<sp/>Gt(0)<sp/>and<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>matches<sp/>Lt(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>{1,<sp/>2}<sp/>doesn&apos;t<sp/>matches<sp/>IsSubsetOf({Gt(0),<sp/>Lt(0)}),<sp/>even<sp/>though<sp/>1<sp/>and<sp/>2<sp/>both</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>match<sp/>Gt(0).<sp/>The<sp/>reason<sp/>is<sp/>that<sp/>different<sp/>matchers<sp/>must<sp/>be<sp/>used<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>elements<sp/>in<sp/>different<sp/>slots<sp/>of<sp/>the<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4911"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matchers<sp/>can<sp/>be<sp/>specified<sp/>as<sp/>an<sp/>array,<sp/>a<sp/>pointer<sp/>and<sp/>count,<sp/>a<sp/>container,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>initializer<sp/>list,<sp/>or<sp/>an<sp/>STL<sp/>iterator<sp/>range.<sp/>In<sp/>each<sp/>of<sp/>these<sp/>cases,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>underlying<sp/>matchers<sp/>can<sp/>be<sp/>either<sp/>values<sp/>or<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4915"><highlight class="normal"></highlight></codeline>
<codeline lineno="4916"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type&gt;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal">IsSubsetOf(Iter<sp/>first,<sp/>Iter<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type<sp/>T;</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;(</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::UnorderedMatcherRequire::Subset,<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="4923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>IsSubsetOf(</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>pointer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubsetOf(pointer,<sp/>pointer<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="4929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>IsSubsetOf(</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;array)[N])<sp/>{</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubsetOf(array,<sp/>N);</highlight></codeline>
<codeline lineno="4935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"></highlight></codeline>
<codeline lineno="4937"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type&gt;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal">IsSubsetOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubsetOf(container.begin(),<sp/>container.end());</highlight></codeline>
<codeline lineno="4942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreArrayMatcher&lt;T&gt;<sp/>IsSubsetOf(</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::initializer_list&lt;T&gt;<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSubsetOf(xs.begin(),<sp/>xs.end());</highlight></codeline>
<codeline lineno="4948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>an<sp/>STL-style<sp/>container<sp/>or<sp/>a<sp/>native<sp/>array<sp/>that<sp/>contains<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight><highlight class="comment">//<sp/>elements<sp/>matching<sp/>the<sp/>given<sp/>value<sp/>or<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each(m)<sp/>is<sp/>semantically<sp/>equivalent<sp/>to<sp/>`Not(Contains(Not(m)))`.<sp/>Only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>messages<sp/>are<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4955"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>::std::set&lt;int&gt;<sp/>page_ids;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Each(m)<sp/>matches<sp/>an<sp/>empty<sp/>container,<sp/>regardless<sp/>of<sp/>what<sp/>m<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_ids,<sp/>Each(Eq(1)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_ids,<sp/>Each(Eq(77)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>page_ids.insert(3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_ids,<sp/>Each(Gt(0)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_ids,<sp/>Not(Each(Gt(4))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>page_ids.insert(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_ids,<sp/>Not(Each(Lt(2))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>::std::map&lt;int,<sp/>size_t&gt;<sp/>page_lengths;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>page_lengths[1]<sp/>=<sp/>100;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>page_lengths[2]<sp/>=<sp/>200;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>page_lengths[3]<sp/>=<sp/>300;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_lengths,<sp/>Not(Each(Pair(1,<sp/>100))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(page_lengths,<sp/>Each(Key(Le(3))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4974"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4975"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char*<sp/>user_ids[]<sp/>=<sp/>{<sp/>&quot;joe&quot;,<sp/>&quot;mike&quot;,<sp/>&quot;tom&quot;<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(user_ids,<sp/>Not(Each(Eq(::std::string(&quot;tom&quot;)))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::EachMatcher&lt;M&gt;<sp/>Each(M<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::EachMatcher&lt;M&gt;(matcher);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Key(inner_matcher)<sp/>matches<sp/>an<sp/>std::pair<sp/>whose<sp/>&apos;first&apos;<sp/>field<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inner_matcher.<sp/><sp/>For<sp/>example,<sp/>Contains(Key(Ge(5)))<sp/>can<sp/>be<sp/>used<sp/>to<sp/>match<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::map<sp/>that<sp/>contains<sp/>at<sp/>least<sp/>one<sp/>element<sp/>whose<sp/>key<sp/>is<sp/>&gt;=<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::KeyMatcher&lt;M&gt;<sp/>Key(M<sp/>inner_matcher)<sp/>{</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::KeyMatcher&lt;M&gt;(inner_matcher);</highlight></codeline>
<codeline lineno="4988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"></highlight></codeline>
<codeline lineno="4990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pair(first_matcher,<sp/>second_matcher)<sp/>matches<sp/>a<sp/>std::pair<sp/>whose<sp/>&apos;first&apos;<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>first_matcher<sp/>and<sp/>whose<sp/>&apos;second&apos;<sp/>field<sp/>matches<sp/>second_matcher.<sp/><sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>example,<sp/>EXPECT_THAT(map_type,<sp/>ElementsAre(Pair(Ge(5),<sp/>&quot;foo&quot;)))<sp/>can<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>match<sp/>a<sp/>std::map&lt;int,<sp/>string&gt;<sp/>that<sp/>contains<sp/>exactly<sp/>one<sp/>element<sp/>whose<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>&gt;=<sp/>5<sp/>and<sp/>whose<sp/>value<sp/>equals<sp/>&quot;foo&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FirstMatcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SecondMatcher&gt;</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::PairMatcher&lt;FirstMatcher,<sp/>SecondMatcher&gt;<sp/>Pair(</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/>FirstMatcher<sp/>first_matcher,<sp/>SecondMatcher<sp/>second_matcher)<sp/>{</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::PairMatcher&lt;FirstMatcher,<sp/>SecondMatcher&gt;(first_matcher,</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_matcher);</highlight></codeline>
<codeline lineno="5000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">no_adl<sp/>{</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional()<sp/>creates<sp/>a<sp/>matcher<sp/>that<sp/>conditionally<sp/>uses<sp/>either<sp/>the<sp/>first<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>matcher<sp/>provided.<sp/>For<sp/>example,<sp/>we<sp/>could<sp/>create<sp/>an<sp/>`equal<sp/>if,<sp/>and<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if&apos;<sp/>matcher<sp/>using<sp/>the<sp/>Conditional<sp/>wrapper<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(result,<sp/>Conditional(condition,<sp/>Eq(expected),<sp/>Ne(expected)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5008"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherTrue,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherFalse&gt;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal">internal::ConditionalMatcher&lt;MatcherTrue,<sp/>MatcherFalse&gt;<sp/>Conditional(</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition,<sp/>MatcherTrue<sp/>matcher_true,<sp/>MatcherFalse<sp/>matcher_false)<sp/>{</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ConditionalMatcher&lt;MatcherTrue,<sp/>MatcherFalse&gt;(</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>condition,<sp/>std::move(matcher_true),<sp/>std::move(matcher_false));</highlight></codeline>
<codeline lineno="5013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"></highlight></codeline>
<codeline lineno="5015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FieldsAre(matchers...)<sp/>matches<sp/>piecewise<sp/>the<sp/>fields<sp/>of<sp/>compatible<sp/>structs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>include<sp/>those<sp/>that<sp/>support<sp/>`get&lt;I&gt;(obj)`,<sp/>and<sp/>when<sp/>structured<sp/>bindings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>enabled<sp/>any<sp/>class<sp/>that<sp/>supports<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>particular,<sp/>`std::tuple`,<sp/>`std::pair`,<sp/>`std::array`<sp/>and<sp/>aggregate<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>M&gt;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal">internal::FieldsAreMatcher&lt;typename<sp/>std::decay&lt;M&gt;::type...&gt;<sp/>FieldsAre(</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/>M&amp;&amp;...<sp/>matchers)<sp/>{</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FieldsAreMatcher&lt;typename<sp/>std::decay&lt;M&gt;::type...&gt;(</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;M&gt;(matchers)...);</highlight></codeline>
<codeline lineno="5024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>a<sp/>pointer<sp/>(raw<sp/>or<sp/>smart)<sp/>that<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inner_matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::PointerMatcher&lt;InnerMatcher&gt;<sp/>Pointer(</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>inner_matcher)<sp/>{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::PointerMatcher&lt;InnerMatcher&gt;(inner_matcher);</highlight></codeline>
<codeline lineno="5032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>an<sp/>object<sp/>that<sp/>has<sp/>an<sp/>address<sp/>that<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inner_matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5036"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AddressMatcher&lt;InnerMatcher&gt;<sp/>Address(</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>inner_matcher)<sp/>{</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::AddressMatcher&lt;InnerMatcher&gt;(inner_matcher);</highlight></codeline>
<codeline lineno="5040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"></highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>base64<sp/>escaped<sp/>string,<sp/>when<sp/>the<sp/>unescaped<sp/>string<sp/>matches<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherType&gt;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal">internal::WhenBase64UnescapedMatcher<sp/>WhenBase64Unescaped(</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherType&amp;<sp/>internal_matcher)<sp/>{</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::WhenBase64UnescapedMatcher(internal_matcher);</highlight></codeline>
<codeline lineno="5048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5049"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>no_adl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>predicate<sp/>that<sp/>is<sp/>satisfied<sp/>by<sp/>anything<sp/>that<sp/>matches<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::MatcherAsPredicate&lt;M&gt;<sp/>Matches(M<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::MatcherAsPredicate&lt;M&gt;(matcher);</highlight></codeline>
<codeline lineno="5056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"></highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>value<sp/>matches<sp/>the<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>M<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::Matches(matcher)(value);</highlight></codeline>
<codeline lineno="5062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>the<sp/>value<sp/>against<sp/>the<sp/>given<sp/>matcher<sp/>and<sp/>explains<sp/>the<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>result<sp/>to<sp/>listener.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExplainMatchResult(M<sp/>matcher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SafeMatcherCast&lt;const<sp/>T&amp;&gt;(matcher).MatchAndExplain(value,<sp/>listener);</highlight></codeline>
<codeline lineno="5070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>given<sp/>matcher.<sp/><sp/>Useful<sp/>for<sp/>description</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>strings<sp/>of<sp/>matchers<sp/>defined<sp/>using<sp/>MATCHER_P*<sp/>macros<sp/>that<sp/>accept<sp/>matchers<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>arguments.<sp/><sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5075"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MATCHER_P(XAndYThat,<sp/>matcher,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;X<sp/>that<sp/>&quot;<sp/>+<sp/>DescribeMatcher&lt;int&gt;(matcher,<sp/>negation)<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(negation<sp/>?<sp/>&quot;<sp/>or&quot;<sp/>:<sp/>&quot;<sp/>and&quot;)<sp/>+<sp/>&quot;<sp/>Y<sp/>that<sp/>&quot;<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeMatcher&lt;double&gt;(matcher,<sp/>negation))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5080"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>ExplainMatchResult(matcher,<sp/>arg.x(),<sp/>result_listener)<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExplainMatchResult(matcher,<sp/>arg.y(),<sp/>result_listener);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="5084"><highlight class="normal">std::string<sp/>DescribeMatcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M&amp;<sp/>matcher,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/>Matcher&lt;T&gt;<sp/>monomorphic_matcher<sp/>=<sp/>SafeMatcherCast&lt;T&gt;(matcher);</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negation)<sp/>{</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/>monomorphic_matcher.DescribeNegationTo(&amp;ss);</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/>monomorphic_matcher.DescribeTo(&amp;ss);</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="5093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="5096"><highlight class="normal">internal::ElementsAreMatcher&lt;</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;typename<sp/>std::decay&lt;const<sp/>Args&amp;&gt;::type...&gt;&gt;</highlight></codeline>
<codeline lineno="5098"><highlight class="normal">ElementsAre(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>matchers)<sp/>{</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ElementsAreMatcher&lt;</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;typename<sp/>std::decay&lt;const<sp/>Args&amp;&gt;::type...&gt;&gt;(</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(matchers...));</highlight></codeline>
<codeline lineno="5102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight></codeline>
<codeline lineno="5104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="5105"><highlight class="normal">internal::UnorderedElementsAreMatcher&lt;</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;typename<sp/>std::decay&lt;const<sp/>Args&amp;&gt;::type...&gt;&gt;</highlight></codeline>
<codeline lineno="5107"><highlight class="normal">UnorderedElementsAre(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>matchers)<sp/>{</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::UnorderedElementsAreMatcher&lt;</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;typename<sp/>std::decay&lt;const<sp/>Args&amp;&gt;::type...&gt;&gt;(</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(matchers...));</highlight></codeline>
<codeline lineno="5111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"></highlight></codeline>
<codeline lineno="5113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>variadic<sp/>matcher<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal">internal::AllOfMatcher&lt;typename<sp/>std::decay&lt;const<sp/>Args&amp;&gt;::type...&gt;<sp/>AllOf(</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>matchers)<sp/>{</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::AllOfMatcher&lt;typename<sp/>std::decay&lt;const<sp/>Args&amp;&gt;::type...&gt;(</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers...);</highlight></codeline>
<codeline lineno="5119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal">internal::AnyOfMatcher&lt;typename<sp/>std::decay&lt;const<sp/>Args&amp;&gt;::type...&gt;<sp/>AnyOf(</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>matchers)<sp/>{</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::AnyOfMatcher&lt;typename<sp/>std::decay&lt;const<sp/>Args&amp;&gt;::type...&gt;(</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers...);</highlight></codeline>
<codeline lineno="5126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"></highlight></codeline>
<codeline lineno="5128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AnyOfArray(array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AnyOfArray(pointer,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AnyOfArray(container)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AnyOfArray({<sp/>e1,<sp/>e2,<sp/>...,<sp/>en<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AnyOfArray(iterator_first,<sp/>iterator_last)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AnyOfArray()<sp/>verifies<sp/>whether<sp/>a<sp/>given<sp/>value<sp/>matches<sp/>any<sp/>member<sp/>of<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>collection<sp/>of<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AllOfArray(array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AllOfArray(pointer,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AllOfArray(container)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AllOfArray({<sp/>e1,<sp/>e2,<sp/>...,<sp/>en<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AllOfArray(iterator_first,<sp/>iterator_last)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AllOfArray()<sp/>verifies<sp/>whether<sp/>a<sp/>given<sp/>value<sp/>matches<sp/>all<sp/>members<sp/>of<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>collection<sp/>of<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5145"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matchers<sp/>can<sp/>be<sp/>specified<sp/>as<sp/>an<sp/>array,<sp/>a<sp/>pointer<sp/>and<sp/>count,<sp/>a<sp/>container,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>initializer<sp/>list,<sp/>or<sp/>an<sp/>STL<sp/>iterator<sp/>range.<sp/>In<sp/>each<sp/>of<sp/>these<sp/>cases,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>underlying<sp/>matchers<sp/>can<sp/>be<sp/>either<sp/>values<sp/>or<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"></highlight></codeline>
<codeline lineno="5150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AnyOfArrayMatcher&lt;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type&gt;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal">AnyOfArray(Iter<sp/>first,<sp/>Iter<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::AnyOfArrayMatcher&lt;</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type&gt;(first,<sp/>last);</highlight></codeline>
<codeline lineno="5156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"></highlight></codeline>
<codeline lineno="5158"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AllOfArrayMatcher&lt;</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type&gt;</highlight></codeline>
<codeline lineno="5161"><highlight class="normal">AllOfArray(Iter<sp/>first,<sp/>Iter<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::AllOfArrayMatcher&lt;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>::std::iterator_traits&lt;Iter&gt;::value_type&gt;(first,<sp/>last);</highlight></codeline>
<codeline lineno="5164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AnyOfArrayMatcher&lt;T&gt;<sp/>AnyOfArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AnyOfArray(ptr,<sp/>ptr<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="5169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AllOfArrayMatcher&lt;T&gt;<sp/>AllOfArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AllOfArray(ptr,<sp/>ptr<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="5174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AnyOfArrayMatcher&lt;T&gt;<sp/>AnyOfArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;array)[N])<sp/>{</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AnyOfArray(array,<sp/>N);</highlight></codeline>
<codeline lineno="5179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"></highlight></codeline>
<codeline lineno="5181"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AllOfArrayMatcher&lt;T&gt;<sp/>AllOfArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;array)[N])<sp/>{</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AllOfArray(array,<sp/>N);</highlight></codeline>
<codeline lineno="5184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"></highlight></codeline>
<codeline lineno="5186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AnyOfArrayMatcher&lt;typename<sp/>Container::value_type&gt;<sp/>AnyOfArray(</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AnyOfArray(container.begin(),<sp/>container.end());</highlight></codeline>
<codeline lineno="5190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AllOfArrayMatcher&lt;typename<sp/>Container::value_type&gt;<sp/>AllOfArray(</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AllOfArray(container.begin(),<sp/>container.end());</highlight></codeline>
<codeline lineno="5196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"></highlight></codeline>
<codeline lineno="5198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AnyOfArrayMatcher&lt;T&gt;<sp/>AnyOfArray(</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::initializer_list&lt;T&gt;<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AnyOfArray(xs.begin(),<sp/>xs.end());</highlight></codeline>
<codeline lineno="5202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::AllOfArrayMatcher&lt;T&gt;<sp/>AllOfArray(</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/>::std::initializer_list&lt;T&gt;<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AllOfArray(xs.begin(),<sp/>xs.end());</highlight></codeline>
<codeline lineno="5208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"></highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Args&lt;N1,<sp/>N2,<sp/>...,<sp/>Nk&gt;(a_matcher)<sp/>matches<sp/>a<sp/>tuple<sp/>if<sp/>the<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fields<sp/>of<sp/>it<sp/>matches<sp/>a_matcher.<sp/><sp/>C++<sp/>doesn&apos;t<sp/>support<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments<sp/>for<sp/>function<sp/>templates,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>overload<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>k,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="5214"><highlight class="normal">internal::ArgsMatcher&lt;typename<sp/>std::decay&lt;InnerMatcher&gt;::type,<sp/>k...&gt;<sp/>Args(</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/>InnerMatcher&amp;&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ArgsMatcher&lt;typename<sp/>std::decay&lt;InnerMatcher&gt;::type,<sp/>k...&gt;(</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;InnerMatcher&gt;(matcher));</highlight></codeline>
<codeline lineno="5218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AllArgs(m)<sp/>is<sp/>a<sp/>synonym<sp/>of<sp/>m.<sp/><sp/>This<sp/>is<sp/>useful<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(_,<sp/>_)).With(AllArgs(Eq()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>easier<sp/>to<sp/>read<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(_,<sp/>_)).With(Eq());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InnerMatcher&gt;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>InnerMatcher<sp/>AllArgs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InnerMatcher&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher;</highlight></codeline>
<codeline lineno="5230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>the<sp/>value<sp/>of<sp/>an<sp/>optional&lt;&gt;<sp/>type<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matcher<sp/>implementation<sp/>only<sp/>uses<sp/>&apos;!arg&apos;<sp/>and<sp/>requires<sp/>that<sp/>the<sp/>optional&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>has<sp/>a<sp/>&apos;value_type&apos;<sp/>member<sp/>type<sp/>and<sp/>that<sp/>&apos;*arg&apos;<sp/>is<sp/>of<sp/>type<sp/>&apos;value_type&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>is<sp/>printable<sp/>using<sp/>&apos;PrintToString&apos;.<sp/>It<sp/>is<sp/>compatible<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::optional/std::experimental::optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>to<sp/>compare<sp/>an<sp/>optional<sp/>type<sp/>variable<sp/>against<sp/>nullopt<sp/>you<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>Eq(nullopt)<sp/>and<sp/>not<sp/>Eq(Optional(nullopt)).<sp/>The<sp/>latter<sp/>implies<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional<sp/>value<sp/>contains<sp/>an<sp/>optional<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueMatcher&gt;</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::OptionalMatcher&lt;ValueMatcher&gt;<sp/>Optional(</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueMatcher&amp;<sp/>value_matcher)<sp/>{</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::OptionalMatcher&lt;ValueMatcher&gt;(value_matcher);</highlight></codeline>
<codeline lineno="5244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"></highlight></codeline>
<codeline lineno="5246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>the<sp/>value<sp/>of<sp/>a<sp/>absl::any<sp/>type<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5248"><highlight class="normal">PolymorphicMatcher&lt;internal::any_cast_matcher::AnyCastMatcher&lt;T&gt;&gt;<sp/>AnyWith(</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>T&amp;&gt;&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::any_cast_matcher::AnyCastMatcher&lt;T&gt;(matcher));</highlight></codeline>
<codeline lineno="5252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>matcher<sp/>that<sp/>matches<sp/>the<sp/>value<sp/>of<sp/>a<sp/>variant&lt;&gt;<sp/>type<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matcher<sp/>implementation<sp/>uses<sp/>ADL<sp/>to<sp/>find<sp/>the<sp/>holds_alternative<sp/>and<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>compatible<sp/>with<sp/>std::variant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5259"><highlight class="normal">PolymorphicMatcher&lt;internal::variant_matcher::VariantMatcher&lt;T&gt;&gt;<sp/>VariantWith(</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>T&amp;&gt;&amp;<sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::variant_matcher::VariantMatcher&lt;T&gt;(matcher));</highlight></codeline>
<codeline lineno="5263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5266"><highlight class="normal"></highlight></codeline>
<codeline lineno="5267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Anything<sp/>inside<sp/>the<sp/>`internal`<sp/>namespace<sp/>is<sp/>internal<sp/>to<sp/>the<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>must<sp/>not<sp/>be<sp/>used<sp/>in<sp/>user<sp/>code!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5269"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"></highlight></codeline>
<codeline lineno="5271"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WithWhatMatcherImpl<sp/>{</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/>WithWhatMatcherImpl(Matcher&lt;std::string&gt;<sp/>matcher)</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matcher_(std::move(matcher))<sp/>{}</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;contains<sp/>.what()<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;contains<sp/>.what()<sp/>that<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"></highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Err&gt;</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Err&amp;<sp/>err,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>contains<sp/>.what()<sp/>(of<sp/>value<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>err.what()</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>that<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher_.MatchAndExplain(err.what(),<sp/>listener);</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;std::string&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="5295"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"></highlight></codeline>
<codeline lineno="5297"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PolymorphicMatcher&lt;WithWhatMatcherImpl&gt;<sp/>WithWhat(</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;std::string&gt;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(WithWhatMatcherImpl(std::move(m)));</highlight></codeline>
<codeline lineno="5300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Err&gt;</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExceptionMatcherImpl<sp/>{</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NeverThrown<sp/>{</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;this<sp/>exception<sp/>should<sp/>never<sp/>be<sp/>thrown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>matchee<sp/>raises<sp/>an<sp/>exception<sp/>of<sp/>a<sp/>wrong<sp/>type,<sp/>we&apos;d<sp/>like<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>catch<sp/>it<sp/>and<sp/>print<sp/>its<sp/>message<sp/>and<sp/>type.<sp/>To<sp/>do<sp/>that,<sp/>we<sp/>add<sp/>an<sp/>additional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>catch<sp/>clause:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>catch<sp/>(const<sp/>Err&amp;)<sp/>{<sp/>/*<sp/>an<sp/>expected<sp/>exception<sp/>*/<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>catch<sp/>(const<sp/>std::exception&amp;)<sp/>{<sp/>/*<sp/>exception<sp/>of<sp/>a<sp/>wrong<sp/>type<sp/>*/<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>if<sp/>the<sp/>`Err`<sp/>itself<sp/>is<sp/>`std::exception`,<sp/>we&apos;d<sp/>end<sp/>up<sp/>with<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>identical<sp/>`catch`<sp/>clauses:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>catch<sp/>(const<sp/>std::exception&amp;)<sp/>{<sp/>/*<sp/>an<sp/>expected<sp/>exception<sp/>*/<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>catch<sp/>(const<sp/>std::exception&amp;)<sp/>{<sp/>/*<sp/>exception<sp/>of<sp/>a<sp/>wrong<sp/>type<sp/>*/<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>cause<sp/>a<sp/>warning<sp/>or<sp/>an<sp/>error<sp/>in<sp/>some<sp/>compilers.<sp/>To<sp/>resolve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>issue,<sp/>we<sp/>use<sp/>a<sp/>fake<sp/>error<sp/>type<sp/>whenever<sp/>`Err`<sp/>is<sp/>`std::exception`:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>catch<sp/>(const<sp/>std::exception&amp;)<sp/>{<sp/>/*<sp/>an<sp/>expected<sp/>exception<sp/>*/<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>catch<sp/>(const<sp/>NeverThrown&amp;)<sp/>{<sp/>/*<sp/>exception<sp/>of<sp/>a<sp/>wrong<sp/>type<sp/>*/<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">DefaultExceptionType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;Err&gt;::type&gt;::type,</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exception&gt;::value,</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NeverThrown&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;&gt;::type;</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"></highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/>ExceptionMatcherImpl(Matcher&lt;const<sp/>Err&amp;&gt;<sp/>matcher)</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>matcher_(std::move(matcher))<sp/>{}</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>which<sp/>is<sp/>a<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName&lt;Err&gt;();</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>which<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"></highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>which<sp/>is<sp/>not<sp/>a<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName&lt;Err&gt;();</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>which<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/>matcher_.DescribeNegationTo(os);</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"></highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(T&amp;&amp;<sp/>x,<sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(void)(std::forward&lt;T&gt;(x)());</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Err&amp;<sp/>err)<sp/>{</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>which<sp/>is<sp/>a<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName&lt;Err&gt;();</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher_.MatchAndExplain(err,<sp/>listener);</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(DefaultExceptionType<sp/>err)<sp/>{</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GetTypeName(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(err));</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>std::exception-derived<sp/>type<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>description<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>err.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>of<sp/>an<sp/>unknown<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>throw<sp/>any<sp/>exception&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>Err&amp;&gt;<sp/>matcher_;</highlight></codeline>
<codeline lineno="5382"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Throws()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Throws(exceptionMatcher)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ThrowsMessage(messageMatcher)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>matcher<sp/>accepts<sp/>a<sp/>callable<sp/>and<sp/>verifies<sp/>that<sp/>when<sp/>invoked,<sp/>it<sp/>throws</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>exception<sp/>with<sp/>the<sp/>given<sp/>type<sp/>and<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5394"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5396"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/>throw<sp/>std::runtime_error(&quot;message&quot;);<sp/>},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throws&lt;std::runtime_error&gt;());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5398"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/>throw<sp/>std::runtime_error(&quot;message&quot;);<sp/>},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5401"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrowsMessage&lt;std::runtime_error&gt;(HasSubstr(&quot;message&quot;)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_THAT(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/>throw<sp/>std::runtime_error(&quot;message&quot;);<sp/>},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5405"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throws&lt;std::runtime_error&gt;(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5406"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property(&amp;std::runtime_error::what,<sp/>HasSubstr(&quot;message&quot;))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"></highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Err&gt;</highlight></codeline>
<codeline lineno="5409"><highlight class="normal">PolymorphicMatcher&lt;internal::ExceptionMatcherImpl&lt;Err&gt;&gt;<sp/>Throws()<sp/>{</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::ExceptionMatcherImpl&lt;Err&gt;(A&lt;const<sp/>Err&amp;&gt;()));</highlight></codeline>
<codeline lineno="5412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Err,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExceptionMatcher&gt;</highlight></codeline>
<codeline lineno="5415"><highlight class="normal">PolymorphicMatcher&lt;internal::ExceptionMatcherImpl&lt;Err&gt;&gt;<sp/>Throws(</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ExceptionMatcher&amp;<sp/>exception_matcher)<sp/>{</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>matcher<sp/>cast<sp/>allows<sp/>users<sp/>to<sp/>pass<sp/>a<sp/>matcher<sp/>of<sp/>a<sp/>more<sp/>broad<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example<sp/>user<sp/>may<sp/>want<sp/>to<sp/>pass<sp/>Matcher&lt;std::exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>Throws&lt;std::runtime_error&gt;,<sp/>or<sp/>Matcher&lt;int64&gt;<sp/>to<sp/>Throws&lt;int32&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(internal::ExceptionMatcherImpl&lt;Err&gt;(</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SafeMatcherCast&lt;const<sp/>Err&amp;&gt;(exception_matcher)));</highlight></codeline>
<codeline lineno="5422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Err,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MessageMatcher&gt;</highlight></codeline>
<codeline lineno="5425"><highlight class="normal">PolymorphicMatcher&lt;internal::ExceptionMatcherImpl&lt;Err&gt;&gt;<sp/>ThrowsMessage(</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageMatcher&amp;&amp;<sp/>message_matcher)<sp/>{</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;std::exception,<sp/>Err&gt;::value,</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>an<sp/>std::exception-derived<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Throws&lt;Err&gt;(internal::WithWhat(</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MatcherCast&lt;std::string&gt;(std::forward&lt;MessageMatcher&gt;(message_matcher))));</highlight></codeline>
<codeline lineno="5431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight></codeline>
<codeline lineno="5435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>macros<sp/>allow<sp/>using<sp/>matchers<sp/>to<sp/>check<sp/>values<sp/>in<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests.<sp/><sp/>ASSERT_THAT(value,<sp/>matcher)<sp/>and<sp/>EXPECT_THAT(value,<sp/>matcher)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>succeed<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>value<sp/>matches<sp/>the<sp/>matcher.<sp/><sp/>If<sp/>the<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fails,<sp/>the<sp/>value<sp/>and<sp/>the<sp/>description<sp/>of<sp/>the<sp/>matcher<sp/>will<sp/>be<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_THAT(value,<sp/>matcher)<sp/>\</highlight></codeline>
<codeline lineno="5440"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT1(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::internal::MakePredicateFormatterFromMatcher(matcher),<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_THAT(value,<sp/>matcher)<sp/>\</highlight></codeline>
<codeline lineno="5443"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT1(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5444"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::internal::MakePredicateFormatterFromMatcher(matcher),<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5445"><highlight class="normal"></highlight></codeline>
<codeline lineno="5446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MATCHER*<sp/>macros<sp/>itself<sp/>are<sp/>listed<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5447"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER(name,<sp/>description)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5448"><highlight class="preprocessor"><sp/><sp/>class<sp/>name##Matcher<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>public<sp/>::testing::internal::MatcherBaseImpl&lt;name##Matcher&gt;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5450"><highlight class="preprocessor"><sp/><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>arg_type&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>class<sp/>gmock_Impl<sp/>:<sp/>public<sp/>::testing::MatcherInterface&lt;const<sp/>arg_type&amp;&gt;<sp/>{<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gmock_Impl()<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>MatchAndExplain(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>arg_type&amp;<sp/>arg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::MatchResultListener*<sp/>result_listener)<sp/>const<sp/>override;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DescribeTo(::std::ostream*<sp/>gmock_os)<sp/>const<sp/>override<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gmock_os<sp/>&lt;&lt;<sp/>FormatDescription(false);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DescribeNegationTo(::std::ostream*<sp/>gmock_os)<sp/>const<sp/>override<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gmock_os<sp/>&lt;&lt;<sp/>FormatDescription(true);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>private:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::std::string<sp/>FormatDescription(bool<sp/>negation)<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOLINTNEXTLINE<sp/>readability-redundant-string-init<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::string<sp/>gmock_description<sp/>=<sp/>(description);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!gmock_description.empty())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>gmock_description;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::testing::internal::FormatMatcherDescription(negation,<sp/>#name,<sp/><sp/>\</highlight></codeline>
<codeline lineno="5473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},<sp/>{});<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5474"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5475"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5476"><highlight class="preprocessor"><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5477"><highlight class="preprocessor"><sp/><sp/>inline<sp/>name##Matcher<sp/>GMOCK_INTERNAL_WARNING_PUSH()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GMOCK_INTERNAL_WARNING_CLANG(ignored,<sp/>&quot;-Wunused-function&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GMOCK_INTERNAL_WARNING_CLANG(ignored,<sp/>&quot;-Wunused-member-function&quot;)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>GMOCK_INTERNAL_WARNING_POP()()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>arg_type&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/>bool<sp/>name##Matcher::gmock_Impl&lt;arg_type&gt;::MatchAndExplain(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>arg_type&amp;<sp/>arg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::MatchResultListener*<sp/>result_listener<sp/>GTEST_ATTRIBUTE_UNUSED_)<sp/>\</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"></highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P(name,<sp/>p0,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="5490"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP,<sp/>description,<sp/>(#p0),<sp/>(p0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P2(name,<sp/>p0,<sp/>p1,<sp/>description)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5492"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP2,<sp/>description,<sp/>(#p0,<sp/>#p1),<sp/>\</highlight></codeline>
<codeline lineno="5493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p0,<sp/>p1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5494"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P3(name,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>description)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5495"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP3,<sp/>description,<sp/>(#p0,<sp/>#p1,<sp/>#p2),<sp/>\</highlight></codeline>
<codeline lineno="5496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p0,<sp/>p1,<sp/>p2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5497"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P4(name,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>description)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5498"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP4,<sp/>description,<sp/>\</highlight></codeline>
<codeline lineno="5499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(#p0,<sp/>#p1,<sp/>#p2,<sp/>#p3),<sp/>(p0,<sp/>p1,<sp/>p2,<sp/>p3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5500"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P5(name,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>description)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5501"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP5,<sp/>description,<sp/>\</highlight></codeline>
<codeline lineno="5502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(#p0,<sp/>#p1,<sp/>#p2,<sp/>#p3,<sp/>#p4),<sp/>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5503"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P6(name,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="5504"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP6,<sp/>description,<sp/><sp/>\</highlight></codeline>
<codeline lineno="5505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(#p0,<sp/>#p1,<sp/>#p2,<sp/>#p3,<sp/>#p4,<sp/>#p5),<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5507"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P7(name,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="5508"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP7,<sp/>description,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(#p0,<sp/>#p1,<sp/>#p2,<sp/>#p3,<sp/>#p4,<sp/>#p5,<sp/>#p6),<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5511"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P8(name,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="5512"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP8,<sp/>description,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(#p0,<sp/>#p1,<sp/>#p2,<sp/>#p3,<sp/>#p4,<sp/>#p5,<sp/>#p6,<sp/>#p7),<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5515"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P9(name,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>p8,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="5516"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP9,<sp/>description,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(#p0,<sp/>#p1,<sp/>#p2,<sp/>#p3,<sp/>#p4,<sp/>#p5,<sp/>#p6,<sp/>#p7,<sp/>#p8),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>p8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCHER_P10(name,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>p8,<sp/>p9,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="5520"><highlight class="preprocessor"><sp/><sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>name##MatcherP10,<sp/>description,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(#p0,<sp/>#p1,<sp/>#p2,<sp/>#p3,<sp/>#p4,<sp/>#p5,<sp/>#p6,<sp/>#p7,<sp/>#p8,<sp/>#p9),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>p8,<sp/>p9))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER(name,<sp/>full_name,<sp/>description,<sp/>arg_names,<sp/>args)<sp/><sp/>\</highlight></codeline>
<codeline lineno="5525"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS(args)&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5526"><highlight class="preprocessor"><sp/><sp/>class<sp/>full_name<sp/>:<sp/>public<sp/>::testing::internal::MatcherBaseImpl&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_name&lt;GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)&gt;&gt;<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5528"><highlight class="preprocessor"><sp/><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>using<sp/>full_name::MatcherBaseImpl::MatcherBaseImpl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>arg_type&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>class<sp/>gmock_Impl<sp/>:<sp/>public<sp/>::testing::MatcherInterface&lt;const<sp/>arg_type&amp;&gt;<sp/>{<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>explicit<sp/>gmock_Impl(GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS(args))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>GMOCK_INTERNAL_MATCHER_FORWARD_ARGS(args)<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>MatchAndExplain(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>arg_type&amp;<sp/>arg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::MatchResultListener*<sp/>result_listener)<sp/>const<sp/>override;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DescribeTo(::std::ostream*<sp/>gmock_os)<sp/>const<sp/>override<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gmock_os<sp/>&lt;&lt;<sp/>FormatDescription(false);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>DescribeNegationTo(::std::ostream*<sp/>gmock_os)<sp/>const<sp/>override<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gmock_os<sp/>&lt;&lt;<sp/>FormatDescription(true);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GMOCK_INTERNAL_MATCHER_MEMBERS(args)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>private:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::std::string<sp/>FormatDescription(bool<sp/>negation)<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::string<sp/>gmock_description;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmock_description<sp/>=<sp/>(description);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!gmock_description.empty())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>gmock_description;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::testing::internal::FormatMatcherDescription(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>negation,<sp/>#name,<sp/>{GMOCK_PP_REMOVE_PARENS(arg_names)},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::internal::UniversalTersePrintTupleFieldsToStrings(<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::tuple&lt;GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)&gt;(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GMOCK_INTERNAL_MATCHER_MEMBERS_USAGE(args))));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5560"><highlight class="preprocessor"><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5561"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS(args)&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5562"><highlight class="preprocessor"><sp/><sp/>inline<sp/>full_name&lt;GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)&gt;<sp/>name(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS(args))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>full_name&lt;GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)&gt;(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GMOCK_INTERNAL_MATCHER_ARGS_USAGE(args));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5566"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5567"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS(args)&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5568"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>arg_type&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5569"><highlight class="preprocessor"><sp/><sp/>bool<sp/>full_name&lt;GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)&gt;::gmock_Impl&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>arg_type&gt;::MatchAndExplain(const<sp/>arg_type&amp;<sp/>arg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::MatchResultListener*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_listener<sp/>GTEST_ATTRIBUTE_UNUSED_)<sp/><sp/>\</highlight></codeline>
<codeline lineno="5573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5574"><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS(args)<sp/>\</highlight></codeline>
<codeline lineno="5576"><highlight class="preprocessor"><sp/><sp/>GMOCK_PP_TAIL(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAM,<sp/>,<sp/>args))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAM(i_unused,<sp/>data_unused,<sp/>arg)<sp/>\</highlight></codeline>
<codeline lineno="5579"><highlight class="preprocessor"><sp/><sp/>,<sp/>typename<sp/>arg##_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"></highlight></codeline>
<codeline lineno="5581"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)<sp/>\</highlight></codeline>
<codeline lineno="5582"><highlight class="preprocessor"><sp/><sp/>GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_TYPE_PARAM,<sp/>,<sp/>args))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5583"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_TYPE_PARAM(i_unused,<sp/>data_unused,<sp/>arg)<sp/>\</highlight></codeline>
<codeline lineno="5584"><highlight class="preprocessor"><sp/><sp/>,<sp/>arg##_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"></highlight></codeline>
<codeline lineno="5586"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS(args)<sp/>\</highlight></codeline>
<codeline lineno="5587"><highlight class="preprocessor"><sp/><sp/>GMOCK_PP_TAIL(dummy_first<sp/>GMOCK_PP_FOR_EACH(<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GMOCK_INTERNAL_MATCHER_FUNCTION_ARG,<sp/>,<sp/>args))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5589"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_FUNCTION_ARG(i,<sp/>data_unused,<sp/>arg)<sp/>\</highlight></codeline>
<codeline lineno="5590"><highlight class="preprocessor"><sp/><sp/>,<sp/>arg##_type<sp/>gmock_p##i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5591"><highlight class="normal"></highlight></codeline>
<codeline lineno="5592"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_FORWARD_ARGS(args)<sp/>\</highlight></codeline>
<codeline lineno="5593"><highlight class="preprocessor"><sp/><sp/>GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_FORWARD_ARG,<sp/>,<sp/>args))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_FORWARD_ARG(i,<sp/>data_unused,<sp/>arg)<sp/>\</highlight></codeline>
<codeline lineno="5595"><highlight class="preprocessor"><sp/><sp/>,<sp/>arg(::std::forward&lt;arg##_type&gt;(gmock_p##i))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight></codeline>
<codeline lineno="5597"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_MEMBERS(args)<sp/>\</highlight></codeline>
<codeline lineno="5598"><highlight class="preprocessor"><sp/><sp/>GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_MEMBER,<sp/>,<sp/>args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_MEMBER(i_unused,<sp/>data_unused,<sp/>arg)<sp/>\</highlight></codeline>
<codeline lineno="5600"><highlight class="preprocessor"><sp/><sp/>const<sp/>arg##_type<sp/>arg;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5601"><highlight class="normal"></highlight></codeline>
<codeline lineno="5602"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_MEMBERS_USAGE(args)<sp/>\</highlight></codeline>
<codeline lineno="5603"><highlight class="preprocessor"><sp/><sp/>GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_MEMBER_USAGE,<sp/>,<sp/>args))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5604"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_MEMBER_USAGE(i_unused,<sp/>data_unused,<sp/>arg)<sp/>,<sp/>arg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_ARGS_USAGE(args)<sp/>\</highlight></codeline>
<codeline lineno="5607"><highlight class="preprocessor"><sp/><sp/>GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_ARG_USAGE,<sp/>,<sp/>args))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5608"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INTERNAL_MATCHER_ARG_USAGE(i,<sp/>data_unused,<sp/>arg_unused)<sp/>\</highlight></codeline>
<codeline lineno="5609"><highlight class="preprocessor"><sp/><sp/>,<sp/>gmock_p##i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5610"><highlight class="normal"></highlight></codeline>
<codeline lineno="5611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>prevent<sp/>ADL<sp/>on<sp/>certain<sp/>functions<sp/>we<sp/>put<sp/>them<sp/>on<sp/>a<sp/>separate<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">no_adl;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5613"><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5615"><highlight class="normal"></highlight></codeline>
<codeline lineno="5616"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>4251<sp/>5046</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"></highlight></codeline>
<codeline lineno="5618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>any<sp/>custom<sp/>callback<sp/>matchers<sp/>added<sp/>by<sp/>the<sp/>local<sp/>installation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>include<sp/>this<sp/>header<sp/>at<sp/>the<sp/>end<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>can<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>declarations<sp/>from<sp/>this<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/custom/gmock-matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5622"><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h"/>
  </compounddef>
</doxygen>
