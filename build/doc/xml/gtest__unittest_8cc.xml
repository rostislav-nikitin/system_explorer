<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gtest__unittest_8cc" kind="file" language="C++">
    <compoundname>gtest_unittest.cc</compoundname>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includes local="no">set</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes refid="gtest-internal-inl_8h" local="yes">src/gtest-internal-inl.h</includes>
    <includedby refid="gtest__all__test_8cc" local="yes">build/_deps/googletest-src/googletest/test/gtest_all_test.cc</includedby>
    <incdepgraph>
      <node id="14">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="28">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="47">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="35">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="16">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/gtest_unittest.cc</label>
        <link refid="gtest__unittest_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>algorithm</label>
      </node>
      <node id="37">
        <label>atomic</label>
      </node>
      <node id="51">
        <label>cassert</label>
      </node>
      <node id="22">
        <label>cerrno</label>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="17">
        <label>ctype.h</label>
      </node>
      <node id="63">
        <label>errno.h</label>
      </node>
      <node id="42">
        <label>float.h</label>
      </node>
      <node id="38">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iomanip</label>
      </node>
      <node id="53">
        <label>iosfwd</label>
      </node>
      <node id="23">
        <label>iostream</label>
      </node>
      <node id="49">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="57">
        <label>limits.h</label>
      </node>
      <node id="24">
        <label>locale</label>
      </node>
      <node id="43">
        <label>map</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="8">
        <label>ostream</label>
      </node>
      <node id="32">
        <label>regex.h</label>
      </node>
      <node id="9">
        <label>set</label>
      </node>
      <node id="10">
        <label>sstream</label>
      </node>
      <node id="18">
        <label>stddef.h</label>
      </node>
      <node id="59">
        <label>stdexcept</label>
      </node>
      <node id="19">
        <label>stdio.h</label>
      </node>
      <node id="20">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="21">
        <label>string.h</label>
      </node>
      <node id="30">
        <label>strings.h</label>
      </node>
      <node id="26">
        <label>sys/stat.h</label>
      </node>
      <node id="27">
        <label>sys/types.h</label>
      </node>
      <node id="58">
        <label>time.h</label>
      </node>
      <node id="25">
        <label>tuple</label>
      </node>
      <node id="12">
        <label>type_traits</label>
      </node>
      <node id="33">
        <label>typeinfo</label>
      </node>
      <node id="31">
        <label>unistd.h</label>
      </node>
      <node id="60">
        <label>unordered_set</label>
      </node>
      <node id="40">
        <label>utility</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structConvertibleGlobalType" prot="public">ConvertibleGlobalType</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1TestEventListenersAccessor" prot="public">testing::internal::TestEventListenersAccessor</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UnitTestRecordPropertyTestHelper" prot="public">testing::internal::UnitTestRecordPropertyTestHelper</innerclass>
    <innerclass refid="classTestingVector" prot="public">TestingVector</innerclass>
    <innerclass refid="structConvertibleToAssertionResult" prot="public">ConvertibleToAssertionResult</innerclass>
    <innerclass refid="classBase" prot="public">Base</innerclass>
    <innerclass refid="classnamespace1_1_1MyTypeInNameSpace1" prot="public">namespace1::MyTypeInNameSpace1</innerclass>
    <innerclass refid="classnamespace2_1_1MyTypeInNameSpace2" prot="public">namespace2::MyTypeInNameSpace2</innerclass>
    <innerclass refid="classtesting_1_1TestInfoTest" prot="public">testing::TestInfoTest</innerclass>
    <innerclass refid="classtesting_1_1CodeLocationForTESTF" prot="public">testing::CodeLocationForTESTF</innerclass>
    <innerclass refid="classtesting_1_1CodeLocationForTESTP" prot="public">testing::CodeLocationForTESTP</innerclass>
    <innerclass refid="classtesting_1_1CodeLocationForTYPEDTEST" prot="public">testing::CodeLocationForTYPEDTEST</innerclass>
    <innerclass refid="classtesting_1_1CodeLocationForTYPEDTESTP" prot="public">testing::CodeLocationForTYPEDTESTP</innerclass>
    <innerclass refid="classtesting_1_1SetUpTestCaseTest" prot="public">testing::SetUpTestCaseTest</innerclass>
    <innerclass refid="classtesting_1_1SetUpTestSuiteTest" prot="public">testing::SetUpTestSuiteTest</innerclass>
    <innerclass refid="structtesting_1_1Flags" prot="public">testing::Flags</innerclass>
    <innerclass refid="classtesting_1_1ParseFlagsTest" prot="public">testing::ParseFlagsTest</innerclass>
    <innerclass refid="classtesting_1_1CurrentTestInfoTest" prot="public">testing::CurrentTestInfoTest</innerclass>
    <innerclass refid="classmy__namespace_1_1testing_1_1Test" prot="public">my_namespace::testing::Test</innerclass>
    <innerclass refid="classmy__namespace_1_1testing_1_1Message" prot="public">my_namespace::testing::Message</innerclass>
    <innerclass refid="classmy__namespace_1_1testing_1_1AssertionResult" prot="public">my_namespace::testing::AssertionResult</innerclass>
    <innerclass refid="classProtectedFixtureMethodsTest" prot="public">ProtectedFixtureMethodsTest</innerclass>
    <innerclass refid="classStaticAssertTypeEqTestHelper" prot="public">StaticAssertTypeEqTestHelper</innerclass>
    <innerclass refid="classTestListener" prot="public">TestListener</innerclass>
    <innerclass refid="classSequenceTestingListener" prot="public">SequenceTestingListener</innerclass>
    <innerclass refid="classConversionHelperBase" prot="public">ConversionHelperBase</innerclass>
    <innerclass refid="classConversionHelperDerived" prot="public">ConversionHelperDerived</innerclass>
    <innerclass refid="structHasDebugStringMethods" prot="public">HasDebugStringMethods</innerclass>
    <innerclass refid="structInheritsDebugStringMethods" prot="public">InheritsDebugStringMethods</innerclass>
    <innerclass refid="structWrongTypeDebugStringMethod" prot="public">WrongTypeDebugStringMethod</innerclass>
    <innerclass refid="structNotConstDebugStringMethod" prot="public">NotConstDebugStringMethod</innerclass>
    <innerclass refid="structMissingDebugStringMethod" prot="public">MissingDebugStringMethod</innerclass>
    <innerclass refid="classNonContainer" prot="public">NonContainer</innerclass>
    <innerclass refid="structConstOnlyContainerWithPointerIterator" prot="public">ConstOnlyContainerWithPointerIterator</innerclass>
    <innerclass refid="structConstOnlyContainerWithClassIterator" prot="public">ConstOnlyContainerWithClassIterator</innerclass>
    <innerclass refid="structConstOnlyContainerWithClassIterator_1_1const__iterator" prot="public">ConstOnlyContainerWithClassIterator::const_iterator</innerclass>
    <innerclass refid="structAHashTable" prot="public">AHashTable</innerclass>
    <innerclass refid="structNotReallyAHashTable" prot="public">NotReallyAHashTable</innerclass>
    <innerclass refid="structConstructionCounting" prot="public">ConstructionCounting</innerclass>
    <innerclass refid="classDynamicUnitTestFixture" prot="public">DynamicUnitTestFixture</innerclass>
    <innerclass refid="classDynamicTest" prot="public">DynamicTest</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="namespacenamespace1">namespace1</innernamespace>
    <innernamespace refid="namespacenamespace2">namespace2</innernamespace>
    <innernamespace refid="namespacemy__namespace">my_namespace</innernamespace>
    <innernamespace refid="namespacemy__namespace_1_1testing">my_namespace::testing</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gtest__unittest_8cc_1ad42d1faf4b99498972bc2e03f236521a" prot="public" static="no">
        <name>GTEST_USE_UNPROTECTED_COMMA_</name>
        <initializer>global_var++, global_var++</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="1302" column="9" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="1302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest__unittest_8cc_1a7720eac5c0fc782a0447f4479923c7bd" prot="public" static="no">
        <name>VERIFY_CODE_LOCATION</name>
        <initializer>  const int expected_line = __LINE__ - 1;                                   \
  const <ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>* const test_info = GetUnitTestImpl()-&gt;current_test_info(); \
  ASSERT_TRUE(test_info);                                                   \
  EXPECT_STREQ(__FILE__, test_info-&gt;file());                                \
  EXPECT_EQ(expected_line, test_info-&gt;line())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5292" column="9" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest__unittest_8cc_1a0c91cd98ee7f96c5c1247f852e46d700" prot="public" static="no">
        <name>GTEST_TEST_PARSING_FLAGS_</name>
        <param><defname>argv1</defname></param>
        <param><defname>argv2</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>should_print_help</defname></param>
        <initializer>  TestParsingFlags(sizeof(argv1) / sizeof(*argv1) - 1, argv1,                \
                   sizeof(argv2) / sizeof(*argv2) - 1, argv2, expected,      \
                   should_print_help)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5759" column="9" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5759" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest__unittest_8cc_1af466a50c3676a701b0b9c5db2263f6e7" prot="public" static="no">
        <name>GTEST_FLAT_TUPLE_INT8</name>
        <initializer>int, int, int, int, int, int, int, int,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7674" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gtest__unittest_8cc_1aae118824bf510fcc9ecc8811db23d2f2" prot="public" static="no">
        <name>GTEST_FLAT_TUPLE_INT16</name>
        <initializer>GTEST_FLAT_TUPLE_INT8 GTEST_FLAT_TUPLE_INT8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7675" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gtest__unittest_8cc_1a1c7baa94acbbb0d0ef250772fdad3972" prot="public" static="no">
        <name>GTEST_FLAT_TUPLE_INT32</name>
        <initializer>GTEST_FLAT_TUPLE_INT16 GTEST_FLAT_TUPLE_INT16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7676" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gtest__unittest_8cc_1a505487ba755aefa89ddfdc9127621c11" prot="public" static="no">
        <name>GTEST_FLAT_TUPLE_INT64</name>
        <initializer>GTEST_FLAT_TUPLE_INT32 GTEST_FLAT_TUPLE_INT32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7677" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gtest__unittest_8cc_1a0ff3eef0b1e2abfee41bdab9631f41ae" prot="public" static="no">
        <name>GTEST_FLAT_TUPLE_INT128</name>
        <initializer>GTEST_FLAT_TUPLE_INT64 GTEST_FLAT_TUPLE_INT64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7678" column="9"/>
      </memberdef>
      <memberdef kind="define" id="gtest__unittest_8cc_1ac53eae6d18fe053245d04c88c2122882" prot="public" static="no">
        <name>GTEST_FLAT_TUPLE_INT256</name>
        <initializer>GTEST_FLAT_TUPLE_INT128 GTEST_FLAT_TUPLE_INT128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7679" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gtest__unittest_8cc_1a89319972d5a831dd6877a3e502ec57ff" prot="public" static="no">
        <type>int</type>
        <definition>typedef int IntAlias</definition>
        <argsstring></argsstring>
        <name>IntAlias</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6719" column="13" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6719" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gtest__unittest_8cc_1af4b95d5232ee16f06c9a106dde7a8ce0" prot="public" static="yes" mutable="no">
        <type>bool dummy1</type>
        <definition>bool dummy2 GTEST_ATTRIBUTE_UNUSED_</definition>
        <argsstring></argsstring>
        <name>GTEST_ATTRIBUTE_UNUSED_</name>
        <initializer>= StaticAssertTypeEq&lt;bool, bool&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6701" column="20" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest__unittest_8cc_1a0e7f4300994a060678c15c0105f21378" prot="public" static="no" mutable="no">
        <type>auto *</type>
        <definition>auto* dynamic_test</definition>
        <argsstring></argsstring>
        <name>dynamic_test</name>
        <initializer>= testing::RegisterTest(
    &quot;DynamicUnitTestFixture&quot;, &quot;DynamicTest&quot;, &quot;TYPE&quot;, &quot;VALUE&quot;, __FILE__,
    __LINE__, []() -&gt; <ref refid="classDynamicUnitTestFixture" kindref="compound">DynamicUnitTestFixture</ref>* { return new <ref refid="classDynamicTest" kindref="compound">DynamicTest</ref>; })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7732" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7732" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest__unittest_8cc_1ab57f179772c1ce74fd8c22fe0590dffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CommandLineFlagsTest, CanBeAccessedInCodeOnceGTestHIsIncluded)</argsstring>
        <name>TEST</name>
        <param>
          <type>CommandLineFlagsTest</type>
        </param>
        <param>
          <type>CanBeAccessedInCodeOnceGTestHIsIncluded</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="39" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="39" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a4d3817a6ce81cdb62ee9327601766411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operator&lt;&lt;</definition>
        <argsstring>(ConvertibleGlobalType &amp;, int)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="structConvertibleGlobalType" kindref="compound">ConvertibleGlobalType</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="86" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1abdba99e22dc5893cd638902542f87c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::std::ostream &amp;</type>
        <definition>::std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(::std::ostream &amp;os, const TestingVector &amp;vector)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>::std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classTestingVector" kindref="compound">TestingVector</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="289" column="40" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="291" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1f4d6acbaf3df6080caf7e24f05a0be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AssertionResultTest, CopyConstructorWorksWhenNotOptimied)</argsstring>
        <name>TEST</name>
        <param>
          <type>AssertionResultTest</type>
        </param>
        <param>
          <type>CopyConstructorWorksWhenNotOptimied</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5035" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5035" bodyend="5047"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aedf09cfebfd5a8d3a06625df12bbb876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AssertionResultTest, ConstructionWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>AssertionResultTest</type>
        </param>
        <param>
          <type>ConstructionWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5051" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5051" bodyend="5071"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a96d7227faf7783c24e9532b1eb3c2a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AssertionResultTest, NegationWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>AssertionResultTest</type>
        </param>
        <param>
          <type>NegationWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5074" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5074" bodyend="5082"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1acdfdc68a5959b52a59f9dd0cccc3f390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AssertionResultTest, StreamingWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>AssertionResultTest</type>
        </param>
        <param>
          <type>StreamingWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5084" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5084" bodyend="5088"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a9f44af0752c3f08c932e2750905c6d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AssertionResultTest, CanStreamOstreamManipulators)</argsstring>
        <name>TEST</name>
        <param>
          <type>AssertionResultTest</type>
        </param>
        <param>
          <type>CanStreamOstreamManipulators</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5090" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5090" bodyend="5094"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a6c1aee92a8318b35de4f07970a737f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AssertionResultTest, ConstructibleFromContextuallyConvertibleToBool)</argsstring>
        <name>TEST</name>
        <param>
          <type>AssertionResultTest</type>
        </param>
        <param>
          <type>ConstructibleFromContextuallyConvertibleToBool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5098" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5098" bodyend="5107"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a4e5c52db04c25d8718f584bf5f74c62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AssertionResultTest, ConstructibleFromImplicitlyConvertible)</argsstring>
        <name>TEST</name>
        <param>
          <type>AssertionResultTest</type>
        </param>
        <param>
          <type>ConstructibleFromImplicitlyConvertible</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5113" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5113" bodyend="5116"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1d3d9493cb530ad09b4aa850f6f2ac06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Base &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classBase" kindref="compound">Base</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5128" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5128" bodyend="5130"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a83c418983bc13cb694e585796a8b2335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Base *pointer)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classBase" kindref="compound">Base</ref> *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5131" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5131" bodyend="5133"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a3cfb4c4e94683c4677706c53ab52fb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MessageTest, CanStreamUserTypeInGlobalNameSpace)</argsstring>
        <name>TEST</name>
        <param>
          <type>MessageTest</type>
        </param>
        <param>
          <type>CanStreamUserTypeInGlobalNameSpace</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5135" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5135" bodyend="5141"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ab9dfac778014c6214ff30da9c74cbffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MessageTest, CanStreamUserTypeInUnnamedNameSpace)</argsstring>
        <name>TEST</name>
        <param>
          <type>MessageTest</type>
        </param>
        <param>
          <type>CanStreamUserTypeInUnnamedNameSpace</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5160" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5160" bodyend="5166"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ac87850465b99bd7121b521b2da5966f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MessageTest, CanStreamUserTypeInUserNameSpace)</argsstring>
        <name>TEST</name>
        <param>
          <type>MessageTest</type>
        </param>
        <param>
          <type>CanStreamUserTypeInUserNameSpace</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5183" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5183" bodyend="5189"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a10d6d9493171420b9402befca2f48a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const namespace2::MyTypeInNameSpace2 &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnamespace2_1_1MyTypeInNameSpace2" kindref="compound">namespace2::MyTypeInNameSpace2</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5199" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5199" bodyend="5202"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a9ae68b20809290f65f538a63547011ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const namespace2::MyTypeInNameSpace2 *pointer)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnamespace2_1_1MyTypeInNameSpace2" kindref="compound">namespace2::MyTypeInNameSpace2</ref> *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5203" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5203" bodyend="5206"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ad2b886ecfee880b5012c8d41b448f110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MessageTest, CanStreamUserTypeInUserNameSpaceWithStreamOperatorInGlobal)</argsstring>
        <name>TEST</name>
        <param>
          <type>MessageTest</type>
        </param>
        <param>
          <type>CanStreamUserTypeInUserNameSpaceWithStreamOperatorInGlobal</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5208" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5208" bodyend="5214"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a94b1c12b49eabc12e7418733576df02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MessageTest, NullPointers)</argsstring>
        <name>TEST</name>
        <param>
          <type>MessageTest</type>
        </param>
        <param>
          <type>NullPointers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5217" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5217" bodyend="5228"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a9c9e67e24350d636fa355b36ed230706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MessageTest, WideStrings)</argsstring>
        <name>TEST</name>
        <param>
          <type>MessageTest</type>
        </param>
        <param>
          <type>WideStrings</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5231" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5231" bodyend="5248"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1118ea85887fba8f2dd371d1add98cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, Unconditional)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>Unconditional</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6438" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6438" bodyend="6443"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a5081f1d21cba3545511f97cc2be73da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, Truth)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>Truth</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6450" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6450" bodyend="6457"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aa957aa71ef10bd134fe2d6f702e264df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, Truth2)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>Truth2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6459" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6459" bodyend="6466"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af9ba09b04506bd0e6b81221396535889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, IntegerEquals)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>IntegerEquals</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6473" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6473" bodyend="6480"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a8cfc5b3fcdf4593236319966b11dcc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, IntegerLessThan)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>IntegerLessThan</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6482" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6482" bodyend="6489"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a474efe55930f8fc5fa7baa2360d5cda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, StringsEqual)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>StringsEqual</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6491" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6491" bodyend="6498"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a7393a1560b4cf4ab39cf3eb20ca10345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, StringsNotEqual)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>StringsNotEqual</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6500" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6500" bodyend="6507"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a82bafab19e101ad95823eb58e6676df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, StringsEqualIgnoringCase)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>StringsEqualIgnoringCase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6509" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6509" bodyend="6516"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a83a5ce843f2acfe262c164ed6ce989b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, StringNotEqualIgnoringCase)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>StringNotEqualIgnoringCase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6518" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6518" bodyend="6525"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a575e502c03840cac57d6dc6697e39240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StreamingAssertionsTest, FloatingPointEquals)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamingAssertionsTest</type>
        </param>
        <param>
          <type>FloatingPointEquals</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6527" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6527" bodyend="6534"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aaf1acc03f393989f85aafd13c880fa44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ColoredOutputTest, UsesColorsWhenGTestColorFlagIsYes)</argsstring>
        <name>TEST</name>
        <param>
          <type>ColoredOutputTest</type>
        </param>
        <param>
          <type>UsesColorsWhenGTestColorFlagIsYes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6573" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6573" bodyend="6583"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aa9a0db525d07d5e2afea545471d1f654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ColoredOutputTest, UsesColorsWhenGTestColorFlagIsAliasOfYes)</argsstring>
        <name>TEST</name>
        <param>
          <type>ColoredOutputTest</type>
        </param>
        <param>
          <type>UsesColorsWhenGTestColorFlagIsAliasOfYes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6585" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6585" bodyend="6596"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aac5bec0b24eebf52985abcd6234335fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ColoredOutputTest, UsesNoColorWhenGTestColorFlagIsNo)</argsstring>
        <name>TEST</name>
        <param>
          <type>ColoredOutputTest</type>
        </param>
        <param>
          <type>UsesNoColorWhenGTestColorFlagIsNo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6598" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6598" bodyend="6608"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a7f15883b04b4975f604be288955952fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ColoredOutputTest, UsesNoColorWhenGTestColorFlagIsInvalid)</argsstring>
        <name>TEST</name>
        <param>
          <type>ColoredOutputTest</type>
        </param>
        <param>
          <type>UsesNoColorWhenGTestColorFlagIsInvalid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6610" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6610" bodyend="6621"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a2a995937bc9d0b16d65e5bcaa5fc781e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ColoredOutputTest, UsesColorsWhenStdoutIsTty)</argsstring>
        <name>TEST</name>
        <param>
          <type>ColoredOutputTest</type>
        </param>
        <param>
          <type>UsesColorsWhenStdoutIsTty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6623" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6623" bodyend="6629"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a6dd6677e63340771dc55ad96a0697f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ColoredOutputTest, UsesColorsWhenTermSupportsColors)</argsstring>
        <name>TEST</name>
        <param>
          <type>ColoredOutputTest</type>
        </param>
        <param>
          <type>UsesColorsWhenTermSupportsColors</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6631" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6631" bodyend="6697"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a267c6521e900e2d6096653f1b0df7f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StaticAssertTypeEqTest, WorksInClass)</argsstring>
        <name>TEST</name>
        <param>
          <type>StaticAssertTypeEqTest</type>
        </param>
        <param>
          <type>WorksInClass</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6713" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6713" bodyend="6715"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a896a075b2d244e3961f0fb3c13614f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StaticAssertTypeEqTest, CompilesForEqualTypes)</argsstring>
        <name>TEST</name>
        <param>
          <type>StaticAssertTypeEqTest</type>
        </param>
        <param>
          <type>CompilesForEqualTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6721" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6721" bodyend="6724"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a9f9166027da63504b2306b8f5e5a88b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasNonfatalFailureTest, ReturnsFalseWhenThereIsNoFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasNonfatalFailureTest</type>
        </param>
        <param>
          <type>ReturnsFalseWhenThereIsNoFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6726" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6726" bodyend="6728"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a3e54bdc05dfd9b57684116c4a9c1fc1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void FailFatally</definition>
        <argsstring>()</argsstring>
        <name>FailFatally</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6730" column="13" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6730" bodyend="6730"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ad25e0382fb27cfff590e2c104c504dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasNonfatalFailureTest, ReturnsFalseWhenThereIsOnlyFatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasNonfatalFailureTest</type>
        </param>
        <param>
          <type>ReturnsFalseWhenThereIsOnlyFatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6732" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6732" bodyend="6737"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1d7caf8788fecd939c4a4e23c23e52ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasNonfatalFailureTest, ReturnsTrueWhenThereIsNonfatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasNonfatalFailureTest</type>
        </param>
        <param>
          <type>ReturnsTrueWhenThereIsNonfatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6739" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6739" bodyend="6744"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a7df9189826b8aab71331bb7fec0b57cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasNonfatalFailureTest, ReturnsTrueWhenThereAreFatalAndNonfatalFailures)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasNonfatalFailureTest</type>
        </param>
        <param>
          <type>ReturnsTrueWhenThereAreFatalAndNonfatalFailures</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6746" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6746" bodyend="6752"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ac6eb4ad0064e248acc8f01b6f4353b95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool HasNonfatalFailureHelper</definition>
        <argsstring>()</argsstring>
        <name>HasNonfatalFailureHelper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6755" column="13" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6755" bodyend="6757"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a97a31bbf9d4d1f7f36021db7efed056a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasNonfatalFailureTest, WorksOutsideOfTestBody)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasNonfatalFailureTest</type>
        </param>
        <param>
          <type>WorksOutsideOfTestBody</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6759" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6759" bodyend="6761"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1d352f5ce3c51840695c59733f8f642a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasNonfatalFailureTest, WorksOutsideOfTestBody2)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasNonfatalFailureTest</type>
        </param>
        <param>
          <type>WorksOutsideOfTestBody2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6763" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6763" bodyend="6768"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a3963284acb609756dee763d91b93aaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasFailureTest, ReturnsFalseWhenThereIsNoFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasFailureTest</type>
        </param>
        <param>
          <type>ReturnsFalseWhenThereIsNoFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6770" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6770" bodyend="6772"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a3226e1e613be7a832888a4a8f57fb02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasFailureTest, ReturnsTrueWhenThereIsFatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasFailureTest</type>
        </param>
        <param>
          <type>ReturnsTrueWhenThereIsFatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6774" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6774" bodyend="6779"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af4d5faf224cfe1acb3d49612a4659b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasFailureTest, ReturnsTrueWhenThereIsNonfatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasFailureTest</type>
        </param>
        <param>
          <type>ReturnsTrueWhenThereIsNonfatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6781" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6781" bodyend="6786"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a80bc4f563ed06ee6b84f1370744fd3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasFailureTest, ReturnsTrueWhenThereAreFatalAndNonfatalFailures)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasFailureTest</type>
        </param>
        <param>
          <type>ReturnsTrueWhenThereAreFatalAndNonfatalFailures</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6788" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6788" bodyend="6794"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ad6f57748fc42d01bbb006a116cd1a984" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool HasFailureHelper</definition>
        <argsstring>()</argsstring>
        <name>HasFailureHelper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6797" column="13" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6797" bodyend="6797"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a4ff927d7677fcdff6fd6af7e27c6aab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasFailureTest, WorksOutsideOfTestBody)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasFailureTest</type>
        </param>
        <param>
          <type>WorksOutsideOfTestBody</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6799" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6799" bodyend="6801"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1acb72846e1f7181d831d760128a763e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasFailureTest, WorksOutsideOfTestBody2)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasFailureTest</type>
        </param>
        <param>
          <type>WorksOutsideOfTestBody2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6803" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6803" bodyend="6808"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a7b39d7fb43a28e8098af85e3ee51eece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TestEventListenersTest, ConstructionWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>TestEventListenersTest</type>
        </param>
        <param>
          <type>ConstructionWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6831" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6831" bodyend="6837"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1d1592cafc34c09de7a810a7c4855162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TestEventListenersTest, DestructionWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>TestEventListenersTest</type>
        </param>
        <param>
          <type>DestructionWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6841" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6841" bodyend="6863"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a4b3f65b804787ed25c4136df142e1f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TestEventListenersTest, Append)</argsstring>
        <name>TEST</name>
        <param>
          <type>TestEventListenersTest</type>
        </param>
        <param>
          <type>Append</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6867" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6867" bodyend="6879"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a2a1ece611968f69f9feb86f639089511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(EventListenerTest, AppendKeepsOrder)</argsstring>
        <name>TEST</name>
        <param>
          <type>EventListenerTest</type>
        </param>
        <param>
          <type>AppendKeepsOrder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6922" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6922" bodyend="6959"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aefe7d8b3422fb27b9c7281c0434881be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TestEventListenersTest, Release)</argsstring>
        <name>TEST</name>
        <param>
          <type>TestEventListenersTest</type>
        </param>
        <param>
          <type>Release</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6963" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6963" bodyend="6981"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1abdd2f070281db35988b7f6c22f2623e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(EventListenerTest, SuppressEventForwarding)</argsstring>
        <name>TEST</name>
        <param>
          <type>EventListenerTest</type>
        </param>
        <param>
          <type>SuppressEventForwarding</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="6984" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="6984" bodyend="6996"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a713bd291b3b85b7c9869129f22e369fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(EventListenerDeathTest, EventsNotForwardedInDeathTestSubprocesses)</argsstring>
        <name>TEST</name>
        <param>
          <type>EventListenerDeathTest</type>
        </param>
        <param>
          <type>EventsNotForwardedInDeathTestSubprocesses</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7000" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7000" bodyend="7008"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a6fa482480599861df0c182c4d4229133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(EventListenerTest, default_result_printer)</argsstring>
        <name>TEST</name>
        <param>
          <type>EventListenerTest</type>
        </param>
        <param>
          <type>default_result_printer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7013" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7013" bodyend="7040"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a32187fe0e1d4620d0ed5a7c6cc7254b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(EventListenerTest, RemovingDefaultResultPrinterWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>EventListenerTest</type>
        </param>
        <param>
          <type>RemovingDefaultResultPrinterWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7044" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7044" bodyend="7067"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aff2c25cbedbe72d8bb0162bc1bd0fece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(EventListenerTest, default_xml_generator)</argsstring>
        <name>TEST</name>
        <param>
          <type>EventListenerTest</type>
        </param>
        <param>
          <type>default_xml_generator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7072" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7072" bodyend="7099"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a77647d09c995f09d06e2f02b13277c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(EventListenerTest, RemovingDefaultXmlGeneratorWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>EventListenerTest</type>
        </param>
        <param>
          <type>RemovingDefaultXmlGeneratorWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7103" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7103" bodyend="7126"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a54247aeadc0617105812dca8609638de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GTEST_TEST</definition>
        <argsstring>(AlternativeNameTest, Works)</argsstring>
        <name>GTEST_TEST</name>
        <param>
          <type>AlternativeNameTest</type>
        </param>
        <param>
          <type>Works</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7133" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7133" bodyend="7174"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a808ccae6d8446bc0e488eb9917f78b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasDebugStringAndShortDebugStringTest, ValueIsCompileTimeConstant)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasDebugStringAndShortDebugStringTest</type>
        </param>
        <param>
          <type>ValueIsCompileTimeConstant</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7207" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7207" bodyend="7228"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aeb9408d28a0a48aabcd83211ff064131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasDebugStringAndShortDebugStringTest, ValueIsTrueWhenTypeHasDebugStringAndShortDebugString)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasDebugStringAndShortDebugStringTest</type>
        </param>
        <param>
          <type>ValueIsTrueWhenTypeHasDebugStringAndShortDebugString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7232" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7232" bodyend="7236"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ab0a9f0e489a487bdfa7e9c8b9501827d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HasDebugStringAndShortDebugStringTest, ValueIsFalseWhenTypeIsNotAProtocolMessage)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasDebugStringAndShortDebugStringTest</type>
        </param>
        <param>
          <type>ValueIsFalseWhenTypeIsNotAProtocolMessage</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7240" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7240" bodyend="7245"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af4e9d28ffb149f2bce37f0883cece0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TestGTestRemoveReferenceAndConst</definition>
        <argsstring>()</argsstring>
        <name>TestGTestRemoveReferenceAndConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7250" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7250" bodyend="7253"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af57c5701311c2e9074540ee680e3f34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RemoveReferenceToConstTest, Works)</argsstring>
        <name>TEST</name>
        <param>
          <type>RemoveReferenceToConstTest</type>
        </param>
        <param>
          <type>Works</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7255" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7255" bodyend="7261"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a033ae0af50f62e72a31bf1a28151bd65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TestGTestReferenceToConst</definition>
        <argsstring>()</argsstring>
        <name>TestGTestReferenceToConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7266" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7266" bodyend="7269"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a69fa334ed4d6f74b62d2404b65ae7852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GTestReferenceToConstTest, Works)</argsstring>
        <name>TEST</name>
        <param>
          <type>GTestReferenceToConstTest</type>
        </param>
        <param>
          <type>Works</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7271" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7271" bodyend="7276"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a819ddb03c072631f5606a9ddf4be5ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IsContainerTestTest, WorksForNonContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsContainerTestTest</type>
        </param>
        <param>
          <type>WorksForNonContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7282" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7282" bodyend="7286"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a28c741995150722b00c039ead2b8ab04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IsContainerTestTest, WorksForContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsContainerTestTest</type>
        </param>
        <param>
          <type>WorksForContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7288" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7288" bodyend="7292"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a54cda93a5356bccbf0467950b644ff02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IsContainerTestTest, ConstOnlyContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsContainerTestTest</type>
        </param>
        <param>
          <type>ConstOnlyContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7309" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7309" bodyend="7314"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ab060da75dc9cd1d8ece17e4c1ed3c037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IsHashTable, Basic)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsHashTable</type>
        </param>
        <param>
          <type>Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7324" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7324" bodyend="7329"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ae9e7a844847a2df933aa4c2f85f7ceed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ArrayEqTest, WorksForDegeneratedArrays)</argsstring>
        <name>TEST</name>
        <param>
          <type>ArrayEqTest</type>
        </param>
        <param>
          <type>WorksForDegeneratedArrays</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7333" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7333" bodyend="7336"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a4ea595c1e4b3620fb8cf7366dd533c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ArrayEqTest, WorksForOneDimensionalArrays)</argsstring>
        <name>TEST</name>
        <param>
          <type>ArrayEqTest</type>
        </param>
        <param>
          <type>WorksForOneDimensionalArrays</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7338" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7338" bodyend="7348"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ab18237f1a37018db8b5a78ae84b209ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ArrayEqTest, WorksForTwoDimensionalArrays)</argsstring>
        <name>TEST</name>
        <param>
          <type>ArrayEqTest</type>
        </param>
        <param>
          <type>WorksForTwoDimensionalArrays</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7350" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7350" bodyend="7360"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a563807f4b8c6d7fbf2945f279e38468e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ArrayAwareFindTest, WorksForOneDimensionalArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>ArrayAwareFindTest</type>
        </param>
        <param>
          <type>WorksForOneDimensionalArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7364" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7364" bodyend="7368"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1ca0fb8b6355671bbe5a62300585db5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ArrayAwareFindTest, WorksForTwoDimensionalArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>ArrayAwareFindTest</type>
        </param>
        <param>
          <type>WorksForTwoDimensionalArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7370" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7370" bodyend="7377"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ad6d3761861147173657e547cb118877f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CopyArrayTest, WorksForDegeneratedArrays)</argsstring>
        <name>TEST</name>
        <param>
          <type>CopyArrayTest</type>
        </param>
        <param>
          <type>WorksForDegeneratedArrays</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7381" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7381" bodyend="7385"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a0155f940cddc15a77da7df03325c6d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CopyArrayTest, WorksForOneDimensionalArrays)</argsstring>
        <name>TEST</name>
        <param>
          <type>CopyArrayTest</type>
        </param>
        <param>
          <type>WorksForOneDimensionalArrays</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7387" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7387" bodyend="7398"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1f1a5d3bb2ce15ff081f359e4494a739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CopyArrayTest, WorksForTwoDimensionalArrays)</argsstring>
        <name>TEST</name>
        <param>
          <type>CopyArrayTest</type>
        </param>
        <param>
          <type>WorksForTwoDimensionalArrays</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7400" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7400" bodyend="7411"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1acba0839db5cf02cdbd658b9fb810066b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NativeArrayTest, ConstructorFromArrayWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>NativeArrayTest</type>
        </param>
        <param>
          <type>ConstructorFromArrayWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7415" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7415" bodyend="7420"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a227737052f993da5fe2f3294b7f8d184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NativeArrayTest, CreatesAndDeletesCopyOfArrayWhenAskedTo)</argsstring>
        <name>TEST</name>
        <param>
          <type>NativeArrayTest</type>
        </param>
        <param>
          <type>CreatesAndDeletesCopyOfArrayWhenAskedTo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7422" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7422" bodyend="7435"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1f2578d4ac6aeb87d0c7c9574f79ed0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NativeArrayTest, TypeMembersAreCorrect)</argsstring>
        <name>TEST</name>
        <param>
          <type>NativeArrayTest</type>
        </param>
        <param>
          <type>TypeMembersAreCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7437" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7437" bodyend="7443"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a5f14e3d45e8edc2d22d4e98e7c1422b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NativeArrayTest, MethodsWork)</argsstring>
        <name>TEST</name>
        <param>
          <type>NativeArrayTest</type>
        </param>
        <param>
          <type>MethodsWork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7445" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7445" bodyend="7469"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a148c11619d001fac39dae12428534b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NativeArrayTest, WorksForTwoDimensionalArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>NativeArrayTest</type>
        </param>
        <param>
          <type>WorksForTwoDimensionalArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7471" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7471" bodyend="7476"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a387a341993c619b19786b6c5cf589160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IndexSequence, MakeIndexSequence)</argsstring>
        <name>TEST</name>
        <param>
          <type>IndexSequence</type>
        </param>
        <param>
          <type>MakeIndexSequence</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7479" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7479" bodyend="7492"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ac3105a7c9cd40f1dfc07152424fb10dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ElemFromList, Basic)</argsstring>
        <name>TEST</name>
        <param>
          <type>ElemFromList</type>
        </param>
        <param>
          <type>Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7495" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7495" bodyend="7506"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a4fd48ea8393706f2dc8f5b3899358a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FlatTuple, Basic)</argsstring>
        <name>TEST</name>
        <param>
          <type>FlatTuple</type>
        </param>
        <param>
          <type>Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7509" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7509" bodyend="7525"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a2957157528377a868bc4f4a02b6afb42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FlatTuple, Apply)</argsstring>
        <name>TEST</name>
        <param>
          <type>FlatTuple</type>
        </param>
        <param>
          <type>Apply</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7533" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7533" bodyend="7554"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a16954f06986ced62d07fbf90e82184ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FlatTuple, ConstructorCalls)</argsstring>
        <name>TEST</name>
        <param>
          <type>FlatTuple</type>
        </param>
        <param>
          <type>ConstructorCalls</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7594" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7594" bodyend="7666"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a14e064220d7b23d6823f681fcdaca59e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FlatTuple, ManyTypes)</argsstring>
        <name>TEST</name>
        <param>
          <type>FlatTuple</type>
        </param>
        <param>
          <type>ManyTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7668" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7668" bodyend="7691"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a0c38bd27f49371439ed463c1bb44f444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SkipPrefixTest, SkipsWhenPrefixMatches)</argsstring>
        <name>TEST</name>
        <param>
          <type>SkipPrefixTest</type>
        </param>
        <param>
          <type>SkipsWhenPrefixMatches</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7695" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7695" bodyend="7705"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1afeb79bbd7756bbeca262cb79315856a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SkipPrefixTest, DoesNotSkipWhenPrefixDoesNotMatch)</argsstring>
        <name>TEST</name>
        <param>
          <type>SkipPrefixTest</type>
        </param>
        <param>
          <type>DoesNotSkipWhenPrefixDoesNotMatch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7707" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7707" bodyend="7717"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aa688cc7adfb48bafdc1a890304335571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AdHocTestResultTest, AdHocTestResultForUnitTestDoesNotShowFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>AdHocTestResultTest</type>
        </param>
        <param>
          <type>AdHocTestResultForUnitTestDoesNotShowFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7720" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7720" bodyend="7724"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1acc22a4bbd8fccca7340330c689e8eae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RegisterTest, WasRegistered)</argsstring>
        <name>TEST</name>
        <param>
          <type>RegisterTest</type>
        </param>
        <param>
          <type>WasRegistered</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7736" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7736" bodyend="7751"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a72d019bb8dccced883fbbac13177d03f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PatternGlobbingTest, MatchesFilterLinearRuntime)</argsstring>
        <name>TEST</name>
        <param>
          <type>PatternGlobbingTest</type>
        </param>
        <param>
          <type>MatchesFilterLinearRuntime</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7755" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7755" bodyend="7767"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aed5ac9180980d7a2618966ad0fb1a590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PatternGlobbingTest, MatchesFilterWithMultiplePatterns)</argsstring>
        <name>TEST</name>
        <param>
          <type>PatternGlobbingTest</type>
        </param>
        <param>
          <type>MatchesFilterWithMultiplePatterns</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7769" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7769" bodyend="7776"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a46a8eae60bc66426e2db503e2230b35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PatternGlobbingTest, MatchesFilterEdgeCases)</argsstring>
        <name>TEST</name>
        <param>
          <type>PatternGlobbingTest</type>
        </param>
        <param>
          <type>MatchesFilterEdgeCases</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="7778" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="7778" bodyend="7783"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>Google<sp/>Test<sp/>itself.<sp/><sp/>This<sp/>verifies<sp/>that<sp/>the<sp/>basic<sp/>constructs<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>command<sp/>line<sp/>flag<sp/>variables<sp/>can<sp/>be<sp/>accessed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>once<sp/>&quot;gtest.h&quot;<sp/>has<sp/>been<sp/>#included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>move<sp/>it<sp/>after<sp/>other<sp/>gtest<sp/>#includes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">TEST(CommandLineFlagsTest,<sp/>CanBeAccessedInCodeOnceGTestHIsIncluded)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dummy<sp/>=</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(also_run_disabled_tests)<sp/>||</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(break_on_failure)<sp/>||<sp/>GTEST_FLAG_GET(catch_exceptions)<sp/>||</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(color)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal"><sp/>||<sp/>GTEST_FLAG_GET(fail_fast)<sp/>||</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(filter)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal"><sp/>||<sp/>GTEST_FLAG_GET(list_tests)<sp/>||</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(output)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal"><sp/>||<sp/>GTEST_FLAG_GET(brief)<sp/>||</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(print_time)<sp/>||<sp/>GTEST_FLAG_GET(random_seed)<sp/>||</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(repeat)<sp/>&gt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(recreate_environments_when_repeating)<sp/>||</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(show_internal_stack_frames)<sp/>||<sp/>GTEST_FLAG_GET(shuffle)<sp/>||</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(stack_trace_depth)<sp/>&gt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(stream_result_to)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(throw_on_failure);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(dummy<sp/>||<sp/>!dummy);<sp/><sp/></highlight><highlight class="comment">//<sp/>Suppresses<sp/>warning<sp/>that<sp/>dummy<sp/>is<sp/>unused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>INT_MAX.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/gtest-internal-inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structConvertibleGlobalType" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structConvertibleGlobalType" kindref="compound">ConvertibleGlobalType</ref><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>inner<sp/>enable_if<sp/>is<sp/>to<sp/>ensure<sp/>invoking<sp/>is_constructible<sp/>doesn&apos;t<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>outer<sp/>enable_if<sp/>is<sp/>to<sp/>ensure<sp/>the<sp/>overload<sp/>resolution<sp/>doesn&apos;t<sp/>encounter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>ambiguity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::enable_if_t&lt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>std::enable_if_t&lt;std::is_constructible&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(google-explicit-constructor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(<ref refid="structConvertibleGlobalType" kindref="compound">ConvertibleGlobalType</ref>&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;ConvertibleGlobalType&amp;&gt;()</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>1)(*)())<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>operator&lt;&lt;<sp/>overload<sp/>resolution&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StreamingListenerTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FakeSocketWriter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>StreamingListener::AbstractSocketWriter<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sends<sp/>a<sp/>string<sp/>to<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>output_<sp/>+=<sp/>message;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>output_;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>StreamingListenerTest()</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>fake_sock_writer_(new<sp/>FakeSocketWriter),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>streamer_(fake_sock_writer_),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info_obj_(</highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bar&quot;</highlight><highlight class="normal">,<sp/>nullptr,<sp/>nullptr,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CodeLocation(__FILE__,<sp/>__LINE__),<sp/>nullptr,<sp/>nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>std::string*<sp/>output()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(fake_sock_writer_-&gt;output_);<sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>FakeSocketWriter*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fake_sock_writer_;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>StreamingListener<sp/>streamer_;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref><sp/>unit_test_;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref><sp/>test_info_obj_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>test_info_<sp/>was<sp/>taken<sp/>by<sp/>testing::Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">TEST_F(StreamingListenerTest,<sp/>OnTestProgramEnd)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>*output()<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>streamer_.OnTestProgramEnd(unit_test_);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;event=TestProgramEnd&amp;passed=1\n&quot;</highlight><highlight class="normal">,<sp/>*output());</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">TEST_F(StreamingListenerTest,<sp/>OnTestIterationEnd)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>*output()<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>streamer_.OnTestIterationEnd(unit_test_,<sp/>42);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;event=TestIterationEnd&amp;passed=1&amp;elapsed_time=0ms\n&quot;</highlight><highlight class="normal">,<sp/>*output());</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">TEST_F(StreamingListenerTest,<sp/>OnTestSuiteStart)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>*output()<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>streamer_.OnTestSuiteStart(TestSuite(</highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;event=TestCaseStart&amp;name=FooTest\n&quot;</highlight><highlight class="normal">,<sp/>*output());</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">TEST_F(StreamingListenerTest,<sp/>OnTestSuiteEnd)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>*output()<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>streamer_.OnTestSuiteEnd(TestSuite(</highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;event=TestCaseEnd&amp;passed=1&amp;elapsed_time=0ms\n&quot;</highlight><highlight class="normal">,<sp/>*output());</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">TEST_F(StreamingListenerTest,<sp/>OnTestStart)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>*output()<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>streamer_.OnTestStart(test_info_obj_);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;event=TestStart&amp;name=Bar\n&quot;</highlight><highlight class="normal">,<sp/>*output());</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">TEST_F(StreamingListenerTest,<sp/>OnTestEnd)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>*output()<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>streamer_.OnTestEnd(test_info_obj_);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;event=TestEnd&amp;passed=1&amp;elapsed_time=0ms\n&quot;</highlight><highlight class="normal">,<sp/>*output());</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">TEST_F(StreamingListenerTest,<sp/>OnTestPartResult)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>*output()<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>streamer_.OnTestPartResult(TestPartResult(TestPartResult::kFatalFailure,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42,<sp/></highlight><highlight class="stringliteral">&quot;failed=\n&amp;%&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Meta<sp/>characters<sp/>in<sp/>the<sp/>failure<sp/>message<sp/>should<sp/>be<sp/>properly<sp/>escaped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;event=TestPartResult&amp;file=foo.cc&amp;line=42&amp;message=failed%3D%0A%26%25\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*output());</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provides<sp/>access<sp/>to<sp/>otherwise<sp/>private<sp/>parts<sp/>of<sp/>the<sp/>TestEventListeners<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>needed<sp/>to<sp/>test<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classtesting_1_1internal_1_1TestEventListenersAccessor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TestEventListenersAccessor" kindref="compound">TestEventListenersAccessor</ref><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestEventListener" kindref="compound">TestEventListener</ref>*<sp/>GetRepeater(<ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref>*<sp/>listeners)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>listeners-&gt;repeater();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetDefaultResultPrinter(<ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref>*<sp/>listeners,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1TestEventListener" kindref="compound">TestEventListener</ref>*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>listeners-&gt;SetDefaultResultPrinter(listener);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetDefaultXmlGenerator(<ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref>*<sp/>listeners,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1TestEventListener" kindref="compound">TestEventListener</ref>*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>listeners-&gt;SetDefaultXmlGenerator(listener);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EventForwardingEnabled(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref>&amp;<sp/>listeners)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>listeners.EventForwardingEnabled();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SuppressEventForwarding(<ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref>*<sp/>listeners)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>listeners-&gt;SuppressEventForwarding(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal">};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classtesting_1_1internal_1_1UnitTestRecordPropertyTestHelper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UnitTestRecordPropertyTestHelper" kindref="compound">UnitTestRecordPropertyTestHelper</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1UnitTestRecordPropertyTestHelper" kindref="compound">UnitTestRecordPropertyTestHelper</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Forwards<sp/>to<sp/>UnitTest::RecordProperty()<sp/>to<sp/>bypass<sp/>access<sp/>controls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestRecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>unit_test_.RecordProperty(key,<sp/>value);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref><sp/>unit_test_;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::AssertionFailure;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::AssertionResult;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::AssertionSuccess;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::DoubleLE;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1EmptyTestEventListener" kindref="compound">testing::EmptyTestEventListener</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Environment" kindref="compound">testing::Environment</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::FloatLE;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::IsNotSubstring;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::IsSubstring;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::kMaxStackTraceDepth;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Message" kindref="compound">testing::Message</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ScopedFakeTestPartResultReporter;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::StaticAssertTypeEq;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestEventListeners" kindref="compound">testing::TestEventListeners</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestInfo" kindref="compound">testing::TestInfo</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::TestPartResult;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::TestPartResultArray;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestProperty" kindref="compound">testing::TestProperty</ref>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestResult" kindref="compound">testing::TestResult</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::TimeInMillis;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1UnitTest" kindref="compound">testing::UnitTest</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::AlwaysFalse;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::AlwaysTrue;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::AppendUserMessage;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ArrayAwareFind;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ArrayEq;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::CodePointToUtf8;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::CopyArray;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::CountIf;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::EqFailure;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">testing::internal::FloatingPoint</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ForEach;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::FormatEpochTimeInMillisAsIso8601;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::FormatTimeInMillisAsSeconds;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetElementOr;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetNextRandomSeed;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetRandomSeedFromFlag;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetTestTypeId;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetTimeInMillis;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetTypeId;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetUnitTestImpl;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1GTestFlagSaver" kindref="compound">testing::internal::GTestFlagSaver</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">testing::internal::HasDebugStringAndShortDebugString</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::Int32FromEnvOrDie;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::IsContainer;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::IsContainerTest;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::IsNotContainer;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::kMaxRandomSeed;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::kTestTypeIdInGoogleTest;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">testing::internal::NativeArray</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ParseFlag;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1RelationToSourceCopy" kindref="compound">testing::internal::RelationToSourceCopy</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1RelationToSourceReference" kindref="compound">testing::internal::RelationToSourceReference</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ShouldRunTestOnShard;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ShouldShard;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ShouldUseColor;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::Shuffle;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ShuffleRange;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::SkipPrefix;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::StreamableToString;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1String" kindref="compound">testing::internal::String</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TestEventListenersAccessor" kindref="compound">testing::internal::TestEventListenersAccessor</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TestResultAccessor" kindref="compound">testing::internal::TestResultAccessor</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::WideStringToUtf8;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::edit_distance::CalculateOptimalEdits;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::edit_distance::CreateUnifiedDiff;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::edit_distance::EditType;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::CaptureStdout;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetCapturedStdout;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ThreadWithParam;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="classTestingVector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestingVector" kindref="compound">TestingVector</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">::std::ostream&amp;<sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref>&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>vector[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>tests<sp/>that<sp/>we<sp/>can<sp/>define<sp/>tests<sp/>in<sp/>an<sp/>unnamed<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">TEST(GetRandomSeedFromFlagTest,<sp/>HandlesZero)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>GetRandomSeedFromFlag(0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>EXPECT_LE(1,<sp/>seed);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>EXPECT_LE(seed,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMaxRandomSeed));</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">TEST(GetRandomSeedFromFlagTest,<sp/>PreservesValidSeed)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>GetRandomSeedFromFlag(1));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>GetRandomSeedFromFlag(2));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kMaxRandomSeed<sp/>-<sp/>1,<sp/>GetRandomSeedFromFlag(kMaxRandomSeed<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMaxRandomSeed),</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetRandomSeedFromFlag(kMaxRandomSeed));</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">TEST(GetRandomSeedFromFlagTest,<sp/>NormalizesInvalidSeed)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed1<sp/>=<sp/>GetRandomSeedFromFlag(-1);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>EXPECT_LE(1,<sp/>seed1);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>EXPECT_LE(seed1,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMaxRandomSeed));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed2<sp/>=<sp/>GetRandomSeedFromFlag(kMaxRandomSeed<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>EXPECT_LE(1,<sp/>seed2);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>EXPECT_LE(seed2,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMaxRandomSeed));</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">TEST(GetNextRandomSeedTest,<sp/>WorksForValidInput)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>GetNextRandomSeed(1));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>GetNextRandomSeed(2));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMaxRandomSeed),</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetNextRandomSeed(kMaxRandomSeed<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>GetNextRandomSeed(kMaxRandomSeed));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>deliberately<sp/>don&apos;t<sp/>test<sp/>GetNextRandomSeed()<sp/>with<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inputs,<sp/>as<sp/>that<sp/>requires<sp/>death<sp/>tests,<sp/>which<sp/>are<sp/>expensive.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>fine<sp/>as<sp/>GetNextRandomSeed()<sp/>is<sp/>internal<sp/>and<sp/>has<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>straightforward<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearCurrentTestPartResults()<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>TestResultAccessor::ClearTestPartResults(</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetUnitTestImpl()-&gt;current_test_result());</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>GetTypeId.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">TEST(GetTypeIdTest,<sp/>ReturnsSameValueForSameType)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GetTypeId&lt;int&gt;(),<sp/>GetTypeId&lt;int&gt;());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GetTypeId&lt;Test&gt;(),<sp/>GetTypeId&lt;Test&gt;());</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SubClassOfTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AnotherSubClassOfTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">TEST(GetTypeIdTest,<sp/>ReturnsDifferentValuesForDifferentTypes)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>EXPECT_NE(GetTypeId&lt;int&gt;(),<sp/>GetTypeId&lt;const<sp/>int&gt;());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>EXPECT_NE(GetTypeId&lt;int&gt;(),<sp/>GetTypeId&lt;char&gt;());</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>EXPECT_NE(GetTypeId&lt;int&gt;(),<sp/>GetTestTypeId());</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>EXPECT_NE(GetTypeId&lt;SubClassOfTest&gt;(),<sp/>GetTestTypeId());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>EXPECT_NE(GetTypeId&lt;AnotherSubClassOfTest&gt;(),<sp/>GetTestTypeId());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>EXPECT_NE(GetTypeId&lt;AnotherSubClassOfTest&gt;(),<sp/>GetTypeId&lt;SubClassOfTest&gt;());</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>GetTestTypeId()<sp/>returns<sp/>the<sp/>same<sp/>value,<sp/>no<sp/>matter<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>called<sp/>from<sp/>inside<sp/>Google<sp/>Test<sp/>or<sp/>outside<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">TEST(GetTestTypeIdTest,<sp/>ReturnsTheSameValueInsideOrOutsideOfGoogleTest)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kTestTypeIdInGoogleTest,<sp/>GetTestTypeId());</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>CanonicalizeForStdLibVersioning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">using<sp/>::testing::internal::CanonicalizeForStdLibVersioning;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">TEST(CanonicalizeForStdLibVersioning,<sp/>LeavesUnversionedNamesUnchanged)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::bind&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::bind&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::_&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::__foo&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::__foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;gtl::__1::x&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;gtl::__1::x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;__1::x&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;__1::x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;::__1::x&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;::__1::x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">TEST(CanonicalizeForStdLibVersioning,<sp/>ElidesDoubleUnderNames)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::bind&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::__1::bind&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::_&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::__1::_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::bind&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::__g::bind&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::_&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::__g::_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::bind&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::__google::bind&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;std::_&quot;</highlight><highlight class="normal">,<sp/>CanonicalizeForStdLibVersioning(</highlight><highlight class="stringliteral">&quot;std::__google::_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>FormatTimeInMillisAsSeconds().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">TEST(FormatTimeInMillisAsSecondsTest,<sp/>FormatsZero)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0.&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(0));</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">TEST(FormatTimeInMillisAsSecondsTest,<sp/>FormatsPositiveNumber)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0.003&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(3));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0.01&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(10));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0.2&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(200));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1.2&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(1200));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;3.&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(3000));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;10.&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(10000));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;100.&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(100000));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123.456&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(123456));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567.89&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(1234567890));</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">TEST(FormatTimeInMillisAsSecondsTest,<sp/>FormatsNegativeNumber)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-0.003&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-3));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-0.01&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-10));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-0.2&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-200));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-1.2&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-1200));</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-3.&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-3000));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-10.&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-10000));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-100.&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-100000));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-123.456&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-123456));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-1234567.89&quot;</highlight><highlight class="normal">,<sp/>FormatTimeInMillisAsSeconds(-1234567890));</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>FormatEpochTimeInMillisAsIso8601().<sp/><sp/>The<sp/>correctness<sp/>of<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>particular<sp/>dates<sp/>below<sp/>was<sp/>verified<sp/>in<sp/>Python<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>datetime.datetime.fromutctimestamp(&lt;timestamp&gt;/1000).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FormatEpochTimeInMillisAsIso8601<sp/>depends<sp/>on<sp/>the<sp/>current<sp/>timezone,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>set<sp/>up<sp/>a<sp/>particular<sp/>timezone<sp/>to<sp/>obtain<sp/>predictable<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FormatEpochTimeInMillisAsIso8601Test<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Cygwin,<sp/>GCC<sp/>doesn&apos;t<sp/>allow<sp/>unqualified<sp/>integer<sp/>literals<sp/>to<sp/>exceed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>32<sp/>bits,<sp/>even<sp/>when<sp/>64-bit<sp/>integer<sp/>types<sp/>are<sp/>available.<sp/><sp/>We<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>the<sp/>constants<sp/>to<sp/>have<sp/>a<sp/>64-bit<sp/>type<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeInMillis<sp/>kMillisPerSec<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>saved_tz_.reset();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISABLE_MSC_DEPRECATED_PUSH_(</highlight><highlight class="comment">/*<sp/>getenv:<sp/>deprecated<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tz<sp/>=<sp/>getenv(&quot;TZ&quot;))<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>saved_tz_<sp/>=<sp/>std::make_unique&lt;std::string&gt;(tz);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISABLE_MSC_DEPRECATED_POP_()</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>time<sp/>zone<sp/>for<sp/>FormatEpochTimeInMillisAsIso8601<sp/>to<sp/>use.<sp/><sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>use<sp/>the<sp/>local<sp/>time<sp/>zone<sp/>because<sp/>the<sp/>function&apos;s<sp/>output<sp/>depends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>time<sp/>zone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>SetTimeZone(&quot;UTC+00&quot;);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>SetTimeZone(saved_tz_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/>saved_tz_-&gt;c_str()<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>saved_tz_.reset();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetTimeZone(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>time_zone)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tzset()<sp/>distinguishes<sp/>between<sp/>the<sp/>TZ<sp/>variable<sp/>being<sp/>present<sp/>and<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>not<sp/>being<sp/>present,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>consider<sp/>the<sp/>case<sp/>of<sp/>time_zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>||<sp/>defined(GTEST_OS_WINDOWS_MINGW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...Unless<sp/>it&apos;s<sp/>MSVC,<sp/>whose<sp/>standard<sp/>library&apos;s<sp/>_putenv<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>distinguish<sp/>between<sp/>an<sp/>empty<sp/>and<sp/>a<sp/>missing<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>env_var<sp/>=</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;TZ=&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(time_zone<sp/>?<sp/>time_zone<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>_putenv(env_var.c_str());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996<sp/></highlight><highlight class="comment">/*<sp/>deprecated<sp/>function<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>tzset();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_LINUX_ANDROID)<sp/>&amp;&amp;<sp/>__ANDROID_API__<sp/>&lt;<sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Work<sp/>around<sp/>KitKat<sp/>bug<sp/>in<sp/>tzset<sp/>by<sp/>setting<sp/>&quot;UTC&quot;<sp/>before<sp/>setting<sp/>&quot;UTC+00&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>https://github.com/android/ndk/issues/1604.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>setenv(</highlight><highlight class="stringliteral">&quot;TZ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UTC&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>tzset();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_zone)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setenv((</highlight><highlight class="stringliteral">&quot;TZ&quot;</highlight><highlight class="normal">),<sp/>time_zone,<sp/>1);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unsetenv(</highlight><highlight class="stringliteral">&quot;TZ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>tzset();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;std::string&gt;<sp/>saved_tz_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>and<sp/>null<sp/>are<sp/>different<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">};</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeInMillis<sp/>FormatEpochTimeInMillisAsIso8601Test::kMillisPerSec;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">TEST_F(FormatEpochTimeInMillisAsIso8601Test,<sp/>PrintsTwoDigitSegments)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;2011-10-31T18:52:42.000&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatEpochTimeInMillisAsIso8601(1320087162<sp/>*<sp/>kMillisPerSec));</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">TEST_F(FormatEpochTimeInMillisAsIso8601Test,<sp/>IncludesMillisecondsAfterDot)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;2011-10-31T18:52:42.234&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatEpochTimeInMillisAsIso8601(1320087162<sp/>*<sp/>kMillisPerSec<sp/>+<sp/>234));</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">TEST_F(FormatEpochTimeInMillisAsIso8601Test,<sp/>PrintsLeadingZeroes)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;2011-09-03T05:07:02.000&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatEpochTimeInMillisAsIso8601(1315026422<sp/>*<sp/>kMillisPerSec));</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">TEST_F(FormatEpochTimeInMillisAsIso8601Test,<sp/>Prints24HourTime)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;2011-09-28T17:08:22.000&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatEpochTimeInMillisAsIso8601(1317229702<sp/>*<sp/>kMillisPerSec));</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">TEST_F(FormatEpochTimeInMillisAsIso8601Test,<sp/>PrintsEpochStart)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1970-01-01T00:00:00.000&quot;</highlight><highlight class="normal">,<sp/>FormatEpochTimeInMillisAsIso8601(0));</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silences<sp/>warnings:<sp/>&quot;Condition<sp/>is<sp/>always<sp/>true&quot;,<sp/>&quot;Unreachable<sp/>code&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>push<sp/>-w-ccc<sp/>-w-rch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>LHS<sp/>of<sp/>EXPECT_EQ<sp/>or<sp/>ASSERT_EQ<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>null<sp/>literal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>RHS<sp/>is<sp/>a<sp/>pointer<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">TEST(NullLiteralTest,<sp/>LHSAllowsNullLiterals)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>EXPECT_EQ(NULL,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>ASSERT_EQ(NULL,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>p);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>p);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>EXPECT_EQ(NULL,<sp/>p);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>ASSERT_EQ(NULL,<sp/>p);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ConvertToAll<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal">};</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ConvertToPointer<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal">};</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ConvertToAllButNoPointers<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!std::is_pointer&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal">};</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classMyType" kindref="compound">MyType</ref><sp/>{};</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="classMyType" kindref="compound">MyType</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classMyType" kindref="compound">MyType</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">TEST(NullLiteralTest,<sp/>ImplicitConversion)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConvertToPointer{},<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__GNUC__)<sp/>||<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disabled<sp/>due<sp/>to<sp/>GCC<sp/>bug<sp/>gcc.gnu.org/PR89580</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConvertToAll{},<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConvertToAll{},<sp/><ref refid="classMyType" kindref="compound">MyType</ref>{});</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConvertToAllButNoPointers{},<sp/><ref refid="classMyType" kindref="compound">MyType</ref>{});</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_warning(&quot;-Wzero-as-null-pointer-constant&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>error<sp/>&quot;-Wzero-as-null-pointer-constant&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">TEST(NullLiteralTest,<sp/>NoConversionNoWarning)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>gtests<sp/>detection<sp/>and<sp/>handling<sp/>of<sp/>null<sp/>pointer<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>trigger<sp/>a<sp/>warning<sp/>when<sp/>&apos;0&apos;<sp/>isn&apos;t<sp/>actually<sp/>used<sp/>as<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>0);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>0);</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>warnings<sp/>after<sp/>previous<sp/>&quot;#pragma<sp/>option<sp/>push&quot;<sp/>suppressed<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>CodePointToUtf8().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>NUL<sp/>character<sp/>L&apos;\0&apos;<sp/>is<sp/>encoded<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">TEST(CodePointToUtf8Test,<sp/>CanEncodeNul)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASCII<sp/>characters<sp/>are<sp/>encoded<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">TEST(CodePointToUtf8Test,<sp/>CanEncodeAscii)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\x7F&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="stringliteral">&apos;\x7F&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Unicode<sp/>code-points<sp/>that<sp/>have<sp/>8<sp/>to<sp/>11<sp/>bits<sp/>are<sp/>encoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>110xxxxx<sp/>10xxxxxx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">TEST(CodePointToUtf8Test,<sp/>CanEncode8To11Bits)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>000<sp/>1101<sp/>0011<sp/>=&gt;<sp/>110-00011<sp/>10-010011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\xC3\x93&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="stringliteral">&apos;\xD3&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>101<sp/>0111<sp/>0110<sp/>=&gt;<sp/>110-10101<sp/>10-110110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>compilers<sp/>(e.g.,<sp/>GCC<sp/>on<sp/>MinGW)<sp/>cannot<sp/>handle<sp/>non-ASCII<sp/>codepoints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>wide<sp/>strings<sp/>and<sp/>wide<sp/>chars.<sp/>In<sp/>order<sp/>to<sp/>accommodate<sp/>them,<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>introduce<sp/>such<sp/>character<sp/>constants<sp/>as<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\xD5\xB6&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x576)));</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Unicode<sp/>code-points<sp/>that<sp/>have<sp/>12<sp/>to<sp/>16<sp/>bits<sp/>are<sp/>encoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>1110xxxx<sp/>10xxxxxx<sp/>10xxxxxx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">TEST(CodePointToUtf8Test,<sp/>CanEncode12To16Bits)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0000<sp/>1000<sp/>1101<sp/>0011<sp/>=&gt;<sp/>1110-0000<sp/>10-100011<sp/>10-010011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\xE0\xA3\x93&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x8D3)));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1100<sp/>0111<sp/>0100<sp/>1101<sp/>=&gt;<sp/>1110-1100<sp/>10-011101<sp/>10-001101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\xEC\x9D\x8D&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xC74D)));</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_WIDE_STRING_USES_UTF16_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>in<sp/>this<sp/>group<sp/>require<sp/>a<sp/>wchar_t<sp/>to<sp/>hold<sp/>&gt;<sp/>16<sp/>bits,<sp/>and<sp/>thus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>skipped<sp/>on<sp/>Windows,<sp/>and<sp/>Cygwin,<sp/>where<sp/>a<sp/>wchar_t<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>16-bit<sp/>wide.<sp/>This<sp/>code<sp/>may<sp/>not<sp/>compile<sp/>on<sp/>those<sp/>systems.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Unicode<sp/>code-points<sp/>that<sp/>have<sp/>17<sp/>to<sp/>21<sp/>bits<sp/>are<sp/>encoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>11110xxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>10xxxxxx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">TEST(CodePointToUtf8Test,<sp/>CanEncode17To21Bits)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>0001<sp/>0000<sp/>1000<sp/>1101<sp/>0011<sp/>=&gt;<sp/>11110-000<sp/>10-010000<sp/>10-100011<sp/>10-010011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\xF0\x90\xA3\x93&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="stringliteral">&apos;\x108D3&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>0001<sp/>0000<sp/>0100<sp/>0000<sp/>0000<sp/>=&gt;<sp/>11110-000<sp/>10-010000<sp/>10-010000<sp/>10-000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\xF0\x90\x90\x80&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="stringliteral">&apos;\x10400&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>0000<sp/>1000<sp/>0110<sp/>0011<sp/>0100<sp/>=&gt;<sp/>11110-100<sp/>10-001000<sp/>10-011000<sp/>10-110100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\xF4\x88\x98\xB4&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="stringliteral">&apos;\x108634&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>encoding<sp/>an<sp/>invalid<sp/>code-point<sp/>generates<sp/>the<sp/>expected<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">TEST(CodePointToUtf8Test,<sp/>CanEncodeInvalidCodePoint)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(Invalid<sp/>Unicode<sp/>0x1234ABCD)&quot;</highlight><highlight class="normal">,<sp/>CodePointToUtf8(L</highlight><highlight class="stringliteral">&apos;\x1234ABCD&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_WIDE_STRING_USES_UTF16_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>WideStringToUtf8().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>NUL<sp/>character<sp/>L&apos;\0&apos;<sp/>is<sp/>encoded<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>CanEncodeNul)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0).c_str());</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASCII<sp/>strings<sp/>are<sp/>encoded<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>CanEncodeAscii)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>1).c_str());</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">,<sp/>2).c_str());</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Unicode<sp/>code-points<sp/>that<sp/>have<sp/>8<sp/>to<sp/>11<sp/>bits<sp/>are<sp/>encoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>110xxxxx<sp/>10xxxxxx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>CanEncode8To11Bits)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>000<sp/>1101<sp/>0011<sp/>=&gt;<sp/>110-00011<sp/>10-010011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xC3\x93&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;\xD3&quot;</highlight><highlight class="normal">,<sp/>1).c_str());</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xC3\x93&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;\xD3&quot;</highlight><highlight class="normal">,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>101<sp/>0111<sp/>0110<sp/>=&gt;<sp/>110-10101<sp/>10-110110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/>{0x576,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xD5\xB6&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s,<sp/>1).c_str());</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xD5\xB6&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Unicode<sp/>code-points<sp/>that<sp/>have<sp/>12<sp/>to<sp/>16<sp/>bits<sp/>are<sp/>encoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>1110xxxx<sp/>10xxxxxx<sp/>10xxxxxx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>CanEncode12To16Bits)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0000<sp/>1000<sp/>1101<sp/>0011<sp/>=&gt;<sp/>1110-0000<sp/>10-100011<sp/>10-010011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s1[]<sp/>=<sp/>{0x8D3,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xE0\xA3\x93&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s1,<sp/>1).c_str());</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xE0\xA3\x93&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s1,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1100<sp/>0111<sp/>0100<sp/>1101<sp/>=&gt;<sp/>1110-1100<sp/>10-011101<sp/>10-001101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s2[]<sp/>=<sp/>{0xC74D,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xEC\x9D\x8D&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s2,<sp/>1).c_str());</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xEC\x9D\x8D&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s2,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>conversion<sp/>stops<sp/>when<sp/>the<sp/>function<sp/>encounters<sp/>\0<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>StopsOnNulCharacter)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ABC&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;ABC\0XYZ&quot;</highlight><highlight class="normal">,<sp/>100).c_str());</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>conversion<sp/>stops<sp/>when<sp/>the<sp/>function<sp/>reaches<sp/>the<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>by<sp/>the<sp/>&apos;length&apos;<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>StopsWhenLengthLimitReached)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ABC&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">,<sp/>3).c_str());</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_WIDE_STRING_USES_UTF16_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Unicode<sp/>code-points<sp/>that<sp/>have<sp/>17<sp/>to<sp/>21<sp/>bits<sp/>are<sp/>encoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>11110xxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>10xxxxxx.<sp/>This<sp/>code<sp/>may<sp/>not<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>systems<sp/>using<sp/>UTF-16<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>CanEncode17To21Bits)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>0001<sp/>0000<sp/>1000<sp/>1101<sp/>0011<sp/>=&gt;<sp/>11110-000<sp/>10-010000<sp/>10-100011<sp/>10-010011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xF0\x90\xA3\x93&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;\x108D3&quot;</highlight><highlight class="normal">,<sp/>1).c_str());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xF0\x90\xA3\x93&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;\x108D3&quot;</highlight><highlight class="normal">,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>0000<sp/>1000<sp/>0110<sp/>0011<sp/>0100<sp/>=&gt;<sp/>11110-100<sp/>10-001000<sp/>10-011000<sp/>10-110100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xF4\x88\x98\xB4&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;\x108634&quot;</highlight><highlight class="normal">,<sp/>1).c_str());</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xF4\x88\x98\xB4&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;\x108634&quot;</highlight><highlight class="normal">,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>encoding<sp/>an<sp/>invalid<sp/>code-point<sp/>generates<sp/>the<sp/>expected<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>CanEncodeInvalidCodePoint)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;(Invalid<sp/>Unicode<sp/>0xABCDFF)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WideStringToUtf8(L</highlight><highlight class="stringliteral">&quot;\xABCDFF&quot;</highlight><highlight class="normal">,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_WIDE_STRING_USES_UTF16_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>surrogate<sp/>pairs<sp/>are<sp/>encoded<sp/>correctly<sp/>on<sp/>the<sp/>systems<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UTF-16<sp/>encoding<sp/>in<sp/>the<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>CanEncodeValidUtf16SUrrogatePairs)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/>{0xD801,<sp/>0xDC00,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xF0\x90\x90\x80&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>encoding<sp/>an<sp/>invalid<sp/>UTF-16<sp/>surrogate<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>the<sp/>expected<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>CanEncodeInvalidUtf16SurrogatePair)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leading<sp/>surrogate<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s1[]<sp/>=<sp/>{0xD800,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xED\xA0\x80&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s1,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leading<sp/>surrogate<sp/>is<sp/>not<sp/>followed<sp/>by<sp/>the<sp/>trailing<sp/>surrogate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s2[]<sp/>=<sp/>{0xD800,<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xED\xA0\x80M&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s2,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Trailing<sp/>surrogate<sp/>appearas<sp/>without<sp/>a<sp/>leading<sp/>surrogate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s3[]<sp/>=<sp/>{0xDC00,<sp/></highlight><highlight class="charliteral">&apos;P&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;Q&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xED\xB0\x80PQR&quot;</highlight><highlight class="normal">,<sp/>WideStringToUtf8(s3,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_WIDE_STRING_USES_UTF16_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>codepoint<sp/>concatenation<sp/>works<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_WIDE_STRING_USES_UTF16_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>ConcatenatesCodepointsCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/>{0x108634,<sp/>0xC74D,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>0x576,<sp/>0x8D3,<sp/>0x108634,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xF4\x88\x98\xB4&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xEC\x9D\x8D&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xD5\xB6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE0\xA3\x93&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xF4\x88\x98\xB4&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WideStringToUtf8(s,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">TEST(WideStringToUtf8Test,<sp/>ConcatenatesCodepointsCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/>{0xC74D,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>0x576,<sp/>0x8D3,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xEC\x9D\x8D&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xD5\xB6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE0\xA3\x93&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WideStringToUtf8(s,<sp/>-1).c_str());</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_WIDE_STRING_USES_UTF16_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>Random<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal">TEST(RandomDeathTest,<sp/>GeneratesCrashesOnInvalidRange)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Random" kindref="compound">testing::internal::Random</ref><sp/>random(42);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(random.Generate(0),</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>generate<sp/>a<sp/>number<sp/>in<sp/>the<sp/>range<sp/>\\[0,<sp/>0\\)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>random.Generate(testing::internal::Random::kMaxRange<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Generation<sp/>of<sp/>a<sp/>number<sp/>in<sp/>\\[0,<sp/>2147483649\\)<sp/>was<sp/>requested,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;but<sp/>this<sp/>can<sp/>only<sp/>generate<sp/>numbers<sp/>in<sp/>\\[0,<sp/>2147483648\\)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal">TEST(RandomTest,<sp/>GeneratesNumbersWithinRange)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kRange<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Random" kindref="compound">testing::internal::Random</ref><sp/>random(12345);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_LT(random.Generate(kRange),<sp/>kRange)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>iteration<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Random" kindref="compound">testing::internal::Random</ref><sp/>random2(testing::internal::Random::kMaxRange);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_LT(random2.Generate(kRange),<sp/>kRange)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>iteration<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">TEST(RandomTest,<sp/>RepeatsWhenReseeded)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kSeed<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kArraySize<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kRange<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>uint32_t<sp/>values[kArraySize];</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Random" kindref="compound">testing::internal::Random</ref><sp/>random(kSeed);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kArraySize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>values[i]<sp/>=<sp/>random.Generate(kRange);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>random.Reseed(kSeed);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kArraySize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(values[i],<sp/>random.Generate(kRange))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>iteration<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>STL<sp/>container<sp/>utilities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>CountIf().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPositive(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal">TEST(ContainerUtilityTest,<sp/>CountIf)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>CountIf(v,<sp/>IsPositive));<sp/><sp/></highlight><highlight class="comment">//<sp/>Works<sp/>for<sp/>an<sp/>empty<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>v.push_back(-1);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>v.push_back(0);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>CountIf(v,<sp/>IsPositive));<sp/><sp/></highlight><highlight class="comment">//<sp/>Works<sp/>when<sp/>no<sp/>value<sp/>satisfies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>v.push_back(2);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>v.push_back(-10);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>v.push_back(10);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>CountIf(v,<sp/>IsPositive));</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ForEach().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Accumulate(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/>g_sum<sp/>+=<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">TEST(ContainerUtilityTest,<sp/>ForEach)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>g_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>ForEach(v,<sp/>Accumulate);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>g_sum);<sp/><sp/></highlight><highlight class="comment">//<sp/>Works<sp/>for<sp/>an<sp/>empty<sp/>container;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>g_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>v.push_back(1);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>ForEach(v,<sp/>Accumulate);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>g_sum);<sp/><sp/></highlight><highlight class="comment">//<sp/>Works<sp/>for<sp/>a<sp/>container<sp/>with<sp/>one<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>g_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>v.push_back(20);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>v.push_back(300);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>ForEach(v,<sp/>Accumulate);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>EXPECT_EQ(321,<sp/>g_sum);</highlight></codeline>
<codeline lineno="867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>GetElementOr().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal">TEST(ContainerUtilityTest,<sp/>GetElementOr)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>std::vector&lt;char&gt;<sp/>a;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>GetElementOr(a,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>a.push_back(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>a.push_back(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>GetElementOr(a,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>GetElementOr(a,<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>GetElementOr(a,<sp/>-2,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>GetElementOr(a,<sp/>2,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal">TEST(ContainerUtilityDeathTest,<sp/>ShuffleRange)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>a;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>a.push_back(0);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>a.push_back(1);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>a.push_back(2);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Random" kindref="compound">testing::internal::Random</ref><sp/>random(1);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShuffleRange(&amp;random,<sp/>-1,<sp/>1,<sp/>&amp;a),</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shuffle<sp/>range<sp/>start<sp/>-1:<sp/>must<sp/>be<sp/>in<sp/>range<sp/>\\[0,<sp/>3\\]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShuffleRange(&amp;random,<sp/>4,<sp/>4,<sp/>&amp;a),</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shuffle<sp/>range<sp/>start<sp/>4:<sp/>must<sp/>be<sp/>in<sp/>range<sp/>\\[0,<sp/>3\\]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShuffleRange(&amp;random,<sp/>3,<sp/>2,<sp/>&amp;a),</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shuffle<sp/>range<sp/>finish<sp/>2:<sp/>must<sp/>be<sp/>in<sp/>range<sp/>\\[3,<sp/>3\\]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShuffleRange(&amp;random,<sp/>3,<sp/>4,<sp/>&amp;a),</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shuffle<sp/>range<sp/>finish<sp/>4:<sp/>must<sp/>be<sp/>in<sp/>range<sp/>\\[3,<sp/>3\\]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VectorShuffleTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kVectorSize<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>VectorShuffleTest()<sp/>:<sp/>random_(1)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(kVectorSize);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector_.push_back(i);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VectorIsCorrupt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref>&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kVectorSize<sp/>!=<sp/>vector.size())<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found_in_vector[kVectorSize]<sp/>=<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>vector[i];</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&lt;<sp/>0<sp/>||<sp/>e<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kVectorSize)<sp/>||<sp/>found_in_vector[e])<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found_in_vector[e]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>size<sp/>is<sp/>correct,<sp/>elements&apos;<sp/>range<sp/>is<sp/>correct,<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duplicate<sp/>elements.<sp/><sp/>Therefore<sp/>no<sp/>corruption<sp/>has<sp/>occurred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VectorIsNotCorrupt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref>&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!VectorIsCorrupt(vector);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RangeIsShuffled(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref>&amp;<sp/>vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>begin;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>vector[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i)])<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RangeIsUnshuffled(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref>&amp;<sp/>vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!RangeIsShuffled(vector,<sp/>begin,<sp/>end);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VectorIsShuffled(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref>&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RangeIsShuffled(vector,<sp/>0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vector.size()));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VectorIsUnshuffled(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref>&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!VectorIsShuffled(vector);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Random" kindref="compound">testing::internal::Random</ref><sp/>random_;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref><sp/>vector_;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>VectorShuffleTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>VectorShuffleTest::kVectorSize;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal">TEST_F(VectorShuffleTest,<sp/>HandlesEmptyRange)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>an<sp/>empty<sp/>range<sp/>at<sp/>the<sp/>beginning...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>0,<sp/>0,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsUnshuffled,<sp/>vector_);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...in<sp/>the<sp/>middle...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>kVectorSize<sp/>/<sp/>2,<sp/>kVectorSize<sp/>/<sp/>2,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsUnshuffled,<sp/>vector_);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...at<sp/>the<sp/>end...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>kVectorSize<sp/>-<sp/>1,<sp/>kVectorSize<sp/>-<sp/>1,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsUnshuffled,<sp/>vector_);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...and<sp/>past<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>kVectorSize,<sp/>kVectorSize,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsUnshuffled,<sp/>vector_);</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">TEST_F(VectorShuffleTest,<sp/>HandlesRangeOfSizeOne)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>size<sp/>one<sp/>range<sp/>at<sp/>the<sp/>beginning...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>0,<sp/>1,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsUnshuffled,<sp/>vector_);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...in<sp/>the<sp/>middle...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>kVectorSize<sp/>/<sp/>2,<sp/>kVectorSize<sp/>/<sp/>2<sp/>+<sp/>1,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsUnshuffled,<sp/>vector_);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...and<sp/>at<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>kVectorSize<sp/>-<sp/>1,<sp/>kVectorSize,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsUnshuffled,<sp/>vector_);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Because<sp/>we<sp/>use<sp/>our<sp/>own<sp/>random<sp/>number<sp/>generator<sp/>and<sp/>a<sp/>fixed<sp/>seed,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>guarantee<sp/>that<sp/>the<sp/>following<sp/>&quot;random&quot;<sp/>tests<sp/>will<sp/>succeed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal">TEST_F(VectorShuffleTest,<sp/>ShufflesEntireVector)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>Shuffle(&amp;random_,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(VectorIsUnshuffled(vector_))<sp/>&lt;&lt;<sp/>vector_;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>first<sp/>and<sp/>last<sp/>elements<sp/>in<sp/>particular<sp/>to<sp/>ensure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>no<sp/>off-by-one<sp/>problems<sp/>in<sp/>our<sp/>shuffle<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>EXPECT_NE(0,<sp/>vector_[0]);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>EXPECT_NE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kVectorSize<sp/>-<sp/>1),<sp/>vector_[kVectorSize<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal">TEST_F(VectorShuffleTest,<sp/>ShufflesStartOfVector)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kRangeSize<sp/>=<sp/>kVectorSize<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>0,<sp/>kRangeSize,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(RangeIsShuffled,<sp/>vector_,<sp/>0,<sp/>kRangeSize);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(RangeIsUnshuffled,<sp/>vector_,<sp/>kRangeSize,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kVectorSize));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal">TEST_F(VectorShuffleTest,<sp/>ShufflesEndOfVector)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kRangeSize<sp/>=<sp/>kVectorSize<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>kRangeSize,<sp/>kVectorSize,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(RangeIsUnshuffled,<sp/>vector_,<sp/>0,<sp/>kRangeSize);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(RangeIsShuffled,<sp/>vector_,<sp/>kRangeSize,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kVectorSize));</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal">TEST_F(VectorShuffleTest,<sp/>ShufflesMiddleOfVector)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kRangeSize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kVectorSize)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>ShuffleRange(&amp;random_,<sp/>kRangeSize,<sp/>2<sp/>*<sp/>kRangeSize,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(RangeIsUnshuffled,<sp/>vector_,<sp/>0,<sp/>kRangeSize);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(RangeIsShuffled,<sp/>vector_,<sp/>kRangeSize,<sp/>2<sp/>*<sp/>kRangeSize);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(RangeIsUnshuffled,<sp/>vector_,<sp/>2<sp/>*<sp/>kRangeSize,</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kVectorSize));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal">TEST_F(VectorShuffleTest,<sp/>ShufflesRepeatably)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><ref refid="classTestingVector" kindref="compound">TestingVector</ref><sp/>vector2;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kVectorSize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>vector2.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>random_.Reseed(1234);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>Shuffle(&amp;random_,<sp/>&amp;vector_);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>random_.Reseed(1234);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>Shuffle(&amp;random_,<sp/>&amp;vector2);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector_);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(VectorIsNotCorrupt,<sp/>vector2);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kVectorSize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(vector_[i],<sp/>vector2[i])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>where<sp/>i<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>size<sp/>of<sp/>the<sp/>AssertHelper<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal">TEST(AssertHelperTest,<sp/>AssertHelperIsSmall)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>breaking<sp/>clients<sp/>that<sp/>use<sp/>lots<sp/>of<sp/>assertions<sp/>in<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>function,<sp/>we<sp/>cannot<sp/>grow<sp/>the<sp/>size<sp/>of<sp/>AssertHelper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>EXPECT_LE(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classtesting_1_1internal_1_1AssertHelper" kindref="compound">testing::internal::AssertHelper</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>String::EndsWithCaseInsensitive().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal">TEST(StringTest,<sp/>EndsWithCaseInsensitive)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(String::EndsWithCaseInsensitive(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BAR&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(String::EndsWithCaseInsensitive(</highlight><highlight class="stringliteral">&quot;foobaR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(String::EndsWithCaseInsensitive(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(String::EndsWithCaseInsensitive(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(String::EndsWithCaseInsensitive(</highlight><highlight class="stringliteral">&quot;Foobar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(String::EndsWithCaseInsensitive(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(String::EndsWithCaseInsensitive(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++Builder&apos;s<sp/>preprocessor<sp/>is<sp/>buggy;<sp/>it<sp/>fails<sp/>to<sp/>expand<sp/>macros<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appear<sp/>in<sp/>macro<sp/>parameters<sp/>after<sp/>wide<sp/>char<sp/>literals.<sp/><sp/>Provide<sp/>an<sp/>alias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>NULL<sp/>as<sp/>a<sp/>workaround.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kNull<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>String::CaseInsensitiveWideCStringEquals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal">TEST(StringTest,<sp/>CaseInsensitiveWideCStringEquals)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(String::CaseInsensitiveWideCStringEquals(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(String::CaseInsensitiveWideCStringEquals(kNull,<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(String::CaseInsensitiveWideCStringEquals(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>kNull));</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(String::CaseInsensitiveWideCStringEquals(kNull,<sp/>L</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(String::CaseInsensitiveWideCStringEquals(L</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/>kNull));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(String::CaseInsensitiveWideCStringEquals(L</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(String::CaseInsensitiveWideCStringEquals(L</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;FOOBAR&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(String::CaseInsensitiveWideCStringEquals(L</highlight><highlight class="stringliteral">&quot;FOOBAR&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>String::ShowWideCString().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal">TEST(StringTest,<sp/>ShowWideCString)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">,<sp/>String::ShowWideCString(NULL).c_str());</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>String::ShowWideCString(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>String::ShowWideCString(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">TEST(StringTest,<sp/>AnsiAndUtf16Null)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>EXPECT_EQ(NULL,<sp/>String::AnsiToUtf16(NULL));</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>EXPECT_EQ(NULL,<sp/>String::Utf16ToAnsi(NULL));</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal">TEST(StringTest,<sp/>AnsiAndUtf16ConvertBasic)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ansi<sp/>=<sp/>String::Utf16ToAnsi(L</highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">,<sp/>ansi);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ansi;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WCHAR*<sp/>utf16<sp/>=<sp/>String::AnsiToUtf16(</highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>wcsncmp(L</highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">,<sp/>utf16,<sp/>3));</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>utf16;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal">TEST(StringTest,<sp/>AnsiAndUtf16ConvertPathChars)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ansi<sp/>=<sp/>String::Utf16ToAnsi(L</highlight><highlight class="stringliteral">&quot;.:\\<sp/>\&quot;*?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;.:\\<sp/>\&quot;*?&quot;</highlight><highlight class="normal">,<sp/>ansi);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ansi;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WCHAR*<sp/>utf16<sp/>=<sp/>String::AnsiToUtf16(</highlight><highlight class="stringliteral">&quot;.:\\<sp/>\&quot;*?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>wcsncmp(L</highlight><highlight class="stringliteral">&quot;.:\\<sp/>\&quot;*?&quot;</highlight><highlight class="normal">,<sp/>utf16,<sp/>3));</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>utf16;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestProperty<sp/>construction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal">TEST(TestPropertyTest,<sp/>StringValue)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>property.key());</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>property.value());</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestProperty<sp/>replacing<sp/>a<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal">TEST(TestPropertyTest,<sp/>ReplaceStringValue)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>property.value());</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">.SetValue(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>property.value());</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AddFatalFailure()<sp/>and<sp/>AddNonfatalFailure()<sp/>must<sp/>be<sp/>stand-alone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions<sp/>(i.e.<sp/>their<sp/>definitions<sp/>cannot<sp/>be<sp/>inlined<sp/>at<sp/>the<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sites),<sp/>or<sp/>C++Builder<sp/>won&apos;t<sp/>compile<sp/>the<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddFatalFailure()<sp/>{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddNonfatalFailure()<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ScopedFakeTestPartResultReporterTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>public<sp/>and<sp/>not<sp/>protected<sp/>due<sp/>to<sp/>a<sp/>bug<sp/>in<sp/>g++<sp/>3.4.2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>FailureMode<sp/>{<sp/>FATAL_FAILURE,<sp/>NONFATAL_FAILURE<sp/>};</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddFailure(FailureMode<sp/>failure)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failure<sp/>==<sp/>FATAL_FAILURE)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddFatalFailure();</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddNonfatalFailure();</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ScopedFakeTestPartResultReporter<sp/>intercepts<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal">TEST_F(ScopedFakeTestPartResultReporterTest,<sp/>InterceptsTestFailures)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>TestPartResultArray<sp/>results;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter<sp/>reporter(</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter::INTERCEPT_ONLY_CURRENT_THREAD,</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;results);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailure(NONFATAL_FAILURE);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailure(FATAL_FAILURE);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>results.size());</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(results.GetTestPartResult(0).nonfatally_failed());</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(results.GetTestPartResult(1).fatally_failed());</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal">TEST_F(ScopedFakeTestPartResultReporterTest,<sp/>DeprecatedConstructor)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>TestPartResultArray<sp/>results;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests,<sp/>that<sp/>the<sp/>deprecated<sp/>constructor<sp/>still<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter<sp/>reporter(&amp;results);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailure(NONFATAL_FAILURE);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>results.size());</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ScopedFakeTestPartResultReporterWithThreadsTest</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ScopedFakeTestPartResultReporterTest<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddFailureInOtherThread(FailureMode<sp/>failure)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadWithParam&lt;FailureMode&gt;<sp/>thread(&amp;AddFailure,<sp/>failure,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.Join();</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal">TEST_F(ScopedFakeTestPartResultReporterWithThreadsTest,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterceptsTestFailuresInAllThreads)<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>TestPartResultArray<sp/>results;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter<sp/>reporter(</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS,<sp/>&amp;results);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailure(NONFATAL_FAILURE);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailure(FATAL_FAILURE);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailureInOtherThread(NONFATAL_FAILURE);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailureInOtherThread(FATAL_FAILURE);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4,<sp/>results.size());</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(results.GetTestPartResult(0).nonfatally_failed());</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(results.GetTestPartResult(1).fatally_failed());</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(results.GetTestPartResult(2).nonfatally_failed());</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(results.GetTestPartResult(3).fatally_failed());</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_FATAL_FAILURE{,ON_ALL_THREADS}.<sp/><sp/>Makes<sp/>sure<sp/>that<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>work<sp/>even<sp/>if<sp/>the<sp/>failure<sp/>is<sp/>generated<sp/>in<sp/>a<sp/>called<sp/>function<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ScopedFakeTestPartResultReporterTest<sp/>ExpectFatalFailureTest;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal">TEST_F(ExpectFatalFailureTest,<sp/>CatchesFatalFaliure)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AddFatalFailure(),<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal">TEST_F(ExpectFatalFailureTest,<sp/>AcceptsStdStringObject)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AddFatalFailure(),</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::string(</highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal">TEST_F(ExpectFatalFailureTest,<sp/>CatchesFatalFailureOnAllThreads)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>another<sp/>test<sp/>below<sp/>to<sp/>verify<sp/>that<sp/>the<sp/>macro<sp/>catches<sp/>fatal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failures<sp/>generated<sp/>on<sp/>another<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(AddFatalFailure(),</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silences<sp/>warnings:<sp/>&quot;Condition<sp/>is<sp/>always<sp/>true&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>push<sp/>-w-ccc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>non-void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>even<sp/>when<sp/>the<sp/>statement<sp/>in<sp/>it<sp/>contains<sp/>ASSERT_*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NonVoidFunction()<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(FAIL(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal">TEST_F(ExpectFatalFailureTest,<sp/>CanBeUsedInNonVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>NonVoidFunction();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE(statement,<sp/>...)<sp/>doesn&apos;t<sp/>abort<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>function<sp/>even<sp/>though<sp/>&apos;statement&apos;<sp/>generates<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DoesNotAbortHelper(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>aborted)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(FAIL(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>warnings<sp/>after<sp/>previous<sp/>&quot;#pragma<sp/>option<sp/>push&quot;<sp/>suppressed<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal">TEST_F(ExpectFatalFailureTest,<sp/>DoesNotAbort)<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>DoesNotAbortHelper(&amp;aborted);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(aborted);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>EXPECT_FATAL_FAILURE{,_ON_ALL_THREADS}<sp/>accepts<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement<sp/>that<sp/>contains<sp/>a<sp/>macro<sp/>which<sp/>expands<sp/>to<sp/>code<sp/>containing<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>global_var<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_USE_UNPROTECTED_COMMA_<sp/>global_var++,<sp/>global_var++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal">TEST_F(ExpectFatalFailureTest,<sp/>AcceptsMacroThatExpandsToUnprotectedComma)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ICE&apos;s<sp/>in<sp/>C++Builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_USE_UNPROTECTED_COMMA_;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddFatalFailure();</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_USE_UNPROTECTED_COMMA_;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddFatalFailure();</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_NONFATAL_FAILURE{,ON_ALL_THREADS}.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ScopedFakeTestPartResultReporterTest<sp/>ExpectNonfatalFailureTest;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal">TEST_F(ExpectNonfatalFailureTest,<sp/>CatchesNonfatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(AddNonfatalFailure(),<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal">TEST_F(ExpectNonfatalFailureTest,<sp/>AcceptsStdStringObject)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(AddNonfatalFailure(),</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::string(</highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal">TEST_F(ExpectNonfatalFailureTest,<sp/>CatchesNonfatalFailureOnAllThreads)<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>another<sp/>test<sp/>below<sp/>to<sp/>verify<sp/>that<sp/>the<sp/>macro<sp/>catches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-fatal<sp/>failures<sp/>generated<sp/>on<sp/>another<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(AddNonfatalFailure(),</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>EXPECT_NONFATAL_FAILURE{,_ON_ALL_THREADS}<sp/>accepts<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement<sp/>that<sp/>contains<sp/>a<sp/>macro<sp/>which<sp/>expands<sp/>to<sp/>code<sp/>containing<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal">TEST_F(ExpectNonfatalFailureTest,<sp/>AcceptsMacroThatExpandsToUnprotectedComma)<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_USE_UNPROTECTED_COMMA_;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddNonfatalFailure();</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_USE_UNPROTECTED_COMMA_;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddNonfatalFailure();</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ScopedFakeTestPartResultReporterWithThreadsTest</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectFailureWithThreadsTest;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">TEST_F(ExpectFailureWithThreadsTest,<sp/>ExpectFatalFailureOnAllThreads)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(AddFailureInOtherThread(FATAL_FAILURE),</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal">TEST_F(ExpectFailureWithThreadsTest,<sp/>ExpectNonFatalFailureOnAllThreads)<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddFailureInOtherThread(NONFATAL_FAILURE),<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>TestProperty<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal">TEST(TestPropertyTest,<sp/>ConstructorWorks)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>property.key());</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>property.value());</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal">TEST(TestPropertyTest,<sp/>SetValue)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;value_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>property.key());</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">.SetValue(</highlight><highlight class="stringliteral">&quot;value_2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>property.key());</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;value_2&quot;</highlight><highlight class="normal">,<sp/>property.value());</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>TestResult<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>test<sp/>fixture<sp/>for<sp/>testing<sp/>TestResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestResultTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;TestPartResult&gt;<sp/>TPRVector;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>make<sp/>use<sp/>of<sp/>2<sp/>TestPartResult<sp/>objects,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>TestPartResult<sp/>*pr1,<sp/>*pr2;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>and<sp/>3<sp/>TestResult<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref><sp/>*r0,<sp/>*r1,<sp/>*r2;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pr1<sp/>is<sp/>for<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>pr1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TestPartResult(TestPartResult::kSuccess,<sp/></highlight><highlight class="stringliteral">&quot;foo/bar.cc&quot;</highlight><highlight class="normal">,<sp/>10,</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Success!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pr2<sp/>is<sp/>for<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>pr2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TestPartResult(TestPartResult::kFatalFailure,<sp/></highlight><highlight class="stringliteral">&quot;foo/bar.cc&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>number<sp/>means<sp/>&quot;unknown&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failure!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>the<sp/>TestResult<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>r0<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref>();</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>r1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref>();</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>r2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref>();</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>test<sp/>TestResult,<sp/>we<sp/>need<sp/>to<sp/>modify<sp/>its<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state,<sp/>in<sp/>particular<sp/>the<sp/>TestPartResult<sp/>vector<sp/>it<sp/>holds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test_part_results()<sp/>returns<sp/>a<sp/>const<sp/>reference<sp/>to<sp/>this<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cast<sp/>it<sp/>to<sp/>a<sp/>non-const<sp/>object<sp/>s.t.<sp/>it<sp/>can<sp/>be<sp/>modified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>TPRVector*<sp/>results1<sp/>=</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">TPRVector*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;TestResultAccessor::test_part_results(*r1));</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>TPRVector*<sp/>results2<sp/>=</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">TPRVector*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;TestResultAccessor::test_part_results(*r2));</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r0<sp/>is<sp/>an<sp/>empty<sp/>TestResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r1<sp/>contains<sp/>a<sp/>single<sp/>SUCCESS<sp/>TestPartResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>results1-&gt;push_back(*pr1);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>contains<sp/>a<sp/>SUCCESS,<sp/>and<sp/>a<sp/>FAILURE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>results2-&gt;push_back(*pr1);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>results2-&gt;push_back(*pr2);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pr1;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pr2;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>r0;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>r1;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>r2;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>that<sp/>compares<sp/>two<sp/>TestPartResults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompareTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.type(),<sp/>actual.type());</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(expected.file_name(),<sp/>actual.file_name());</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.line_number(),<sp/>actual.line_number());</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(expected.summary(),<sp/>actual.summary());</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(expected.message(),<sp/>actual.message());</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.passed(),<sp/>actual.passed());</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.failed(),<sp/>actual.failed());</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.nonfatally_failed(),<sp/>actual.nonfatally_failed());</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.fatally_failed(),<sp/>actual.fatally_failed());</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult::total_part_count().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal">TEST_F(TestResultTest,<sp/>total_part_count)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>r0-&gt;total_part_count());</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>r1-&gt;total_part_count());</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>r2-&gt;total_part_count());</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult::Passed().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal">TEST_F(TestResultTest,<sp/>Passed)<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(r0-&gt;Passed());</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(r1-&gt;Passed());</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(r2-&gt;Passed());</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult::Failed().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal">TEST_F(TestResultTest,<sp/>Failed)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(r0-&gt;Failed());</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(r1-&gt;Failed());</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(r2-&gt;Failed());</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult::GetTestPartResult().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TestResultTest<sp/>TestResultDeathTest;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal">TEST_F(TestResultDeathTest,<sp/>GetTestPartResult)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>CompareTestPartResult(*pr1,<sp/>r2-&gt;GetTestPartResult(0));</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>CompareTestPartResult(*pr2,<sp/>r2-&gt;GetTestPartResult(1));</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(r2-&gt;GetTestPartResult(2),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(r2-&gt;GetTestPartResult(-1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult<sp/>has<sp/>no<sp/>properties<sp/>when<sp/>none<sp/>are<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal">TEST(TestResultPropertyTest,<sp/>NoPropertiesFoundWhenNoneAreAdded)<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref><sp/>test_result;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>test_result.test_property_count());</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult<sp/>has<sp/>the<sp/>expected<sp/>property<sp/>when<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal">TEST(TestResultPropertyTest,<sp/>OnePropertyFoundWhenAdded)<sp/>{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref><sp/>test_result;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>test_result.test_property_count());</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/>actual_property<sp/>=<sp/>test_result.GetTestProperty(0);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/>actual_property.key());</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>actual_property.value());</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult<sp/>has<sp/>multiple<sp/>properties<sp/>when<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal">TEST(TestResultPropertyTest,<sp/>MultiplePropertiesFoundWhenAdded)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref><sp/>test_result;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_1(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_2(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_1);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_2);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>test_result.test_property_count());</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/>actual_property_1<sp/>=<sp/>test_result.GetTestProperty(0);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/>actual_property_1.key());</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>actual_property_1.value());</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/>actual_property_2<sp/>=<sp/>test_result.GetTestProperty(1);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/>actual_property_2.key());</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>actual_property_2.value());</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult::RecordProperty()<sp/>overrides<sp/>values<sp/>for<sp/>duplicate<sp/>keys.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal">TEST(TestResultPropertyTest,<sp/>OverridesValuesForDuplicateKeys)<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref><sp/>test_result;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_1_1(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_2_1(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_1_2(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_2_2(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;22&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_1_1);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_2_1);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_1_2);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_2_2);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>test_result.test_property_count());</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/>actual_property_1<sp/>=<sp/>test_result.GetTestProperty(0);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/>actual_property_1.key());</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;12&quot;</highlight><highlight class="normal">,<sp/>actual_property_1.value());</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/>actual_property_2<sp/>=<sp/>test_result.GetTestProperty(1);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/>actual_property_2.key());</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;22&quot;</highlight><highlight class="normal">,<sp/>actual_property_2.value());</highlight></codeline>
<codeline lineno="1552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult::GetTestProperty().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal">TEST(TestResultPropertyTest,<sp/>GetTestProperty)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref><sp/>test_result;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_1(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_2(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref><sp/>property_3(</highlight><highlight class="stringliteral">&quot;key_3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_1);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_2);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>TestResultAccessor::RecordProperty(&amp;test_result,<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">,<sp/>property_3);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/>fetched_property_1<sp/>=<sp/>test_result.GetTestProperty(0);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/>fetched_property_2<sp/>=<sp/>test_result.GetTestProperty(1);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/>fetched_property_3<sp/>=<sp/>test_result.GetTestProperty(2);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/>fetched_property_1.key());</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>fetched_property_1.value());</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/>fetched_property_2.key());</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>fetched_property_2.value());</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_3&quot;</highlight><highlight class="normal">,<sp/>fetched_property_3.key());</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/>fetched_property_3.value());</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(test_result.GetTestProperty(3),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(test_result.GetTestProperty(-1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>Test<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>difficult<sp/>to<sp/>test<sp/>every<sp/>public<sp/>method<sp/>of<sp/>this<sp/>class<sp/>(we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>already<sp/>stretching<sp/>the<sp/>limit<sp/>of<sp/>Google<sp/>Test<sp/>by<sp/>using<sp/>it<sp/>to<sp/>test<sp/>itself!).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fortunately,<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>that,<sp/>as<sp/>we<sp/>are<sp/>already<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>functionalities<sp/>of<sp/>the<sp/>Test<sp/>class<sp/>extensively<sp/>by<sp/>using<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Therefore,<sp/>this<sp/>section<sp/>only<sp/>contains<sp/>one<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>GTestFlagSaver<sp/>works<sp/>on<sp/>Windows<sp/>and<sp/>Mac.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTestFlagSaverTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Saves<sp/>the<sp/>Google<sp/>Test<sp/>flags<sp/>such<sp/>that<sp/>we<sp/>can<sp/>restore<sp/>them<sp/>later,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>sets<sp/>them<sp/>to<sp/>their<sp/>default<sp/>values.<sp/><sp/>This<sp/>will<sp/>be<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>the<sp/>first<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case<sp/>is<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>saver_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1GTestFlagSaver" kindref="compound">GTestFlagSaver</ref>;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(also_run_disabled_tests,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(break_on_failure,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(catch_exceptions,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(death_test_use_fork,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(fail_fast,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(filter,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(list_tests,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(output,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(brief,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(print_time,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(random_seed,<sp/>0);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(repeat,<sp/>1);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(recreate_environments_when_repeating,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(shuffle,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(stack_trace_depth,<sp/>kMaxStackTraceDepth);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(stream_result_to,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(throw_on_failure,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>Google<sp/>Test<sp/>flags<sp/>that<sp/>the<sp/>tests<sp/>have<sp/>modified.<sp/><sp/>This<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>called<sp/>after<sp/>the<sp/>last<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case<sp/>is<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>saver_;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>saver_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>Google<sp/>Test<sp/>flags<sp/>have<sp/>their<sp/>default<sp/>values,<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>modifies<sp/>each<sp/>of<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VerifyAndModifyFlags()<sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(also_run_disabled_tests));</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(break_on_failure));</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(catch_exceptions));</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">,<sp/>GTEST_FLAG_GET(color).c_str());</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(death_test_use_fork));</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(fail_fast));</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GTEST_FLAG_GET(filter).c_str());</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(list_tests));</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GTEST_FLAG_GET(output).c_str());</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(brief));</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(GTEST_FLAG_GET(print_time));</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>GTEST_FLAG_GET(random_seed));</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>GTEST_FLAG_GET(repeat));</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(GTEST_FLAG_GET(recreate_environments_when_repeating));</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(shuffle));</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(kMaxStackTraceDepth,<sp/>GTEST_FLAG_GET(stack_trace_depth));</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GTEST_FLAG_GET(stream_result_to).c_str());</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(GTEST_FLAG_GET(throw_on_failure));</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(also_run_disabled_tests,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(break_on_failure,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(catch_exceptions,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(death_test_use_fork,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(fail_fast,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(filter,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(list_tests,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(output,<sp/></highlight><highlight class="stringliteral">&quot;xml:foo.xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(brief,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(print_time,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(random_seed,<sp/>1);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(repeat,<sp/>100);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(recreate_environments_when_repeating,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(shuffle,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(stack_trace_depth,<sp/>1);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(stream_result_to,<sp/></highlight><highlight class="stringliteral">&quot;localhost:1234&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(throw_on_failure,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>saving<sp/>Google<sp/>Test<sp/>flags<sp/>during<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1GTestFlagSaver" kindref="compound">GTestFlagSaver</ref>*<sp/>saver_;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><ref refid="classtesting_1_1internal_1_1GTestFlagSaver" kindref="compound">GTestFlagSaver</ref>*<sp/>GTestFlagSaverTest::saver_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>doesn&apos;t<sp/>guarantee<sp/>the<sp/>order<sp/>of<sp/>tests.<sp/><sp/>The<sp/>following<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests<sp/>are<sp/>designed<sp/>to<sp/>work<sp/>regardless<sp/>of<sp/>their<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modifies<sp/>the<sp/>Google<sp/>Test<sp/>flags<sp/>in<sp/>the<sp/>test<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal">TEST_F(GTestFlagSaverTest,<sp/>ModifyGTestFlags)<sp/>{<sp/>VerifyAndModifyFlags();<sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>Google<sp/>Test<sp/>flags<sp/>in<sp/>the<sp/>body<sp/>of<sp/>the<sp/>previous<sp/>test<sp/>were</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>restored<sp/>to<sp/>their<sp/>original<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal">TEST_F(GTestFlagSaverTest,<sp/>VerifyGTestFlags)<sp/>{<sp/>VerifyAndModifyFlags();<sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>an<sp/>environment<sp/>variable<sp/>with<sp/>the<sp/>given<sp/>name<sp/>to<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value.<sp/><sp/>If<sp/>the<sp/>value<sp/>argument<sp/>is<sp/>&quot;&quot;,<sp/>unsets<sp/>the<sp/>environment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable.<sp/><sp/>The<sp/>caller<sp/>must<sp/>ensure<sp/>that<sp/>both<sp/>arguments<sp/>are<sp/>not<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetEnv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Environment<sp/>variables<sp/>are<sp/>not<sp/>supported<sp/>on<sp/>Windows<sp/>CE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__BORLANDC__)<sp/>||<sp/>defined(__SunOS_5_8)<sp/>||<sp/>defined(__SunOS_5_9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C++Builder&apos;s<sp/>putenv<sp/>only<sp/>stores<sp/>a<sp/>pointer<sp/>to<sp/>its<sp/>parameter;<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>the<sp/>string<sp/>remains<sp/>valid<sp/>as<sp/>long<sp/>as<sp/>it<sp/>might<sp/>be<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>an<sp/>std::map<sp/>to<sp/>do<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string*&gt;<sp/>added_env;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Because<sp/>putenv<sp/>stores<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>string<sp/>buffer,<sp/>we<sp/>can&apos;t<sp/>delete<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>string<sp/>(if<sp/>present)<sp/>until<sp/>after<sp/>it&apos;s<sp/>replaced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/>std::string*<sp/>prev_env<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(added_env.find(name)<sp/>!=<sp/>added_env.end())<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_env<sp/>=<sp/>added_env[name];</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>added_env[name]<sp/>=</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::string((<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value).GetString());</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>standard<sp/>signature<sp/>of<sp/>putenv<sp/>accepts<sp/>a<sp/>&apos;char*&apos;<sp/>argument.<sp/>Other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementations,<sp/>like<sp/>C++Builder&apos;s,<sp/>accept<sp/>a<sp/>&apos;const<sp/>char*&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cast<sp/>away<sp/>the<sp/>&apos;const&apos;<sp/>since<sp/>that<sp/>would<sp/>work<sp/>for<sp/>both<sp/>variants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>putenv(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(added_env[name]-&gt;c_str()));</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>prev_env;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_OS_WINDOWS)<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>on<sp/>Windows<sp/>proper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>_putenv((<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value).GetString().c_str());</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*value<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>unsetenv(name);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>setenv(name,<sp/>value,<sp/>1);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Environment<sp/>variables<sp/>are<sp/>not<sp/>supported<sp/>on<sp/>Windows<sp/>CE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::Int32FromGTestEnv;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Int32FromGTestEnv().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Int32FromGTestEnv()<sp/>returns<sp/>the<sp/>default<sp/>value<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>variable<sp/>is<sp/>not<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal">TEST(Int32FromGTestEnvTest,<sp/>ReturnsDefaultWhenVariableIsNotSet)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;TEMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>10));</highlight></codeline>
<codeline lineno="1737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_GET_INT32_FROM_ENV_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Int32FromGTestEnv()<sp/>returns<sp/>the<sp/>default<sp/>value<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>variable<sp/>overflows<sp/>as<sp/>an<sp/>Int32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal">TEST(Int32FromGTestEnvTest,<sp/>ReturnsDefaultWhenValueOverflows)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>warnings)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;TEMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;12345678987654321&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>EXPECT_EQ(20,<sp/>Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>20));</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;TEMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-12345678987654321&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>EXPECT_EQ(30,<sp/>Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>30));</highlight></codeline>
<codeline lineno="1751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Int32FromGTestEnv()<sp/>returns<sp/>the<sp/>default<sp/>value<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>variable<sp/>does<sp/>not<sp/>represent<sp/>a<sp/>valid<sp/>decimal<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal">TEST(Int32FromGTestEnvTest,<sp/>ReturnsDefaultWhenValueIsInvalid)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>warnings)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;TEMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>EXPECT_EQ(40,<sp/>Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>40));</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;TEMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;12X&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>EXPECT_EQ(50,<sp/>Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>50));</highlight></codeline>
<codeline lineno="1763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!defined(GTEST_GET_INT32_FROM_ENV_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Int32FromGTestEnv()<sp/>parses<sp/>and<sp/>returns<sp/>the<sp/>value<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>variable<sp/>when<sp/>it<sp/>represents<sp/>a<sp/>valid<sp/>decimal<sp/>integer<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>range<sp/>of<sp/>an<sp/>Int32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal">TEST(Int32FromGTestEnvTest,<sp/>ParsesAndReturnsValidValue)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;TEMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>0));</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;TEMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-321&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-321,<sp/>Int32FromGTestEnv(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>0));</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ParseFlag().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ParseInt32Flag()<sp/>returns<sp/>false<sp/>and<sp/>doesn&apos;t<sp/>change<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>value<sp/>when<sp/>the<sp/>flag<sp/>has<sp/>wrong<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal">TEST(ParseInt32FlagTest,<sp/>ReturnsFalseForInvalidFlag)<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>int32_t<sp/>value<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseFlag(</highlight><highlight class="stringliteral">&quot;--a=100&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>value);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseFlag(</highlight><highlight class="stringliteral">&quot;a=100&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>value);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ParseFlag()<sp/>returns<sp/>false<sp/>and<sp/>doesn&apos;t<sp/>change<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>value<sp/>when<sp/>the<sp/>flag<sp/>overflows<sp/>as<sp/>an<sp/>Int32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal">TEST(ParseInt32FlagTest,<sp/>ReturnsDefaultWhenValueOverflows)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>warnings)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>int32_t<sp/>value<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseFlag(</highlight><highlight class="stringliteral">&quot;--abc=12345678987654321&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>value);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseFlag(</highlight><highlight class="stringliteral">&quot;--abc=-12345678987654321&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>value);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ParseInt32Flag()<sp/>returns<sp/>false<sp/>and<sp/>doesn&apos;t<sp/>change<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>value<sp/>when<sp/>the<sp/>flag<sp/>does<sp/>not<sp/>represent<sp/>a<sp/>valid<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal">TEST(ParseInt32FlagTest,<sp/>ReturnsDefaultWhenValueIsInvalid)<sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>warnings)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>int32_t<sp/>value<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseFlag(</highlight><highlight class="stringliteral">&quot;--abc=A1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>value);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseFlag(</highlight><highlight class="stringliteral">&quot;--abc=12X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>value);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ParseInt32Flag()<sp/>parses<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>when<sp/>the<sp/>flag<sp/>represents<sp/>a<sp/>valid<sp/>decimal<sp/>integer<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>range<sp/>of<sp/>an<sp/>Int32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal">TEST(ParseInt32FlagTest,<sp/>ParsesAndReturnsValidValue)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>int32_t<sp/>value<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ParseFlag(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;abc=456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>EXPECT_EQ(456,<sp/>value);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ParseFlag(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;abc=-789&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-789,<sp/>value);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Int32FromEnvOrDie()<sp/>parses<sp/>the<sp/>value<sp/>of<sp/>the<sp/>var<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>correct<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Environment<sp/>variables<sp/>are<sp/>not<sp/>supported<sp/>on<sp/>Windows<sp/>CE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal">TEST(Int32FromEnvOrDieTest,<sp/>ParsesAndReturnsValidValue)<sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/>EXPECT_EQ(333,<sp/>Int32FromEnvOrDie(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;UnsetVar&quot;</highlight><highlight class="normal">,<sp/>333));</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;UnsetVar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>Int32FromEnvOrDie(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;UnsetVar&quot;</highlight><highlight class="normal">,<sp/>333));</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;UnsetVar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-123,<sp/>Int32FromEnvOrDie(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;UnsetVar&quot;</highlight><highlight class="normal">,<sp/>333));</highlight></codeline>
<codeline lineno="1841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Int32FromEnvOrDie()<sp/>aborts<sp/>with<sp/>an<sp/>error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>variable<sp/>is<sp/>not<sp/>an<sp/>int32_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal">TEST(Int32FromEnvOrDieDeathTest,<sp/>AbortsOnFailure)<sp/>{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;VAR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xxx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int32FromEnvOrDie(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;VAR&quot;</highlight><highlight class="normal">,<sp/>123),<sp/></highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Int32FromEnvOrDie()<sp/>aborts<sp/>with<sp/>an<sp/>error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>variable<sp/>cannot<sp/>be<sp/>represented<sp/>by<sp/>an<sp/>int32_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal">TEST(Int32FromEnvOrDieDeathTest,<sp/>AbortsOnInt32Overflow)<sp/>{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/>SetEnv(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;VAR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1234567891234567891234&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int32FromEnvOrDie(GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;VAR&quot;</highlight><highlight class="normal">,<sp/>123),<sp/></highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ShouldRunTestOnShard()<sp/>selects<sp/>all<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>there<sp/>is<sp/>1<sp/>shard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal">TEST(ShouldRunTestOnShardTest,<sp/>IsPartitionWhenThereIsOneShard)<sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldRunTestOnShard(1,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldRunTestOnShard(1,<sp/>0,<sp/>1));</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldRunTestOnShard(1,<sp/>0,<sp/>2));</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldRunTestOnShard(1,<sp/>0,<sp/>3));</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldRunTestOnShard(1,<sp/>0,<sp/>4));</highlight></codeline>
<codeline lineno="1868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShouldShardTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>index_var_<sp/>=<sp/>GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;INDEX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>total_var_<sp/>=<sp/>GTEST_FLAG_PREFIX_UPPER_<sp/></highlight><highlight class="stringliteral">&quot;TOTAL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>index_var_;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>total_var_;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>sharding<sp/>is<sp/>disabled<sp/>if<sp/>neither<sp/>of<sp/>the<sp/>environment<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal">TEST_F(ShouldShardTest,<sp/>ReturnsFalseWhenNeitherEnvVarIsSet)<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>sharding<sp/>is<sp/>not<sp/>enabled<sp/>if<sp/>total_shards<sp/><sp/>==<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal">TEST_F(ShouldShardTest,<sp/>ReturnsFalseWhenTotalShardIsOne)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>sharding<sp/>is<sp/>enabled<sp/>if<sp/>total_shards<sp/>&gt;<sp/>1<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>not<sp/>in<sp/>a<sp/>death<sp/>test<sp/>subprocess.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Environment<sp/>variables<sp/>are<sp/>not<sp/>supported<sp/>on<sp/>Windows<sp/>CE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal">TEST_F(ShouldShardTest,<sp/>WorksWhenShardEnvVarsAreValid)<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;22&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>exit<sp/>in<sp/>error<sp/>if<sp/>the<sp/>sharding<sp/>values<sp/>are<sp/>not<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ShouldShardTest<sp/>ShouldShardDeathTest;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal">TEST_F(ShouldShardDeathTest,<sp/>AbortsWhenShardingEnvVarsAreInvalid)<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;-2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/>SetEnv(index_var_,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/>SetEnv(total_var_,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(ShouldShard(total_var_,<sp/>index_var_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ShouldRunTestOnShard<sp/>is<sp/>a<sp/>partition<sp/>when<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shards<sp/>are<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal">TEST(ShouldRunTestOnShardTest,<sp/>IsPartitionWhenThereAreFiveShards)<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>tests<sp/>and<sp/>shards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_tests<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_shards<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>partitioning:<sp/>each<sp/>test<sp/>should<sp/>be<sp/>on<sp/>exactly<sp/>1<sp/>shard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_id<sp/>=<sp/>0;<sp/>test_id<sp/>&lt;<sp/>num_tests;<sp/>test_id++)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev_selected_shard_index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shard_index<sp/>=<sp/>0;<sp/>shard_index<sp/>&lt;<sp/>num_shards;<sp/>shard_index++)<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ShouldRunTestOnShard(num_shards,<sp/>shard_index,<sp/>test_id))<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_selected_shard_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_selected_shard_index<sp/>=<sp/>shard_index;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Shard<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>prev_selected_shard_index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>shard_index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>are<sp/>both<sp/>selected<sp/>to<sp/>run<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>test_id;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>balance:<sp/>This<sp/>is<sp/>not<sp/>required<sp/>by<sp/>the<sp/>sharding<sp/>protocol,<sp/>but<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>desirable<sp/>property<sp/>for<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shard_index<sp/>=<sp/>0;<sp/>shard_index<sp/>&lt;<sp/>num_shards;<sp/>shard_index++)<sp/>{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_tests_on_shard<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_id<sp/>=<sp/>0;<sp/>test_id<sp/>&lt;<sp/>num_tests;<sp/>test_id++)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_tests_on_shard<sp/>+=</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShouldRunTestOnShard(num_shards,<sp/>shard_index,<sp/>test_id);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GE(num_tests_on_shard,<sp/>num_tests<sp/>/<sp/>num_shards);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>same<sp/>reason<sp/>we<sp/>are<sp/>not<sp/>explicitly<sp/>testing<sp/>everything<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>class,<sp/>there<sp/>are<sp/>no<sp/>separate<sp/>tests<sp/>for<sp/>the<sp/>following<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(except<sp/>for<sp/>some<sp/>trivial<sp/>cases):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TestSuite,<sp/>UnitTest,<sp/>UnitTestResultPrinter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Similarly,<sp/>there<sp/>are<sp/>no<sp/>separate<sp/>tests<sp/>for<sp/>the<sp/>following<sp/>macros:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST,<sp/>TEST_F,<sp/>RUN_ALL_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal">TEST(UnitTestTest,<sp/>CanGetOriginalWorkingDir)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(UnitTest::GetInstance()-&gt;original_working_dir()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>EXPECT_STRNE(UnitTest::GetInstance()-&gt;original_working_dir(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal">TEST(UnitTestTest,<sp/>ReturnsPlausibleTimestamp)<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>EXPECT_LT(0,<sp/>UnitTest::GetInstance()-&gt;start_timestamp());</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>EXPECT_LE(UnitTest::GetInstance()-&gt;start_timestamp(),<sp/>GetTimeInMillis());</highlight></codeline>
<codeline lineno="2001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>a<sp/>property<sp/>using<sp/>a<sp/>reserved<sp/>key<sp/>is<sp/>supplied<sp/>to<sp/>this<sp/>function,<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests<sp/>that<sp/>a<sp/>non-fatal<sp/>failure<sp/>is<sp/>added,<sp/>a<sp/>fatal<sp/>failure<sp/>is<sp/>not<sp/>added,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>that<sp/>the<sp/>property<sp/>is<sp/>not<sp/>recorded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKey(</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref>&amp;<sp/>test_result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(Test::RecordProperty(key,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Reserved<sp/>key&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>test_result.test_property_count())</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Property<sp/>for<sp/>key<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>recorded<sp/>unexpectedly.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest(</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/>test_info<sp/>=<sp/>UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(test_info<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKey(*test_info-&gt;result(),</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite(</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">testing::TestSuite</ref>*<sp/>test_suite<sp/>=</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UnitTest::GetInstance()-&gt;current_test_suite();</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(test_suite<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKey(</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_suite-&gt;ad_hoc_test_result(),<sp/>key);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKey(</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UnitTest::GetInstance()-&gt;ad_hoc_test_result(),<sp/>key);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>property<sp/>recording<sp/>functions<sp/>in<sp/>UnitTest<sp/>outside<sp/>of<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions<sp/>correctly.<sp/><sp/>Creating<sp/>a<sp/>separate<sp/>instance<sp/>of<sp/>UnitTest<sp/>ensures<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>in<sp/>a<sp/>state<sp/>similar<sp/>to<sp/>the<sp/>UnitTest&apos;s<sp/>singleton&apos;s<sp/>between<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTestRecordPropertyTest</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UnitTestRecordPropertyTestHelper" kindref="compound">testing::internal::UnitTestRecordPropertyTestHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite(</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite(</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite(</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite(</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite(</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite(</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::RecordProperty(</highlight><highlight class="stringliteral">&quot;test_case_key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">testing::TestSuite</ref>*<sp/>test_suite<sp/>=</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnitTest::GetInstance()-&gt;current_test_suite();</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(test_suite<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>test_suite-&gt;ad_hoc_test_result().test_property_count());</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;test_case_key_1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_suite-&gt;ad_hoc_test_result().GetTestProperty(0).key());</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_suite-&gt;ad_hoc_test_result().GetTestProperty(0).value());</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult<sp/>has<sp/>the<sp/>expected<sp/>property<sp/>when<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal">TEST_F(UnitTestRecordPropertyTest,<sp/>OnePropertyFoundWhenAdded)<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>UnitTestRecordProperty(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>unit_test_.ad_hoc_test_result().test_property_count());</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test_.ad_hoc_test_result().GetTestProperty(0).key());</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>unit_test_.ad_hoc_test_result().GetTestProperty(0).value());</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult<sp/>has<sp/>multiple<sp/>properties<sp/>when<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal">TEST_F(UnitTestRecordPropertyTest,<sp/>MultiplePropertiesFoundWhenAdded)<sp/>{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>UnitTestRecordProperty(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/>UnitTestRecordProperty(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>unit_test_.ad_hoc_test_result().test_property_count());</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test_.ad_hoc_test_result().GetTestProperty(0).key());</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>unit_test_.ad_hoc_test_result().GetTestProperty(0).value());</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test_.ad_hoc_test_result().GetTestProperty(1).key());</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>unit_test_.ad_hoc_test_result().GetTestProperty(1).value());</highlight></codeline>
<codeline lineno="2096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestResult::RecordProperty()<sp/>overrides<sp/>values<sp/>for<sp/>duplicate<sp/>keys.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal">TEST_F(UnitTestRecordPropertyTest,<sp/>OverridesValuesForDuplicateKeys)<sp/>{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/>UnitTestRecordProperty(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/>UnitTestRecordProperty(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>UnitTestRecordProperty(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>UnitTestRecordProperty(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;22&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>unit_test_.ad_hoc_test_result().test_property_count());</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test_.ad_hoc_test_result().GetTestProperty(0).key());</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;12&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test_.ad_hoc_test_result().GetTestProperty(0).value());</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test_.ad_hoc_test_result().GetTestProperty(1).key());</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;22&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test_.ad_hoc_test_result().GetTestProperty(1).value());</highlight></codeline>
<codeline lineno="2116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal">TEST_F(UnitTestRecordPropertyTest,</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddFailureInsideTestsWhenUsingTestSuiteReservedKeys)<sp/>{</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest(</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;value_param&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest(</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type_param&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest(</highlight><highlight class="stringliteral">&quot;status&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest(</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal">TEST_F(UnitTestRecordPropertyTest,</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddRecordWithReservedKeysGeneratesCorrectPropertyList)<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Test::RecordProperty(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;classname&apos;,<sp/>&apos;name&apos;,<sp/>&apos;status&apos;,<sp/>&apos;time&apos;,<sp/>&apos;type_param&apos;,<sp/>&apos;value_param&apos;,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&apos;file&apos;,<sp/>and<sp/>&apos;line&apos;<sp/>are<sp/>reserved&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTestRecordPropertyTestEnvironment<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment" kindref="compound">Environment</ref><sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite(</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;random_seed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>test<sp/>property<sp/>recording<sp/>outside<sp/>of<sp/>any<sp/>test<sp/>or<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment" kindref="compound">Environment</ref>*<sp/>record_property_env<sp/>GTEST_ATTRIBUTE_UNUSED_<sp/>=</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>AddGlobalTestEnvironment(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UnitTestRecordPropertyTestEnvironment);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>group<sp/>of<sp/>tests<sp/>is<sp/>for<sp/>predicate<sp/>assertions<sp/>(ASSERT_PRED*,<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>various<sp/>arities.<sp/><sp/>They<sp/>do<sp/>not<sp/>attempt<sp/>to<sp/>be<sp/>exhaustive.<sp/><sp/>Rather,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>view<sp/>them<sp/>as<sp/>smoke<sp/>tests<sp/>that<sp/>can<sp/>be<sp/>easily<sp/>reviewed<sp/>and<sp/>verified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>more<sp/>complete<sp/>set<sp/>of<sp/>tests<sp/>for<sp/>predicate<sp/>assertions<sp/>can<sp/>be<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>gtest_pred_impl_unittest.cc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>First,<sp/>some<sp/>predicates<sp/>and<sp/>predicate-formatters<sp/>needed<sp/>by<sp/>the<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>argument<sp/>is<sp/>an<sp/>even<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsEven(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>%<sp/>2)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>functor<sp/>that<sp/>returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>argument<sp/>is<sp/>an<sp/>even<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IsEvenFunctor<sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsEven(n);<sp/>}</highlight></codeline>
<codeline lineno="2179"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate-formatter<sp/>function<sp/>that<sp/>asserts<sp/>the<sp/>argument<sp/>is<sp/>an<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal">AssertionResult<sp/>AssertIsEven(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEven(n))<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>not<sp/>even.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure(msg);</highlight></codeline>
<codeline lineno="2191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate<sp/>function<sp/>that<sp/>returns<sp/>AssertionResult<sp/>for<sp/>use<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT/ASSERT_TRUE/FALSE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal">AssertionResult<sp/>ResultIsEven(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEven(n))</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>even&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>odd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate<sp/>function<sp/>that<sp/>returns<sp/>AssertionResult<sp/>but<sp/>gives<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>explanation<sp/>why<sp/>it<sp/>succeeds.<sp/>Needed<sp/>for<sp/>testing<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT/ASSERT_FALSE<sp/>handles<sp/>such<sp/>functions<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal">AssertionResult<sp/>ResultIsEvenNoExplanation(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEven(n))</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>odd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate-formatter<sp/>functor<sp/>that<sp/>asserts<sp/>the<sp/>argument<sp/>is<sp/>an<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssertIsEvenFunctor<sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertIsEven(expr,<sp/>n);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>arguments<sp/>is<sp/>an<sp/>even<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SumIsEven2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsEven(n1<sp/>+<sp/>n2);<sp/>}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>functor<sp/>that<sp/>returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>arguments<sp/>is<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SumIsEven3Functor<sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsEven(n1<sp/>+<sp/>n2<sp/>+<sp/>n3);<sp/>}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate-formatter<sp/>function<sp/>that<sp/>asserts<sp/>the<sp/>sum<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments<sp/>is<sp/>an<sp/>even<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal">AssertionResult<sp/>AssertSumIsEven4(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e3,</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e4,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3,</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4)<sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>n1<sp/>+<sp/>n2<sp/>+<sp/>n3<sp/>+<sp/>n4;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEven(sum))<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>e1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e4<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>n2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n4<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sum</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>not<sp/>even.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure(msg);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate-formatter<sp/>functor<sp/>that<sp/>asserts<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>an<sp/>even<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssertSumIsEven5Functor<sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e3,</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e5,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2,</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n5)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>n1<sp/>+<sp/>n2<sp/>+<sp/>n3<sp/>+<sp/>n4<sp/>+<sp/>n5;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEven(sum))<sp/>{</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>e1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e4<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e5</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n4<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>n5<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>not<sp/>even.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure(msg);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>unary<sp/>predicate<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>unary<sp/>predicate<sp/>assertions<sp/>that<sp/>don&apos;t<sp/>use<sp/>a<sp/>custom<sp/>formatter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal">TEST(Pred1Test,<sp/>WithoutFormat)<sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Success<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(IsEvenFunctor(),<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>UNEXPECTED!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(IsEven,<sp/>4);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failure<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED1(IsEven,<sp/>5)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_PRED1(IsEvenFunctor(),<sp/>5),<sp/></highlight><highlight class="stringliteral">&quot;evaluates<sp/>to<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>unary<sp/>predicate<sp/>assertions<sp/>that<sp/>use<sp/>a<sp/>custom<sp/>formatter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal">TEST(Pred1Test,<sp/>WithFormat)<sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Success<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT1(AssertIsEven,<sp/>2);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT1(AssertIsEvenFunctor(),<sp/>4)</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>UNEXPECTED!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failure<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_PRED_FORMAT1(AssertIsEvenFunctor(),<sp/>n),</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n<sp/>evaluates<sp/>to<sp/>5,<sp/>which<sp/>is<sp/>not<sp/>even.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(AssertIsEven,<sp/>5)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>unary<sp/>predicate<sp/>assertions<sp/>evaluates<sp/>their<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal">TEST(Pred1Test,<sp/>SingleEvaluationOnFailure)<sp/>{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>success<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(IsEven,<sp/>n++);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>argument<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>failure<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(AssertIsEvenFunctor(),<sp/>n++)</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>argument<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>predicate<sp/>assertions<sp/>whose<sp/>arity<sp/>is<sp/>&gt;=<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>predicate<sp/>assertions<sp/>that<sp/>don&apos;t<sp/>use<sp/>a<sp/>custom<sp/>formatter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal">TEST(PredTest,<sp/>WithoutFormat)<sp/>{</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Success<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>ASSERT_PRED2(SumIsEven2,<sp/>2,<sp/>4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>UNEXPECTED!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(SumIsEven3Functor(),<sp/>4,<sp/>6,<sp/>8);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failure<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED2(SumIsEven2,<sp/>n1,<sp/>n2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED3(SumIsEven3Functor(),<sp/>1,<sp/>2,<sp/>4);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;evaluates<sp/>to<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>predicate<sp/>assertions<sp/>that<sp/>use<sp/>a<sp/>custom<sp/>formatter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal">TEST(PredTest,<sp/>WithFormat)<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Success<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT4(AssertSumIsEven4,<sp/>4,<sp/>6,<sp/>8,<sp/>10)</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>UNEXPECTED!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT5(AssertSumIsEven5Functor(),<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failure<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT4(AssertSumIsEven4,<sp/>n1,<sp/>n2,<sp/>n3,<sp/>n4);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;evaluates<sp/>to<sp/>13,<sp/>which<sp/>is<sp/>not<sp/>even.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT5(AssertSumIsEven5Functor(),<sp/>1,<sp/>2,<sp/>4,<sp/>6,<sp/>8)</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>predicate<sp/>assertions<sp/>evaluates<sp/>their<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal">TEST(PredTest,<sp/>SingleEvaluationOnFailure)<sp/>{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>success<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>EXPECT_PRED2(SumIsEven2,<sp/>n1++,<sp/>n2++);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>1<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>2<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>success<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>n1<sp/>=<sp/>n2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n5<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT5(AssertSumIsEven5Functor(),<sp/>n1++,<sp/>n2++,<sp/>n3++,<sp/>n4++,<sp/>n5++)</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>UNEXPECTED!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>1<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>2<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>3<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>4<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n5)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>5<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>failure<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/>n1<sp/>=<sp/>n2<sp/>=<sp/>n3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED3(SumIsEven3Functor(),<sp/>++n1,<sp/>n2++,<sp/>n3++)</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>1<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>2<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>3<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>failure<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/>n1<sp/>=<sp/>n2<sp/>=<sp/>n3<sp/>=<sp/>n4<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT4(AssertSumIsEven4,<sp/>++n1,<sp/>n2++,<sp/>n3++,<sp/>n4++);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;evaluates<sp/>to<sp/>1,<sp/>which<sp/>is<sp/>not<sp/>even.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>1<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>2<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>3<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>4<sp/>is<sp/>not<sp/>evaluated<sp/>exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>predicate<sp/>assertions<sp/>for<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal">TEST(PredTest,<sp/>ExpectPredEvalFailure)<sp/>{</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;<sp/>set_a<sp/>=<sp/>{2,<sp/>1,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;<sp/>set_b<sp/>=<sp/>{0,<sp/>4,<sp/>8};</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compare_sets<sp/>=<sp/>[](std::set&lt;int&gt;,<sp/>std::set&lt;int&gt;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED2(compare_sets,<sp/>set_a,<sp/>set_b),</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;compare_sets(set_a,<sp/>set_b)<sp/>evaluates<sp/>to<sp/>false,<sp/>where\nset_a<sp/>evaluates<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>}\nset_b<sp/>evaluates<sp/>to<sp/>{<sp/>0,<sp/>4,<sp/>8<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>helper<sp/>functions<sp/>for<sp/>testing<sp/>using<sp/>overloaded/template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions<sp/>with<sp/>ASSERT_PREDn<sp/>and<sp/>EXPECT_PREDn.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPositive(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNegative(T<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GreaterThan(T1<sp/>x1,<sp/>T2<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1<sp/>&gt;<sp/>x2;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>overloaded<sp/>functions<sp/>can<sp/>be<sp/>used<sp/>in<sp/>*_PRED*<sp/>as<sp/>long<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>types<sp/>are<sp/>explicitly<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal">TEST(PredicateAssertionTest,<sp/>AcceptsOverloadedFunction)<sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C++Builder<sp/>requires<sp/>C-style<sp/>casts<sp/>rather<sp/>than<sp/>static_cast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/>EXPECT_PRED1((</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))(IsPositive),<sp/>5);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/>ASSERT_PRED1((</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))(IsPositive),<sp/>6.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>template<sp/>functions<sp/>can<sp/>be<sp/>used<sp/>in<sp/>*_PRED*<sp/>as<sp/>long<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>types<sp/>are<sp/>explicitly<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal">TEST(PredicateAssertionTest,<sp/>AcceptsTemplateFunction)<sp/>{</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(IsNegative&lt;int&gt;,<sp/>-5);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>we<sp/>can<sp/>handle<sp/>templates<sp/>with<sp/>more<sp/>than<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/>ASSERT_PRED2((GreaterThan&lt;int,<sp/>int&gt;),<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>helper<sp/>functions<sp/>for<sp/>testing<sp/>using<sp/>overloaded/template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions<sp/>with<sp/>ASSERT_PRED_FORMATn<sp/>and<sp/>EXPECT_PRED_FORMATn.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal">AssertionResult<sp/>IsPositiveFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>expr<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>&gt;<sp/>0<sp/>?<sp/>AssertionSuccess()<sp/>:<sp/>AssertionFailure(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal">AssertionResult<sp/>IsPositiveFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>expr<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>0<sp/>?<sp/>AssertionSuccess()<sp/>:<sp/>AssertionFailure(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal">AssertionResult<sp/>IsNegativeFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>expr<sp/>*/</highlight><highlight class="normal">,<sp/>T<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>0<sp/>?<sp/>AssertionSuccess()<sp/>:<sp/>AssertionFailure(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal">AssertionResult<sp/>EqualsFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>expr1<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>expr2<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1<sp/>==<sp/>x2<sp/>?<sp/>AssertionSuccess()</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>AssertionFailure(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>overloaded<sp/>functions<sp/>can<sp/>be<sp/>used<sp/>in<sp/>*_PRED_FORMAT*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>without<sp/>explicitly<sp/>specifying<sp/>their<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal">TEST(PredicateFormatAssertionTest,<sp/>AcceptsOverloadedFunction)<sp/>{</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT1(IsPositiveFormat,<sp/>5);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT1(IsPositiveFormat,<sp/>6.0);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>template<sp/>functions<sp/>can<sp/>be<sp/>used<sp/>in<sp/>*_PRED_FORMAT*<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>explicitly<sp/>specifying<sp/>their<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal">TEST(PredicateFormatAssertionTest,<sp/>AcceptsTemplateFunction)<sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT1(IsNegativeFormat,<sp/>-5);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT2(EqualsFormat,<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>string<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_STREQ<sp/>with<sp/>non-NULL<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal">TEST(StringAssertionTest,<sp/>ASSERT_STREQ)<sp/>{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;good&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(p1,<sp/>p1);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>p2<sp/>have<sp/>the<sp/>same<sp/>content<sp/>as<sp/>p1,<sp/>but<sp/>be<sp/>at<sp/>a<sp/>different<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p2[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;good&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(p1,<sp/>p2);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;bad&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;good&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>\&quot;bad\&quot;\n<sp/><sp/>\&quot;good\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_STREQ<sp/>with<sp/>NULL<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal">TEST(StringAssertionTest,<sp/>ASSERT_STREQ_Null)<sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STREQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;non-null&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;non-null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_STREQ<sp/>with<sp/>NULL<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal">TEST(StringAssertionTest,<sp/>ASSERT_STREQ_Null2)<sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;non-null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;non-null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_STRNE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal">TEST(StringAssertionTest,<sp/>ASSERT_STRNE)<sp/>{</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;\&quot;Hi\&quot;<sp/>vs<sp/>\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_STRCASEEQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal">TEST(StringAssertionTest,<sp/>ASSERT_STRCASEEQ)<sp/>{</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/>ASSERT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>ASSERT_STRCASEEQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/>ASSERT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hi2&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Ignoring<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_STRCASENE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal">TEST(StringAssertionTest,<sp/>ASSERT_STRCASENE)<sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;hi1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hi2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/>ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/>ASSERT_STRCASENE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/>ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/>ASSERT_STRCASENE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/>ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/>ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;(ignoring<sp/>case)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>*_STREQ<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal">TEST(StringAssertionTest,<sp/>STREQ_Wide)<sp/>{</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-null<sp/>vs<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STREQ(L</highlight><highlight class="stringliteral">&quot;non-null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;non-null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Equal<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unequal<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STREQ(L</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;Abc&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Abc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Strings<sp/>containing<sp/>wide<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STREQ(L</highlight><highlight class="stringliteral">&quot;abc\x8119&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;abc\x8120&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>streaming<sp/>variation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(L</highlight><highlight class="stringliteral">&quot;abc\x8119&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;abc\x8121&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>*_STRNE<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal">TEST(StringAssertionTest,<sp/>STRNE_Wide)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STRNE(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRNE(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-null<sp/>vs<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(L</highlight><highlight class="stringliteral">&quot;non-null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Equal<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRNE(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unequal<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/>EXPECT_STRNE(L</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;Abc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Strings<sp/>containing<sp/>wide<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRNE(L</highlight><highlight class="stringliteral">&quot;abc\x8119&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;abc\x8119&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>streaming<sp/>variation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(L</highlight><highlight class="stringliteral">&quot;abc\x8119&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;abc\x8120&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>shouldn&apos;t<sp/>happen&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>::testing::IsSubstring().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsSubstring()<sp/>returns<sp/>the<sp/>correct<sp/>result<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>const<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal">TEST(IsSubstringTest,<sp/>ReturnsCorrectResultForCString)<sp/>{</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;haystack&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two<sp/>needles&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsSubstring()<sp/>returns<sp/>the<sp/>correct<sp/>result<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>const<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal">TEST(IsSubstringTest,<sp/>ReturnsCorrectResultForWideCString)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>kNull,<sp/>L</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/>kNull));</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;haystack&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;two<sp/>needles&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsSubstring()<sp/>generates<sp/>the<sp/>correct<sp/>message<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>const<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal">TEST(IsSubstringTest,<sp/>GeneratesCorrectMessageForCString)<sp/>{</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>needle_expr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>\&quot;needle\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>a<sp/>substring<sp/>of<sp/>haystack_expr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Which<sp/>is:<sp/>\&quot;haystack\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsSubstring(</highlight><highlight class="stringliteral">&quot;needle_expr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;haystack_expr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;haystack&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.failure_message());</highlight></codeline>
<codeline lineno="2643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsSubstring<sp/>returns<sp/>the<sp/>correct<sp/>result<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>::std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal">TEST(IsSubstringTest,<sp/>ReturnsCorrectResultsForStdString)<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;ahellob&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsSubstring<sp/>returns<sp/>the<sp/>correct<sp/>result<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal">TEST(IsSubstringTest,<sp/>ReturnsCorrectResultForStdWstring)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>::std::wstring(L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">),<sp/>L</highlight><highlight class="stringliteral">&quot;two<sp/>needles&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/>::std::wstring(L</highlight><highlight class="stringliteral">&quot;haystack&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsSubstring()<sp/>generates<sp/>the<sp/>correct<sp/>message<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal">TEST(IsSubstringTest,<sp/>GeneratesCorrectMessageForWstring)<sp/>{</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>needle_expr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>L\&quot;needle\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>a<sp/>substring<sp/>of<sp/>haystack_expr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Which<sp/>is:<sp/>L\&quot;haystack\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsSubstring(</highlight><highlight class="stringliteral">&quot;needle_expr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;haystack_expr&quot;</highlight><highlight class="normal">,<sp/>::std::wstring(L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight><highlight class="stringliteral">&quot;haystack&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.failure_message());</highlight></codeline>
<codeline lineno="2671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>::testing::IsNotSubstring().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNotSubstring()<sp/>returns<sp/>the<sp/>correct<sp/>result<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>const<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal">TEST(IsNotSubstringTest,<sp/>ReturnsCorrectResultForCString)<sp/>{</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNotSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;haystack&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsNotSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two<sp/>needles&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNotSubstring()<sp/>returns<sp/>the<sp/>correct<sp/>result<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>const<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal">TEST(IsNotSubstringTest,<sp/>ReturnsCorrectResultForWideCString)<sp/>{</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNotSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;haystack&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsNotSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;two<sp/>needles&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNotSubstring()<sp/>generates<sp/>the<sp/>correct<sp/>message<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>const<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal">TEST(IsNotSubstringTest,<sp/>GeneratesCorrectMessageForWideCString)<sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>needle_expr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>L\&quot;needle\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>not<sp/>a<sp/>substring<sp/>of<sp/>haystack_expr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Which<sp/>is:<sp/>L\&quot;two<sp/>needles\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsNotSubstring(</highlight><highlight class="stringliteral">&quot;needle_expr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;haystack_expr&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;two<sp/>needles&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.failure_message());</highlight></codeline>
<codeline lineno="2701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNotSubstring<sp/>returns<sp/>the<sp/>correct<sp/>result<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>::std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal">TEST(IsNotSubstringTest,<sp/>ReturnsCorrectResultsForStdString)<sp/>{</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsNotSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;ahellob&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNotSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNotSubstring()<sp/>generates<sp/>the<sp/>correct<sp/>message<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>::std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal">TEST(IsNotSubstringTest,<sp/>GeneratesCorrectMessageForStdString)<sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>needle_expr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>\&quot;needle\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>not<sp/>a<sp/>substring<sp/>of<sp/>haystack_expr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Which<sp/>is:<sp/>\&quot;two<sp/>needles\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsNotSubstring(</highlight><highlight class="stringliteral">&quot;needle_expr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;haystack_expr&quot;</highlight><highlight class="normal">,<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;two<sp/>needles&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.failure_message());</highlight></codeline>
<codeline lineno="2721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNotSubstring<sp/>returns<sp/>the<sp/>correct<sp/>result<sp/>when<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal">TEST(IsNotSubstringTest,<sp/>ReturnsCorrectResultForStdWstring)<sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsNotSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>::std::wstring(L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">),<sp/>L</highlight><highlight class="stringliteral">&quot;two<sp/>needles&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNotSubstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;needle&quot;</highlight><highlight class="normal">,<sp/>::std::wstring(L</highlight><highlight class="stringliteral">&quot;haystack&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>floating-point<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FloatingPointTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre-calculated<sp/>numbers<sp/>to<sp/>be<sp/>used<sp/>by<sp/>the<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestValues<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>close_to_positive_zero;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>close_to_negative_zero;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>further_from_negative_zero;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>close_to_one;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>further_from_one;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>infinity;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>close_to_infinity;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>further_from_infinity;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>nan1;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>nan2;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">testing::internal::FloatingPoint&lt;RawType&gt;</ref><sp/>Floating;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Floating::Bits<sp/>Bits;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>max_ulps<sp/>=<sp/>Floating::kMaxUlps;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>0.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>zero_bits<sp/>=<sp/>Floating(0).bits();</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>some<sp/>numbers<sp/>close<sp/>to<sp/>0.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.close_to_positive_zero<sp/>=</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::ReinterpretBits(zero_bits<sp/>+<sp/>max_ulps<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.close_to_negative_zero<sp/>=</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-Floating::ReinterpretBits(zero_bits<sp/>+<sp/>max_ulps<sp/>-<sp/>max_ulps<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.further_from_negative_zero<sp/>=</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-Floating::ReinterpretBits(zero_bits<sp/>+<sp/>max_ulps<sp/>+<sp/>1<sp/>-<sp/>max_ulps<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>one_bits<sp/>=<sp/>Floating(1).bits();</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>some<sp/>numbers<sp/>close<sp/>to<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.close_to_one<sp/>=<sp/>Floating::ReinterpretBits(one_bits<sp/>+<sp/>max_ulps);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.further_from_one<sp/>=</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::ReinterpretBits(one_bits<sp/>+<sp/>max_ulps<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.infinity<sp/>=<sp/>Floating::Infinity();</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>+infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>infinity_bits<sp/>=<sp/>Floating(values_.infinity).bits();</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>some<sp/>numbers<sp/>close<sp/>to<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.close_to_infinity<sp/>=</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::ReinterpretBits(infinity_bits<sp/>-<sp/>max_ulps);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.further_from_infinity<sp/>=</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::ReinterpretBits(infinity_bits<sp/>-<sp/>max_ulps<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>some<sp/>NAN&apos;s.<sp/><sp/>Sets<sp/>the<sp/>most<sp/>significant<sp/>bit<sp/>of<sp/>the<sp/>fraction<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>NaN&apos;s<sp/>are<sp/>quiet;<sp/>trying<sp/>to<sp/>process<sp/>a<sp/>signaling<sp/>NaN<sp/>would<sp/>raise<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>if<sp/>our<sp/>environment<sp/>enables<sp/>floating<sp/>point<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.nan1<sp/>=<sp/>Floating::ReinterpretBits(</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::kExponentBitMask<sp/>|</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Bits</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(Floating::kFractionBitCount<sp/>-<sp/>1))<sp/>|<sp/>1);</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/>values_.nan2<sp/>=<sp/>Floating::ReinterpretBits(</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::kExponentBitMask<sp/>|</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Bits</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(Floating::kFractionBitCount<sp/>-<sp/>1))<sp/>|<sp/>200);</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSize()<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RawType),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Bits));<sp/>}</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TestValues<sp/>values_;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FloatingPointTest&lt;RawType&gt;::TestValues</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/>FloatingPointTest&lt;RawType&gt;::values_;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiates<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>*_FLOAT_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FloatingPointTest&lt;float&gt;<sp/>FloatTest;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>size<sp/>of<sp/>Float::Bits<sp/>matches<sp/>the<sp/>size<sp/>of<sp/>float.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal">TEST_F(FloatTest,<sp/>Size)<sp/>{<sp/>TestSize();<sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>with<sp/>+0<sp/>and<sp/>-0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal">TEST_F(FloatTest,<sp/>Zeros)<sp/>{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(0.0,<sp/>-0.0);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(-0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_FLOAT_EQ(0.0,<sp/>1.5),<sp/></highlight><highlight class="stringliteral">&quot;1.5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>numbers<sp/>close<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>ensures<sp/>that<sp/>*_FLOAT_EQ<sp/>handles<sp/>the<sp/>sign<sp/>correctly<sp/>and<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overflow<sp/>occurs<sp/>when<sp/>comparing<sp/>numbers<sp/>whose<sp/>absolute<sp/>value<sp/>is<sp/>very</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>small.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal">TEST_F(FloatTest,<sp/>AlmostZeros)<sp/>{</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>C++Builder,<sp/>names<sp/>within<sp/>local<sp/>classes<sp/>(such<sp/>as<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_FATAL_FAILURE)<sp/>cannot<sp/>be<sp/>resolved<sp/>against<sp/>static<sp/>members<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scoping<sp/>class.<sp/><sp/>Use<sp/>a<sp/>static<sp/>local<sp/>alias<sp/>as<sp/>a<sp/>workaround.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>the<sp/>assignment<sp/>syntax<sp/>since<sp/>some<sp/>compilers,<sp/>like<sp/>Sun<sp/>Studio,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>allow<sp/>initializing<sp/>references<sp/>using<sp/>construction<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(parentheses).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatTest::TestValues&amp;<sp/>v<sp/>=<sp/>this-&gt;values_;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(0.0,<sp/>v.close_to_positive_zero);</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(-0.0,<sp/>v.close_to_negative_zero);</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(v.close_to_positive_zero,<sp/>v.close_to_negative_zero);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_FLOAT_EQ(v.close_to_positive_zero,<sp/>v.further_from_negative_zero);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;v.further_from_negative_zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>numbers<sp/>close<sp/>to<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal">TEST_F(FloatTest,<sp/>SmallDiff)<sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(1.0,<sp/>values_.close_to_one);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(1.0,<sp/>values_.further_from_one),</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;values_.further_from_one&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>numbers<sp/>far<sp/>apart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal">TEST_F(FloatTest,<sp/>LargeDiff)<sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(2.5,<sp/>3.0),<sp/></highlight><highlight class="stringliteral">&quot;3.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>with<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>ensures<sp/>that<sp/>no<sp/>overflow<sp/>occurs<sp/>when<sp/>comparing<sp/>numbers<sp/>whose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>absolute<sp/>value<sp/>is<sp/>very<sp/>large.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal">TEST_F(FloatTest,<sp/>Infinity)<sp/>{</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(values_.infinity,<sp/>values_.close_to_infinity);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(-values_.infinity,<sp/>-values_.close_to_infinity);</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(values_.infinity,<sp/>-values_.infinity),</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-values_.infinity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>interesting<sp/>as<sp/>the<sp/>representations<sp/>of<sp/>infinity<sp/>and<sp/>nan1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>only<sp/>1<sp/>DLP<sp/>apart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(values_.infinity,<sp/>values_.nan1),</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;values_.nan1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>comparing<sp/>with<sp/>NAN<sp/>always<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal">TEST_F(FloatTest,<sp/>NaN)<sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>C++Builder,<sp/>names<sp/>within<sp/>local<sp/>classes<sp/>(such<sp/>as<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_FATAL_FAILURE)<sp/>cannot<sp/>be<sp/>resolved<sp/>against<sp/>static<sp/>members<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scoping<sp/>class.<sp/><sp/>Use<sp/>a<sp/>static<sp/>local<sp/>alias<sp/>as<sp/>a<sp/>workaround.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>the<sp/>assignment<sp/>syntax<sp/>since<sp/>some<sp/>compilers,<sp/>like<sp/>Sun<sp/>Studio,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>allow<sp/>initializing<sp/>references<sp/>using<sp/>construction<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(parentheses).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatTest::TestValues&amp;<sp/>v<sp/>=<sp/>this-&gt;values_;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(v.nan1,<sp/>v.nan1),<sp/></highlight><highlight class="stringliteral">&quot;v.nan1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(v.nan1,<sp/>v.nan2),<sp/></highlight><highlight class="stringliteral">&quot;v.nan2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(1.0,<sp/>v.nan1),<sp/></highlight><highlight class="stringliteral">&quot;v.nan1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_FLOAT_EQ(v.nan1,<sp/>v.infinity),<sp/></highlight><highlight class="stringliteral">&quot;v.infinity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>*_FLOAT_EQ<sp/>are<sp/>reflexive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal">TEST_F(FloatTest,<sp/>Reflexive)<sp/>{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/>ASSERT_FLOAT_EQ(values_.infinity,<sp/>values_.infinity);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>*_FLOAT_EQ<sp/>are<sp/>commutative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal">TEST_F(FloatTest,<sp/>Commutative)<sp/>{</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>already<sp/>tested<sp/>EXPECT_FLOAT_EQ(1.0,<sp/>values_.close_to_one).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(values_.close_to_one,<sp/>1.0);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>already<sp/>tested<sp/>EXPECT_FLOAT_EQ(1.0,<sp/>values_.further_from_one).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(values_.further_from_one,<sp/>1.0),</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_NEAR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal">TEST_F(FloatTest,<sp/>EXPECT_NEAR)<sp/>{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(-1.0f,<sp/>-1.1f,<sp/>0.2f);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(2.0f,<sp/>3.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NEAR(1.0f,<sp/>1.5f,<sp/>0.25f),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>difference<sp/>between<sp/>1.0f<sp/>and<sp/>1.5f<sp/>is<sp/>0.5,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>exceeds<sp/>0.25f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_NEAR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal">TEST_F(FloatTest,<sp/>ASSERT_NEAR)<sp/>{</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>ASSERT_NEAR(-1.0f,<sp/>-1.1f,<sp/>0.2f);</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/>ASSERT_NEAR(2.0f,<sp/>3.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_NEAR(1.0f,<sp/>1.5f,<sp/>0.25f),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>difference<sp/>between<sp/>1.0f<sp/>and<sp/>1.5f<sp/>is<sp/>0.5,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>exceeds<sp/>0.25f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>cases<sp/>where<sp/>FloatLE()<sp/>should<sp/>succeed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal">TEST_F(FloatTest,<sp/>FloatLESucceeds)<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(FloatLE,<sp/>1.0f,<sp/>2.0f);<sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>val1<sp/>&lt;<sp/>val2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT2(FloatLE,<sp/>1.0f,<sp/>1.0f);<sp/><sp/></highlight><highlight class="comment">//<sp/>val1<sp/>==<sp/>val2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>when<sp/>val1<sp/>is<sp/>greater<sp/>than,<sp/>but<sp/>almost<sp/>equals<sp/>to,<sp/>val2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(FloatLE,<sp/>values_.close_to_positive_zero,<sp/>0.0f);</highlight></codeline>
<codeline lineno="2939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>cases<sp/>where<sp/>FloatLE()<sp/>should<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal">TEST_F(FloatTest,<sp/>FloatLEFails)<sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>val1<sp/>is<sp/>greater<sp/>than<sp/>val2<sp/>by<sp/>a<sp/>large<sp/>margin,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_PRED_FORMAT2(FloatLE,<sp/>2.0f,<sp/>1.0f),</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(2.0f)<sp/>&lt;=<sp/>(1.0f)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>by<sp/>a<sp/>small<sp/>yet<sp/>non-negligible<sp/>margin,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(FloatLE,<sp/>values_.further_from_one,<sp/>1.0f);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(values_.further_from_one)<sp/>&lt;=<sp/>(1.0f)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(FloatLE,<sp/>values_.nan1,<sp/>values_.infinity);</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(values_.nan1)<sp/>&lt;=<sp/>(values_.infinity)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(FloatLE,<sp/>-values_.infinity,<sp/>values_.nan1);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(-values_.infinity)<sp/>&lt;=<sp/>(values_.nan1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT2(FloatLE,<sp/>values_.nan1,<sp/>values_.nan1);</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(values_.nan1)<sp/>&lt;=<sp/>(values_.nan1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiates<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>*_DOUBLE_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FloatingPointTest&lt;double&gt;<sp/>DoubleTest;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>size<sp/>of<sp/>Double::Bits<sp/>matches<sp/>the<sp/>size<sp/>of<sp/>double.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal">TEST_F(DoubleTest,<sp/>Size)<sp/>{<sp/>TestSize();<sp/>}</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>with<sp/>+0<sp/>and<sp/>-0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal">TEST_F(DoubleTest,<sp/>Zeros)<sp/>{</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(0.0,<sp/>-0.0);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(-0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_DOUBLE_EQ(0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>numbers<sp/>close<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>ensures<sp/>that<sp/>*_DOUBLE_EQ<sp/>handles<sp/>the<sp/>sign<sp/>correctly<sp/>and<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overflow<sp/>occurs<sp/>when<sp/>comparing<sp/>numbers<sp/>whose<sp/>absolute<sp/>value<sp/>is<sp/>very</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>small.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal">TEST_F(DoubleTest,<sp/>AlmostZeros)<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>C++Builder,<sp/>names<sp/>within<sp/>local<sp/>classes<sp/>(such<sp/>as<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_FATAL_FAILURE)<sp/>cannot<sp/>be<sp/>resolved<sp/>against<sp/>static<sp/>members<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scoping<sp/>class.<sp/><sp/>Use<sp/>a<sp/>static<sp/>local<sp/>alias<sp/>as<sp/>a<sp/>workaround.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>the<sp/>assignment<sp/>syntax<sp/>since<sp/>some<sp/>compilers,<sp/>like<sp/>Sun<sp/>Studio,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>allow<sp/>initializing<sp/>references<sp/>using<sp/>construction<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(parentheses).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DoubleTest::TestValues&amp;<sp/>v<sp/>=<sp/>this-&gt;values_;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(0.0,<sp/>v.close_to_positive_zero);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(-0.0,<sp/>v.close_to_negative_zero);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(v.close_to_positive_zero,<sp/>v.close_to_negative_zero);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_DOUBLE_EQ(v.close_to_positive_zero,</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.further_from_negative_zero);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;v.further_from_negative_zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>numbers<sp/>close<sp/>to<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal">TEST_F(DoubleTest,<sp/>SmallDiff)<sp/>{</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(1.0,<sp/>values_.close_to_one);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(1.0,<sp/>values_.further_from_one),</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;values_.further_from_one&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>numbers<sp/>far<sp/>apart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal">TEST_F(DoubleTest,<sp/>LargeDiff)<sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(2.0,<sp/>3.0),<sp/></highlight><highlight class="stringliteral">&quot;3.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>with<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>ensures<sp/>that<sp/>no<sp/>overflow<sp/>occurs<sp/>when<sp/>comparing<sp/>numbers<sp/>whose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>absolute<sp/>value<sp/>is<sp/>very<sp/>large.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal">TEST_F(DoubleTest,<sp/>Infinity)<sp/>{</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(values_.infinity,<sp/>values_.close_to_infinity);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(-values_.infinity,<sp/>-values_.close_to_infinity);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(values_.infinity,<sp/>-values_.infinity),</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-values_.infinity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>interesting<sp/>as<sp/>the<sp/>representations<sp/>of<sp/>infinity_<sp/>and<sp/>nan1_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>only<sp/>1<sp/>DLP<sp/>apart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(values_.infinity,<sp/>values_.nan1),</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;values_.nan1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>comparing<sp/>with<sp/>NAN<sp/>always<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal">TEST_F(DoubleTest,<sp/>NaN)<sp/>{</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DoubleTest::TestValues&amp;<sp/>v<sp/>=<sp/>this-&gt;values_;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Nokia&apos;s<sp/>STLport<sp/>crashes<sp/>if<sp/>we<sp/>try<sp/>to<sp/>output<sp/>infinity<sp/>or<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(v.nan1,<sp/>v.nan1),<sp/></highlight><highlight class="stringliteral">&quot;v.nan1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(v.nan1,<sp/>v.nan2),<sp/></highlight><highlight class="stringliteral">&quot;v.nan2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(1.0,<sp/>v.nan1),<sp/></highlight><highlight class="stringliteral">&quot;v.nan1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_DOUBLE_EQ(v.nan1,<sp/>v.infinity),<sp/></highlight><highlight class="stringliteral">&quot;v.infinity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>*_DOUBLE_EQ<sp/>are<sp/>reflexive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal">TEST_F(DoubleTest,<sp/>Reflexive)<sp/>{</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(values_.infinity,<sp/>values_.infinity);</highlight></codeline>
<codeline lineno="3054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>*_DOUBLE_EQ<sp/>are<sp/>commutative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal">TEST_F(DoubleTest,<sp/>Commutative)<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>already<sp/>tested<sp/>EXPECT_DOUBLE_EQ(1.0,<sp/>values_.close_to_one).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(values_.close_to_one,<sp/>1.0);</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>already<sp/>tested<sp/>EXPECT_DOUBLE_EQ(1.0,<sp/>values_.further_from_one).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(values_.further_from_one,<sp/>1.0),</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_NEAR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal">TEST_F(DoubleTest,<sp/>EXPECT_NEAR)<sp/>{</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(-1.0,<sp/>-1.1,<sp/>0.2);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(2.0,<sp/>3.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NEAR(1.0,<sp/>1.5,<sp/>0.25),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>difference<sp/>between<sp/>1.0<sp/>and<sp/>1.5<sp/>is<sp/>0.5,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>exceeds<sp/>0.25&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>magnitude<sp/>adjacent<sp/>doubles<sp/>are<sp/>512.0<sp/>apart,<sp/>so<sp/>this<sp/>triggers<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>slightly<sp/>different<sp/>failure<sp/>reporting<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NEAR(4.2934311416234112e+18,<sp/>4.2934311416234107e+18,<sp/>1.0),</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>abs_error<sp/>parameter<sp/>1.0<sp/>evaluates<sp/>to<sp/>1<sp/>which<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;minimum<sp/>distance<sp/>between<sp/>doubles<sp/>for<sp/>numbers<sp/>of<sp/>this<sp/>magnitude<sp/>which<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;512&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_NEAR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal">TEST_F(DoubleTest,<sp/>ASSERT_NEAR)<sp/>{</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/>ASSERT_NEAR(-1.0,<sp/>-1.1,<sp/>0.2);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/>ASSERT_NEAR(2.0,<sp/>3.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_NEAR(1.0,<sp/>1.5,<sp/>0.25),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>difference<sp/>between<sp/>1.0<sp/>and<sp/>1.5<sp/>is<sp/>0.5,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>exceeds<sp/>0.25&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>cases<sp/>where<sp/>DoubleLE()<sp/>should<sp/>succeed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal">TEST_F(DoubleTest,<sp/>DoubleLESucceeds)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(DoubleLE,<sp/>1.0,<sp/>2.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>val1<sp/>&lt;<sp/>val2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT2(DoubleLE,<sp/>1.0,<sp/>1.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>val1<sp/>==<sp/>val2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>when<sp/>val1<sp/>is<sp/>greater<sp/>than,<sp/>but<sp/>almost<sp/>equals<sp/>to,<sp/>val2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(DoubleLE,<sp/>values_.close_to_positive_zero,<sp/>0.0);</highlight></codeline>
<codeline lineno="3098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>cases<sp/>where<sp/>DoubleLE()<sp/>should<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal">TEST_F(DoubleTest,<sp/>DoubleLEFails)<sp/>{</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>val1<sp/>is<sp/>greater<sp/>than<sp/>val2<sp/>by<sp/>a<sp/>large<sp/>margin,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_PRED_FORMAT2(DoubleLE,<sp/>2.0,<sp/>1.0),</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(2.0)<sp/>&lt;=<sp/>(1.0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>by<sp/>a<sp/>small<sp/>yet<sp/>non-negligible<sp/>margin,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(DoubleLE,<sp/>values_.further_from_one,<sp/>1.0);</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(values_.further_from_one)<sp/>&lt;=<sp/>(1.0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(DoubleLE,<sp/>values_.nan1,<sp/>values_.infinity);</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(values_.nan1)<sp/>&lt;=<sp/>(values_.infinity)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(DoubleLE,<sp/>-values_.infinity,<sp/>values_.nan1);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(-values_.infinity)<sp/>&lt;=<sp/>(values_.nan1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT2(DoubleLE,<sp/>values_.nan1,<sp/>values_.nan1);</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(values_.nan1)<sp/>&lt;=<sp/>(values_.nan1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>a<sp/>test<sp/>or<sp/>test<sp/>case<sp/>whose<sp/>name<sp/>starts<sp/>with<sp/>DISABLED_<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>whose<sp/>name<sp/>starts<sp/>with<sp/>DISABLED_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Should<sp/>not<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal">TEST(<ref refid="classDisabledTest" kindref="compound">DisabledTest</ref>,<sp/>DISABLED_TestShouldNotRun)<sp/>{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Disabled<sp/>test<sp/>should<sp/>not<sp/>be<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>whose<sp/>name<sp/>does<sp/>not<sp/>start<sp/>with<sp/>DISABLED_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal">TEST(<ref refid="classDisabledTest" kindref="compound">DisabledTest</ref>,<sp/>NotDISABLED_TestShouldRun)<sp/>{<sp/>EXPECT_EQ(1,<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>case<sp/>whose<sp/>name<sp/>starts<sp/>with<sp/>DISABLED_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Should<sp/>not<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal">TEST(DISABLED_TestSuite,<sp/>TestShouldNotRun)<sp/>{</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Test<sp/>in<sp/>disabled<sp/>test<sp/>case<sp/>should<sp/>not<sp/>be<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>case<sp/>and<sp/>test<sp/>whose<sp/>names<sp/>start<sp/>with<sp/>DISABLED_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Should<sp/>not<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal">TEST(DISABLED_TestSuite,<sp/>DISABLED_TestShouldNotRun)<sp/>{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Test<sp/>in<sp/>disabled<sp/>test<sp/>case<sp/>should<sp/>not<sp/>be<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>when<sp/>all<sp/>tests<sp/>in<sp/>a<sp/>test<sp/>case<sp/>are<sp/>disabled,<sp/>SetUpTestSuite()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TearDownTestSuite()<sp/>are<sp/>not<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DisabledTestsTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>All<sp/>tests<sp/>disabled<sp/>in<sp/>test<sp/>case.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SetUpTestSuite()<sp/>should<sp/>not<sp/>be<sp/>called.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>All<sp/>tests<sp/>disabled<sp/>in<sp/>test<sp/>case.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TearDownTestSuite()<sp/>should<sp/>not<sp/>be<sp/>called.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal">TEST_F(DisabledTestsTest,<sp/>DISABLED_TestShouldNotRun_1)<sp/>{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Disabled<sp/>test<sp/>should<sp/>not<sp/>be<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal">TEST_F(DisabledTestsTest,<sp/>DISABLED_TestShouldNotRun_2)<sp/>{</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Disabled<sp/>test<sp/>should<sp/>not<sp/>be<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>disabled<sp/>typed<sp/>tests<sp/>aren&apos;t<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTest" kindref="compound">TypedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types&lt;int, double&gt;</ref><sp/>NumericTypes;</highlight></codeline>
<codeline lineno="3184"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classTypedTest" kindref="compound">TypedTest</ref>,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal">TYPED_TEST(<ref refid="classTypedTest" kindref="compound">TypedTest</ref>,<sp/>DISABLED_ShouldNotRun)<sp/>{</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Disabled<sp/>typed<sp/>test<sp/>should<sp/>not<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DISABLED_TypedTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal">TYPED_TEST_SUITE(DISABLED_TypedTest,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal">TYPED_TEST(DISABLED_TypedTest,<sp/>ShouldNotRun)<sp/>{</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Disabled<sp/>typed<sp/>test<sp/>should<sp/>not<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>disabled<sp/>type-parameterized<sp/>tests<sp/>aren&apos;t<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>);</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal">TYPED_TEST_P(<ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>,<sp/>DISABLED_ShouldNotRun)<sp/>{</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Disabled<sp/>type-parameterized<sp/>test<sp/>should<sp/>not<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(<ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>,<sp/>DISABLED_ShouldNotRun);</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DISABLED_TypedTestP<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal">TYPED_TEST_SUITE_P(DISABLED_TypedTestP);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal">TYPED_TEST_P(DISABLED_TypedTestP,<sp/>ShouldNotRun)<sp/>{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Disabled<sp/>type-parameterized<sp/>test<sp/>should<sp/>not<sp/>run.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(DISABLED_TypedTestP,<sp/>ShouldNotRun);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/>DISABLED_TypedTestP,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>assertion<sp/>macros<sp/>evaluate<sp/>their<sp/>arguments<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SingleEvaluationTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>public<sp/>and<sp/>not<sp/>protected<sp/>due<sp/>to<sp/>a<sp/>bug<sp/>in<sp/>g++<sp/>3.4.2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>helper<sp/>function<sp/>is<sp/>needed<sp/>by<sp/>the<sp/>FailedASSERT_STREQ<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>below.<sp/><sp/>It&apos;s<sp/>public<sp/>to<sp/>work<sp/>around<sp/>C++Builder&apos;s<sp/>bug<sp/>with<sp/>scoping<sp/>local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompareAndIncrementCharPtrs()<sp/>{<sp/>ASSERT_STREQ(p1_++,<sp/>p2_++);<sp/>}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>helper<sp/>function<sp/>is<sp/>needed<sp/>by<sp/>the<sp/>FailedASSERT_NE<sp/>test<sp/>below.<sp/><sp/>It&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>public<sp/>to<sp/>work<sp/>around<sp/>C++Builder&apos;s<sp/>bug<sp/>with<sp/>scoping<sp/>local<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompareAndIncrementInts()<sp/>{<sp/>ASSERT_NE(a_++,<sp/>b_++);<sp/>}</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>SingleEvaluationTest()<sp/>{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/>p1_<sp/>=<sp/>s1_;</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>p2_<sp/>=<sp/>s2_;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/>a_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>b_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s1_;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s2_;</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p1_;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p2_;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b_;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SingleEvaluationTest::s1_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;01234&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SingleEvaluationTest::s2_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>SingleEvaluationTest::p1_;</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>SingleEvaluationTest::p2_;</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SingleEvaluationTest::a_;</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SingleEvaluationTest::b_;</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>ASSERT_STREQ<sp/>fails,<sp/>it<sp/>evaluates<sp/>its<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal">TEST_F(SingleEvaluationTest,<sp/>FailedASSERT_STREQ)<sp/>{</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(SingleEvaluationTest::CompareAndIncrementCharPtrs(),</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;p2_++&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s1_<sp/>+<sp/>1,<sp/>p1_);</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s2_<sp/>+<sp/>1,<sp/>p2_);</highlight></codeline>
<codeline lineno="3273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>string<sp/>assertion<sp/>arguments<sp/>are<sp/>evaluated<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal">TEST_F(SingleEvaluationTest,<sp/>ASSERT_STR)<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>EXPECT_STRNE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/>EXPECT_STRNE(p1_++,<sp/>p2_++);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s1_<sp/>+<sp/>1,<sp/>p1_);</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s2_<sp/>+<sp/>1,<sp/>p2_);</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>EXPECT_STRCASEEQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRCASEEQ(p1_++,<sp/>p2_++),<sp/></highlight><highlight class="stringliteral">&quot;Ignoring<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s1_<sp/>+<sp/>2,<sp/>p1_);</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s2_<sp/>+<sp/>2,<sp/>p2_);</highlight></codeline>
<codeline lineno="3286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>ASSERT_NE<sp/>fails,<sp/>it<sp/>evaluates<sp/>its<sp/>arguments<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal">TEST_F(SingleEvaluationTest,<sp/>FailedASSERT_NE)<sp/>{</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(SingleEvaluationTest::CompareAndIncrementInts(),</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(a_++)<sp/>!=<sp/>(b_++)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a_);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b_);</highlight></codeline>
<codeline lineno="3295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>assertion<sp/>arguments<sp/>are<sp/>evaluated<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal">TEST_F(SingleEvaluationTest,<sp/>OtherCases)<sp/>{</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>EXPECT_TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(0<sp/>==<sp/>a_++);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a_);</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>EXPECT_TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(-1<sp/>==<sp/>a_++),<sp/></highlight><highlight class="stringliteral">&quot;-1<sp/>==<sp/>a_++&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>a_);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>EXPECT_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/>EXPECT_GT(a_++,<sp/>b_++);</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a_);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b_);</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>EXPECT_LT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_LT(a_++,<sp/>b_++),<sp/></highlight><highlight class="stringliteral">&quot;(a_++)<sp/>&lt;<sp/>(b_++)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4,<sp/>a_);</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>b_);</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>ASSERT_TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(0<sp/>&lt;<sp/>a_++);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a_);</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>ASSERT_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/>ASSERT_GT(a_++,<sp/>b_++);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a_);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>b_);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"></highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERROR_DESC<sp/>&quot;std::runtime_error&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERROR_DESC<sp/>&quot;an<sp/>std::exception-derived<sp/>error&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ThrowAnInteger()<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ThrowRuntimeError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(what);<sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>assertion<sp/>arguments<sp/>are<sp/>evaluated<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal">TEST_F(SingleEvaluationTest,<sp/>ExceptionTests)<sp/>{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>EXPECT_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_++;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrowAnInteger();</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int);</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a_);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>EXPECT_THROW,<sp/>throws<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THROW(</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_++;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrowAnInteger();</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool),</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>a<sp/>different<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>a_);</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>EXPECT_THROW,<sp/>throws<sp/>runtime<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THROW(</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_++;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrowRuntimeError(</highlight><highlight class="stringliteral">&quot;A<sp/>description&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool),</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>&quot;</highlight><highlight class="normal"><sp/>ERROR_DESC</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>description<sp/>\&quot;A<sp/>description\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a_);</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>EXPECT_THROW,<sp/>throws<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THROW(a_++,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>nothing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4,<sp/>a_);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>EXPECT_NO_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/>EXPECT_NO_THROW(a_++);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a_);</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>EXPECT_NO_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NO_THROW({<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_++;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrowAnInteger();</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;it<sp/>throws&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a_);</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>EXPECT_ANY_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/>EXPECT_ANY_THROW({<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/>a_++;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>ThrowAnInteger();</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>a_);</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>EXPECT_ANY_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_ANY_THROW(a_++),<sp/></highlight><highlight class="stringliteral">&quot;it<sp/>doesn&apos;t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/>EXPECT_EQ(8,<sp/>a_);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>{ASSERT|EXPECT}_NO_FATAL_FAILURE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NoFatalFailureTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Succeeds()<sp/>{}</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FailsNonFatal()<sp/>{<sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>non-fatal<sp/>failure&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Fails()<sp/>{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>fatal<sp/>failure&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DoAssertNoFatalFailureOnFails()<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_NO_FATAL_FAILURE(Fails());</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>reach<sp/>here.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DoExpectNoFatalFailureOnFails()<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NO_FATAL_FAILURE(Fails());</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;other<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3420"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal">TEST_F(NoFatalFailureTest,<sp/>NoFailure)<sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/>EXPECT_NO_FATAL_FAILURE(Succeeds());</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(Succeeds());</highlight></codeline>
<codeline lineno="3425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal">TEST_F(NoFatalFailureTest,<sp/>NonFatalIsNoFailure)<sp/>{</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NO_FATAL_FAILURE(FailsNonFatal()),</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;some<sp/>non-fatal<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_NO_FATAL_FAILURE(FailsNonFatal()),</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;some<sp/>non-fatal<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal">TEST_F(NoFatalFailureTest,<sp/>AssertNoFatalFailureOnFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/>TestPartResultArray<sp/>gtest_failures;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter<sp/>gtest_reporter(&amp;gtest_failures);</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/>DoAssertNoFatalFailureOnFails();</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>gtest_failures.size());</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/>EXPECT_EQ(TestPartResult::kFatalFailure,</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(0).type());</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/>EXPECT_EQ(TestPartResult::kFatalFailure,</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(1).type());</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(testing::IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>fatal<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(0).message());</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(testing::IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;it<sp/>does&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(1).message());</highlight></codeline>
<codeline lineno="3449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal">TEST_F(NoFatalFailureTest,<sp/>ExpectNoFatalFailureOnFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/>TestPartResultArray<sp/>gtest_failures;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter<sp/>gtest_reporter(&amp;gtest_failures);</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/>DoExpectNoFatalFailureOnFails();</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/>ASSERT_EQ(3,<sp/>gtest_failures.size());</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/>EXPECT_EQ(TestPartResult::kFatalFailure,</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(0).type());</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>EXPECT_EQ(TestPartResult::kNonFatalFailure,</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(1).type());</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/>EXPECT_EQ(TestPartResult::kNonFatalFailure,</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(2).type());</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(testing::IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>fatal<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(0).message());</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(testing::IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;it<sp/>does&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(1).message());</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(testing::IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;other<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(2).message());</highlight></codeline>
<codeline lineno="3470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal">TEST_F(NoFatalFailureTest,<sp/>MessageIsStreamable)<sp/>{</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/>TestPartResultArray<sp/>gtest_failures;</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter<sp/>gtest_reporter(&amp;gtest_failures);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NO_FATAL_FAILURE([]<sp/>{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;<sp/>}())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;my<sp/>message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>gtest_failures.size());</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/>EXPECT_EQ(TestPartResult::kFatalFailure,</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(0).type());</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/>EXPECT_EQ(TestPartResult::kNonFatalFailure,</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(1).type());</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(testing::IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(0).message());</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(testing::IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;my<sp/>message&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_failures.GetTestPartResult(1).message());</highlight></codeline>
<codeline lineno="3487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>non-string<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal">std::string<sp/>EditsToString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;EditType&gt;&amp;<sp/>edits)<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/>std::string<sp/>out;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>edits.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kEdits[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/>out.append(1,<sp/>kEdits[edits[i]]);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal">std::vector&lt;size_t&gt;<sp/>CharsToIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>out;</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/>out.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str[i]));</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>CharsToLines(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>out;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/>out.push_back(str.substr(i,<sp/>1));</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal">TEST(EditDistance,<sp/>TestSuites)<sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Case<sp/>{</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>left;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>right;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_edits;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_diff;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Case<sp/>kCases[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;ABCDE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABCDE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>adds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;XA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>+1,2<sp/>@@\n<sp/>X\n+A\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;XABCD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>++++&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>+1,5<sp/>@@\n<sp/>X\n+A\n+B\n+C\n+D\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>removes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;XA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-1,2<sp/>@@\n<sp/>X\n-A\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;XABCD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>----&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-1,5<sp/>@@\n<sp/>X\n-A\n-B\n-C\n-D\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>replaces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-1,1<sp/>+1,1<sp/>@@\n-A\n+a\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;ABCD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abcd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;////&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-1,4<sp/>+1,4<sp/>@@\n-A\n-B\n-C\n-D\n+a\n+b\n+c\n+d\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Path<sp/>finding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGH&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABXEGH1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-/<sp/>-<sp/><sp/>+&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-1,8<sp/>+1,7<sp/>@@\n<sp/>A\n<sp/>B\n-C\n-D\n+X\n<sp/>E\n-F\n<sp/>G\n<sp/>H\n+1\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;AAAABCCCC&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABABCDCDC&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-<sp/>/<sp/><sp/><sp/>+<sp/>/<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-1,9<sp/>+1,9<sp/>@@\n-A\n<sp/>A\n-A\n+B\n<sp/>A\n<sp/>B\n<sp/>C\n+D\n<sp/>C\n-C\n+D\n<sp/>C\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;ABCDE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BCDCD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-<sp/><sp/><sp/>+/&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-1,5<sp/>+1,5<sp/>@@\n-A\n<sp/>B\n<sp/>C\n<sp/>D\n-E\n+C\n+D\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKL&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BCDCDEFGJKLJK&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-<sp/>++<sp/><sp/><sp/><sp/><sp/>--<sp/><sp/><sp/>++&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-1,4<sp/>+1,5<sp/>@@\n-A\n<sp/>B\n+C\n+D\n<sp/>C\n<sp/>D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-6,7<sp/>+7,7<sp/>@@\n<sp/>F\n<sp/>G\n-H\n-I\n<sp/>J\n<sp/>K\n<sp/>L\n+J\n+K\n&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{}};</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Case*<sp/>c<sp/>=<sp/>kCases;<sp/>c-&gt;left;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(c-&gt;expected_edits<sp/>==</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EditsToString(CalculateOptimalEdits(CharsToIndices(c-&gt;left),</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharsToIndices(c-&gt;right))))</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Left<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>c-&gt;left<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>Right<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>c-&gt;right<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>Edits<sp/>&lt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>EditsToString(CalculateOptimalEdits(CharsToIndices(c-&gt;left),</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharsToIndices(c-&gt;right)))</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(c-&gt;expected_diff<sp/>==<sp/>CreateUnifiedDiff(CharsToLines(c-&gt;left),</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharsToLines(c-&gt;right)))</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Left<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>c-&gt;left<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>Right<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>c-&gt;right<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>Diff<sp/>&lt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CreateUnifiedDiff(CharsToLines(c-&gt;left),<sp/>CharsToLines(c-&gt;right))</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EqFailure(),<sp/>used<sp/>for<sp/>implementing<sp/>*EQ*<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal">TEST(AssertionTest,<sp/>EqFailure)<sp/>{</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>foo_val(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>bar_val(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg1(</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqFailure(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>foo_val,<sp/>bar_val,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).failure_message());</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>foo\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>bar\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>6&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg1.c_str());</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg2(</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqFailure(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/>foo_val,<sp/>bar_val,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).failure_message());</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>foo\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>6&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg2.c_str());</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg3(</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqFailure(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>foo_val,<sp/>bar_val,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).failure_message());</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>bar\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>6&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg3.c_str());</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg4(</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqFailure(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/>foo_val,<sp/>bar_val,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).failure_message());</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>6&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg4.c_str());</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg5(</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqFailure(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;\&quot;x\&quot;&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;\&quot;y\&quot;&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.failure_message());</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>foo\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>\&quot;x\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>bar\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>\&quot;y\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ignoring<sp/>case&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg5.c_str());</highlight></codeline>
<codeline lineno="3615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal">TEST(AssertionTest,<sp/>EqFailureWithDiff)<sp/>{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>left(</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1\\n2XXX\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12XXX\\n13\\n14\\n15&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>right(</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n11\\n12\\n13\\n14&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg1(</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqFailure(</highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">,<sp/>left,<sp/>right,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).failure_message());</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>left\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1\\n2XXX\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12XXX\\n13\\n14\\n15\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>right\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n11\\n12\\n13\\n14\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;With<sp/>diff:\n@@<sp/>-1,5<sp/>+1,6<sp/>@@\n<sp/>1\n-2XXX\n+2\n<sp/>3\n+4\n<sp/>5\n<sp/>6\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>-7,8<sp/>+8,6<sp/>@@\n<sp/>8\n<sp/>9\n-10\n<sp/>11\n-12XXX\n+12\n<sp/>13\n<sp/>14\n-15\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg1.c_str());</highlight></codeline>
<codeline lineno="3634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>AppendUserMessage(),<sp/>used<sp/>for<sp/>implementing<sp/>the<sp/>*EQ*<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal">TEST(AssertionTest,<sp/>AppendUserMessage)<sp/>{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>foo(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>AppendUserMessage(foo,<sp/>msg).c_str());</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo\nbar&quot;</highlight><highlight class="normal">,<sp/>AppendUserMessage(foo,<sp/>msg).c_str());</highlight></codeline>
<codeline lineno="3645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"></highlight></codeline>
<codeline lineno="3647"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silences<sp/>warnings:<sp/>&quot;Condition<sp/>is<sp/>always<sp/>true&quot;,<sp/>&quot;Unreachable<sp/>code&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>push<sp/>-w-ccc<sp/>-w-rch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_TRUE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_TRUE)<sp/>{</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(2<sp/>&gt;<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_TRUE(2<sp/>&lt;<sp/>1),<sp/></highlight><highlight class="stringliteral">&quot;2<sp/>&lt;<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_TRUE(predicate)<sp/>for<sp/>predicates<sp/>returning<sp/>AssertionResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal">TEST(AssertionTest,<sp/>AssertTrueWithAssertionResult)<sp/>{</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(ResultIsEven(2));</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ICE&apos;s<sp/>in<sp/>C++Builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_TRUE(ResultIsEven(3)),</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>ResultIsEven(3)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>false<sp/>(3<sp/>is<sp/>odd)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(ResultIsEvenNoExplanation(2));</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_TRUE(ResultIsEvenNoExplanation(3)),</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>ResultIsEvenNoExplanation(3)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>false<sp/>(3<sp/>is<sp/>odd)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_FALSE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_FALSE)<sp/>{</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(2<sp/>&lt;<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_FALSE(2<sp/>&gt;<sp/>1),</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>2<sp/>&gt;<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>true\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_FALSE(predicate)<sp/>for<sp/>predicates<sp/>returning<sp/>AssertionResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal">TEST(AssertionTest,<sp/>AssertFalseWithAssertionResult)<sp/>{</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(ResultIsEven(3));</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ICE&apos;s<sp/>in<sp/>C++Builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_FALSE(ResultIsEven(2)),</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>ResultIsEven(2)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>true<sp/>(2<sp/>is<sp/>even)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(ResultIsEvenNoExplanation(3));</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_FALSE(ResultIsEvenNoExplanation(2)),</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>ResultIsEvenNoExplanation(2)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>true\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>warnings<sp/>after<sp/>previous<sp/>&quot;#pragma<sp/>option<sp/>push&quot;<sp/>suppressed<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ASSERT_EQ<sp/>on<sp/>double<sp/>values.<sp/><sp/>The<sp/>purpose<sp/>is<sp/>to<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sure<sp/>that<sp/>the<sp/>specialization<sp/>we<sp/>did<sp/>for<sp/>integer<sp/>and<sp/>anonymous<sp/>enums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>isn&apos;t<sp/>used<sp/>for<sp/>double<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal">TEST(ExpectTest,<sp/>ASSERT_EQ_Double)<sp/>{</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5.6,<sp/>5.6);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(5.1,<sp/>5.2),<sp/></highlight><highlight class="stringliteral">&quot;5.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_EQ)<sp/>{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>2<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(5,<sp/>2*3),</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>2*3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_EQ(NULL,<sp/>pointer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_EQ_NULL)<sp/>{</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/>ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;n),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&amp;n\n<sp/><sp/><sp/><sp/>Which<sp/>is:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_EQ(0,<sp/>non_pointer).<sp/><sp/>Since<sp/>the<sp/>literal<sp/>0<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>treated<sp/>as<sp/>a<sp/>null<sp/>pointer<sp/>by<sp/>the<sp/>compiler,<sp/>we<sp/>need<sp/>to<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>ASSERT_EQ(0,<sp/>non_pointer)<sp/>isn&apos;t<sp/>interpreted<sp/>by<sp/>Google<sp/>Test<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT_EQ(static_cast&lt;void*&gt;(NULL),<sp/>non_pointer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal">TEST(ExpectTest,<sp/>ASSERT_EQ_0)<sp/>{</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>n);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(0,<sp/>5.6),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>0\n<sp/><sp/>5.6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_NE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_NE)<sp/>{</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/>ASSERT_NE(6,<sp/>7);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_NE(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&apos;a&apos;)<sp/>!=<sp/>(&apos;a&apos;),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;actual:<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61)<sp/>vs<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_LE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_LE)<sp/>{</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/>ASSERT_LE(2,<sp/>3);</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/>ASSERT_LE(2,<sp/>2);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_LE(2,<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(2)<sp/>&lt;=<sp/>(0),<sp/>actual:<sp/>2<sp/>vs<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_LT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_LT)<sp/>{</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/>ASSERT_LT(2,<sp/>3);</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_LT(2,<sp/>2),<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(2)<sp/>&lt;<sp/>(2),<sp/>actual:<sp/>2<sp/>vs<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_GE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_GE)<sp/>{</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/>ASSERT_GE(2,<sp/>1);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/>ASSERT_GE(2,<sp/>2);</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_GE(2,<sp/>3),<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(2)<sp/>&gt;=<sp/>(3),<sp/>actual:<sp/>2<sp/>vs<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_GT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_GT)<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/>ASSERT_GT(2,<sp/>1);</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_GT(2,<sp/>2),<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(2)<sp/>&gt;<sp/>(2),<sp/>actual:<sp/>2<sp/>vs<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"></highlight></codeline>
<codeline lineno="3788"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ThrowNothing()<sp/>{}</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_THROW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3793"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_THROW)<sp/>{</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/>ASSERT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ICE&apos;s<sp/>in<sp/>C++Builder<sp/>2007<sp/>and<sp/>2009.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowAnInteger()<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>bool.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>it<sp/>throws<sp/>a<sp/>different<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THROW(ThrowRuntimeError(</highlight><highlight class="stringliteral">&quot;A<sp/>description&quot;</highlight><highlight class="normal">),<sp/>std::logic_error),</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowRuntimeError(\&quot;A<sp/>description\&quot;)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>std::logic_error.\n<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>it<sp/>throws<sp/>&quot;</highlight><highlight class="normal"><sp/>ERROR_DESC</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>description<sp/>\&quot;A<sp/>description\&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THROW(ThrowNothing(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowNothing()<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>bool.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>it<sp/>throws<sp/>nothing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_NO_THROW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_NO_THROW)<sp/>{</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/>ASSERT_NO_THROW(ThrowNothing());</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_NO_THROW(ThrowAnInteger()),</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowAnInteger()<sp/>doesn&apos;t<sp/>throw<sp/>an<sp/>exception.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>Actual:<sp/>it<sp/>throws.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_NO_THROW(ThrowRuntimeError(</highlight><highlight class="stringliteral">&quot;A<sp/>description&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowRuntimeError(\&quot;A<sp/>description\&quot;)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>throw<sp/>an<sp/>exception.\n<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>it<sp/>throws<sp/>&quot;</highlight><highlight class="normal"><sp/>ERROR_DESC</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>description<sp/>\&quot;A<sp/>description\&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ASSERT_ANY_THROW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal">TEST(AssertionTest,<sp/>ASSERT_ANY_THROW)<sp/>{</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/>ASSERT_ANY_THROW(ThrowAnInteger());</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_ANY_THROW(ThrowNothing()),</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowNothing()<sp/>throws<sp/>an<sp/>exception.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>it<sp/>doesn&apos;t.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>we<sp/>deal<sp/>with<sp/>the<sp/>precedence<sp/>of<sp/>&lt;&lt;.<sp/><sp/>This<sp/>test<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal">TEST(AssertionTest,<sp/>AssertPrecedence)<sp/>{</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1<sp/>&lt;<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>false_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>ASSERT_EQ(</highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>false_value,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>subroutine<sp/>used<sp/>by<sp/>the<sp/>following<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEq1(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>ASSERT_EQ(1,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>calling<sp/>a<sp/>test<sp/>subroutine<sp/>that&apos;s<sp/>not<sp/>part<sp/>of<sp/>a<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal">TEST(AssertionTest,<sp/>NonFixtureSubroutine)<sp/>{</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(TestEq1(2),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>x\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>uncopyable<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Uncopyable<sp/>{</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Uncopyable(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Uncopyable&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value()<sp/>==<sp/>rhs.value();</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>constructor<sp/>deliberately<sp/>has<sp/>no<sp/>implementation,<sp/>as<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>this<sp/>class<sp/>to<sp/>be<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/>Uncopyable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Uncopyable&amp;);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal">::std::ostream&amp;<sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Uncopyable&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>value.value();</highlight></codeline>
<codeline lineno="3878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPositiveUncopyable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Uncopyable&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.value()<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>subroutine<sp/>used<sp/>by<sp/>the<sp/>following<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestAssertNonPositive()<sp/>{</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/>Uncopyable<sp/>y(-1);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(IsPositiveUncopyable,<sp/>y);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>subroutine<sp/>used<sp/>by<sp/>the<sp/>following<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestAssertEqualsUncopyable()<sp/>{</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/>Uncopyable<sp/>x(5);</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/>Uncopyable<sp/>y(-1);</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/>ASSERT_EQ(x,<sp/>y);</highlight></codeline>
<codeline lineno="3892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>uncopyable<sp/>objects<sp/>can<sp/>be<sp/>used<sp/>in<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal">TEST(AssertionTest,<sp/>AssertWorksWithUncopyableObject)<sp/>{</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>Uncopyable<sp/>x(5);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(IsPositiveUncopyable,<sp/>x);</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/>ASSERT_EQ(x,<sp/>x);</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TestAssertNonPositive(),</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;IsPositiveUncopyable(y)<sp/>evaluates<sp/>to<sp/>false,<sp/>where\ny<sp/>evaluates<sp/>to<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(TestAssertEqualsUncopyable(),</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>x\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>5\n<sp/><sp/>y\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>uncopyable<sp/>objects<sp/>can<sp/>be<sp/>used<sp/>in<sp/>expects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal">TEST(AssertionTest,<sp/>ExpectWorksWithUncopyableObject)<sp/>{</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/>Uncopyable<sp/>x(5);</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(IsPositiveUncopyable,<sp/>x);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/>Uncopyable<sp/>y(-1);</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED1(IsPositiveUncopyable,<sp/>y),</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;IsPositiveUncopyable(y)<sp/>evaluates<sp/>to<sp/>false,<sp/>where\ny<sp/>evaluates<sp/>to<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/>EXPECT_EQ(x,<sp/>x);</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(x,<sp/>y),</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>x\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>5\n<sp/><sp/>y\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>NamedEnum<sp/>{<sp/>kE1<sp/>=<sp/>0,<sp/>kE2<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal">TEST(AssertionTest,<sp/>NamedEnum)<sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kE1,<sp/>kE1);</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/>EXPECT_LT(kE1,<sp/>kE2);</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(kE1,<sp/>kE2),<sp/></highlight><highlight class="stringliteral">&quot;Which<sp/>is:<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(kE1,<sp/>kE2),<sp/></highlight><highlight class="stringliteral">&quot;Which<sp/>is:<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sun<sp/>Studio<sp/>and<sp/>HP<sp/>aCC2reject<sp/>this<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__SUNPRO_CC)<sp/>&amp;&amp;<sp/>!defined(__HP_aCC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"></highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>assertions<sp/>with<sp/>anonymous<sp/>enums.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>kCaseA<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>test<sp/>the<sp/>case<sp/>where<sp/>the<sp/>size<sp/>of<sp/>the<sp/>anonymous<sp/>enum<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>larger<sp/>than<sp/>sizeof(int),<sp/>to<sp/>make<sp/>sure<sp/>our<sp/>implementation<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assertions<sp/>doesn&apos;t<sp/>truncate<sp/>the<sp/>enums.<sp/><sp/>However,<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(incorrectly)<sp/>doesn&apos;t<sp/>allow<sp/>an<sp/>enum<sp/>value<sp/>to<sp/>exceed<sp/>the<sp/>range<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>int,<sp/>so<sp/>this<sp/>has<sp/>to<sp/>be<sp/>conditionally<sp/>compiled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Linux,<sp/>kCaseB<sp/>and<sp/>kCaseA<sp/>have<sp/>the<sp/>same<sp/>value<sp/>when<sp/>truncated<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>size.<sp/><sp/>We<sp/>want<sp/>to<sp/>test<sp/>whether<sp/>this<sp/>will<sp/>confuse<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/>kCaseB<sp/>=<sp/>testing::internal::kMaxBiggestInt,</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/>kCaseB<sp/>=<sp/>INT_MAX,</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/>kCaseC<sp/>=<sp/>42</highlight></codeline>
<codeline lineno="3957"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal">TEST(AssertionTest,<sp/>AnonymousEnum)<sp/>{</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kCaseA),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kCaseB));</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kCaseA,<sp/>kCaseA);</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/>EXPECT_NE(kCaseA,<sp/>kCaseB);</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/>EXPECT_LT(kCaseA,<sp/>kCaseB);</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/>EXPECT_LE(kCaseA,<sp/>kCaseB);</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/>EXPECT_GT(kCaseB,<sp/>kCaseA);</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/>EXPECT_GE(kCaseA,<sp/>kCaseA);</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GE(kCaseA,<sp/>kCaseB),<sp/></highlight><highlight class="stringliteral">&quot;(kCaseA)<sp/>&gt;=<sp/>(kCaseB)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GE(kCaseA,<sp/>kCaseC),<sp/></highlight><highlight class="stringliteral">&quot;-1<sp/>vs<sp/>42&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/>ASSERT_EQ(kCaseA,<sp/>kCaseA);</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>ASSERT_NE(kCaseA,<sp/>kCaseB);</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/>ASSERT_LT(kCaseA,<sp/>kCaseB);</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>ASSERT_LE(kCaseA,<sp/>kCaseB);</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/>ASSERT_GT(kCaseB,<sp/>kCaseA);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/>ASSERT_GE(kCaseA,<sp/>kCaseA);</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ICE&apos;s<sp/>in<sp/>C++Builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(kCaseA,<sp/>kCaseB),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>kCaseB\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(kCaseA,<sp/>kCaseC),<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>42&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(kCaseA,<sp/>kCaseC),<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_MAC<sp/>&amp;&amp;<sp/>!defined(__SUNPRO_CC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HRESULT<sp/>UnexpectedHRESULTFailure()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_UNEXPECTED;<sp/>}</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HRESULT<sp/>OkHRESULTSuccess()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;<sp/>}</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HRESULT<sp/>FalseHRESULTSuccess()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_FALSE;<sp/>}</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HRESULT<sp/>assertion<sp/>tests<sp/>test<sp/>both<sp/>zero<sp/>and<sp/>non-zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>success<sp/>codes<sp/>as<sp/>well<sp/>as<sp/>failure<sp/>message<sp/>for<sp/>each.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>support<sp/>message<sp/>texts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal">TEST(HRESULTAssertionTest,<sp/>EXPECT_HRESULT_SUCCEEDED)<sp/>{</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/>EXPECT_HRESULT_SUCCEEDED(S_OK);</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/>EXPECT_HRESULT_SUCCEEDED(S_FALSE);</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_HRESULT_SUCCEEDED(UnexpectedHRESULTFailure()),</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(UnexpectedHRESULTFailure())<sp/>succeeds.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>0x8000FFFF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal">TEST(HRESULTAssertionTest,<sp/>ASSERT_HRESULT_SUCCEEDED)<sp/>{</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/>ASSERT_HRESULT_SUCCEEDED(S_OK);</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/>ASSERT_HRESULT_SUCCEEDED(S_FALSE);</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_HRESULT_SUCCEEDED(UnexpectedHRESULTFailure()),</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(UnexpectedHRESULTFailure())<sp/>succeeds.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>0x8000FFFF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"></highlight></codeline>
<codeline lineno="4024"><highlight class="normal">TEST(HRESULTAssertionTest,<sp/>EXPECT_HRESULT_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/>EXPECT_HRESULT_FAILED(E_UNEXPECTED);</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_HRESULT_FAILED(OkHRESULTSuccess()),</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(OkHRESULTSuccess())<sp/>fails.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>0x0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_HRESULT_FAILED(FalseHRESULTSuccess()),</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(FalseHRESULTSuccess())<sp/>fails.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>0x1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal">TEST(HRESULTAssertionTest,<sp/>ASSERT_HRESULT_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/>ASSERT_HRESULT_FAILED(E_UNEXPECTED);</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ICE&apos;s<sp/>in<sp/>C++Builder<sp/>2007<sp/>and<sp/>2009.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_HRESULT_FAILED(OkHRESULTSuccess()),</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(OkHRESULTSuccess())<sp/>fails.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>0x0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_HRESULT_FAILED(FalseHRESULTSuccess()),</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(FalseHRESULTSuccess())<sp/>fails.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>0x1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>streaming<sp/>to<sp/>the<sp/>HRESULT<sp/>macros<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal">TEST(HRESULTAssertionTest,<sp/>Streaming)<sp/>{</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/>EXPECT_HRESULT_SUCCEEDED(S_OK)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/>ASSERT_HRESULT_SUCCEEDED(S_OK)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/>EXPECT_HRESULT_FAILED(E_UNEXPECTED)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/>ASSERT_HRESULT_FAILED(E_UNEXPECTED)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_HRESULT_SUCCEEDED(E_UNEXPECTED)</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ICE&apos;s<sp/>in<sp/>C++Builder<sp/>2007<sp/>and<sp/>2009.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_HRESULT_SUCCEEDED(E_UNEXPECTED)</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_HRESULT_FAILED(S_OK)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_HRESULT_FAILED(S_OK)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>intentionally<sp/>tests<sp/>a<sp/>suboptimal<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdangling-else&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wempty-body&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpragmas&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>assertion<sp/>macros<sp/>behave<sp/>like<sp/>single<sp/>statements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal">TEST(AssertionSyntaxTest,<sp/>BasicAssertionsBehavesLikeSingleStatement)<sp/>{</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>never<sp/>be<sp/>executed;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;It&apos;s<sp/>a<sp/>compilation<sp/>test<sp/>only.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())<sp/>ASSERT_LT(1,<sp/>3);</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(3,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>compiler<sp/>will<sp/>not<sp/>complain<sp/>about<sp/>unreachable<sp/>code<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_THROW/EXPECT_ANY_THROW/EXPECT_NO_THROW<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal">TEST(ExpectThrowTest,<sp/>DoesNotGenerateUnreachableCodeWarning)<sp/>{</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THROW(n++,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THROW(</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/>EXPECT_NO_THROW(n++);</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NO_THROW(</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/>EXPECT_ANY_THROW(</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>1);</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_ANY_THROW(n++),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal">TEST(ExpectThrowTest,<sp/>DoesNotGenerateDuplicateCatchClauseWarning)<sp/>{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception(),<sp/>std::exception);</highlight></codeline>
<codeline lineno="4125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>intentionally<sp/>tests<sp/>a<sp/>suboptimal<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdangling-else&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wempty-body&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpragmas&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal">TEST(AssertionSyntaxTest,<sp/>ExceptionAssertionsBehavesLikeSingleStatement)<sp/>{</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())<sp/>EXPECT_THROW(ThrowNothing(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())<sp/>EXPECT_NO_THROW(ThrowAnInteger());</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NO_THROW(ThrowNothing());</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())<sp/>EXPECT_ANY_THROW(ThrowNothing());</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_ANY_THROW(ThrowAnInteger());</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>intentionally<sp/>tests<sp/>a<sp/>suboptimal<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdangling-else&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wempty-body&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpragmas&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal">TEST(AssertionSyntaxTest,<sp/>NoFatalFailureAssertionsBehavesLikeSingleStatement)<sp/>{</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NO_FATAL_FAILURE(FAIL())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>never<sp/>be<sp/>executed.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;It&apos;s<sp/>a<sp/>compilation<sp/>test<sp/>only.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_NO_FATAL_FAILURE(FAIL())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NO_FATAL_FAILURE(SUCCEED());</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_NO_FATAL_FAILURE(SUCCEED());</highlight></codeline>
<codeline lineno="4190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>assertion<sp/>macros<sp/>work<sp/>well<sp/>with<sp/>switch<sp/>statements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal">TEST(AssertionSyntaxTest,<sp/>WorksWithSwitch)<sp/>{</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(0)<sp/>{</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(0)</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EXPECT_FALSE<sp/>failed<sp/>in<sp/>switch<sp/>case&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>assertions<sp/>are<sp/>implemented<sp/>using<sp/>a<sp/>different<sp/>code<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>the<sp/>Boolean<sp/>assertions.<sp/><sp/>Hence<sp/>we<sp/>test<sp/>them<sp/>separately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(0)<sp/>{</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ASSERT_EQ<sp/>failed<sp/>in<sp/>default<sp/>switch<sp/>handler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(0)</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(1,<sp/>2);</highlight></codeline>
<codeline lineno="4219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"></highlight></codeline>
<codeline lineno="4221"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ThrowAString()<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;std::string&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>the<sp/>exception<sp/>assertion<sp/>macros<sp/>compile<sp/>and<sp/>work<sp/>with<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>qualifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4227"><highlight class="normal">TEST(AssertionSyntaxTest,<sp/>WorksWithConst)<sp/>{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/>ASSERT_THROW(ThrowAString(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/>EXPECT_THROW(ThrowAString(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="4231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Test<sp/>tracks<sp/>SUCCEED*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal">TEST(SuccessfulAssertionTest,<sp/>SUCCEED)<sp/>{</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/>SUCCEED();</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/>SUCCEED()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>GetUnitTestImpl()-&gt;current_test_result()-&gt;total_part_count());</highlight></codeline>
<codeline lineno="4244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Test<sp/>doesn&apos;t<sp/>track<sp/>successful<sp/>EXPECT_*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal">TEST(SuccessfulAssertionTest,<sp/>EXPECT)<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>GetUnitTestImpl()-&gt;current_test_result()-&gt;total_part_count());</highlight></codeline>
<codeline lineno="4250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Test<sp/>doesn&apos;t<sp/>track<sp/>successful<sp/>EXPECT_STR*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal">TEST(SuccessfulAssertionTest,<sp/>EXPECT_STR)<sp/>{</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>GetUnitTestImpl()-&gt;current_test_result()-&gt;total_part_count());</highlight></codeline>
<codeline lineno="4256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Test<sp/>doesn&apos;t<sp/>track<sp/>successful<sp/>ASSERT_*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal">TEST(SuccessfulAssertionTest,<sp/>ASSERT)<sp/>{</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>GetUnitTestImpl()-&gt;current_test_result()-&gt;total_part_count());</highlight></codeline>
<codeline lineno="4262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Test<sp/>doesn&apos;t<sp/>track<sp/>successful<sp/>ASSERT_STR*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal">TEST(SuccessfulAssertionTest,<sp/>ASSERT_STR)<sp/>{</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>GetUnitTestImpl()-&gt;current_test_result()-&gt;total_part_count());</highlight></codeline>
<codeline lineno="4268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>message<sp/>streaming<sp/>variation<sp/>of<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight></codeline>
<codeline lineno="4276"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>EXPECT)<sp/>{</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NE(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#1.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/>EXPECT_LE(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_LT(1,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#2.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/>EXPECT_GE(1,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GT(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#3.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRNE(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#4.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#4.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/>EXPECT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRCASENE(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#5.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#5.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(1,<sp/>1.2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#6.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#6.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(1,<sp/>1.1,<sp/>0.2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>ASSERT)<sp/>{</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/>ASSERT_NE(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/>ASSERT_LE(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/>ASSERT_LT(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/>ASSERT_GE(1,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_GT(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>ASSERT_STR)<sp/>{</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/>ASSERT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>ASSERT_FLOATING)<sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/>ASSERT_FLOAT_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/>ASSERT_DOUBLE_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_NEAR(1,<sp/>1.2,<sp/>0.1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expect<sp/>failure.&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expect<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ASSERT_FALSE<sp/>with<sp/>a<sp/>streamed<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>ASSERT_FALSE)<sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>shouldn&apos;t<sp/>fail.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_FALSE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>1</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>FAIL<sp/>with<sp/>a<sp/>streamed<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>FAIL)<sp/>{<sp/>EXPECT_FATAL_FAILURE(FAIL()<sp/>&lt;&lt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>SUCCEED<sp/>with<sp/>a<sp/>streamed<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>SUCCEED)<sp/>{<sp/>SUCCEED()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Success<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ASSERT_TRUE<sp/>with<sp/>a<sp/>streamed<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4343"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>ASSERT_TRUE)<sp/>{</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(null)(null)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>wide<sp/>strings<sp/>in<sp/>assertion<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal">TEST(AssertionWithMessageTest,<sp/>WideStringMessage)<sp/>{</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>L</highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.\x8119&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>L</highlight><highlight class="stringliteral">&quot;expected<sp/>too.\x8120&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected<sp/>too.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_TRUE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_TRUE)<sp/>{</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>success&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure<sp/>#1.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure<sp/>#1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure<sp/>#2.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure<sp/>#2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(2<sp/>&gt;<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(2<sp/>&lt;<sp/>1),</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>2<sp/>&lt;<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>false\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(2<sp/>&gt;<sp/>3),<sp/></highlight><highlight class="stringliteral">&quot;2<sp/>&gt;<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_TRUE(predicate)<sp/>for<sp/>predicates<sp/>returning<sp/>AssertionResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal">TEST(ExpectTest,<sp/>ExpectTrueWithAssertionResult)<sp/>{</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ResultIsEven(2));</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(ResultIsEven(3)),</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>ResultIsEven(3)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>false<sp/>(3<sp/>is<sp/>odd)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ResultIsEvenNoExplanation(2));</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(ResultIsEvenNoExplanation(3)),</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>ResultIsEvenNoExplanation(3)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>false<sp/>(3<sp/>is<sp/>odd)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"></highlight></codeline>
<codeline lineno="4399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_FALSE<sp/>with<sp/>a<sp/>streamed<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4400"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_FALSE)<sp/>{</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(2<sp/>&lt;<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>success&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FALSE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure<sp/>#1.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure<sp/>#1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FALSE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure<sp/>#2.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure<sp/>#2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FALSE(2<sp/>&gt;<sp/>1),</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>2<sp/>&gt;<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>true\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FALSE(2<sp/>&lt;<sp/>3),<sp/></highlight><highlight class="stringliteral">&quot;2<sp/>&lt;<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_FALSE(predicate)<sp/>for<sp/>predicates<sp/>returning<sp/>AssertionResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal">TEST(ExpectTest,<sp/>ExpectFalseWithAssertionResult)<sp/>{</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ResultIsEven(3));</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FALSE(ResultIsEven(2)),</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>ResultIsEven(2)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>true<sp/>(2<sp/>is<sp/>even)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ResultIsEvenNoExplanation(3));</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FALSE(ResultIsEvenNoExplanation(2)),</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>ResultIsEvenNoExplanation(2)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>true\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>warnings<sp/>after<sp/>previous<sp/>&quot;#pragma<sp/>option<sp/>push&quot;<sp/>suppressed<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4434"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_EQ)<sp/>{</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>2<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(5,<sp/>2*3),</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>2*3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(5,<sp/>2<sp/>-<sp/>3),<sp/></highlight><highlight class="stringliteral">&quot;2<sp/>-<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>EXPECT_EQ<sp/>on<sp/>double<sp/>values.<sp/><sp/>The<sp/>purpose<sp/>is<sp/>to<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sure<sp/>that<sp/>the<sp/>specialization<sp/>we<sp/>did<sp/>for<sp/>integer<sp/>and<sp/>anonymous<sp/>enums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>isn&apos;t<sp/>used<sp/>for<sp/>double<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4449"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_EQ_Double)<sp/>{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5.6,<sp/>5.6);</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(5.1,<sp/>5.2),<sp/></highlight><highlight class="stringliteral">&quot;5.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_EQ(NULL,<sp/>pointer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_EQ_NULL)<sp/>{</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;n),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&amp;n\n<sp/><sp/><sp/><sp/>Which<sp/>is:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_EQ(0,<sp/>non_pointer).<sp/><sp/>Since<sp/>the<sp/>literal<sp/>0<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>treated<sp/>as<sp/>a<sp/>null<sp/>pointer<sp/>by<sp/>the<sp/>compiler,<sp/>we<sp/>need<sp/>to<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>EXPECT_EQ(0,<sp/>non_pointer)<sp/>isn&apos;t<sp/>interpreted<sp/>by<sp/>Google<sp/>Test<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_EQ(static_cast&lt;void*&gt;(NULL),<sp/>non_pointer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_EQ_0)<sp/>{</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(0,<sp/>5.6),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>0\n<sp/><sp/>5.6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_NE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_NE)<sp/>{</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/>EXPECT_NE(6,<sp/>7);</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NE(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&apos;a&apos;)<sp/>!=<sp/>(&apos;a&apos;),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;actual:<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61)<sp/>vs<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NE(2,<sp/>2),<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NE(p0,<sp/>p0),<sp/></highlight><highlight class="stringliteral">&quot;p0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>way<sp/>to<sp/>get<sp/>the<sp/>Nokia<sp/>compiler<sp/>to<sp/>compile<sp/>the<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>have<sp/>a<sp/>separate<sp/>void*<sp/>variable<sp/>first.<sp/>Putting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>two<sp/>casts<sp/>on<sp/>the<sp/>same<sp/>line<sp/>doesn&apos;t<sp/>work,<sp/>neither<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>direct<sp/>C-style<sp/>to<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pv1<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x1234;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pv1);</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NE(p1,<sp/>p1),<sp/></highlight><highlight class="stringliteral">&quot;p1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_LE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_LE)<sp/>{</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/>EXPECT_LE(2,<sp/>3);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/>EXPECT_LE(2,<sp/>2);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_LE(2,<sp/>0),</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(2)<sp/>&lt;=<sp/>(0),<sp/>actual:<sp/>2<sp/>vs<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_LE(1.1,<sp/>0.9),<sp/></highlight><highlight class="stringliteral">&quot;(1.1)<sp/>&lt;=<sp/>(0.9)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_LT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_LT)<sp/>{</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/>EXPECT_LT(2,<sp/>3);</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_LT(2,<sp/>2),</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(2)<sp/>&lt;<sp/>(2),<sp/>actual:<sp/>2<sp/>vs<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_LT(2,<sp/>1),<sp/></highlight><highlight class="stringliteral">&quot;(2)<sp/>&lt;<sp/>(1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_GE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4519"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_GE)<sp/>{</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/>EXPECT_GE(2,<sp/>1);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/>EXPECT_GE(2,<sp/>2);</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GE(2,<sp/>3),</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(2)<sp/>&gt;=<sp/>(3),<sp/>actual:<sp/>2<sp/>vs<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GE(0.9,<sp/>1.1),<sp/></highlight><highlight class="stringliteral">&quot;(0.9)<sp/>&gt;=<sp/>(1.1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"></highlight></codeline>
<codeline lineno="4527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_GT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_GT)<sp/>{</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/>EXPECT_GT(2,<sp/>1);</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GT(2,<sp/>2),</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(2)<sp/>&gt;<sp/>(2),<sp/>actual:<sp/>2<sp/>vs<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GT(2,<sp/>3),<sp/></highlight><highlight class="stringliteral">&quot;(2)<sp/>&gt;<sp/>(3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_THROW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4538"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_THROW)<sp/>{</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/>EXPECT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowAnInteger()<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type<sp/>bool.\n<sp/><sp/>Actual:<sp/>it<sp/>throws<sp/>a<sp/>different<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(ThrowRuntimeError(</highlight><highlight class="stringliteral">&quot;A<sp/>description&quot;</highlight><highlight class="normal">),<sp/>std::logic_error),</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowRuntimeError(\&quot;A<sp/>description\&quot;)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>std::logic_error.\n<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>it<sp/>throws<sp/>&quot;</highlight><highlight class="normal"><sp/>ERROR_DESC</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>description<sp/>\&quot;A<sp/>description\&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(ThrowNothing(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowNothing()<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>bool.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>it<sp/>throws<sp/>nothing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_NO_THROW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4557"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_NO_THROW)<sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/>EXPECT_NO_THROW(ThrowNothing());</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NO_THROW(ThrowAnInteger()),</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowAnInteger()<sp/>doesn&apos;t<sp/>throw<sp/>an<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception.\n<sp/><sp/>Actual:<sp/>it<sp/>throws.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NO_THROW(ThrowRuntimeError(</highlight><highlight class="stringliteral">&quot;A<sp/>description&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowRuntimeError(\&quot;A<sp/>description\&quot;)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>throw<sp/>an<sp/>exception.\n<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>it<sp/>throws<sp/>&quot;</highlight><highlight class="normal"><sp/>ERROR_DESC</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>description<sp/>\&quot;A<sp/>description\&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EXPECT_ANY_THROW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal">TEST(ExpectTest,<sp/>EXPECT_ANY_THROW)<sp/>{</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/>EXPECT_ANY_THROW(ThrowAnInteger());</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_ANY_THROW(ThrowNothing()),</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ThrowNothing()<sp/>throws<sp/>an<sp/>exception.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>it<sp/>doesn&apos;t.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>deal<sp/>with<sp/>the<sp/>precedence<sp/>of<sp/>&lt;&lt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal">TEST(ExpectTest,<sp/>ExpectPrecedence)<sp/>{</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1<sp/>&lt;<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>true<sp/>&amp;&amp;<sp/>false\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>StreamableToString()<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>StreamableToString()<sp/>on<sp/>a<sp/>scalar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal">TEST(StreamableToStringTest,<sp/>Scalar)<sp/>{</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/>StreamableToString(5).c_str());</highlight></codeline>
<codeline lineno="4592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>StreamableToString()<sp/>on<sp/>a<sp/>non-char<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal">TEST(StreamableToStringTest,<sp/>Pointer)<sp/>{</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>&amp;n;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/>EXPECT_STRNE(</highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">,<sp/>StreamableToString(p).c_str());</highlight></codeline>
<codeline lineno="4599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>StreamableToString()<sp/>on<sp/>a<sp/>NULL<sp/>non-char<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal">TEST(StreamableToStringTest,<sp/>NullPointer)<sp/>{</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">,<sp/>StreamableToString(p).c_str());</highlight></codeline>
<codeline lineno="4605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>StreamableToString()<sp/>on<sp/>a<sp/>C<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal">TEST(StreamableToStringTest,<sp/>CString)<sp/>{</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">,<sp/>StreamableToString(</highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"></highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>StreamableToString()<sp/>on<sp/>a<sp/>NULL<sp/>C<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4613"><highlight class="normal">TEST(StreamableToStringTest,<sp/>NullCString)<sp/>{</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">,<sp/>StreamableToString(p).c_str());</highlight></codeline>
<codeline lineno="4616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>streamable<sp/>values<sp/>as<sp/>assertion<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>std::string<sp/>as<sp/>an<sp/>assertion<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal">TEST(StreamableTest,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>str(</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>message<sp/>is<sp/>a<sp/>std::string,<sp/>and<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(FAIL()<sp/>&lt;&lt;<sp/>str,<sp/>str.c_str());</highlight></codeline>
<codeline lineno="4625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>output<sp/>strings<sp/>containing<sp/>embedded<sp/>NULs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Limited<sp/>to<sp/>Linux<sp/>because<sp/>we<sp/>can<sp/>only<sp/>do<sp/>this<sp/>with<sp/>std::string&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4629"><highlight class="normal">TEST(StreamableTest,<sp/>stringWithEmbeddedNUL)<sp/>{</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>char_array_with_nul[]<sp/>=</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Here&apos;s<sp/>a<sp/>NUL\0<sp/>and<sp/>some<sp/>more<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>string_with_nul(</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>char_array_with_nul,</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char_array_with_nul)<sp/>-<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>drops<sp/>the<sp/>trailing<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(FAIL()<sp/>&lt;&lt;<sp/>string_with_nul,</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Here&apos;s<sp/>a<sp/>NUL\\0<sp/>and<sp/>some<sp/>more<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>output<sp/>a<sp/>NUL<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal">TEST(StreamableTest,<sp/>NULChar)<sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>NUL&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>some<sp/>more<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>NUL\\0<sp/>and<sp/>some<sp/>more<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"></highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>int<sp/>as<sp/>an<sp/>assertion<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal">TEST(StreamableTest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/>EXPECT_FATAL_FAILURE(FAIL()<sp/>&lt;&lt;<sp/>900913,<sp/></highlight><highlight class="stringliteral">&quot;900913&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>NULL<sp/>char<sp/>pointer<sp/>as<sp/>an<sp/>assertion<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>MSVC,<sp/>streaming<sp/>a<sp/>NULL<sp/>char<sp/>*<sp/>causes<sp/>access<sp/>violation.<sp/><sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implemented<sp/>a<sp/>workaround<sp/>(substituting<sp/>&quot;(null)&quot;<sp/>for<sp/>NULL).<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests<sp/>whether<sp/>the<sp/>workaround<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal">TEST(StreamableTest,<sp/>NullCharPtr)<sp/>{</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>basic<sp/>IO<sp/>manipulators<sp/>(endl,<sp/>ends,<sp/>and<sp/>flush)<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>streamed<sp/>to<sp/>testing::Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal">TEST(StreamableTest,<sp/>BasicIoManip)<sp/>{</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>1.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>NUL<sp/>char<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::ends<sp/>&lt;&lt;<sp/>std::flush<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>line<sp/>2.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>1.\nA<sp/>NUL<sp/>char<sp/>\\0<sp/>in<sp/>line<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>macros<sp/>that<sp/>haven&apos;t<sp/>been<sp/>covered<sp/>so<sp/>far.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddFailureHelper(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>aborted)<sp/>{</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ADD_FAILURE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal">TEST(MacroTest,<sp/>ADD_FAILURE)<sp/>{</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(AddFailureHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(aborted);</highlight></codeline>
<codeline lineno="4684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ADD_FAILURE_AT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal">TEST(MacroTest,<sp/>ADD_FAILURE_AT)<sp/>{</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>ADD_FAILURE_AT<sp/>does<sp/>generate<sp/>a<sp/>nonfatal<sp/>failure<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>failure<sp/>message<sp/>contains<sp/>the<sp/>user-streamed<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ADD_FAILURE_AT(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Wrong!&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Wrong!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>user-streamed<sp/>part<sp/>is<sp/>optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ADD_FAILURE_AT(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42),<sp/></highlight><highlight class="stringliteral">&quot;Failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately,<sp/>we<sp/>cannot<sp/>verify<sp/>that<sp/>the<sp/>failure<sp/>message<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>right<sp/>file<sp/>path<sp/>and<sp/>line<sp/>number<sp/>the<sp/>same<sp/>way,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_NONFATAL_FAILURE()<sp/>doesn&apos;t<sp/>get<sp/>to<sp/>see<sp/>the<sp/>file<sp/>path<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>line<sp/>number.<sp/><sp/>Instead,<sp/>we<sp/>do<sp/>that<sp/>in<sp/>googletest-output-test_.cc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"></highlight></codeline>
<codeline lineno="4701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>FAIL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal">TEST(MacroTest,<sp/>FAIL)<sp/>{</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(FAIL(),<sp/></highlight><highlight class="stringliteral">&quot;Failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Intentional<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>GTEST_FAIL_AT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal">TEST(MacroTest,<sp/>GTEST_FAIL_AT)<sp/>{</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>GTEST_FAIL_AT<sp/>does<sp/>generate<sp/>a<sp/>fatal<sp/>failure<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>failure<sp/>message<sp/>contains<sp/>the<sp/>user-streamed<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_FAIL_AT(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Wrong!&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Wrong!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"></highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>user-streamed<sp/>part<sp/>is<sp/>optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_FAIL_AT(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42),<sp/></highlight><highlight class="stringliteral">&quot;Failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>ADD_FAIL_AT<sp/>test<sp/>above<sp/>to<sp/>see<sp/>how<sp/>we<sp/>test<sp/>that<sp/>the<sp/>failure<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contains<sp/>the<sp/>right<sp/>filename<sp/>and<sp/>line<sp/>number<sp/>--<sp/>the<sp/>same<sp/>applies<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>SUCCEED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal">TEST(MacroTest,<sp/>SUCCEED)<sp/>{</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/>SUCCEED();</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/>SUCCEED()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Explicit<sp/>success.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>EXPECT_EQ()<sp/>and<sp/>ASSERT_EQ().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>tests<sp/>fail<sp/>*intentionally*,<sp/>s.t.<sp/>the<sp/>failure<sp/>messages<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generated<sp/>and<sp/>tested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>different<sp/>tests<sp/>for<sp/>different<sp/>argument<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>bool<sp/>values<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal">TEST(EqAssertionTest,<sp/><ref refid="structBool" kindref="compound">Bool</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>false_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(false_value,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>false_value\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>false\n<sp/><sp/>true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"></highlight></codeline>
<codeline lineno="4745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>int<sp/>values<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal">TEST(EqAssertionTest,<sp/>Int)<sp/>{</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/>ASSERT_EQ(32,<sp/>32);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(32,<sp/>33),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>32\n<sp/><sp/>33&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>time_t<sp/>values<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal">TEST(EqAssertionTest,<sp/>Time_T)<sp/>{</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">time_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">time_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0));</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">time_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">time_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1234)),<sp/></highlight><highlight class="stringliteral">&quot;1234&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>char<sp/>values<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal">TEST(EqAssertionTest,<sp/>Char)<sp/>{</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/>ASSERT_EQ(</highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>ch\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>&apos;b&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>ch),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>ch\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>&apos;b&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>wchar_t<sp/>values<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal">TEST(EqAssertionTest,<sp/>WideChar)<sp/>{</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/>EXPECT_EQ(L</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>equality<sp/>of<sp/>these<sp/>values:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>L&apos;\0&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>L&apos;\0&apos;<sp/>(0,<sp/>0x0)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>L&apos;x&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>L&apos;x&apos;<sp/>(120,<sp/>0x78)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wchar;</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/>wchar<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(L</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>wchar),<sp/></highlight><highlight class="stringliteral">&quot;wchar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/>wchar<sp/>=<sp/>0x8119;</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x8120),<sp/>wchar),</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>wchar\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>L&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>::std::string<sp/>values<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal">TEST(EqAssertionTest,<sp/>StdString)<sp/>{</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>a<sp/>const<sp/>char*<sp/>to<sp/>an<sp/>std::string<sp/>that<sp/>has<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/>ASSERT_EQ(</highlight><highlight class="stringliteral">&quot;Test&quot;</highlight><highlight class="normal">,<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;Test&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>identical<sp/>std::strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::std::string<sp/>str1(</highlight><highlight class="stringliteral">&quot;A<sp/>*<sp/>in<sp/>the<sp/>middle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const<sp/>::std::string<sp/>str2(str1);</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str1,<sp/>str2);</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>a<sp/>const<sp/>char*<sp/>to<sp/>an<sp/>std::string<sp/>that<sp/>has<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Test&quot;</highlight><highlight class="normal">,<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)),<sp/></highlight><highlight class="stringliteral">&quot;\&quot;test\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>an<sp/>std::string<sp/>to<sp/>a<sp/>char*<sp/>that<sp/>has<sp/>different<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(::std::string(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),<sp/>p1),<sp/></highlight><highlight class="stringliteral">&quot;p1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"></highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>std::strings<sp/>that<sp/>have<sp/>different<sp/>contents,<sp/>one<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>having<sp/>a<sp/>NUL<sp/>character<sp/>in<sp/>the<sp/>middle.<sp/><sp/>This<sp/>should<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/>static<sp/>::std::string<sp/>str3(str1);</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/>str3.at(2)<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(str1,<sp/>str3),</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>str3\n<sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>\&quot;A<sp/>\\0<sp/>in<sp/>the<sp/>middle\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"></highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>::std::wstring<sp/>values<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4815"><highlight class="normal">TEST(EqAssertionTest,<sp/>StdWideString)<sp/>{</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>identical<sp/>std::wstrings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/>const<sp/>::std::wstring<sp/>wstr1(L</highlight><highlight class="stringliteral">&quot;A<sp/>*<sp/>in<sp/>the<sp/>middle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/>const<sp/>::std::wstring<sp/>wstr2(wstr1);</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/>ASSERT_EQ(wstr1,<sp/>wstr2);</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"></highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>an<sp/>std::wstring<sp/>to<sp/>a<sp/>const<sp/>wchar_t*<sp/>that<sp/>has<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>kTestX8119[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/>0x8119,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/>EXPECT_EQ(::std::wstring(kTestX8119),<sp/>kTestX8119);</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"></highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>an<sp/>std::wstring<sp/>to<sp/>a<sp/>const<sp/>wchar_t*<sp/>that<sp/>has<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>kTestX8120[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/>0x8120,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(::std::wstring(kTestX8119),<sp/>kTestX8120);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kTestX8120&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>std::wstrings<sp/>that<sp/>have<sp/>different<sp/>contents,<sp/>one<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>having<sp/>a<sp/>NUL<sp/>character<sp/>in<sp/>the<sp/>middle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/>::std::wstring<sp/>wstr3(wstr1);</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/>wstr3.at(2)<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(wstr1,<sp/>wstr3),<sp/></highlight><highlight class="stringliteral">&quot;wstr3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"></highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>a<sp/>wchar_t*<sp/>to<sp/>an<sp/>std::wstring<sp/>that<sp/>has<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/>::std::wstring(L</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"></highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>char<sp/>pointers<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4853"><highlight class="normal">TEST(EqAssertionTest,<sp/>CharPointer)<sp/>{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>way<sp/>to<sp/>get<sp/>the<sp/>Nokia<sp/>compiler<sp/>to<sp/>compile<sp/>the<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>have<sp/>a<sp/>separate<sp/>void*<sp/>variable<sp/>first.<sp/>Putting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>two<sp/>casts<sp/>on<sp/>the<sp/>same<sp/>line<sp/>doesn&apos;t<sp/>work,<sp/>neither<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>direct<sp/>C-style<sp/>to<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pv1<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x1234;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pv2<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0xABC0;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pv1);</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pv2);</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/>ASSERT_EQ(p1,<sp/>p1);</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"></highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(p0,<sp/>p2),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>p2\n<sp/><sp/><sp/><sp/>Which<sp/>is:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(p1,<sp/>p2),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>p2\n<sp/><sp/><sp/><sp/>Which<sp/>is:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x1234),</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xABC0)),</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ABC0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"></highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>wchar_t<sp/>pointers<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal">TEST(EqAssertionTest,<sp/>WideCharPointer)<sp/>{</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>way<sp/>to<sp/>get<sp/>the<sp/>Nokia<sp/>compiler<sp/>to<sp/>compile<sp/>the<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>have<sp/>a<sp/>separate<sp/>void*<sp/>variable<sp/>first.<sp/>Putting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>two<sp/>casts<sp/>on<sp/>the<sp/>same<sp/>line<sp/>doesn&apos;t<sp/>work,<sp/>neither<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>direct<sp/>C-style<sp/>to<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pv1<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x1234;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pv2<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0xABC0;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pv1);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pv2);</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/>EXPECT_EQ(p0,<sp/>p0);</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"></highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(p0,<sp/>p2),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>p2\n<sp/><sp/><sp/><sp/>Which<sp/>is:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(p1,<sp/>p2),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>p2\n<sp/><sp/><sp/><sp/>Which<sp/>is:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pv3<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x1234;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pv4<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0xABC0;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>p3<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pv3);</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>p4<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pv4);</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(p3,<sp/>p4),<sp/></highlight><highlight class="stringliteral">&quot;p4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>other<sp/>types<sp/>of<sp/>pointers<sp/>in<sp/>{EXPECT|ASSERT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal">TEST(EqAssertionTest,<sp/>OtherPointer)<sp/>{</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/>ASSERT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x1234)),</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0x1234&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>that<sp/>supports<sp/>binary<sp/>comparison<sp/>operators<sp/>but<sp/>not<sp/>streaming.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnprintableChar<sp/>{</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>UnprintableChar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>:<sp/>char_(ch)<sp/>{}</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnprintableChar&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char_<sp/>==<sp/>rhs.char_;</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnprintableChar&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char_<sp/>!=<sp/>rhs.char_;</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnprintableChar&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char_<sp/>&lt;<sp/>rhs.char_;<sp/>}</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnprintableChar&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char_<sp/>&lt;=<sp/>rhs.char_;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnprintableChar&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char_<sp/>&gt;<sp/>rhs.char_;<sp/>}</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnprintableChar&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char_<sp/>&gt;=<sp/>rhs.char_;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>char_;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_EQ()<sp/>and<sp/>friends<sp/>don&apos;t<sp/>require<sp/>the<sp/>arguments<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>printable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal">TEST(ComparisonAssertionTest,<sp/>AcceptsUnprintableArgs)<sp/>{</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnprintableChar<sp/>x(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">),<sp/>y(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/>ASSERT_EQ(x,<sp/>x);</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/>EXPECT_NE(x,<sp/>y);</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/>ASSERT_LT(x,<sp/>y);</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/>EXPECT_LE(x,<sp/>y);</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/>ASSERT_GT(y,<sp/>x);</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/>EXPECT_GE(x,<sp/>x);</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"></highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(x,<sp/>y),<sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;78&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(x,<sp/>y),<sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;79&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_LT(y,<sp/>y),<sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;79&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GT(x,<sp/>y),<sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;78&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_GT(x,<sp/>y),<sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;79&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Code<sp/>tested<sp/>by<sp/>EXPECT_FATAL_FAILURE<sp/>cannot<sp/>reference<sp/>local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variables,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>write<sp/>UnprintableChar(&apos;x&apos;)<sp/>instead<sp/>of<sp/>x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ICE&apos;s<sp/>in<sp/>C++Builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_NE(UnprintableChar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">),<sp/>UnprintableChar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;78&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_LE(UnprintableChar(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">),<sp/>UnprintableChar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;78&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_LE(UnprintableChar(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">),<sp/>UnprintableChar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;79&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_GE(UnprintableChar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">),<sp/>UnprintableChar(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;78&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_GE(UnprintableChar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">),<sp/>UnprintableChar(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;79&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>FRIEND_TEST<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>has<sp/>a<sp/>private<sp/>member<sp/>we<sp/>want<sp/>to<sp/>test.<sp/><sp/>We<sp/>will<sp/>test<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>in<sp/>a<sp/>TEST<sp/>and<sp/>in<sp/>a<sp/>TEST_F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Foo<sp/>{</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/>Foo()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bar()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Declares<sp/>the<sp/>friend<sp/>tests<sp/>that<sp/>can<sp/>access<sp/>the<sp/>private<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bar().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/>FRIEND_TEST(FRIEND_TEST_Test,<sp/>TEST);</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/>FRIEND_TEST(FRIEND_TEST_Test2,<sp/>TEST_F);</highlight></codeline>
<codeline lineno="4975"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>FRIEND_TEST<sp/>declaration<sp/>allows<sp/>a<sp/>TEST<sp/>to<sp/>access<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class&apos;s<sp/>private<sp/>members.<sp/><sp/>This<sp/>should<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal">TEST(FRIEND_TEST_Test,<sp/>TEST)<sp/>{<sp/>ASSERT_EQ(1,<sp/>Foo().Bar());<sp/>}</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"></highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>fixture<sp/>needed<sp/>to<sp/>test<sp/>using<sp/>FRIEND_TEST<sp/>with<sp/>TEST_F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FRIEND_TEST_Test2<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>FRIEND_TEST<sp/>declaration<sp/>allows<sp/>a<sp/>TEST_F<sp/>to<sp/>access<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class&apos;s<sp/>private<sp/>members.<sp/><sp/>This<sp/>should<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4989"><highlight class="normal">TEST_F(FRIEND_TEST_Test2,<sp/>TEST_F)<sp/>{<sp/>ASSERT_EQ(1,<sp/>foo.Bar());<sp/>}</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>life<sp/>cycle<sp/>of<sp/>Test<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>test<sp/>fixture<sp/>for<sp/>testing<sp/>the<sp/>life<sp/>cycle<sp/>of<sp/>Test<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>counts<sp/>the<sp/>number<sp/>of<sp/>live<sp/>test<sp/>objects<sp/>that<sp/>uses<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4997"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestLifeCycleTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor.<sp/><sp/>Increments<sp/>the<sp/>number<sp/>of<sp/>test<sp/>objects<sp/>that<sp/>uses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/>TestLifeCycleTest()<sp/>{<sp/>count_++;<sp/>}</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructor.<sp/><sp/>Decrements<sp/>the<sp/>number<sp/>of<sp/>test<sp/>objects<sp/>that<sp/>uses<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/>~TestLifeCycleTest()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>count_--;<sp/>}</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>live<sp/>test<sp/>objects<sp/>that<sp/>uses<sp/>this<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_;<sp/>}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"></highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestLifeCycleTest::count_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"></highlight></codeline>
<codeline lineno="5016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>life<sp/>cycle<sp/>of<sp/>test<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5017"><highlight class="normal">TEST_F(TestLifeCycleTest,<sp/>Test1)<sp/>{</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>only<sp/>one<sp/>test<sp/>object<sp/>in<sp/>this<sp/>test<sp/>case<sp/>that&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>alive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>count());</highlight></codeline>
<codeline lineno="5021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>life<sp/>cycle<sp/>of<sp/>test<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal">TEST_F(TestLifeCycleTest,<sp/>Test2)<sp/>{</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>Test1<sp/>is<sp/>done<sp/>and<sp/>Test2<sp/>is<sp/>started,<sp/>there<sp/>should<sp/>still<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>live<sp/>test<sp/>object,<sp/>as<sp/>the<sp/>object<sp/>for<sp/>Test1<sp/>should&apos;ve<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>count());</highlight></codeline>
<codeline lineno="5029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"></highlight></codeline>
<codeline lineno="5031"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5032"><highlight class="normal"></highlight></codeline>
<codeline lineno="5033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>copy<sp/>constructor<sp/>works<sp/>when<sp/>it<sp/>is<sp/>NOT<sp/>optimized<sp/>away<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5035"><highlight class="normal">TEST(AssertionResultTest,<sp/>CopyConstructorWorksWhenNotOptimied)<sp/>{</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>that<sp/>the<sp/>copy<sp/>constructor<sp/>doesn&apos;t<sp/>try<sp/>to<sp/>dereference<sp/>NULL<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>source<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r1<sp/>=<sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r2<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>line<sp/>is<sp/>added<sp/>to<sp/>prevent<sp/>the<sp/>compiler<sp/>from<sp/>optimizing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>away<sp/>the<sp/>constructor<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/>r1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r3<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(r3),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(r1));</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>r1.message());</highlight></codeline>
<codeline lineno="5047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AssertionSuccess<sp/>and<sp/>AssertionFailure<sp/>construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AssertionResult<sp/>objects<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal">TEST(AssertionResultTest,<sp/>ConstructionWorks)<sp/>{</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r1<sp/>=<sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(r1);</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>r1.message());</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r2<sp/>=<sp/>AssertionSuccess()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(r2);</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>r2.message());</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r3<sp/>=<sp/>AssertionFailure();</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(r3);</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>r3.message());</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r4<sp/>=<sp/>AssertionFailure()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(r4);</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/>r4.message());</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r5<sp/>=<sp/>AssertionFailure(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ghi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(r5);</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ghi&quot;</highlight><highlight class="normal">,<sp/>r5.message());</highlight></codeline>
<codeline lineno="5071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>negation<sp/>flips<sp/>the<sp/>predicate<sp/>result<sp/>but<sp/>keeps<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal">TEST(AssertionResultTest,<sp/>NegationWorks)<sp/>{</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r1<sp/>=<sp/>AssertionSuccess()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(!r1);</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>(!r1).message());</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r2<sp/>=<sp/>AssertionFailure()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(!r2);</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/>(!r2).message());</highlight></codeline>
<codeline lineno="5082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal">TEST(AssertionResultTest,<sp/>StreamingWorks)<sp/>{</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r<sp/>=<sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/>r<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>0<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;abcd0true&quot;</highlight><highlight class="normal">,<sp/>r.message());</highlight></codeline>
<codeline lineno="5088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"></highlight></codeline>
<codeline lineno="5090"><highlight class="normal">TEST(AssertionResultTest,<sp/>CanStreamOstreamManipulators)<sp/>{</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>r<sp/>=<sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/>r<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Data&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::flush<sp/>&lt;&lt;<sp/>std::ends<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Will<sp/>be<sp/>visible&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Data\n\\0Will<sp/>be<sp/>visible&quot;</highlight><highlight class="normal">,<sp/>r.message());</highlight></codeline>
<codeline lineno="5094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>test<sp/>uses<sp/>explicit<sp/>conversion<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal">TEST(AssertionResultTest,<sp/>ConstructibleFromContextuallyConvertibleToBool)<sp/>{</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ExplicitlyConvertibleToBool<sp/>{</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/>ExplicitlyConvertibleToBool<sp/>v1<sp/>=<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/>ExplicitlyConvertibleToBool<sp/>v2<sp/>=<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(v1);</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(v2);</highlight></codeline>
<codeline lineno="5107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight></codeline>
<codeline lineno="5109" refid="structConvertibleToAssertionResult" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structConvertibleToAssertionResult" kindref="compound">ConvertibleToAssertionResult</ref><sp/>{</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>AssertionResult()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionResult(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="5111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"></highlight></codeline>
<codeline lineno="5113"><highlight class="normal">TEST(AssertionResultTest,<sp/>ConstructibleFromImplicitlyConvertible)<sp/>{</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><ref refid="structConvertibleToAssertionResult" kindref="compound">ConvertibleToAssertionResult</ref><sp/>obj;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(obj);</highlight></codeline>
<codeline lineno="5116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>streaming<sp/>a<sp/>user<sp/>type<sp/>whose<sp/>definition<sp/>and<sp/>operator<sp/>&lt;&lt;<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5120" refid="classBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBase" kindref="compound">Base</ref><sp/>{</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>an_x)<sp/>:<sp/>x_(an_x)<sp/>{}</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x_;<sp/>}</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"></highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x_;</highlight></codeline>
<codeline lineno="5127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5128"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref>&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>val.x();</highlight></codeline>
<codeline lineno="5130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5131"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref>*<sp/>pointer)<sp/>{</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pointer-&gt;x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal">TEST(MessageTest,<sp/>CanStreamUserTypeInGlobalNameSpace)<sp/>{</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><ref refid="classBase" kindref="compound">Base</ref><sp/>a(1);</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>&amp;a;<sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>::operator&lt;&lt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1(1)&quot;</highlight><highlight class="normal">,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>streaming<sp/>a<sp/>user<sp/>type<sp/>whose<sp/>definition<sp/>and<sp/>operator&lt;&lt;<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>in<sp/>an<sp/>unnamed<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5145"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyTypeInUnnamedNameSpace<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref><sp/>{</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MyTypeInUnnamedNameSpace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>an_x)<sp/>:<sp/><ref refid="classBase" kindref="compound">Base</ref>(an_x)<sp/>{}</highlight></codeline>
<codeline lineno="5149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5150"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyTypeInUnnamedNameSpace&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>val.x();</highlight></codeline>
<codeline lineno="5153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5154"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyTypeInUnnamedNameSpace*<sp/>pointer)<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pointer-&gt;x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5158"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5159"><highlight class="normal"></highlight></codeline>
<codeline lineno="5160"><highlight class="normal">TEST(MessageTest,<sp/>CanStreamUserTypeInUnnamedNameSpace)<sp/>{</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/>MyTypeInUnnamedNameSpace<sp/>a(1);</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>&amp;a;<sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>&lt;unnamed_namespace&gt;::operator&lt;&lt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1(1)&quot;</highlight><highlight class="normal">,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight></codeline>
<codeline lineno="5168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>streaming<sp/>a<sp/>user<sp/>type<sp/>whose<sp/>definition<sp/>and<sp/>operator&lt;&lt;<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>in<sp/>a<sp/>user<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">namespace1<sp/>{</highlight></codeline>
<codeline lineno="5171" refid="classnamespace1_1_1MyTypeInNameSpace1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnamespace1_1_1MyTypeInNameSpace1" kindref="compound">MyTypeInNameSpace1</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref><sp/>{</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnamespace1_1_1MyTypeInNameSpace1" kindref="compound">MyTypeInNameSpace1</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>an_x)<sp/>:<sp/><ref refid="classBase" kindref="compound">Base</ref>(an_x)<sp/>{}</highlight></codeline>
<codeline lineno="5174"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5175"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnamespace1_1_1MyTypeInNameSpace1" kindref="compound">MyTypeInNameSpace1</ref>&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>val.x();</highlight></codeline>
<codeline lineno="5177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5178"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyTypeInNameSpace1*<sp/>pointer)<sp/>{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pointer-&gt;x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5181"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>namespace1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal">TEST(MessageTest,<sp/>CanStreamUserTypeInUserNameSpace)<sp/>{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><ref refid="classnamespace1_1_1MyTypeInNameSpace1" kindref="compound">namespace1::MyTypeInNameSpace1</ref><sp/>a(1);</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"></highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>&amp;a;<sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>namespace1::operator&lt;&lt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1(1)&quot;</highlight><highlight class="normal">,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>streaming<sp/>a<sp/>user<sp/>type<sp/>whose<sp/>definition<sp/>is<sp/>in<sp/>a<sp/>user<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>whose<sp/>operator&lt;&lt;<sp/>is<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">namespace2<sp/>{</highlight></codeline>
<codeline lineno="5194" refid="classnamespace2_1_1MyTypeInNameSpace2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnamespace2_1_1MyTypeInNameSpace2" kindref="compound">MyTypeInNameSpace2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">::Base</ref><sp/>{</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnamespace2_1_1MyTypeInNameSpace2" kindref="compound">MyTypeInNameSpace2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>an_x)<sp/>:<sp/><ref refid="classBase" kindref="compound">Base</ref>(an_x)<sp/>{}</highlight></codeline>
<codeline lineno="5197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5198"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>namespace2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnamespace2_1_1MyTypeInNameSpace2" kindref="compound">namespace2::MyTypeInNameSpace2</ref>&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>val.x();</highlight></codeline>
<codeline lineno="5202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5203"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnamespace2_1_1MyTypeInNameSpace2" kindref="compound">namespace2::MyTypeInNameSpace2</ref>*<sp/>pointer)<sp/>{</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pointer-&gt;x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight></codeline>
<codeline lineno="5208"><highlight class="normal">TEST(MessageTest,<sp/>CanStreamUserTypeInUserNameSpaceWithStreamOperatorInGlobal)<sp/>{</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><ref refid="classnamespace2_1_1MyTypeInNameSpace2" kindref="compound">namespace2::MyTypeInNameSpace2</ref><sp/>a(1);</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>&amp;a;<sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>::operator&lt;&lt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1(1)&quot;</highlight><highlight class="normal">,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>streaming<sp/>NULL<sp/>pointers<sp/>to<sp/>testing::Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal">TEST(MessageTest,<sp/>NullPointers)<sp/>{</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p3<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>p4<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>p5<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>*<sp/>p6<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"></highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>p1<sp/>&lt;&lt;<sp/>p2<sp/>&lt;&lt;<sp/>p3<sp/>&lt;&lt;<sp/>p4<sp/>&lt;&lt;<sp/>p5<sp/>&lt;&lt;<sp/>p6;</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;(null)(null)(null)(null)(null)(null)&quot;</highlight><highlight class="normal">,<sp/>msg.GetString().c_str());</highlight></codeline>
<codeline lineno="5228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>streaming<sp/>wide<sp/>strings<sp/>to<sp/>testing::Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5231"><highlight class="normal">TEST(MessageTest,<sp/>WideStrings)<sp/>{</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>NULL<sp/>of<sp/>type<sp/>const<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>const_wstr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>const_wstr).GetString().c_str());</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>NULL<sp/>of<sp/>type<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wstr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>wstr).GetString().c_str());</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>non-NULL<sp/>of<sp/>type<sp/>const<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/>const_wstr<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;abc\x8119&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;abc\xe8\x84\x99&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>const_wstr).GetString().c_str());</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"></highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>non-NULL<sp/>of<sp/>type<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/>wstr<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(const_wstr);</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;abc\xe8\x84\x99&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>wstr).GetString().c_str());</highlight></codeline>
<codeline lineno="5248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>tests<sp/>that<sp/>we<sp/>can<sp/>define<sp/>tests<sp/>in<sp/>the<sp/>testing<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>TestInfo<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight></codeline>
<codeline lineno="5255" refid="classtesting_1_1TestInfoTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestInfoTest" kindref="compound">TestInfoTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/>GetTestInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_name)<sp/>{</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_suite<sp/>=</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetUnitTestImpl()-&gt;GetTestSuite(</highlight><highlight class="stringliteral">&quot;TestInfoTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_suite-&gt;total_test_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=<sp/>test_suite-&gt;GetTestInfo(i);</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(test_name,<sp/>test_info-&gt;name())<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info;</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"></highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">TestResult</ref>*<sp/>GetTestResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info-&gt;result();</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5271"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"></highlight></codeline>
<codeline lineno="5273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestInfo::test_case_name()<sp/>and<sp/>TestInfo::name().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5274"><highlight class="normal">TEST_F(<ref refid="classtesting_1_1TestInfoTest" kindref="compound">TestInfoTest</ref>,<sp/>Names)<sp/>{</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=<sp/>GetTestInfo(</highlight><highlight class="stringliteral">&quot;Names&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;TestInfoTest&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;Names&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="5279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TestInfo::result().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal">TEST_F(TestInfoTest,<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=<sp/>GetTestInfo(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"></highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initially,<sp/>there<sp/>is<sp/>no<sp/>TestPartResult<sp/>for<sp/>this<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>GetTestResult(test_info)-&gt;total_part_count());</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>the<sp/>previous<sp/>assertion,<sp/>there<sp/>is<sp/>still<sp/>none.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>GetTestResult(test_info)-&gt;total_part_count());</highlight></codeline>
<codeline lineno="5290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"></highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERIFY_CODE_LOCATION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5293"><highlight class="preprocessor"><sp/><sp/>const<sp/>int<sp/>expected_line<sp/>=<sp/>__LINE__<sp/>-<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5294"><highlight class="preprocessor"><sp/><sp/>const<sp/>TestInfo*<sp/>const<sp/>test_info<sp/>=<sp/>GetUnitTestImpl()-&gt;current_test_info();<sp/>\</highlight></codeline>
<codeline lineno="5295"><highlight class="preprocessor"><sp/><sp/>ASSERT_TRUE(test_info);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5296"><highlight class="preprocessor"><sp/><sp/>EXPECT_STREQ(__FILE__,<sp/>test_info-&gt;file());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5297"><highlight class="preprocessor"><sp/><sp/>EXPECT_EQ(expected_line,<sp/>test_info-&gt;line())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5300"><highlight class="normal">TEST(CodeLocationForTEST,<sp/>Verify)<sp/>{</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/>VERIFY_CODE_LOCATION;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight></codeline>
<codeline lineno="5304" refid="classtesting_1_1CodeLocationForTESTF" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1CodeLocationForTESTF" kindref="compound">CodeLocationForTESTF</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"></highlight></codeline>
<codeline lineno="5306"><highlight class="normal">TEST_F(<ref refid="classtesting_1_1CodeLocationForTESTF" kindref="compound">CodeLocationForTESTF</ref>,<sp/>Verify)<sp/>{</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/>VERIFY_CODE_LOCATION;</highlight></codeline>
<codeline lineno="5308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"></highlight></codeline>
<codeline lineno="5310" refid="classtesting_1_1CodeLocationForTESTP" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1CodeLocationForTESTP" kindref="compound">CodeLocationForTESTP</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">TestWithParam</ref>&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal">TEST_P(<ref refid="classtesting_1_1CodeLocationForTESTP" kindref="compound">CodeLocationForTESTP</ref>,<sp/>Verify)<sp/>{</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/>VERIFY_CODE_LOCATION;</highlight></codeline>
<codeline lineno="5314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(,<sp/>CodeLocationForTESTP,<sp/>Values(0));</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5319" refid="classtesting_1_1CodeLocationForTYPEDTEST" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1CodeLocationForTYPEDTEST" kindref="compound">CodeLocationForTYPEDTEST</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"></highlight></codeline>
<codeline lineno="5321"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classtesting_1_1CodeLocationForTYPEDTEST" kindref="compound">CodeLocationForTYPEDTEST</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal">TYPED_TEST(<ref refid="classtesting_1_1CodeLocationForTYPEDTEST" kindref="compound">CodeLocationForTYPEDTEST</ref>,<sp/>Verify)<sp/>{</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/>VERIFY_CODE_LOCATION;</highlight></codeline>
<codeline lineno="5325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5328" refid="classtesting_1_1CodeLocationForTYPEDTESTP" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1CodeLocationForTYPEDTESTP" kindref="compound">CodeLocationForTYPEDTESTP</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classtesting_1_1CodeLocationForTYPEDTESTP" kindref="compound">CodeLocationForTYPEDTESTP</ref>);</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"></highlight></codeline>
<codeline lineno="5332"><highlight class="normal">TYPED_TEST_P(<ref refid="classtesting_1_1CodeLocationForTYPEDTESTP" kindref="compound">CodeLocationForTYPEDTESTP</ref>,<sp/>Verify)<sp/>{</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/>VERIFY_CODE_LOCATION;</highlight></codeline>
<codeline lineno="5334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(CodeLocationForTYPEDTESTP,<sp/>Verify);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"></highlight></codeline>
<codeline lineno="5338"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/>CodeLocationForTYPEDTESTP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VERIFY_CODE_LOCATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>setting<sp/>up<sp/>and<sp/>tearing<sp/>down<sp/>a<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Legacy<sp/>API<sp/>is<sp/>deprecated<sp/>but<sp/>still<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5345"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_REMOVE_LEGACY_TEST_CASEAPI_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5346" refid="classtesting_1_1SetUpTestCaseTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1SetUpTestCaseTest" kindref="compound">SetUpTestCaseTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>once<sp/>before<sp/>the<sp/>first<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestCase()<sp/>{</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Setting<sp/>up<sp/>the<sp/>test<sp/>case<sp/>.<sp/>.<sp/>.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializes<sp/>some<sp/>shared<sp/>resource.<sp/><sp/>In<sp/>this<sp/>simple<sp/>example,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>create<sp/>a<sp/>C<sp/>string.<sp/><sp/>More<sp/>complex<sp/>stuff<sp/>can<sp/>be<sp/>done<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>desired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>number<sp/>of<sp/>test<sp/>cases<sp/>that<sp/>have<sp/>been<sp/>set<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/>counter_++;</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetUpTestCase()<sp/>should<sp/>be<sp/>called<sp/>only<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>counter_);</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"></highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>once<sp/>after<sp/>the<sp/>last<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestCase()<sp/>{</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tearing<sp/>down<sp/>the<sp/>test<sp/>case<sp/>.<sp/>.<sp/>.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrements<sp/>the<sp/>number<sp/>of<sp/>test<sp/>cases<sp/>that<sp/>have<sp/>been<sp/>set<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/>counter_--;</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TearDownTestCase()<sp/>should<sp/>be<sp/>called<sp/>only<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>counter_);</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleans<sp/>up<sp/>the<sp/>shared<sp/>resource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>before<sp/>each<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetUpTestCase()<sp/>should<sp/>be<sp/>called<sp/>only<sp/>once,<sp/>so<sp/>counter_<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>be<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>counter_);</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>test<sp/>cases<sp/>that<sp/>have<sp/>been<sp/>set<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter_;</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"></highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>resource<sp/>to<sp/>be<sp/>shared<sp/>by<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>shared_resource_;</highlight></codeline>
<codeline lineno="5392"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"></highlight></codeline>
<codeline lineno="5394"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetUpTestCaseTest::counter_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>SetUpTestCaseTest::shared_resource_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>that<sp/>uses<sp/>the<sp/>shared<sp/>resource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5398"><highlight class="normal">TEST_F(<ref refid="classtesting_1_1SetUpTestCaseTest" kindref="compound">SetUpTestCaseTest</ref>,<sp/>Test1)<sp/>{<sp/>EXPECT_STRNE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>shared_resource_);<sp/>}</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"></highlight></codeline>
<codeline lineno="5400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Another<sp/>test<sp/>that<sp/>uses<sp/>the<sp/>shared<sp/>resource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5401"><highlight class="normal">TEST_F(SetUpTestCaseTest,<sp/>Test2)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>shared_resource_);<sp/>}</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>GTEST_REMOVE_LEGACY_TEST_CASEAPI_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>SetupTestSuite/TearDown<sp/>TestSuite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5405" refid="classtesting_1_1SetUpTestSuiteTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1SetUpTestSuiteTest" kindref="compound">SetUpTestSuiteTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>once<sp/>before<sp/>the<sp/>first<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Setting<sp/>up<sp/>the<sp/>test<sp/>suite<sp/>.<sp/>.<sp/>.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"></highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializes<sp/>some<sp/>shared<sp/>resource.<sp/><sp/>In<sp/>this<sp/>simple<sp/>example,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>create<sp/>a<sp/>C<sp/>string.<sp/><sp/>More<sp/>complex<sp/>stuff<sp/>can<sp/>be<sp/>done<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>desired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"></highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>number<sp/>of<sp/>test<sp/>cases<sp/>that<sp/>have<sp/>been<sp/>set<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/>counter_++;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetUpTestSuite()<sp/>should<sp/>be<sp/>called<sp/>only<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>counter_);</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>once<sp/>after<sp/>the<sp/>last<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tearing<sp/>down<sp/>the<sp/>test<sp/>suite<sp/>.<sp/>.<sp/>.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"></highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrements<sp/>the<sp/>number<sp/>of<sp/>test<sp/>suites<sp/>that<sp/>have<sp/>been<sp/>set<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/>counter_--;</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TearDownTestSuite()<sp/>should<sp/>be<sp/>called<sp/>only<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>counter_);</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleans<sp/>up<sp/>the<sp/>shared<sp/>resource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>called<sp/>before<sp/>each<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetUpTestSuite()<sp/>should<sp/>be<sp/>called<sp/>only<sp/>once,<sp/>so<sp/>counter_<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>be<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>counter_);</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"></highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>test<sp/>suites<sp/>that<sp/>have<sp/>been<sp/>set<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter_;</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>resource<sp/>to<sp/>be<sp/>shared<sp/>by<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>shared_resource_;</highlight></codeline>
<codeline lineno="5451"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetUpTestSuiteTest::counter_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>SetUpTestSuiteTest::shared_resource_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"></highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>that<sp/>uses<sp/>the<sp/>shared<sp/>resource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal">TEST_F(<ref refid="classtesting_1_1SetUpTestSuiteTest" kindref="compound">SetUpTestSuiteTest</ref>,<sp/>TestSetupTestSuite1)<sp/>{</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/>EXPECT_STRNE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>shared_resource_);</highlight></codeline>
<codeline lineno="5459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"></highlight></codeline>
<codeline lineno="5461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Another<sp/>test<sp/>that<sp/>uses<sp/>the<sp/>shared<sp/>resource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5462"><highlight class="normal">TEST_F(SetUpTestSuiteTest,<sp/>TestSetupTestSuite2)<sp/>{</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>shared_resource_);</highlight></codeline>
<codeline lineno="5464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"></highlight></codeline>
<codeline lineno="5466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ParseFlagsTest<sp/>test<sp/>case<sp/>tests<sp/>ParseGoogleTestFlagsOnly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5467"><highlight class="normal"></highlight></codeline>
<codeline lineno="5468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Flags<sp/>struct<sp/>stores<sp/>a<sp/>copy<sp/>of<sp/>all<sp/>Google<sp/>Test<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5469" refid="structtesting_1_1Flags" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>{</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>each<sp/>flag<sp/>has<sp/>its<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref>()</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>also_run_disabled_tests(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break_on_failure(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch_exceptions(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>death_test_use_fork(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_fast(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_tests(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brief(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_time(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random_seed(0),</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repeat(1),</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recreate_environments_when_repeating(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shuffle(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_trace_depth(kMaxStackTraceDepth),</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_result_to(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_on_failure(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Factory<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_also_run_disabled_tests<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>AlsoRunDisabledTests(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>also_run_disabled_tests)<sp/>{</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.also_run_disabled_tests<sp/>=<sp/>also_run_disabled_tests;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"></highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_break_on_failure<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>BreakOnFailure(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>break_on_failure)<sp/>{</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.break_on_failure<sp/>=<sp/>break_on_failure;</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"></highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_catch_exceptions<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>CatchExceptions(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>catch_exceptions)<sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.catch_exceptions<sp/>=<sp/>catch_exceptions;</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"></highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_death_test_use_fork<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>DeathTestUseFork(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>death_test_use_fork)<sp/>{</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.death_test_use_fork<sp/>=<sp/>death_test_use_fork;</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_fail_fast<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>FailFast(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fail_fast)<sp/>{</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.fail_fast<sp/>=<sp/>fail_fast;</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"></highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_filter<sp/>flag<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>Filter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filter)<sp/>{</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.filter<sp/>=<sp/>filter;</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"></highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_list_tests<sp/>flag<sp/>has<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>ListTests(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>list_tests)<sp/>{</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.list_tests<sp/>=<sp/>list_tests;</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_output<sp/>flag<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>Output(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.output<sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"></highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_brief<sp/>flag<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>Brief(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>brief)<sp/>{</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.brief<sp/>=<sp/>brief;</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"></highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_print_time<sp/>flag<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>PrintTime(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>print_time)<sp/>{</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.print_time<sp/>=<sp/>print_time;</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"></highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_random_seed<sp/>flag<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>RandomSeed(int32_t<sp/>random_seed)<sp/>{</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.random_seed<sp/>=<sp/>random_seed;</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_repeat<sp/>flag<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>Repeat(int32_t<sp/>repeat)<sp/>{</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.repeat<sp/>=<sp/>repeat;</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"></highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_recreate_environments_when_repeating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>has<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>RecreateEnvironmentsWhenRepeating(</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recreate_environments_when_repeating)<sp/>{</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.recreate_environments_when_repeating<sp/>=</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recreate_environments_when_repeating;</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"></highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_shuffle<sp/>flag<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>Shuffle(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle)<sp/>{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.shuffle<sp/>=<sp/>shuffle;</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>GTEST_FLAG(stack_trace_depth)<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>StackTraceDepth(int32_t<sp/>stack_trace_depth)<sp/>{</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.stack_trace_depth<sp/>=<sp/>stack_trace_depth;</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>GTEST_FLAG(stream_result_to)<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>StreamResultTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>stream_result_to)<sp/>{</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.stream_result_to<sp/>=<sp/>stream_result_to;</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"></highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Flags<sp/>struct<sp/>where<sp/>the<sp/>gtest_throw_on_failure<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>ThrowOnFailure(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throw_on_failure)<sp/>{</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref><sp/>flags;</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.throw_on_failure<sp/>=<sp/>throw_on_failure;</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"></highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>fields<sp/>store<sp/>the<sp/>flag<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>also_run_disabled_tests;</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>break_on_failure;</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>catch_exceptions;</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>death_test_use_fork;</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fail_fast;</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filter;</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>list_tests;</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output;</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>brief;</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>print_time;</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/>int32_t<sp/>random_seed;</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/>int32_t<sp/>repeat;</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recreate_environments_when_repeating;</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle;</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/>int32_t<sp/>stack_trace_depth;</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>stream_result_to;</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throw_on_failure;</highlight></codeline>
<codeline lineno="5648"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fixture<sp/>for<sp/>testing<sp/>ParseGoogleTestFlagsOnly().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5651" refid="classtesting_1_1ParseFlagsTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1ParseFlagsTest" kindref="compound">ParseFlagsTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>flags<sp/>before<sp/>each<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(also_run_disabled_tests,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(break_on_failure,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(catch_exceptions,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(death_test_use_fork,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(fail_fast,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(filter,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(list_tests,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(output,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(brief,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(print_time,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(random_seed,<sp/>0);</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(repeat,<sp/>1);</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(recreate_environments_when_repeating,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(shuffle,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(stack_trace_depth,<sp/>kMaxStackTraceDepth);</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(stream_result_to,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(throw_on_failure,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"></highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>two<sp/>narrow<sp/>or<sp/>wide<sp/>string<sp/>arrays<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertStringArrayEq(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size1,<sp/>CharType**<sp/>array1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size2,</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharType**<sp/>array2)<sp/>{</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(size1,<sp/>size2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Array<sp/>sizes<sp/>different.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>size1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_STREQ(array1[i],<sp/>array2[i])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>where<sp/>i<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>flag<sp/>values<sp/>match<sp/>the<sp/>expected<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckFlags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref>&amp;<sp/>expected)<sp/>{</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.also_run_disabled_tests,</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(also_run_disabled_tests));</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.break_on_failure,<sp/>GTEST_FLAG_GET(break_on_failure));</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.catch_exceptions,<sp/>GTEST_FLAG_GET(catch_exceptions));</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.death_test_use_fork,</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(death_test_use_fork));</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.fail_fast,<sp/>GTEST_FLAG_GET(fail_fast));</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(expected.filter,<sp/>GTEST_FLAG_GET(filter).c_str());</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.list_tests,<sp/>GTEST_FLAG_GET(list_tests));</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(expected.output,<sp/>GTEST_FLAG_GET(output).c_str());</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.brief,<sp/>GTEST_FLAG_GET(brief));</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.print_time,<sp/>GTEST_FLAG_GET(print_time));</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.random_seed,<sp/>GTEST_FLAG_GET(random_seed));</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.repeat,<sp/>GTEST_FLAG_GET(repeat));</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.recreate_environments_when_repeating,</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(recreate_environments_when_repeating));</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.shuffle,<sp/>GTEST_FLAG_GET(shuffle));</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.stack_trace_depth,<sp/>GTEST_FLAG_GET(stack_trace_depth));</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(expected.stream_result_to,</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_GET(stream_result_to).c_str());</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected.throw_on_failure,<sp/>GTEST_FLAG_GET(throw_on_failure));</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"></highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>command<sp/>line<sp/>(specified<sp/>by<sp/>argc1<sp/>and<sp/>argv1),<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>verifies<sp/>that<sp/>the<sp/>flag<sp/>values<sp/>are<sp/>expected<sp/>and<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>recognized<sp/>flags<sp/>are<sp/>removed<sp/>from<sp/>the<sp/>command<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestParsingFlags(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType**<sp/>argv1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc2,</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType**<sp/>argv2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref>&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print_help)<sp/>{</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>saved_help_flag<sp/>=<sp/>::testing::internal::g_help_flag;</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::internal::g_help_flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"></highlight></codeline>
<codeline lineno="5720"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5723"><highlight class="normal"></highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>command<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::ParseGoogleTestFlagsOnly(&amp;argc1,<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CharType**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argv1));</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>captured_stdout<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>the<sp/>flag<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckFlags(expected);</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"></highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>recognized<sp/>flags<sp/>are<sp/>removed<sp/>from<sp/>the<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertStringArrayEq(argc1<sp/>+<sp/>1,<sp/>argv1,<sp/>argc2<sp/>+<sp/>1,<sp/>argv2);</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ParseGoogleTestFlagsOnly<sp/>should<sp/>neither<sp/>set<sp/>g_help_flag<sp/>nor<sp/>print<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>help<sp/>message<sp/>for<sp/>the<sp/>flags<sp/>it<sp/>recognizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(should_print_help,<sp/>::testing::internal::g_help_flag);</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"></highlight></codeline>
<codeline lineno="5742"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>expected_help_fragment<sp/>=</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>program<sp/>contains<sp/>tests<sp/>written<sp/>using&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_print_help)<sp/>{</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/>expected_help_fragment,<sp/>captured_stdout);</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(IsNotSubstring,<sp/>expected_help_fragment,</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>captured_stdout);</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5752"><highlight class="normal"></highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::internal::g_help_flag<sp/>=<sp/>saved_help_flag;</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"></highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>macro<sp/>wraps<sp/>TestParsingFlags<sp/>s.t.<sp/>the<sp/>user<sp/>doesn&apos;t<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>specify<sp/>the<sp/>array<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5758"><highlight class="normal"></highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_PARSING_FLAGS_(argv1,<sp/>argv2,<sp/>expected,<sp/>should_print_help)<sp/>\</highlight></codeline>
<codeline lineno="5760"><highlight class="preprocessor"><sp/><sp/>TestParsingFlags(sizeof(argv1)<sp/>/<sp/>sizeof(*argv1)<sp/>-<sp/>1,<sp/>argv1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(argv2)<sp/>/<sp/>sizeof(*argv2)<sp/>-<sp/>1,<sp/>argv2,<sp/>expected,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5762"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should_print_help)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5763"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"></highlight></codeline>
<codeline lineno="5765"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>an<sp/>empty<sp/>command<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5766"><highlight class="normal">TEST_F(<ref refid="classtesting_1_1ParseFlagsTest" kindref="compound">ParseFlagsTest</ref>,<sp/>Empty)<sp/>{</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"></highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"></highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"></highlight></codeline>
<codeline lineno="5774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>a<sp/>command<sp/>line<sp/>that<sp/>has<sp/>no<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>NoFlag)<sp/>{</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"></highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"></highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"></highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_fail_fast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5784"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>FailFast)<sp/>{</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_fail_fast&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"></highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"></highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::FailFast(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"></highlight></codeline>
<codeline lineno="5792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>an<sp/>empty<sp/>--gtest_filter<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5793"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>FilterEmpty)<sp/>{</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_filter=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"></highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"></highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Filter(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"></highlight></codeline>
<codeline lineno="5801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>a<sp/>non-empty<sp/>--gtest_filter<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5802"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>FilterNonEmpty)<sp/>{</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_filter=abc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"></highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Filter(</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"></highlight></codeline>
<codeline lineno="5810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_break_on_failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5811"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>BreakOnFailureWithoutValue)<sp/>{</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_break_on_failure&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"></highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"></highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::BreakOnFailure(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"></highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_break_on_failure=0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>BreakOnFailureFalse_0)<sp/>{</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_break_on_failure=0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"></highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"></highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::BreakOnFailure(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"></highlight></codeline>
<codeline lineno="5828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_break_on_failure=f.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5829"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>BreakOnFailureFalse_f)<sp/>{</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_break_on_failure=f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"></highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"></highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::BreakOnFailure(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"></highlight></codeline>
<codeline lineno="5837"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_break_on_failure=F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5838"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>BreakOnFailureFalse_F)<sp/>{</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_break_on_failure=F&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"></highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"></highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::BreakOnFailure(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"></highlight></codeline>
<codeline lineno="5846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>a<sp/>--gtest_break_on_failure<sp/>flag<sp/>that<sp/>has<sp/>a<sp/>&quot;true&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5848"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>BreakOnFailureTrue)<sp/>{</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_break_on_failure=1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"></highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"></highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::BreakOnFailure(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"></highlight></codeline>
<codeline lineno="5856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_catch_exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5857"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>CatchExceptions)<sp/>{</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_catch_exceptions&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"></highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"></highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::CatchExceptions(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"></highlight></codeline>
<codeline lineno="5865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_death_test_use_fork.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5866"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>DeathTestUseFork)<sp/>{</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_death_test_use_fork&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"></highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"></highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::DeathTestUseFork(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"></highlight></codeline>
<codeline lineno="5874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>the<sp/>same<sp/>flag<sp/>twice<sp/>with<sp/>different<sp/>values.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expected<sp/>behavior<sp/>is<sp/>that<sp/>the<sp/>one<sp/>coming<sp/>last<sp/>takes<sp/>precedence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5876"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>DuplicatedFlags)<sp/>{</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_filter=a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_filter=b&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"></highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"></highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Filter(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"></highlight></codeline>
<codeline lineno="5885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>an<sp/>unrecognized<sp/>flag<sp/>on<sp/>the<sp/>command<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5886"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>UnrecognizedFlag)<sp/>{</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_break_on_failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>Unrecognized<sp/>by<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--gtest_filter=b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"></highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"></highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/>Flags<sp/>flags;</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/>flags.break_on_failure<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/>flags.filter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>flags,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"></highlight></codeline>
<codeline lineno="5899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_list_tests<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5900"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ListTestsFlag)<sp/>{</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_list_tests&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"></highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ListTests(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"></highlight></codeline>
<codeline lineno="5908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_list_tests<sp/>flag<sp/>with<sp/>a<sp/>&quot;true&quot;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5909"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ListTestsTrue)<sp/>{</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_list_tests=1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"></highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"></highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ListTests(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"></highlight></codeline>
<codeline lineno="5917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_list_tests<sp/>flag<sp/>with<sp/>a<sp/>&quot;false&quot;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5918"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ListTestsFalse)<sp/>{</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_list_tests=0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"></highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"></highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ListTests(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"></highlight></codeline>
<codeline lineno="5926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_list_tests=f.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5927"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ListTestsFalse_f)<sp/>{</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_list_tests=f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"></highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"></highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ListTests(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"></highlight></codeline>
<codeline lineno="5935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_list_tests=F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5936"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ListTestsFalse_F)<sp/>{</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_list_tests=F&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"></highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"></highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ListTests(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"></highlight></codeline>
<codeline lineno="5944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_output=xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5945"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>OutputXml)<sp/>{</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_output=xml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"></highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"></highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Output(</highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"></highlight></codeline>
<codeline lineno="5953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_output=xml:file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5954"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>OutputXmlFile)<sp/>{</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_output=xml:file&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"></highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"></highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Output(</highlight><highlight class="stringliteral">&quot;xml:file&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"></highlight></codeline>
<codeline lineno="5962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_output=xml:directory/path/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5963"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>OutputXmlDirectory)<sp/>{</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_output=xml:directory/path/&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"></highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"></highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Output(</highlight><highlight class="stringliteral">&quot;xml:directory/path/&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"></highlight></codeline>
<codeline lineno="5973"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_brief<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5974"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>BriefFlag)<sp/>{</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_brief&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"></highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"></highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Brief(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"></highlight></codeline>
<codeline lineno="5982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_brief<sp/>flag<sp/>with<sp/>a<sp/>&quot;true&quot;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5983"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>BriefFlagTrue)<sp/>{</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_brief=1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"></highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"></highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Brief(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"></highlight></codeline>
<codeline lineno="5991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_brief<sp/>flag<sp/>with<sp/>a<sp/>&quot;false&quot;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5992"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>BriefFlagFalse)<sp/>{</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_brief=0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"></highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"></highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Brief(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"></highlight></codeline>
<codeline lineno="6000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_print_time<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6001"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>PrintTimeFlag)<sp/>{</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_print_time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"></highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"></highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::PrintTime(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"></highlight></codeline>
<codeline lineno="6009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_print_time<sp/>flag<sp/>with<sp/>a<sp/>&quot;true&quot;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6010"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>PrintTimeTrue)<sp/>{</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_print_time=1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"></highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"></highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::PrintTime(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"></highlight></codeline>
<codeline lineno="6018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_print_time<sp/>flag<sp/>with<sp/>a<sp/>&quot;false&quot;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6019"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>PrintTimeFalse)<sp/>{</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_print_time=0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"></highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"></highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::PrintTime(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"></highlight></codeline>
<codeline lineno="6027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_print_time=f.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6028"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>PrintTimeFalse_f)<sp/>{</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_print_time=f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"></highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"></highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::PrintTime(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"></highlight></codeline>
<codeline lineno="6036"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_print_time=F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6037"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>PrintTimeFalse_F)<sp/>{</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_print_time=F&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"></highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"></highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::PrintTime(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"></highlight></codeline>
<codeline lineno="6045"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_random_seed=number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6046"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>RandomSeed)<sp/>{</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_random_seed=1000&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"></highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"></highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::RandomSeed(1000),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"></highlight></codeline>
<codeline lineno="6054"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_repeat=number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6055"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>Repeat)<sp/>{</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_repeat=1000&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"></highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"></highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Repeat(1000),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"></highlight></codeline>
<codeline lineno="6063"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_recreate_environments_when_repeating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6064"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>RecreateEnvironmentsWhenRepeating)<sp/>{</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--gtest_recreate_environments_when_repeating=0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"></highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"></highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>argv,<sp/>argv2,<sp/>Flags::RecreateEnvironmentsWhenRepeating(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"></highlight></codeline>
<codeline lineno="6077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_also_run_disabled_tests<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6078"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>AlsoRunDisabledTestsFlag)<sp/>{</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_also_run_disabled_tests&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"></highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"></highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::AlsoRunDisabledTests(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"></highlight></codeline>
<codeline lineno="6087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_also_run_disabled_tests<sp/>flag<sp/>with<sp/>a<sp/>&quot;true&quot;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6088"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>AlsoRunDisabledTestsTrue)<sp/>{</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_also_run_disabled_tests=1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"></highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"></highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::AlsoRunDisabledTests(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"></highlight></codeline>
<codeline lineno="6098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>having<sp/>a<sp/>--gtest_also_run_disabled_tests<sp/>flag<sp/>with<sp/>a<sp/>&quot;false&quot;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6099"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>AlsoRunDisabledTestsFalse)<sp/>{</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_also_run_disabled_tests=0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"></highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::AlsoRunDisabledTests(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"></highlight></codeline>
<codeline lineno="6109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_shuffle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6110"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ShuffleWithoutValue)<sp/>{</highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_shuffle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Shuffle(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"></highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_shuffle=0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6119"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ShuffleFalse_0)<sp/>{</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_shuffle=0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"></highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"></highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Shuffle(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"></highlight></codeline>
<codeline lineno="6127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>a<sp/>--gtest_shuffle<sp/>flag<sp/>that<sp/>has<sp/>a<sp/>&quot;true&quot;<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6128"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ShuffleTrue)<sp/>{</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_shuffle=1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"></highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"></highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Shuffle(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"></highlight></codeline>
<codeline lineno="6136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_stack_trace_depth=number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6137"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>StackTraceDepth)<sp/>{</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_stack_trace_depth=5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"></highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::StackTraceDepth(5),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"></highlight></codeline>
<codeline lineno="6145"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>StreamResultTo)<sp/>{</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_stream_result_to=localhost:1234&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"></highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"></highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flags::StreamResultTo(</highlight><highlight class="stringliteral">&quot;localhost:1234&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_throw_on_failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6156"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ThrowOnFailureWithoutValue)<sp/>{</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_throw_on_failure&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"></highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"></highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ThrowOnFailure(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6163"><highlight class="normal"></highlight></codeline>
<codeline lineno="6164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_throw_on_failure=0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6165"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ThrowOnFailureFalse_0)<sp/>{</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_throw_on_failure=0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"></highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"></highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ThrowOnFailure(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>a<sp/>--gtest_throw_on_failure<sp/>flag<sp/>that<sp/>has<sp/>a<sp/>&quot;true&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6175"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>ThrowOnFailureTrue)<sp/>{</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_throw_on_failure=1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"></highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"></highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ThrowOnFailure(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"></highlight></codeline>
<codeline lineno="6183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>a<sp/>bad<sp/>--gtest_filter<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6184"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>FilterBad)<sp/>{</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_filter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"></highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_filter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"></highlight></codeline>
<codeline lineno="6189"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_HAS_ABSL)<sp/>&amp;&amp;<sp/>defined(GTEST_HAS_DEATH_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>flag<sp/>arguments<sp/>are<sp/>a<sp/>fatal<sp/>error<sp/>when<sp/>using<sp/>the<sp/>Abseil<sp/>Flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/>EXPECT_EXIT(GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Filter(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::ExitedWithCode(1),</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Missing<sp/>the<sp/>value<sp/>for<sp/>the<sp/>flag<sp/>&apos;gtest_filter&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(GTEST_HAS_ABSL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Filter(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argv);</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argv2);</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"></highlight></codeline>
<codeline lineno="6202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>--gtest_output<sp/>(invalid).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6203"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>OutputEmpty)<sp/>{</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_output&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"></highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_output&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"></highlight></codeline>
<codeline lineno="6208"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_HAS_ABSL)<sp/>&amp;&amp;<sp/>defined(GTEST_HAS_DEATH_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>flag<sp/>arguments<sp/>are<sp/>a<sp/>fatal<sp/>error<sp/>when<sp/>using<sp/>the<sp/>Abseil<sp/>Flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/>EXPECT_EXIT(GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::ExitedWithCode(1),</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Missing<sp/>the<sp/>value<sp/>for<sp/>the<sp/>flag<sp/>&apos;gtest_output&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(GTEST_HAS_ABSL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argv);</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argv2);</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"></highlight></codeline>
<codeline lineno="6221"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6222"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>AbseilPositionalFlags)<sp/>{</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_throw_on_failure=1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--other_flag&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6225"><highlight class="normal"></highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>using<sp/>Abseil<sp/>flags,<sp/>it<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>pass<sp/>flags<sp/>not<sp/>recognized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>&quot;--&quot;<sp/>to<sp/>delimit<sp/>positional<sp/>arguments.<sp/>These<sp/>flags<sp/>should<sp/>be<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>though<sp/>argv.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--other_flag&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"></highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::ThrowOnFailure(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6234"><highlight class="normal"></highlight></codeline>
<codeline lineno="6235"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>UnrecognizedFlags)<sp/>{</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--gtest_filter=abcd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--other_flag&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"></highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--other_flag&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"></highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Filter(</highlight><highlight class="stringliteral">&quot;abcd&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"></highlight></codeline>
<codeline lineno="6244"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>parsing<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6246"><highlight class="normal">TEST_F(ParseFlagsTest,<sp/>WideStrings)<sp/>{</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{L</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight><highlight class="stringliteral">&quot;--gtest_filter=Foo*&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight><highlight class="stringliteral">&quot;--gtest_list_tests=1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight><highlight class="stringliteral">&quot;--gtest_break_on_failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight><highlight class="stringliteral">&quot;--non_gtest_flag&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL};</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"></highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{L</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="stringliteral">&quot;--non_gtest_flag&quot;</highlight><highlight class="normal">,<sp/>NULL};</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"></highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/>Flags<sp/>expected_flags;</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/>expected_flags.break_on_failure<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/>expected_flags.filter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Foo*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/>expected_flags.list_tests<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6260"><highlight class="normal"></highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>expected_flags,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6264"><highlight class="normal"></highlight></codeline>
<codeline lineno="6265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6266"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FlagfileTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ParseFlagsTest<sp/>{</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/><sp/>ParseFlagsTest::SetUp();</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"></highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/>testdata_path_.Set(internal::FilePath(</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::TempDir()<sp/>+<sp/>internal::GetCurrentExecutableName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">()<sp/>+</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_flagfile_test&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::internal::posix::RmDir(testdata_path_.c_str());</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testdata_path_.CreateFolder());</highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"></highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::internal::posix::RmDir(testdata_path_.c_str());</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/>ParseFlagsTest::TearDown();</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"></highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/>internal::FilePath<sp/>CreateFlagfile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>contents)<sp/>{</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::FilePath<sp/>file_path(internal::FilePath::GenerateUniqueFileName(</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testdata_path_,<sp/>internal::FilePath(</highlight><highlight class="stringliteral">&quot;unique&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>f<sp/>=<sp/>testing::internal::posix::FOpen(file_path.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>contents);</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_path;</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"></highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/>internal::FilePath<sp/>testdata_path_;</highlight></codeline>
<codeline lineno="6294"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"></highlight></codeline>
<codeline lineno="6296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>an<sp/>empty<sp/>flagfile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6297"><highlight class="normal">TEST_F(FlagfileTest,<sp/>Empty)<sp/>{</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/>internal::FilePath<sp/>flagfile_path(CreateFlagfile(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/>std::string<sp/>flagfile_flag<sp/>=</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;flagfile=&quot;</highlight><highlight class="normal">)<sp/>+<sp/>flagfile_path.c_str();</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"></highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/>flagfile_flag.c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"></highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"></highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"></highlight></codeline>
<codeline lineno="6309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>passing<sp/>a<sp/>non-empty<sp/>--gtest_filter<sp/>flag<sp/>via<sp/>--gtest_flagfile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6310"><highlight class="normal">TEST_F(FlagfileTest,<sp/>FilterNonEmpty)<sp/>{</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/>internal::FilePath<sp/>flagfile_path(</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CreateFlagfile(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;filter=abc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/>std::string<sp/>flagfile_flag<sp/>=</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;flagfile=&quot;</highlight><highlight class="normal">)<sp/>+<sp/>flagfile_path.c_str();</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"></highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/>flagfile_flag.c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"></highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"></highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>Flags::Filter(</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"></highlight></codeline>
<codeline lineno="6323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>passing<sp/>several<sp/>flags<sp/>via<sp/>--gtest_flagfile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6324"><highlight class="normal">TEST_F(FlagfileTest,<sp/>SeveralFlags)<sp/>{</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/>internal::FilePath<sp/>flagfile_path(</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CreateFlagfile(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;filter=abc\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;break_on_failure\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;list_tests&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"><sp/><sp/>std::string<sp/>flagfile_flag<sp/>=</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>GTEST_FLAG_PREFIX_<sp/></highlight><highlight class="stringliteral">&quot;flagfile=&quot;</highlight><highlight class="normal">)<sp/>+<sp/>flagfile_path.c_str();</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"></highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/>flagfile_flag.c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"></highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo.exe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"></highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/>Flags<sp/>expected_flags;</highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/>expected_flags.break_on_failure<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/>expected_flags.filter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/>expected_flags.list_tests<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"></highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/>GTEST_TEST_PARSING_FLAGS_(argv,<sp/>argv2,<sp/>expected_flags,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6344"><highlight class="normal"></highlight></codeline>
<codeline lineno="6345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>current_test_info()<sp/>in<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6346" refid="classtesting_1_1CurrentTestInfoTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1CurrentTestInfoTest" kindref="compound">CurrentTestInfoTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>current_test_info()<sp/>returns<sp/>NULL<sp/>before<sp/>the<sp/>first<sp/>test<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>case<sp/>is<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>tests<sp/>running<sp/>at<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/>test_info<sp/>=<sp/>UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(test_info<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>should<sp/>be<sp/>no<sp/>tests<sp/>running<sp/>at<sp/>this<sp/>point.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"></highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>current_test_info()<sp/>returns<sp/>NULL<sp/>after<sp/>the<sp/>last<sp/>test<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>case<sp/>has<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/>test_info<sp/>=<sp/>UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(test_info<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>should<sp/>be<sp/>no<sp/>tests<sp/>running<sp/>at<sp/>this<sp/>point.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"></highlight></codeline>
<codeline lineno="6366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>current_test_info()<sp/>returns<sp/>TestInfo<sp/>for<sp/>currently<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>by<sp/>checking<sp/>the<sp/>expected<sp/>test<sp/>name<sp/>against<sp/>the<sp/>actual<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6368"><highlight class="normal">TEST_F(<ref refid="classtesting_1_1CurrentTestInfoTest" kindref="compound">CurrentTestInfoTest</ref>,<sp/>WorksForFirstTestInATestSuite)<sp/>{</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/>test_info<sp/>=<sp/>UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>!=<sp/>test_info)</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>a<sp/>test<sp/>running<sp/>so<sp/>we<sp/>should<sp/>have<sp/>a<sp/>valid<sp/>TestInfo.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;CurrentTestInfoTest&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;test_suite_name())</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>the<sp/>name<sp/>of<sp/>the<sp/>currently<sp/>running<sp/>test<sp/>suite.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;WorksForFirstTestInATestSuite&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;name())</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>the<sp/>name<sp/>of<sp/>the<sp/>currently<sp/>running<sp/>test.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"></highlight></codeline>
<codeline lineno="6378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>current_test_info()<sp/>returns<sp/>TestInfo<sp/>for<sp/>currently<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>by<sp/>checking<sp/>the<sp/>expected<sp/>test<sp/>name<sp/>against<sp/>the<sp/>actual<sp/>one.<sp/><sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>this<sp/>test<sp/>to<sp/>see<sp/>that<sp/>the<sp/>TestInfo<sp/>object<sp/>actually<sp/>changed<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>previous<sp/>invocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6382"><highlight class="normal">TEST_F(CurrentTestInfoTest,<sp/>WorksForSecondTestInATestSuite)<sp/>{</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/>test_info<sp/>=<sp/>UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>!=<sp/>test_info)</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>a<sp/>test<sp/>running<sp/>so<sp/>we<sp/>should<sp/>have<sp/>a<sp/>valid<sp/>TestInfo.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;CurrentTestInfoTest&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;test_suite_name())</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>the<sp/>name<sp/>of<sp/>the<sp/>currently<sp/>running<sp/>test<sp/>suite.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;WorksForSecondTestInATestSuite&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;name())</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>the<sp/>name<sp/>of<sp/>the<sp/>currently<sp/>running<sp/>test.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"></highlight></codeline>
<codeline lineno="6392"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6393"><highlight class="normal"></highlight></codeline>
<codeline lineno="6394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>lines<sp/>test<sp/>that<sp/>we<sp/>can<sp/>define<sp/>tests<sp/>in<sp/>a<sp/>namespace<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>the<sp/>name<sp/>&quot;testing&quot;<sp/>and<sp/>is<sp/>nested<sp/>in<sp/>another<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6396"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">my_namespace<sp/>{</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"></highlight></codeline>
<codeline lineno="6399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>TEST<sp/>knows<sp/>to<sp/>use<sp/>::testing::Test<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::my_namespace::testing::Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6401" refid="classmy__namespace_1_1testing_1_1Test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmy__namespace_1_1testing_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"></highlight></codeline>
<codeline lineno="6403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>an<sp/>assertion<sp/>knows<sp/>to<sp/>use<sp/>::testing::Message<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::my_namespace::testing::Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6405" refid="classmy__namespace_1_1testing_1_1Message" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmy__namespace_1_1testing_1_1Message" kindref="compound">Message</ref><sp/>{};</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"></highlight></codeline>
<codeline lineno="6407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>an<sp/>assertion<sp/>knows<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::AssertionResult<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::my_namespace::testing::AssertionResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6410" refid="classmy__namespace_1_1testing_1_1AssertionResult" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmy__namespace_1_1testing_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/>{};</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"></highlight></codeline>
<codeline lineno="6412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>assertion<sp/>that<sp/>should<sp/>succeed<sp/>works<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6413"><highlight class="normal">TEST(NestedTestingNamespaceTest,<sp/>Success)<sp/>{</highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>shouldn&apos;t<sp/>fail.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"></highlight></codeline>
<codeline lineno="6417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>assertion<sp/>that<sp/>should<sp/>fail<sp/>works<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6418"><highlight class="normal">TEST(NestedTestingNamespaceTest,<sp/>Failure)<sp/>{</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6424"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>my_namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6425"><highlight class="normal"></highlight></codeline>
<codeline lineno="6426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>one<sp/>can<sp/>call<sp/>superclass<sp/>SetUp<sp/>and<sp/>TearDown<sp/>methods--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>is,<sp/>that<sp/>they<sp/>are<sp/>not<sp/>private.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>tests<sp/>are<sp/>based<sp/>on<sp/>this<sp/>fixture;<sp/>the<sp/>test<sp/>&quot;passes&quot;<sp/>if<sp/>it<sp/>compiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6430" refid="classProtectedFixtureMethodsTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classProtectedFixtureMethodsTest" kindref="compound">ProtectedFixtureMethodsTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>Test::SetUp();<sp/>}</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>Test::TearDown();<sp/>}</highlight></codeline>
<codeline lineno="6434"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"></highlight></codeline>
<codeline lineno="6436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StreamingAssertionsTest<sp/>tests<sp/>the<sp/>streaming<sp/>versions<sp/>of<sp/>a<sp/>representative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sample<sp/>of<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6438"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>Unconditional)<sp/>{</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/>SUCCEED()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>success&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"></highlight></codeline>
<codeline lineno="6445"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silences<sp/>warnings:<sp/>&quot;Condition<sp/>is<sp/>always<sp/>true&quot;,<sp/>&quot;Unreachable<sp/>code&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6447"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>push<sp/>-w-ccc<sp/>-w-rch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6449"><highlight class="normal"></highlight></codeline>
<codeline lineno="6450"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>Truth)<sp/>{</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"></highlight></codeline>
<codeline lineno="6459"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>Truth2)<sp/>{</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FALSE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_FALSE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"></highlight></codeline>
<codeline lineno="6468"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>warnings<sp/>after<sp/>previous<sp/>&quot;#pragma<sp/>option<sp/>push&quot;<sp/>suppressed<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6470"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>option<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6472"><highlight class="normal"></highlight></codeline>
<codeline lineno="6473"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>IntegerEquals)<sp/>{</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_EQ(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_EQ(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"></highlight></codeline>
<codeline lineno="6482"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>IntegerLessThan)<sp/>{</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/>EXPECT_LT(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/>ASSERT_LT(1,<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_LT(2,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_LT(2,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"></highlight></codeline>
<codeline lineno="6491"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>StringsEqual)<sp/>{</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/>ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"></highlight></codeline>
<codeline lineno="6500"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>StringsNotEqual)<sp/>{</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/>EXPECT_STRNE(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/>ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRNE(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STRNE(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"></highlight></codeline>
<codeline lineno="6509"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>StringsEqualIgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/>EXPECT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FOO&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/>ASSERT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FOO&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STRCASEEQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6517"><highlight class="normal"></highlight></codeline>
<codeline lineno="6518"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>StringNotEqualIgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/>EXPECT_STRCASENE(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/>ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_STRCASENE(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FOO&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_STRCASENE(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BAR&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"></highlight></codeline>
<codeline lineno="6527"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>FloatingPointEquals)<sp/>{</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(1.0,<sp/>1.0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/>ASSERT_FLOAT_EQ(1.0,<sp/>1.0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(0.0,<sp/>1.0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_FLOAT_EQ(0.0,<sp/>1.0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6535"><highlight class="normal"></highlight></codeline>
<codeline lineno="6536"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6537"><highlight class="normal"></highlight></codeline>
<codeline lineno="6538"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>Throw)<sp/>{</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/>EXPECT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6540"><highlight class="normal"><sp/><sp/>ASSERT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_THROW(ThrowAnInteger(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"></highlight></codeline>
<codeline lineno="6549"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>NoThrow)<sp/>{</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/>EXPECT_NO_THROW(ThrowNothing())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/>ASSERT_NO_THROW(ThrowNothing())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_NO_THROW(ThrowAnInteger())</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_NO_THROW(ThrowAnInteger())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"></highlight></codeline>
<codeline lineno="6559"><highlight class="normal">TEST(StreamingAssertionsTest,<sp/>AnyThrow)<sp/>{</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/>EXPECT_ANY_THROW(ThrowAnInteger())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/>ASSERT_ANY_THROW(ThrowAnInteger())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_ANY_THROW(ThrowNothing())</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_ANY_THROW(ThrowNothing())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"></highlight></codeline>
<codeline lineno="6569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6570"><highlight class="normal"></highlight></codeline>
<codeline lineno="6571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Test<sp/>correctly<sp/>decides<sp/>whether<sp/>to<sp/>use<sp/>colors<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6572"><highlight class="normal"></highlight></codeline>
<codeline lineno="6573"><highlight class="normal">TEST(ColoredOutputTest,<sp/>UsesColorsWhenGTestColorFlagIsYes)<sp/>{</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>not<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6579"><highlight class="normal"></highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dumb&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>doesn&apos;t<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>not<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"></highlight></codeline>
<codeline lineno="6585"><highlight class="normal">TEST(ColoredOutputTest,<sp/>UsesColorsWhenGTestColorFlagIsAliasOfYes)<sp/>{</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dumb&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>doesn&apos;t<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6587"><highlight class="normal"></highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>not<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6590"><highlight class="normal"></highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>not<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6593"><highlight class="normal"></highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>not<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"></highlight></codeline>
<codeline lineno="6598"><highlight class="normal">TEST(ColoredOutputTest,<sp/>UsesNoColorWhenGTestColorFlagIsNo)<sp/>{</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"></highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>not<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6604"><highlight class="normal"></highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dumb&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>doesn&apos;t<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>not<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"></highlight></codeline>
<codeline lineno="6610"><highlight class="normal">TEST(ColoredOutputTest,<sp/>UsesNoColorWhenGTestColorFlagIsInvalid)<sp/>{</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6612"><highlight class="normal"></highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6615"><highlight class="normal"></highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6618"><highlight class="normal"></highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6622"><highlight class="normal"></highlight></codeline>
<codeline lineno="6623"><highlight class="normal">TEST(ColoredOutputTest,<sp/>UsesColorsWhenStdoutIsTty)<sp/>{</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"></highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>not<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"></highlight></codeline>
<codeline lineno="6631"><highlight class="normal">TEST(ColoredOutputTest,<sp/>UsesColorsWhenTermSupportsColors)<sp/>{</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(color,<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"></highlight></codeline>
<codeline lineno="6634"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_WINDOWS_MINGW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>we<sp/>ignore<sp/>the<sp/>TERM<sp/>variable<sp/>as<sp/>it&apos;s<sp/>usually<sp/>not<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6636"><highlight class="normal"></highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dumb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6639"><highlight class="normal"></highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6642"><highlight class="normal"></highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6645"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>non-Windows<sp/>platforms,<sp/>we<sp/>rely<sp/>on<sp/>TERM<sp/>to<sp/>determine<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>terminal<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6648"><highlight class="normal"></highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dumb&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>doesn&apos;t<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6651"><highlight class="normal"></highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;emacs&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>doesn&apos;t<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6654"><highlight class="normal"></highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vt100&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>doesn&apos;t<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6657"><highlight class="normal"></highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm-mono&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>doesn&apos;t<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6660"><highlight class="normal"></highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6663"><highlight class="normal"></highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm-color&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6666"><highlight class="normal"></highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm-kitty&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6669"><highlight class="normal"></highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xterm-256color&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6672"><highlight class="normal"></highlight></codeline>
<codeline lineno="6673"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;screen&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6675"><highlight class="normal"></highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;screen-256color&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6678"><highlight class="normal"></highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tmux&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6681"><highlight class="normal"></highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tmux-256color&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6684"><highlight class="normal"></highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rxvt-unicode&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6687"><highlight class="normal"></highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rxvt-unicode-256color&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6690"><highlight class="normal"></highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6693"><highlight class="normal"></highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/>SetEnv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cygwin&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>TERM<sp/>supports<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ShouldUseColor(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Stdout<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6698"><highlight class="normal"></highlight></codeline>
<codeline lineno="6699"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>StaticAssertTypeEq<sp/>works<sp/>in<sp/>a<sp/>namespace<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6700"><highlight class="normal"></highlight></codeline>
<codeline lineno="6701"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dummy1<sp/>GTEST_ATTRIBUTE_UNUSED_<sp/>=<sp/>StaticAssertTypeEq&lt;bool,<sp/>bool&gt;();</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dummy2<sp/>GTEST_ATTRIBUTE_UNUSED_<sp/>=</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/>StaticAssertTypeEq&lt;const<sp/>int,<sp/>const<sp/>int&gt;();</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"></highlight></codeline>
<codeline lineno="6705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>StaticAssertTypeEq<sp/>works<sp/>in<sp/>a<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6706"><highlight class="normal"></highlight></codeline>
<codeline lineno="6707"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6708" refid="classStaticAssertTypeEqTestHelper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classStaticAssertTypeEqTestHelper" kindref="compound">StaticAssertTypeEqTestHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/><ref refid="classStaticAssertTypeEqTestHelper" kindref="compound">StaticAssertTypeEqTestHelper</ref>()<sp/>{<sp/>StaticAssertTypeEq&lt;bool,<sp/>T&gt;();<sp/>}</highlight></codeline>
<codeline lineno="6711"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal">TEST(StaticAssertTypeEqTest,<sp/>WorksInClass)<sp/>{</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/><ref refid="classStaticAssertTypeEqTestHelper" kindref="compound">StaticAssertTypeEqTestHelper&lt;bool&gt;</ref>();</highlight></codeline>
<codeline lineno="6715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"></highlight></codeline>
<codeline lineno="6717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>StaticAssertTypeEq<sp/>works<sp/>inside<sp/>a<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6718"><highlight class="normal"></highlight></codeline>
<codeline lineno="6719"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IntAlias;</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"></highlight></codeline>
<codeline lineno="6721"><highlight class="normal">TEST(StaticAssertTypeEqTest,<sp/>CompilesForEqualTypes)<sp/>{</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int,<sp/>IntAlias&gt;();</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int*,<sp/>IntAlias*&gt;();</highlight></codeline>
<codeline lineno="6724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"></highlight></codeline>
<codeline lineno="6726"><highlight class="normal">TEST(HasNonfatalFailureTest,<sp/>ReturnsFalseWhenThereIsNoFailure)<sp/>{</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(HasNonfatalFailure());</highlight></codeline>
<codeline lineno="6728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"></highlight></codeline>
<codeline lineno="6730"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FailFatally()<sp/>{<sp/>FAIL();<sp/>}</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"></highlight></codeline>
<codeline lineno="6732"><highlight class="normal">TEST(HasNonfatalFailureTest,<sp/>ReturnsFalseWhenThereIsOnlyFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/>FailFatally();</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_nonfatal_failure<sp/>=<sp/>HasNonfatalFailure();</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/>ClearCurrentTestPartResults();</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(has_nonfatal_failure);</highlight></codeline>
<codeline lineno="6737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"></highlight></codeline>
<codeline lineno="6739"><highlight class="normal">TEST(HasNonfatalFailureTest,<sp/>ReturnsTrueWhenThereIsNonfatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/>ADD_FAILURE();</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_nonfatal_failure<sp/>=<sp/>HasNonfatalFailure();</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/>ClearCurrentTestPartResults();</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(has_nonfatal_failure);</highlight></codeline>
<codeline lineno="6744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"></highlight></codeline>
<codeline lineno="6746"><highlight class="normal">TEST(HasNonfatalFailureTest,<sp/>ReturnsTrueWhenThereAreFatalAndNonfatalFailures)<sp/>{</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/>FailFatally();</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/>ADD_FAILURE();</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_nonfatal_failure<sp/>=<sp/>HasNonfatalFailure();</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/>ClearCurrentTestPartResults();</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(has_nonfatal_failure);</highlight></codeline>
<codeline lineno="6752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"></highlight></codeline>
<codeline lineno="6754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>wrapper<sp/>for<sp/>calling<sp/>HasNonfatalFailure<sp/>outside<sp/>of<sp/>a<sp/>test<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6755"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasNonfatalFailureHelper()<sp/>{</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::Test::HasNonfatalFailure();</highlight></codeline>
<codeline lineno="6757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"></highlight></codeline>
<codeline lineno="6759"><highlight class="normal">TEST(HasNonfatalFailureTest,<sp/>WorksOutsideOfTestBody)<sp/>{</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(HasNonfatalFailureHelper());</highlight></codeline>
<codeline lineno="6761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"></highlight></codeline>
<codeline lineno="6763"><highlight class="normal">TEST(HasNonfatalFailureTest,<sp/>WorksOutsideOfTestBody2)<sp/>{</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/>ADD_FAILURE();</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_nonfatal_failure<sp/>=<sp/>HasNonfatalFailureHelper();</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/>ClearCurrentTestPartResults();</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(has_nonfatal_failure);</highlight></codeline>
<codeline lineno="6768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"></highlight></codeline>
<codeline lineno="6770"><highlight class="normal">TEST(HasFailureTest,<sp/>ReturnsFalseWhenThereIsNoFailure)<sp/>{</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(HasFailure());</highlight></codeline>
<codeline lineno="6772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"></highlight></codeline>
<codeline lineno="6774"><highlight class="normal">TEST(HasFailureTest,<sp/>ReturnsTrueWhenThereIsFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/>FailFatally();</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_failure<sp/>=<sp/>HasFailure();</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/>ClearCurrentTestPartResults();</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(has_failure);</highlight></codeline>
<codeline lineno="6779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"></highlight></codeline>
<codeline lineno="6781"><highlight class="normal">TEST(HasFailureTest,<sp/>ReturnsTrueWhenThereIsNonfatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/>ADD_FAILURE();</highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_failure<sp/>=<sp/>HasFailure();</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"><sp/><sp/>ClearCurrentTestPartResults();</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(has_failure);</highlight></codeline>
<codeline lineno="6786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"></highlight></codeline>
<codeline lineno="6788"><highlight class="normal">TEST(HasFailureTest,<sp/>ReturnsTrueWhenThereAreFatalAndNonfatalFailures)<sp/>{</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/>FailFatally();</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/>ADD_FAILURE();</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_failure<sp/>=<sp/>HasFailure();</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/>ClearCurrentTestPartResults();</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(has_failure);</highlight></codeline>
<codeline lineno="6794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"></highlight></codeline>
<codeline lineno="6796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>wrapper<sp/>for<sp/>calling<sp/>HasFailure<sp/>outside<sp/>of<sp/>a<sp/>test<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6797"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasFailureHelper()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::Test::HasFailure();<sp/>}</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"></highlight></codeline>
<codeline lineno="6799"><highlight class="normal">TEST(HasFailureTest,<sp/>WorksOutsideOfTestBody)<sp/>{</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(HasFailureHelper());</highlight></codeline>
<codeline lineno="6801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"></highlight></codeline>
<codeline lineno="6803"><highlight class="normal">TEST(HasFailureTest,<sp/>WorksOutsideOfTestBody2)<sp/>{</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/>ADD_FAILURE();</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_failure<sp/>=<sp/>HasFailureHelper();</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/>ClearCurrentTestPartResults();</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(has_failure);</highlight></codeline>
<codeline lineno="6808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"></highlight></codeline>
<codeline lineno="6810" refid="classTestListener" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestListener" kindref="compound">TestListener</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1EmptyTestEventListener" kindref="compound">EmptyTestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>()<sp/>:<sp/>on_start_counter_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>is_destroyed_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>on_start_counter,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_destroyed)</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>on_start_counter_(on_start_counter),<sp/>is_destroyed_(is_destroyed)<sp/>{}</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"></highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">~TestListener</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_destroyed_)<sp/>*is_destroyed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"></highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(on_start_counter_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>(*on_start_counter_)++;</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"></highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>on_start_counter_;</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_destroyed_;</highlight></codeline>
<codeline lineno="6828"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"></highlight></codeline>
<codeline lineno="6830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6831"><highlight class="normal">TEST(TestEventListenersTest,<sp/>ConstructionWorks)<sp/>{</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"></highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(TestEventListenersAccessor::GetRepeater(&amp;listeners)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(listeners.default_result_printer()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(listeners.default_xml_generator()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"></highlight></codeline>
<codeline lineno="6839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>TestEventListeners<sp/>destructor<sp/>deletes<sp/>all<sp/>the<sp/>listeners<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>owns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6841"><highlight class="normal">TEST(TestEventListenersTest,<sp/>DestructionWorks)<sp/>{</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_result_printer_is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_xml_printer_is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extra_listener_is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>default_result_printer<sp/>=</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;default_result_printer_is_destroyed);</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>default_xml_printer<sp/>=</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;default_xml_printer_is_destroyed);</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>extra_listener<sp/>=</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;extra_listener_is_destroyed);</highlight></codeline>
<codeline lineno="6851"><highlight class="normal"></highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListenersAccessor::SetDefaultResultPrinter(&amp;listeners,</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_result_printer);</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListenersAccessor::SetDefaultXmlGenerator(&amp;listeners,</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_xml_printer);</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/>listeners.Append(extra_listener);</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(default_result_printer_is_destroyed);</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(default_xml_printer_is_destroyed);</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(extra_listener_is_destroyed);</highlight></codeline>
<codeline lineno="6863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"></highlight></codeline>
<codeline lineno="6865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>listener<sp/>Append&apos;ed<sp/>to<sp/>a<sp/>TestEventListeners<sp/>list<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>receiving<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6867"><highlight class="normal">TEST(TestEventListenersTest,<sp/>Append)<sp/>{</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_start_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>listener<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(&amp;on_start_counter,<sp/>&amp;is_destroyed);</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/>listeners.Append(listener);</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(is_destroyed);</highlight></codeline>
<codeline lineno="6879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"></highlight></codeline>
<codeline lineno="6881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>listeners<sp/>receive<sp/>events<sp/>in<sp/>the<sp/>order<sp/>they<sp/>were<sp/>appended<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>list,<sp/>except<sp/>for<sp/>*End<sp/>requests,<sp/>which<sp/>must<sp/>be<sp/>received<sp/>in<sp/>the<sp/>reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6884" refid="classSequenceTestingListener" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1EmptyTestEventListener" kindref="compound">EmptyTestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref>(std::vector&lt;std::string&gt;*<sp/>vector,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>vector_(vector),<sp/>id_(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"></highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_-&gt;push_back(GetEventDescription(</highlight><highlight class="stringliteral">&quot;OnTestProgramStart&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"></highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestProgramEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_-&gt;push_back(GetEventDescription(</highlight><highlight class="stringliteral">&quot;OnTestProgramEnd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"></highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*iteration*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_-&gt;push_back(GetEventDescription(</highlight><highlight class="stringliteral">&quot;OnTestIterationStart&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"></highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnTestIterationEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*iteration*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_-&gt;push_back(GetEventDescription(</highlight><highlight class="stringliteral">&quot;OnTestIterationEnd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"></highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/>std::string<sp/>GetEventDescription(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>method)<sp/>{</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>message;</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/>id_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>method;</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message.GetString();</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"></highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;*<sp/>vector_;</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>id_;</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"></highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6920"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"></highlight></codeline>
<codeline lineno="6922"><highlight class="normal">TEST(EventListenerTest,<sp/>AppendKeepsOrder)<sp/>{</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vec;</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/>listeners.Append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref>(&amp;vec,<sp/></highlight><highlight class="stringliteral">&quot;1st&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/>listeners.Append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref>(&amp;vec,<sp/></highlight><highlight class="stringliteral">&quot;2nd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/>listeners.Append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSequenceTestingListener" kindref="compound">SequenceTestingListener</ref>(&amp;vec,<sp/></highlight><highlight class="stringliteral">&quot;3rd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"></highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/>ASSERT_EQ(3U,<sp/>vec.size());</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1st.OnTestProgramStart&quot;</highlight><highlight class="normal">,<sp/>vec[0].c_str());</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;2nd.OnTestProgramStart&quot;</highlight><highlight class="normal">,<sp/>vec[1].c_str());</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;3rd.OnTestProgramStart&quot;</highlight><highlight class="normal">,<sp/>vec[2].c_str());</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"></highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/>vec.clear();</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramEnd(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/>ASSERT_EQ(3U,<sp/>vec.size());</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;3rd.OnTestProgramEnd&quot;</highlight><highlight class="normal">,<sp/>vec[0].c_str());</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;2nd.OnTestProgramEnd&quot;</highlight><highlight class="normal">,<sp/>vec[1].c_str());</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1st.OnTestProgramEnd&quot;</highlight><highlight class="normal">,<sp/>vec[2].c_str());</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"></highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/>vec.clear();</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestIterationStart(*UnitTest::GetInstance(),<sp/>0);</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/>ASSERT_EQ(3U,<sp/>vec.size());</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1st.OnTestIterationStart&quot;</highlight><highlight class="normal">,<sp/>vec[0].c_str());</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;2nd.OnTestIterationStart&quot;</highlight><highlight class="normal">,<sp/>vec[1].c_str());</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;3rd.OnTestIterationStart&quot;</highlight><highlight class="normal">,<sp/>vec[2].c_str());</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"></highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/>vec.clear();</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestIterationEnd(*UnitTest::GetInstance(),<sp/>0);</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/>ASSERT_EQ(3U,<sp/>vec.size());</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;3rd.OnTestIterationEnd&quot;</highlight><highlight class="normal">,<sp/>vec[0].c_str());</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;2nd.OnTestIterationEnd&quot;</highlight><highlight class="normal">,<sp/>vec[1].c_str());</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;1st.OnTestIterationEnd&quot;</highlight><highlight class="normal">,<sp/>vec[2].c_str());</highlight></codeline>
<codeline lineno="6959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"></highlight></codeline>
<codeline lineno="6961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>listener<sp/>removed<sp/>from<sp/>a<sp/>TestEventListeners<sp/>list<sp/>stops<sp/>receiving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>events<sp/>and<sp/>is<sp/>not<sp/>deleted<sp/>when<sp/>the<sp/>list<sp/>is<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6963"><highlight class="normal">TEST(TestEventListenersTest,<sp/>Release)<sp/>{</highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_start_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Although<sp/>Append<sp/>passes<sp/>the<sp/>ownership<sp/>of<sp/>this<sp/>object<sp/>to<sp/>the<sp/>list,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>calls<sp/>release<sp/>it,<sp/>and<sp/>we<sp/>need<sp/>to<sp/>delete<sp/>it<sp/>before<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>listener<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(&amp;on_start_counter,<sp/>&amp;is_destroyed);</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/>listeners.Append(listener);</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(listener,<sp/>listeners.Release(listener));</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(listeners.Release(listener)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(is_destroyed);</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>listener;</highlight></codeline>
<codeline lineno="6981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"></highlight></codeline>
<codeline lineno="6983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>no<sp/>events<sp/>are<sp/>forwarded<sp/>when<sp/>event<sp/>forwarding<sp/>is<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6984"><highlight class="normal">TEST(EventListenerTest,<sp/>SuppressEventForwarding)<sp/>{</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_start_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>listener<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(&amp;on_start_counter,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"></highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/>listeners.Append(listener);</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(TestEventListenersAccessor::EventForwardingEnabled(listeners));</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::SuppressEventForwarding(&amp;listeners);</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(TestEventListenersAccessor::EventForwardingEnabled(listeners));</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="6996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"></highlight></codeline>
<codeline lineno="6998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>events<sp/>generated<sp/>by<sp/>Google<sp/>Test<sp/>are<sp/>not<sp/>forwarded<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6999"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>test<sp/>subprocesses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7000"><highlight class="normal">TEST(EventListenerDeathTest,<sp/>EventsNotForwardedInDeathTestSubprocesses)<sp/>{</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_(TestEventListenersAccessor::EventForwardingEnabled(</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GetUnitTestImpl()-&gt;listeners()))</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"></highlight></codeline>
<codeline lineno="7010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>listener<sp/>installed<sp/>via<sp/>SetDefaultResultPrinter()<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>receiving<sp/>events<sp/>and<sp/>is<sp/>returned<sp/>via<sp/>default_result_printer()<sp/>and<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>previous<sp/>default_result_printer<sp/>is<sp/>removed<sp/>from<sp/>the<sp/>list<sp/>and<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7013"><highlight class="normal">TEST(EventListenerTest,<sp/>default_result_printer)<sp/>{</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_start_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>listener<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(&amp;on_start_counter,<sp/>&amp;is_destroyed);</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"></highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::SetDefaultResultPrinter(&amp;listeners,<sp/>listener);</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"></highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/>EXPECT_EQ(listener,<sp/>listeners.default_result_printer());</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"></highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"></highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"></highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Replacing<sp/>default_result_printer<sp/>with<sp/>something<sp/>else<sp/>should<sp/>remove<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>list<sp/>and<sp/>destroy<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::SetDefaultResultPrinter(&amp;listeners,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"></highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(listeners.default_result_printer()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(is_destroyed);</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"></highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>broadcasting<sp/>an<sp/>event<sp/>the<sp/>counter<sp/>is<sp/>still<sp/>the<sp/>same,<sp/>indicating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>in<sp/>the<sp/>list<sp/>anymore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="7040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"></highlight></codeline>
<codeline lineno="7042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>default_result_printer<sp/>listener<sp/>stops<sp/>receiving<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>removed<sp/>via<sp/>Release<sp/>and<sp/>that<sp/>is<sp/>not<sp/>owned<sp/>by<sp/>the<sp/>list<sp/>anymore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7044"><highlight class="normal">TEST(EventListenerTest,<sp/>RemovingDefaultResultPrinterWorks)<sp/>{</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_start_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Although<sp/>Append<sp/>passes<sp/>the<sp/>ownership<sp/>of<sp/>this<sp/>object<sp/>to<sp/>the<sp/>list,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>calls<sp/>release<sp/>it,<sp/>and<sp/>we<sp/>need<sp/>to<sp/>delete<sp/>it<sp/>before<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>listener<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(&amp;on_start_counter,<sp/>&amp;is_destroyed);</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListenersAccessor::SetDefaultResultPrinter(&amp;listeners,<sp/>listener);</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"></highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(listener,<sp/>listeners.Release(listener));</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(listeners.default_result_printer()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(is_destroyed);</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"></highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Broadcasting<sp/>events<sp/>now<sp/>should<sp/>not<sp/>affect<sp/>default_result_printer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroying<sp/>the<sp/>list<sp/>should<sp/>not<sp/>affect<sp/>the<sp/>listener<sp/>now,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(is_destroyed);</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>listener;</highlight></codeline>
<codeline lineno="7067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"></highlight></codeline>
<codeline lineno="7069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>listener<sp/>installed<sp/>via<sp/>SetDefaultXmlGenerator()<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7070"><highlight class="normal"></highlight><highlight class="comment">//<sp/>receiving<sp/>events<sp/>and<sp/>is<sp/>returned<sp/>via<sp/>default_xml_generator()<sp/>and<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>previous<sp/>default_xml_generator<sp/>is<sp/>removed<sp/>from<sp/>the<sp/>list<sp/>and<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7072"><highlight class="normal">TEST(EventListenerTest,<sp/>default_xml_generator)<sp/>{</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_start_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>listener<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(&amp;on_start_counter,<sp/>&amp;is_destroyed);</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"></highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::SetDefaultXmlGenerator(&amp;listeners,<sp/>listener);</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"></highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/>EXPECT_EQ(listener,<sp/>listeners.default_xml_generator());</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"></highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"></highlight></codeline>
<codeline lineno="7085"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"></highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Replacing<sp/>default_xml_generator<sp/>with<sp/>something<sp/>else<sp/>should<sp/>remove<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>list<sp/>and<sp/>destroy<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::SetDefaultXmlGenerator(&amp;listeners,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"></highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(listeners.default_xml_generator()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(is_destroyed);</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"></highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>broadcasting<sp/>an<sp/>event<sp/>the<sp/>counter<sp/>is<sp/>still<sp/>the<sp/>same,<sp/>indicating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>in<sp/>the<sp/>list<sp/>anymore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="7099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"></highlight></codeline>
<codeline lineno="7101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>default_xml_generator<sp/>listener<sp/>stops<sp/>receiving<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>removed<sp/>via<sp/>Release<sp/>and<sp/>that<sp/>is<sp/>not<sp/>owned<sp/>by<sp/>the<sp/>list<sp/>anymore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7103"><highlight class="normal">TEST(EventListenerTest,<sp/>RemovingDefaultXmlGeneratorWorks)<sp/>{</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_start_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_destroyed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Although<sp/>Append<sp/>passes<sp/>the<sp/>ownership<sp/>of<sp/>this<sp/>object<sp/>to<sp/>the<sp/>list,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>calls<sp/>release<sp/>it,<sp/>and<sp/>we<sp/>need<sp/>to<sp/>delete<sp/>it<sp/>before<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>*<sp/>listener<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTestListener" kindref="compound">TestListener</ref>(&amp;on_start_counter,<sp/>&amp;is_destroyed);</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1TestEventListeners" kindref="compound">TestEventListeners</ref><sp/>listeners;</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListenersAccessor::SetDefaultXmlGenerator(&amp;listeners,<sp/>listener);</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"></highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(listener,<sp/>listeners.Release(listener));</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(listeners.default_xml_generator()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(is_destroyed);</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"></highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Broadcasting<sp/>events<sp/>now<sp/>should<sp/>not<sp/>affect<sp/>default_xml_generator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListenersAccessor::GetRepeater(&amp;listeners)</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnTestProgramStart(*UnitTest::GetInstance());</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>on_start_counter);</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroying<sp/>the<sp/>list<sp/>should<sp/>not<sp/>affect<sp/>the<sp/>listener<sp/>now,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(is_destroyed);</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>listener;</highlight></codeline>
<codeline lineno="7126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"></highlight></codeline>
<codeline lineno="7128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>alternative,<sp/>verbose<sp/>spellings<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>of<sp/>the<sp/>macros<sp/>work.<sp/><sp/>We<sp/>don&apos;t<sp/>test<sp/>them<sp/>thoroughly<sp/>as<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>be<sp/>quite<sp/>involved.<sp/><sp/>Since<sp/>their<sp/>implementations<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>straightforward,<sp/>and<sp/>they<sp/>are<sp/>rarely<sp/>used,<sp/>we&apos;ll<sp/>just<sp/>rely<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>users<sp/>to<sp/>tell<sp/>us<sp/>when<sp/>they<sp/>are<sp/>broken.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7133"><highlight class="normal">GTEST_TEST(AlternativeNameTest,<sp/>Works)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_TEST<sp/>is<sp/>the<sp/>same<sp/>as<sp/>TEST.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/>GTEST_SUCCEED()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_SUCCEED<sp/>is<sp/>the<sp/>same<sp/>as<sp/>SUCCEED.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7135"><highlight class="normal"></highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_FAIL<sp/>is<sp/>the<sp/>same<sp/>as<sp/>FAIL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"></highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_ASSERT_XY<sp/>is<sp/>the<sp/>same<sp/>as<sp/>ASSERT_XY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7141"><highlight class="normal"></highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_EQ(0,<sp/>0);</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_EQ(0,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_EQ(1,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7147"><highlight class="normal"></highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_NE(0,<sp/>1);</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_NE(1,<sp/>0);</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_NE(0,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"></highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_LE(0,<sp/>0);</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_LE(0,<sp/>1);</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_LE(1,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"></highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_LT(0,<sp/>1);</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_LT(0,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_LT(1,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"></highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_GE(0,<sp/>0);</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_GE(1,<sp/>0);</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_GE(0,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"></highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/>GTEST_ASSERT_GT(1,<sp/>0);</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_GT(0,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(GTEST_ASSERT_GT(1,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7175"><highlight class="normal"></highlight></codeline>
<codeline lineno="7176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>internal<sp/>utilities<sp/>necessary<sp/>for<sp/>implementation<sp/>of<sp/>the<sp/>universal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>printing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7178"><highlight class="normal"></highlight></codeline>
<codeline lineno="7179" refid="classConversionHelperBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classConversionHelperBase" kindref="compound">ConversionHelperBase</ref><sp/>{};</highlight></codeline>
<codeline lineno="7180" refid="classConversionHelperDerived" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classConversionHelperDerived" kindref="compound">ConversionHelperDerived</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classConversionHelperBase" kindref="compound">ConversionHelperBase</ref><sp/>{};</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"></highlight></codeline>
<codeline lineno="7182" refid="structHasDebugStringMethods" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structHasDebugStringMethods" kindref="compound">HasDebugStringMethods</ref><sp/>{</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/>std::string<sp/>DebugString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/>std::string<sp/>ShortDebugString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7185"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"></highlight></codeline>
<codeline lineno="7187" refid="structInheritsDebugStringMethods" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structInheritsDebugStringMethods" kindref="compound">InheritsDebugStringMethods</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structHasDebugStringMethods" kindref="compound">HasDebugStringMethods</ref><sp/>{};</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"></highlight></codeline>
<codeline lineno="7189" refid="structWrongTypeDebugStringMethod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structWrongTypeDebugStringMethod" kindref="compound">WrongTypeDebugStringMethod</ref><sp/>{</highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/>std::string<sp/>DebugString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ShortDebugString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="7192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"></highlight></codeline>
<codeline lineno="7194" refid="structNotConstDebugStringMethod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structNotConstDebugStringMethod" kindref="compound">NotConstDebugStringMethod</ref><sp/>{</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/>std::string<sp/>DebugString()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/>std::string<sp/>ShortDebugString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"></highlight></codeline>
<codeline lineno="7199" refid="structMissingDebugStringMethod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMissingDebugStringMethod" kindref="compound">MissingDebugStringMethod</ref><sp/>{</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/>std::string<sp/>DebugString()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7201"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7202"><highlight class="normal"></highlight></codeline>
<codeline lineno="7203"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IncompleteType;</highlight></codeline>
<codeline lineno="7204"><highlight class="normal"></highlight></codeline>
<codeline lineno="7205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasDebugStringAndShortDebugString&lt;T&gt;::value<sp/>is<sp/>a<sp/>compile-time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7207"><highlight class="normal">TEST(HasDebugStringAndShortDebugStringTest,<sp/>ValueIsCompileTimeConstant)<sp/>{</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;HasDebugStringMethods&gt;::value</ref>,</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const_true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;InheritsDebugStringMethods&gt;::value</ref>,</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const_true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString</ref>&lt;</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInheritsDebugStringMethods" kindref="compound">InheritsDebugStringMethods</ref>&gt;::value,</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const_true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;WrongTypeDebugStringMethod&gt;::value</ref>,</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const_false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;NotConstDebugStringMethod&gt;::value</ref>,</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const_false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;MissingDebugStringMethod&gt;::value</ref>,</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const_false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!<ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;IncompleteType&gt;::value</ref>,</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const_false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!<ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;int&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;const_false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"></highlight></codeline>
<codeline lineno="7230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasDebugStringAndShortDebugString&lt;T&gt;::value<sp/>is<sp/>true<sp/>when<sp/>T<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>needed<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7232"><highlight class="normal">TEST(HasDebugStringAndShortDebugStringTest,</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ValueIsTrueWhenTypeHasDebugStringAndShortDebugString)<sp/>{</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;InheritsDebugStringMethods&gt;::value</ref>);</highlight></codeline>
<codeline lineno="7236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"></highlight></codeline>
<codeline lineno="7238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasDebugStringAndShortDebugString&lt;T&gt;::value<sp/>is<sp/>false<sp/>when<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>have<sp/>needed<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7240"><highlight class="normal">TEST(HasDebugStringAndShortDebugStringTest,</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ValueIsFalseWhenTypeIsNotAProtocolMessage)<sp/>{</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(<ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;int&gt;::value</ref>);</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1HasDebugStringAndShortDebugString" kindref="compound">HasDebugStringAndShortDebugString&lt;const ConversionHelperBase&gt;::value</ref>);</highlight></codeline>
<codeline lineno="7245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"></highlight></codeline>
<codeline lineno="7247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>GTEST_REMOVE_REFERENCE_AND_CONST_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7248"><highlight class="normal"></highlight></codeline>
<codeline lineno="7249"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestGTestRemoveReferenceAndConst()<sp/>{</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;T1,<sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(T2)&gt;::value,</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;GTEST_REMOVE_REFERENCE_AND_CONST_<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"></highlight></codeline>
<codeline lineno="7255"><highlight class="normal">TEST(RemoveReferenceToConstTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/>TestGTestRemoveReferenceAndConst&lt;int,<sp/>int&gt;();</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/>TestGTestRemoveReferenceAndConst&lt;double,<sp/>double&amp;&gt;();</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/>TestGTestRemoveReferenceAndConst&lt;char,<sp/>const<sp/>char&gt;();</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/>TestGTestRemoveReferenceAndConst&lt;char,<sp/>const<sp/>char&amp;&gt;();</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"><sp/><sp/>TestGTestRemoveReferenceAndConst&lt;const<sp/>char*,<sp/>const<sp/>char*&gt;();</highlight></codeline>
<codeline lineno="7261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"></highlight></codeline>
<codeline lineno="7263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>GTEST_REFERENCE_TO_CONST_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7264"><highlight class="normal"></highlight></codeline>
<codeline lineno="7265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="7266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestGTestReferenceToConst()<sp/>{</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;T1,<sp/>GTEST_REFERENCE_TO_CONST_(T2)&gt;::value,</highlight></codeline>
<codeline lineno="7268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;GTEST_REFERENCE_TO_CONST_<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"></highlight></codeline>
<codeline lineno="7271"><highlight class="normal">TEST(GTestReferenceToConstTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/>TestGTestReferenceToConst&lt;const<sp/>char&amp;,<sp/>char&gt;();</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/>TestGTestReferenceToConst&lt;const<sp/>int&amp;,<sp/>const<sp/>int&gt;();</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/>TestGTestReferenceToConst&lt;const<sp/>double&amp;,<sp/>double&gt;();</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"><sp/><sp/>TestGTestReferenceToConst&lt;const<sp/>std::string&amp;,<sp/>const<sp/>std::string&amp;&gt;();</highlight></codeline>
<codeline lineno="7276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7277"><highlight class="normal"></highlight></codeline>
<codeline lineno="7278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>IsContainerTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7279"><highlight class="normal"></highlight></codeline>
<codeline lineno="7280" refid="classNonContainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNonContainer" kindref="compound">NonContainer</ref><sp/>{};</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"></highlight></codeline>
<codeline lineno="7282"><highlight class="normal">TEST(IsContainerTestTest,<sp/>WorksForNonContainer)<sp/>{</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsNotContainer),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainerTest&lt;int&gt;(0)));</highlight></codeline>
<codeline lineno="7284"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsNotContainer),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainerTest&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[5]&gt;(0)));</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsNotContainer),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainerTest&lt;NonContainer&gt;(0)));</highlight></codeline>
<codeline lineno="7286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"></highlight></codeline>
<codeline lineno="7288"><highlight class="normal">TEST(IsContainerTestTest,<sp/>WorksForContainer)<sp/>{</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainer),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainerTest&lt;std::vector&lt;bool&gt;&gt;(0)));</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainer),</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainerTest&lt;std::map&lt;int,<sp/>double&gt;&gt;(0)));</highlight></codeline>
<codeline lineno="7292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7293"><highlight class="normal"></highlight></codeline>
<codeline lineno="7294" refid="structConstOnlyContainerWithPointerIterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structConstOnlyContainerWithPointerIterator" kindref="compound">ConstOnlyContainerWithPointerIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">const_iterator<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/>const_iterator<sp/>begin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/>const_iterator<sp/>end()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7298"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7299"><highlight class="normal"></highlight></codeline>
<codeline lineno="7300" refid="structConstOnlyContainerWithClassIterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structConstOnlyContainerWithClassIterator" kindref="compound">ConstOnlyContainerWithClassIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="7301" refid="structConstOnlyContainerWithClassIterator_1_1const__iterator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structConstOnlyContainerWithClassIterator_1_1const__iterator" kindref="compound">const_iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>operator*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structConstOnlyContainerWithClassIterator_1_1const__iterator" kindref="compound">const_iterator</ref>&amp;<sp/>operator++(</highlight><highlight class="comment">/*<sp/>pre-increment<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"><sp/><sp/><ref refid="structConstOnlyContainerWithClassIterator_1_1const__iterator" kindref="compound">const_iterator</ref><sp/>begin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7306"><highlight class="normal"><sp/><sp/><ref refid="structConstOnlyContainerWithClassIterator_1_1const__iterator" kindref="compound">const_iterator</ref><sp/>end()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7307"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7308"><highlight class="normal"></highlight></codeline>
<codeline lineno="7309"><highlight class="normal">TEST(IsContainerTestTest,<sp/>ConstOnlyContainer)<sp/>{</highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainer),</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainerTest&lt;ConstOnlyContainerWithPointerIterator&gt;(0)));</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainer),</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IsContainerTest&lt;ConstOnlyContainerWithClassIterator&gt;(0)));</highlight></codeline>
<codeline lineno="7314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"></highlight></codeline>
<codeline lineno="7316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>IsHashTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7317" refid="structAHashTable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structAHashTable" kindref="compound">AHashTable</ref><sp/>{</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hasher;</highlight></codeline>
<codeline lineno="7319"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7320" refid="structNotReallyAHashTable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structNotReallyAHashTable" kindref="compound">NotReallyAHashTable</ref><sp/>{</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hasher;</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reverse_iterator;</highlight></codeline>
<codeline lineno="7323"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7324"><highlight class="normal">TEST(IsHashTable,<sp/>Basic)<sp/>{</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<ref refid="structtesting_1_1internal_1_1IsHashTable" kindref="compound">testing::internal::IsHashTable&lt;AHashTable&gt;::value</ref>);</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(<ref refid="structtesting_1_1internal_1_1IsHashTable" kindref="compound">testing::internal::IsHashTable&lt;NotReallyAHashTable&gt;::value</ref>);</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(<ref refid="structtesting_1_1internal_1_1IsHashTable" kindref="compound">testing::internal::IsHashTable</ref>&lt;std::vector&lt;int&gt;&gt;::value);</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<ref refid="structtesting_1_1internal_1_1IsHashTable" kindref="compound">testing::internal::IsHashTable</ref>&lt;std::unordered_set&lt;int&gt;&gt;::value);</highlight></codeline>
<codeline lineno="7329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"></highlight></codeline>
<codeline lineno="7331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ArrayEq().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7332"><highlight class="normal"></highlight></codeline>
<codeline lineno="7333"><highlight class="normal">TEST(ArrayEqTest,<sp/>WorksForDegeneratedArrays)<sp/>{</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(5,<sp/>5L));</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ArrayEq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0));</highlight></codeline>
<codeline lineno="7336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"></highlight></codeline>
<codeline lineno="7338"><highlight class="normal">TEST(ArrayEqTest,<sp/>WorksForOneDimensionalArrays)<sp/>{</highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>a<sp/>and<sp/>b<sp/>are<sp/>distinct<sp/>but<sp/>compatible<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{0,<sp/>1};</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b[]<sp/>=<sp/>{0,<sp/>1};</highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(a,<sp/>b));</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(a,<sp/>2,<sp/>b));</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"></highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/>b[0]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ArrayEq(a,<sp/>b));</highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ArrayEq(a,<sp/>1,<sp/>b));</highlight></codeline>
<codeline lineno="7348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7349"><highlight class="normal"></highlight></codeline>
<codeline lineno="7350"><highlight class="normal">TEST(ArrayEqTest,<sp/>WorksForTwoDimensionalArrays)<sp/>{</highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;li&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"></highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(a,<sp/>b));</highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(a,<sp/>2,<sp/>b));</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"></highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ArrayEq(a,<sp/>c));</highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ArrayEq(a,<sp/>2,<sp/>c));</highlight></codeline>
<codeline lineno="7360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"></highlight></codeline>
<codeline lineno="7362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ArrayAwareFind().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7363"><highlight class="normal"></highlight></codeline>
<codeline lineno="7364"><highlight class="normal">TEST(ArrayAwareFindTest,<sp/>WorksForOneDimensionalArray)<sp/>{</highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a<sp/>+<sp/>4,<sp/>ArrayAwareFind(a,<sp/>a<sp/>+<sp/>5,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7367"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a<sp/>+<sp/>5,<sp/>ArrayAwareFind(a,<sp/>a<sp/>+<sp/>5,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7369"><highlight class="normal"></highlight></codeline>
<codeline lineno="7370"><highlight class="normal">TEST(ArrayAwareFindTest,<sp/>WorksForTwoDimensionalArray)<sp/>{</highlight></codeline>
<codeline lineno="7371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[][2]<sp/>=<sp/>{{0,<sp/>1},<sp/>{2,<sp/>3},<sp/>{4,<sp/>5}};</highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[2]<sp/>=<sp/>{2,<sp/>3};</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a<sp/>+<sp/>1,<sp/>ArrayAwareFind(a,<sp/>a<sp/>+<sp/>3,<sp/>b));</highlight></codeline>
<codeline lineno="7374"><highlight class="normal"></highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c[2]<sp/>=<sp/>{6,<sp/>7};</highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a<sp/>+<sp/>3,<sp/>ArrayAwareFind(a,<sp/>a<sp/>+<sp/>3,<sp/>c));</highlight></codeline>
<codeline lineno="7377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7378"><highlight class="normal"></highlight></codeline>
<codeline lineno="7379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>CopyArray().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7380"><highlight class="normal"></highlight></codeline>
<codeline lineno="7381"><highlight class="normal">TEST(CopyArrayTest,<sp/>WorksForDegeneratedArrays)<sp/>{</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/>CopyArray(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="7385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"></highlight></codeline>
<codeline lineno="7387"><highlight class="normal">TEST(CopyArrayTest,<sp/>WorksForOneDimensionalArrays)<sp/>{</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a[3]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[3];</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__<sp/><sp/></highlight><highlight class="comment">//<sp/>C++Builder<sp/>cannot<sp/>compile<sp/>some<sp/>array<sp/>size<sp/>deductions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/>CopyArray(a,<sp/>&amp;b);</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(a,<sp/>b));</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7394"><highlight class="normal"></highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c[3];</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/>CopyArray(a,<sp/>3,<sp/>c);</highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(a,<sp/>c));</highlight></codeline>
<codeline lineno="7398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"></highlight></codeline>
<codeline lineno="7400"><highlight class="normal">TEST(CopyArrayTest,<sp/>WorksForTwoDimensionalArrays)<sp/>{</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[2][3]<sp/>=<sp/>{{0,<sp/>1,<sp/>2},<sp/>{3,<sp/>4,<sp/>5}};</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[2][3];</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__<sp/><sp/></highlight><highlight class="comment">//<sp/>C++Builder<sp/>cannot<sp/>compile<sp/>some<sp/>array<sp/>size<sp/>deductions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/>CopyArray(a,<sp/>&amp;b);</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(a,<sp/>b));</highlight></codeline>
<codeline lineno="7406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7407"><highlight class="normal"></highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c[2][3];</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/>CopyArray(a,<sp/>2,<sp/>c);</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ArrayEq(a,<sp/>c));</highlight></codeline>
<codeline lineno="7411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"></highlight></codeline>
<codeline lineno="7413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>NativeArray.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7414"><highlight class="normal"></highlight></codeline>
<codeline lineno="7415"><highlight class="normal">TEST(NativeArrayTest,<sp/>ConstructorFromArrayWorks)<sp/>{</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[3]<sp/>=<sp/>{0,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;int&gt;</ref><sp/>na(a,<sp/>3,<sp/><ref refid="structtesting_1_1internal_1_1RelationToSourceReference" kindref="compound">RelationToSourceReference</ref>());</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3U,<sp/>na.size());</highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a,<sp/>na.begin());</highlight></codeline>
<codeline lineno="7420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7421"><highlight class="normal"></highlight></codeline>
<codeline lineno="7422"><highlight class="normal">TEST(NativeArrayTest,<sp/>CreatesAndDeletesCopyOfArrayWhenAskedTo)<sp/>{</highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Array[2];</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/>Array*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Array[1];</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/>(*a)[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/>(*a)[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;int&gt;</ref><sp/>na(*a,<sp/>2,<sp/><ref refid="structtesting_1_1internal_1_1RelationToSourceCopy" kindref="compound">RelationToSourceCopy</ref>());</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/>EXPECT_NE(*a,<sp/>na.begin());</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>a;</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>na.begin()[0]);</highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>na.begin()[1]);</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"></highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>rely<sp/>on<sp/>the<sp/>heap<sp/>checker<sp/>to<sp/>verify<sp/>that<sp/>na<sp/>deletes<sp/>the<sp/>copy<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7436"><highlight class="normal"></highlight></codeline>
<codeline lineno="7437"><highlight class="normal">TEST(NativeArrayTest,<sp/>TypeMembersAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="7438"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;char,<sp/>NativeArray&lt;char&gt;::value_type&gt;();</highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int[2],<sp/>NativeArray&lt;int[2]&gt;::value_type&gt;();</highlight></codeline>
<codeline lineno="7440"><highlight class="normal"></highlight></codeline>
<codeline lineno="7441"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;const<sp/>char*,<sp/>NativeArray&lt;char&gt;::const_iterator&gt;();</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bool(*)[2],<sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;bool[2]&gt;::const_iterator</ref>&gt;();</highlight></codeline>
<codeline lineno="7443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7444"><highlight class="normal"></highlight></codeline>
<codeline lineno="7445"><highlight class="normal">TEST(NativeArrayTest,<sp/>MethodsWork)<sp/>{</highlight></codeline>
<codeline lineno="7446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[3]<sp/>=<sp/>{0,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="7447"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;int&gt;</ref><sp/>na(a,<sp/>3,<sp/><ref refid="structtesting_1_1internal_1_1RelationToSourceCopy" kindref="compound">RelationToSourceCopy</ref>());</highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/>ASSERT_EQ(3U,<sp/>na.size());</highlight></codeline>
<codeline lineno="7449"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>na.end()<sp/>-<sp/>na.begin());</highlight></codeline>
<codeline lineno="7450"><highlight class="normal"></highlight></codeline>
<codeline lineno="7451"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;int&gt;::const_iterator</ref><sp/>it<sp/>=<sp/>na.begin();</highlight></codeline>
<codeline lineno="7452"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>*it);</highlight></codeline>
<codeline lineno="7453"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="7454"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>*it);</highlight></codeline>
<codeline lineno="7455"><highlight class="normal"><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="7456"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>*it);</highlight></codeline>
<codeline lineno="7457"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="7458"><highlight class="normal"><sp/><sp/>EXPECT_EQ(na.end(),<sp/>it);</highlight></codeline>
<codeline lineno="7459"><highlight class="normal"></highlight></codeline>
<codeline lineno="7460"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(na<sp/>==<sp/>na);</highlight></codeline>
<codeline lineno="7461"><highlight class="normal"></highlight></codeline>
<codeline lineno="7462"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;int&gt;</ref><sp/>na2(a,<sp/>3,<sp/><ref refid="structtesting_1_1internal_1_1RelationToSourceReference" kindref="compound">RelationToSourceReference</ref>());</highlight></codeline>
<codeline lineno="7463"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(na<sp/>==<sp/>na2);</highlight></codeline>
<codeline lineno="7464"><highlight class="normal"></highlight></codeline>
<codeline lineno="7465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b1[3]<sp/>=<sp/>{0,<sp/>1,<sp/>1};</highlight></codeline>
<codeline lineno="7466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b2[4]<sp/>=<sp/>{0,<sp/>1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(na<sp/>==<sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;int&gt;</ref>(b1,<sp/>3,<sp/><ref refid="structtesting_1_1internal_1_1RelationToSourceReference" kindref="compound">RelationToSourceReference</ref>()));</highlight></codeline>
<codeline lineno="7468"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(na<sp/>==<sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;int&gt;</ref>(b2,<sp/>4,<sp/><ref refid="structtesting_1_1internal_1_1RelationToSourceCopy" kindref="compound">RelationToSourceCopy</ref>()));</highlight></codeline>
<codeline lineno="7469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"></highlight></codeline>
<codeline lineno="7471"><highlight class="normal">TEST(NativeArrayTest,<sp/>WorksForTwoDimensionalArray)<sp/>{</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a[2][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7473"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1NativeArray" kindref="compound">NativeArray&lt;char[3]&gt;</ref><sp/>na(a,<sp/>2,<sp/><ref refid="structtesting_1_1internal_1_1RelationToSourceReference" kindref="compound">RelationToSourceReference</ref>());</highlight></codeline>
<codeline lineno="7474"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2U,<sp/>na.size());</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a,<sp/>na.begin());</highlight></codeline>
<codeline lineno="7476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"></highlight></codeline>
<codeline lineno="7478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IndexSequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7479"><highlight class="normal">TEST(IndexSequence,<sp/>MakeIndexSequence)<sp/>{</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1IndexSequence" kindref="compound">testing::internal::IndexSequence</ref>;</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::MakeIndexSequence;</highlight></codeline>
<codeline lineno="7482"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;<ref refid="structtesting_1_1internal_1_1IndexSequence" kindref="compound">IndexSequence&lt;&gt;</ref>,<sp/>MakeIndexSequence&lt;0&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="7484"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;IndexSequence&lt;0&gt;,<sp/>MakeIndexSequence&lt;1&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;IndexSequence&lt;0,<sp/>1&gt;,<sp/>MakeIndexSequence&lt;2&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((</highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;IndexSequence&lt;0,<sp/>1,<sp/>2&gt;,<sp/>MakeIndexSequence&lt;3&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_base_of&lt;IndexSequence&lt;0,<sp/>1,<sp/>2&gt;,<sp/>MakeIndexSequence&lt;3&gt;&gt;::value));</highlight></codeline>
<codeline lineno="7492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"></highlight></codeline>
<codeline lineno="7494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ElemFromList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7495"><highlight class="normal">TEST(ElemFromList,<sp/>Basic)<sp/>{</highlight></codeline>
<codeline lineno="7496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ElemFromList" kindref="compound">testing::internal::ElemFromList</ref>;</highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>ElemFromList&lt;0,<sp/>int,<sp/>double,<sp/>char&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>ElemFromList&lt;1,<sp/>int,<sp/>double,<sp/>char&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>ElemFromList&lt;2,<sp/>int,<sp/>double,<sp/>char&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>ElemFromList&lt;7,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="7506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"></highlight></codeline>
<codeline lineno="7508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FlatTuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7509"><highlight class="normal">TEST(FlatTuple,<sp/>Basic)<sp/>{</highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FlatTuple" kindref="compound">testing::internal::FlatTuple</ref>;</highlight></codeline>
<codeline lineno="7511"><highlight class="normal"></highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/>FlatTuple&lt;int,<sp/>double,<sp/>const<sp/>char*&gt;<sp/>tuple<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="7513"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>tuple.Get&lt;0&gt;());</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0.0,<sp/>tuple.Get&lt;1&gt;());</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>tuple.Get&lt;2&gt;());</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"></highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/>tuple<sp/>=<sp/>FlatTuple&lt;int,<sp/>double,<sp/>const<sp/>char*&gt;(</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1FlatTupleConstructTag" kindref="compound">testing::internal::FlatTupleConstructTag</ref>{},<sp/>7,<sp/>3.2,<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>tuple.Get&lt;0&gt;());</highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3.2,<sp/>tuple.Get&lt;1&gt;());</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/>EXPECT_EQ(std::string(</highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">),<sp/>tuple.Get&lt;2&gt;());</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"></highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/>tuple.Get&lt;1&gt;()<sp/>=<sp/>5.1;</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5.1,<sp/>tuple.Get&lt;1&gt;());</highlight></codeline>
<codeline lineno="7525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7526"><highlight class="normal"></highlight></codeline>
<codeline lineno="7527"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7528"><highlight class="normal">std::string<sp/>AddIntToString(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="7529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>+<sp/>std::to_string(i);</highlight></codeline>
<codeline lineno="7530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7531"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7532"><highlight class="normal"></highlight></codeline>
<codeline lineno="7533"><highlight class="normal">TEST(FlatTuple,<sp/>Apply)<sp/>{</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FlatTuple" kindref="compound">testing::internal::FlatTuple</ref>;</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"></highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/>FlatTuple&lt;int,<sp/>std::string&gt;<sp/>tuple{<ref refid="structtesting_1_1internal_1_1FlatTupleConstructTag" kindref="compound">testing::internal::FlatTupleConstructTag</ref>{},</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"></highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lambda.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(tuple.Apply([](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>i<sp/>==<sp/>static_cast&lt;int&gt;(s.size());</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/>}));</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"></highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/>EXPECT_EQ(tuple.Apply(AddIntToString),<sp/></highlight><highlight class="stringliteral">&quot;Hello5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"></highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mutating<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7548"><highlight class="normal"><sp/><sp/>tuple.Apply([](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i,<sp/>std::string&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="7550"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>s;</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/>EXPECT_EQ(tuple.Get&lt;0&gt;(),<sp/>6);</highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/>EXPECT_EQ(tuple.Get&lt;1&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;HelloHello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"></highlight></codeline>
<codeline lineno="7556" refid="structConstructionCounting" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref><sp/>{</highlight></codeline>
<codeline lineno="7557"><highlight class="normal"><sp/><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>()<sp/>{<sp/>++default_ctor_calls;<sp/>}</highlight></codeline>
<codeline lineno="7558"><highlight class="normal"><sp/><sp/><ref refid="structConstructionCounting" kindref="compound">~ConstructionCounting</ref>()<sp/>{<sp/>++dtor_calls;<sp/>}</highlight></codeline>
<codeline lineno="7559"><highlight class="normal"><sp/><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>&amp;)<sp/>{<sp/>++copy_ctor_calls;<sp/>}</highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>(<ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>&amp;&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/>++move_ctor_calls;<sp/>}</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/>++copy_assignment_calls;</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>&amp;<sp/>operator=(<ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>&amp;&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/>++move_assignment_calls;</highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"></highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset()<sp/>{</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/><sp/>default_ctor_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/>dtor_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_ctor_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"><sp/><sp/><sp/><sp/>move_ctor_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_assignment_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"><sp/><sp/><sp/><sp/>move_assignment_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"></highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_ctor_calls;</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dtor_calls;</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copy_ctor_calls;</highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>move_ctor_calls;</highlight></codeline>
<codeline lineno="7583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copy_assignment_calls;</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>move_assignment_calls;</highlight></codeline>
<codeline lineno="7585"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7586"><highlight class="normal"></highlight></codeline>
<codeline lineno="7587"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ConstructionCounting::default_ctor_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7588"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ConstructionCounting::dtor_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7589"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ConstructionCounting::copy_ctor_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ConstructionCounting::move_ctor_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ConstructionCounting::copy_assignment_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7592"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ConstructionCounting::move_assignment_calls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"></highlight></codeline>
<codeline lineno="7594"><highlight class="normal">TEST(FlatTuple,<sp/>ConstructorCalls)<sp/>{</highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FlatTuple" kindref="compound">testing::internal::FlatTuple</ref>;</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"></highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>construction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7598"><highlight class="normal"><sp/><sp/>ConstructionCounting::Reset();</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/>{<sp/>FlatTuple&lt;ConstructionCounting&gt;<sp/>tuple;<sp/>}</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::default_ctor_calls,<sp/>1);</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::dtor_calls,<sp/>1);</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_ctor_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_ctor_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_assignment_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7605"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_assignment_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"></highlight></codeline>
<codeline lineno="7607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>construction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/>ConstructionCounting::Reset();</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref><sp/>elem;</highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/><sp/><sp/>FlatTuple&lt;ConstructionCounting&gt;<sp/>tuple{</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1FlatTupleConstructTag" kindref="compound">testing::internal::FlatTupleConstructTag</ref>{},<sp/>elem};</highlight></codeline>
<codeline lineno="7613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7614"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::default_ctor_calls,<sp/>1);</highlight></codeline>
<codeline lineno="7615"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::dtor_calls,<sp/>2);</highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_ctor_calls,<sp/>1);</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_ctor_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_assignment_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_assignment_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"></highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>construction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/>ConstructionCounting::Reset();</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"><sp/><sp/><sp/><sp/>FlatTuple&lt;ConstructionCounting&gt;<sp/>tuple{</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1FlatTupleConstructTag" kindref="compound">testing::internal::FlatTupleConstructTag</ref>{},<sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>{}};</highlight></codeline>
<codeline lineno="7626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::default_ctor_calls,<sp/>1);</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::dtor_calls,<sp/>2);</highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_ctor_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_ctor_calls,<sp/>1);</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_assignment_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_assignment_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"></highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>assignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(ofats):<sp/>it<sp/>should<sp/>be<sp/>testing<sp/>assignment<sp/>operator<sp/>of<sp/>FlatTuple,<sp/>not<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/>ConstructionCounting::Reset();</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/><sp/><sp/>FlatTuple&lt;ConstructionCounting&gt;<sp/>tuple;</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref><sp/>elem;</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple.Get&lt;0&gt;()<sp/>=<sp/>elem;</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7643"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::default_ctor_calls,<sp/>2);</highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::dtor_calls,<sp/>2);</highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_ctor_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_ctor_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_assignment_calls,<sp/>1);</highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_assignment_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7649"><highlight class="normal"></highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>assignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(ofats):<sp/>it<sp/>should<sp/>be<sp/>testing<sp/>assignment<sp/>operator<sp/>of<sp/>FlatTuple,<sp/>not<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/>ConstructionCounting::Reset();</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7655"><highlight class="normal"><sp/><sp/><sp/><sp/>FlatTuple&lt;ConstructionCounting&gt;<sp/>tuple;</highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple.Get&lt;0&gt;()<sp/>=<sp/><ref refid="structConstructionCounting" kindref="compound">ConstructionCounting</ref>{};</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7658"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::default_ctor_calls,<sp/>2);</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::dtor_calls,<sp/>2);</highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_ctor_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_ctor_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::copy_assignment_calls,<sp/>0);</highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ConstructionCounting::move_assignment_calls,<sp/>1);</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"></highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/>ConstructionCounting::Reset();</highlight></codeline>
<codeline lineno="7666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7667"><highlight class="normal"></highlight></codeline>
<codeline lineno="7668"><highlight class="normal">TEST(FlatTuple,<sp/>ManyTypes)<sp/>{</highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FlatTuple" kindref="compound">testing::internal::FlatTuple</ref>;</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"></highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FlatTuple<sp/>with<sp/>257<sp/>ints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>show<sp/>that<sp/>we<sp/>can<sp/>do<sp/>it<sp/>with<sp/>thousands<sp/>of<sp/>elements,<sp/>but<sp/>very<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compile<sp/>times<sp/>makes<sp/>it<sp/>unusuitable<sp/>for<sp/>this<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAT_TUPLE_INT8<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7675"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAT_TUPLE_INT16<sp/>GTEST_FLAT_TUPLE_INT8<sp/>GTEST_FLAT_TUPLE_INT8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7676"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAT_TUPLE_INT32<sp/>GTEST_FLAT_TUPLE_INT16<sp/>GTEST_FLAT_TUPLE_INT16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7677"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAT_TUPLE_INT64<sp/>GTEST_FLAT_TUPLE_INT32<sp/>GTEST_FLAT_TUPLE_INT32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7678"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAT_TUPLE_INT128<sp/>GTEST_FLAT_TUPLE_INT64<sp/>GTEST_FLAT_TUPLE_INT64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7679"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAT_TUPLE_INT256<sp/>GTEST_FLAT_TUPLE_INT128<sp/>GTEST_FLAT_TUPLE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7680"><highlight class="normal"></highlight></codeline>
<codeline lineno="7681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>make<sp/>sure<sp/>that<sp/>we<sp/>can<sp/>have<sp/>a<sp/>very<sp/>long<sp/>list<sp/>of<sp/>types<sp/>without<sp/>blowing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>up<sp/>the<sp/>template<sp/>instantiation<sp/>depth.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/>FlatTuple&lt;GTEST_FLAT_TUPLE_INT256<sp/>int&gt;<sp/>tuple;</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"></highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/>tuple.Get&lt;0&gt;()<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/>tuple.Get&lt;99&gt;()<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/>tuple.Get&lt;256&gt;()<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>tuple.Get&lt;0&gt;());</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>tuple.Get&lt;99&gt;());</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1000,<sp/>tuple.Get&lt;256&gt;());</highlight></codeline>
<codeline lineno="7691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7692"><highlight class="normal"></highlight></codeline>
<codeline lineno="7693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>SkipPrefix().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7694"><highlight class="normal"></highlight></codeline>
<codeline lineno="7695"><highlight class="normal">TEST(SkipPrefixTest,<sp/>SkipsWhenPrefixMatches)<sp/>{</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"></highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="7699"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(SkipPrefix(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;p));</highlight></codeline>
<codeline lineno="7700"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str,<sp/>p);</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"></highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="7703"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(SkipPrefix(</highlight><highlight class="stringliteral">&quot;hell&quot;</highlight><highlight class="normal">,<sp/>&amp;p));</highlight></codeline>
<codeline lineno="7704"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str<sp/>+<sp/>4,<sp/>p);</highlight></codeline>
<codeline lineno="7705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7706"><highlight class="normal"></highlight></codeline>
<codeline lineno="7707"><highlight class="normal">TEST(SkipPrefixTest,<sp/>DoesNotSkipWhenPrefixDoesNotMatch)<sp/>{</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7709"><highlight class="normal"></highlight></codeline>
<codeline lineno="7710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="7711"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(SkipPrefix(</highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">,<sp/>&amp;p));</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str,<sp/>p);</highlight></codeline>
<codeline lineno="7713"><highlight class="normal"></highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(SkipPrefix(</highlight><highlight class="stringliteral">&quot;world!&quot;</highlight><highlight class="normal">,<sp/>&amp;p));</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str,<sp/>p);</highlight></codeline>
<codeline lineno="7717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7718"><highlight class="normal"></highlight></codeline>
<codeline lineno="7719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ad_hoc_test_result().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7720"><highlight class="normal">TEST(AdHocTestResultTest,<sp/>AdHocTestResultForUnitTestDoesNotShowFailure)<sp/>{</highlight></codeline>
<codeline lineno="7721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestResult" kindref="compound">testing::TestResult</ref>&amp;<sp/>test_result<sp/>=</highlight></codeline>
<codeline lineno="7722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing::UnitTest::GetInstance()-&gt;ad_hoc_test_result();</highlight></codeline>
<codeline lineno="7723"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(test_result.Failed());</highlight></codeline>
<codeline lineno="7724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7725"><highlight class="normal"></highlight></codeline>
<codeline lineno="7726" refid="classDynamicUnitTestFixture" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDynamicUnitTestFixture" kindref="compound">DynamicUnitTestFixture</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="7727"><highlight class="normal"></highlight></codeline>
<codeline lineno="7728"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDynamicTest" kindref="compound">DynamicTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classDynamicUnitTestFixture" kindref="compound">DynamicUnitTestFixture</ref><sp/>{</highlight></codeline>
<codeline lineno="7729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestBody()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>EXPECT_TRUE(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="7730"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7731"><highlight class="normal"></highlight></codeline>
<codeline lineno="7732"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>dynamic_test<sp/>=<sp/>testing::RegisterTest(</highlight></codeline>
<codeline lineno="7733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DynamicUnitTestFixture&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DynamicTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TYPE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VALUE&quot;</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"><sp/><sp/><sp/><sp/>__LINE__,<sp/>[]()<sp/>-&gt;<sp/><ref refid="classDynamicUnitTestFixture" kindref="compound">DynamicUnitTestFixture</ref>*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDynamicTest" kindref="compound">DynamicTest</ref>;<sp/>});</highlight></codeline>
<codeline lineno="7735"><highlight class="normal"></highlight></codeline>
<codeline lineno="7736"><highlight class="normal">TEST(RegisterTest,<sp/>WasRegistered)<sp/>{</highlight></codeline>
<codeline lineno="7737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>unittest<sp/>=<sp/>testing::UnitTest::GetInstance();</highlight></codeline>
<codeline lineno="7738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unittest-&gt;total_test_suite_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>tests<sp/>=<sp/>unittest-&gt;GetTestSuite(i);</highlight></codeline>
<codeline lineno="7740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tests-&gt;name()<sp/>!=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;DynamicUnitTestFixture&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>tests-&gt;total_test_count();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="7742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tests-&gt;GetTestInfo(j)-&gt;name()<sp/>!=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;DynamicTest&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(tests-&gt;GetTestInfo(j)-&gt;value_param(),<sp/></highlight><highlight class="stringliteral">&quot;VALUE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(tests-&gt;GetTestInfo(j)-&gt;type_param(),<sp/></highlight><highlight class="stringliteral">&quot;TYPE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"></highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Didn&apos;t<sp/>find<sp/>the<sp/>test!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7752"><highlight class="normal"></highlight></codeline>
<codeline lineno="7753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>the<sp/>pattern<sp/>globbing<sp/>algorithm<sp/>is<sp/>linear.<sp/>If<sp/>not,<sp/>this<sp/>test<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7755"><highlight class="normal">TEST(PatternGlobbingTest,<sp/>MatchesFilterLinearRuntime)<sp/>{</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/>std::string<sp/>name(100,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>string<sp/>(a^100)b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7757"><highlight class="normal"><sp/><sp/>name.push_back(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7758"><highlight class="normal"></highlight></codeline>
<codeline lineno="7759"><highlight class="normal"><sp/><sp/>std::string<sp/>pattern;<sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>string<sp/>((a*)^100)b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"><sp/><sp/><sp/><sp/>pattern.append(</highlight><highlight class="stringliteral">&quot;a*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/>pattern.push_back(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"></highlight></codeline>
<codeline lineno="7765"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing::internal::UnitTestOptions::MatchesFilter(name,<sp/>pattern.c_str()));</highlight></codeline>
<codeline lineno="7767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"></highlight></codeline>
<codeline lineno="7769"><highlight class="normal">TEST(PatternGlobbingTest,<sp/>MatchesFilterWithMultiplePatterns)<sp/>{</highlight></codeline>
<codeline lineno="7770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;aaaa&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7771"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testing::internal::UnitTestOptions::MatchesFilter(name,<sp/></highlight><highlight class="stringliteral">&quot;a*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7772"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testing::internal::UnitTestOptions::MatchesFilter(name,<sp/></highlight><highlight class="stringliteral">&quot;a*:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testing::internal::UnitTestOptions::MatchesFilter(name,<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testing::internal::UnitTestOptions::MatchesFilter(name,<sp/></highlight><highlight class="stringliteral">&quot;ab:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testing::internal::UnitTestOptions::MatchesFilter(name,<sp/></highlight><highlight class="stringliteral">&quot;ab:a*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7777"><highlight class="normal"></highlight></codeline>
<codeline lineno="7778"><highlight class="normal">TEST(PatternGlobbingTest,<sp/>MatchesFilterEdgeCases)<sp/>{</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testing::internal::UnitTestOptions::MatchesFilter(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;*a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7780"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testing::internal::UnitTestOptions::MatchesFilter(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7781"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testing::internal::UnitTestOptions::MatchesFilter(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7782"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testing::internal::UnitTestOptions::MatchesFilter(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7783"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc"/>
  </compounddef>
</doxygen>
