<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="googletest-port-test_8cc" kind="file" language="C++">
    <compoundname>googletest-port-test.cc</compoundname>
    <includes local="no">stdio.h</includes>
    <includes refid="gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includes local="no">chrono</includes>
    <includes local="no">list</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">thread</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-internal-inl_8h" local="yes">src/gtest-internal-inl.h</includes>
    <includedby refid="gtest__all__test_8cc" local="yes">build/_deps/googletest-src/googletest/test/gtest_all_test.cc</includedby>
    <incdepgraph>
      <node id="37">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="21">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="51">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="40">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="3">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/googletest-port-test.cc</label>
        <link refid="googletest-port-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>algorithm</label>
      </node>
      <node id="42">
        <label>atomic</label>
      </node>
      <node id="55">
        <label>cassert</label>
      </node>
      <node id="8">
        <label>cerrno</label>
      </node>
      <node id="27">
        <label>chrono</label>
      </node>
      <node id="33">
        <label>cstddef</label>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>ctype.h</label>
      </node>
      <node id="62">
        <label>errno.h</label>
      </node>
      <node id="46">
        <label>float.h</label>
      </node>
      <node id="43">
        <label>functional</label>
      </node>
      <node id="34">
        <label>iomanip</label>
      </node>
      <node id="57">
        <label>iosfwd</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="53">
        <label>iterator</label>
      </node>
      <node id="11">
        <label>limits</label>
      </node>
      <node id="28">
        <label>list</label>
      </node>
      <node id="12">
        <label>locale</label>
      </node>
      <node id="47">
        <label>map</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
      <node id="14">
        <label>ostream</label>
      </node>
      <node id="25">
        <label>regex.h</label>
      </node>
      <node id="35">
        <label>set</label>
      </node>
      <node id="36">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="23">
        <label>strings.h</label>
      </node>
      <node id="19">
        <label>sys/stat.h</label>
      </node>
      <node id="20">
        <label>sys/types.h</label>
      </node>
      <node id="29">
        <label>thread</label>
      </node>
      <node id="16">
        <label>tuple</label>
      </node>
      <node id="17">
        <label>type_traits</label>
      </node>
      <node id="26">
        <label>typeinfo</label>
      </node>
      <node id="24">
        <label>unistd.h</label>
      </node>
      <node id="30">
        <label>utility</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classtesting_1_1internal_1_1Base" prot="public">testing::internal::Base</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1Derived" prot="public">testing::internal::Derived</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1Castable" prot="public">testing::internal::Castable</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1ConstCastable" prot="public">testing::internal::ConstCastable</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1ConstAndNonConstCastable" prot="public">testing::internal::ConstAndNonConstCastable</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1To" prot="public">testing::internal::To</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1NoDefaultConstructor" prot="public">testing::internal::NoDefaultConstructor</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>internal<sp/>cross-platform<sp/>support<sp/>utilities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>std::pair<sp/>and<sp/>std::make_pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/gtest-internal-inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::make_pair;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::pair;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">TEST(IsXDigitTest,<sp/>WorksForNarrowAscii)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(</highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(</highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(</highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">TEST(IsXDigitTest,<sp/>ReturnsFalseForNarrowNonAscii)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&apos;\x80&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>|<sp/></highlight><highlight class="stringliteral">&apos;\x80&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">TEST(IsXDigitTest,<sp/>WorksForWideAscii)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(L</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(L</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(L</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(L</highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(L</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsXDigit(L</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(L</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(L</highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(L</highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">TEST(IsXDigitTest,<sp/>ReturnsFalseForWideNonAscii)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80)));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(L</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>|<sp/>0x80)));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsXDigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(L</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>|<sp/>0x100)));</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classtesting_1_1internal_1_1Base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Base<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>Base()<sp/>:<sp/>member_(0)<sp/>{}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Base(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>:<sp/>member_(n)<sp/>{}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>Base(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Base&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>Base&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Base&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Base()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>member()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>member_;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>member_;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classtesting_1_1internal_1_1Derived" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Derived<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Base<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Derived(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>:<sp/>Base(n)<sp/>{}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">TEST(ImplicitCastTest,<sp/>ConvertsPointers)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>Derived<sp/>derived(0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(&amp;derived<sp/>==<sp/>::testing::internal::ImplicitCast_&lt;Base*&gt;(&amp;derived));</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">TEST(ImplicitCastTest,<sp/>CanUseInheritance)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>Derived<sp/>derived(1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>Base<sp/>base<sp/>=<sp/>::testing::internal::ImplicitCast_&lt;Base&gt;(derived);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>EXPECT_EQ(derived.member(),<sp/>base.member());</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classtesting_1_1internal_1_1Castable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1Castable" kindref="compound">Castable</ref><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1Castable" kindref="compound">Castable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>converted)<sp/>:<sp/>converted_(converted)<sp/>{}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Base()<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>*converted_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>converted_;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">TEST(ImplicitCastTest,<sp/>CanUseNonConstCastOperator)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Castable" kindref="compound">Castable</ref><sp/>castable(&amp;converted);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>Base<sp/>base<sp/>=<sp/>::testing::internal::ImplicitCast_&lt;Base&gt;(castable);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(converted);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classtesting_1_1internal_1_1ConstCastable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1ConstCastable" kindref="compound">ConstCastable</ref><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1ConstCastable" kindref="compound">ConstCastable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>converted)<sp/>:<sp/>converted_(converted)<sp/>{}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Base()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>*converted_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>converted_;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">TEST(ImplicitCastTest,<sp/>CanUseConstCastOperatorOnConstValues)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1ConstCastable" kindref="compound">ConstCastable</ref><sp/>const_castable(&amp;converted);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>Base<sp/>base<sp/>=<sp/>::testing::internal::ImplicitCast_&lt;Base&gt;(const_castable);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(converted);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classtesting_1_1internal_1_1ConstAndNonConstCastable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1ConstAndNonConstCastable" kindref="compound">ConstAndNonConstCastable</ref><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1ConstAndNonConstCastable" kindref="compound">ConstAndNonConstCastable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>converted,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>const_converted)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>converted_(converted),<sp/>const_converted_(const_converted)<sp/>{}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Base()<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>*converted_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Base()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>*const_converted_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>converted_;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>const_converted_;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">TEST(ImplicitCastTest,<sp/>CanSelectBetweenConstAndNonConstCasrAppropriately)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>const_converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1ConstAndNonConstCastable" kindref="compound">ConstAndNonConstCastable</ref><sp/>castable(&amp;converted,<sp/>&amp;const_converted);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>Base<sp/>base<sp/>=<sp/>::testing::internal::ImplicitCast_&lt;Base&gt;(castable);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(converted);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(const_converted);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>const_converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1ConstAndNonConstCastable" kindref="compound">ConstAndNonConstCastable</ref><sp/>const_castable(&amp;converted,<sp/>&amp;const_converted);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>base<sp/>=<sp/>::testing::internal::ImplicitCast_&lt;Base&gt;(const_castable);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(converted);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(const_converted);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="classtesting_1_1internal_1_1To" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1To" kindref="compound">To</ref><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1To" kindref="compound">To</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>converted)<sp/>{<sp/>*converted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">TEST(ImplicitCastTest,<sp/>CanUseImplicitConstructor)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1To" kindref="compound">To</ref><sp/>to<sp/>=<sp/>::testing::internal::ImplicitCast_&lt;To&gt;(&amp;converted);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>(void)to;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(converted);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>intentionally<sp/>tests<sp/>a<sp/>suboptimal<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdangling-else&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wempty-body&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpragmas&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">TEST(GtestCheckSyntaxTest,<sp/>BehavesLikeASingleStatement)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>never<sp/>be<sp/>executed;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;It&apos;s<sp/>a<sp/>compilation<sp/>test<sp/>only.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">TEST(GtestCheckSyntaxTest,<sp/>WorksWithSwitch)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(0)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(0)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>failed<sp/>in<sp/>switch<sp/>case&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>behavior<sp/>of<sp/>FormatFileLocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST(FormatFileLocationTest,<sp/>FormatsFileLocation)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>FormatFileLocation(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">,<sp/>FormatFileLocation(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">TEST(FormatFileLocationTest,<sp/>FormatsUnknownFile)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>file&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatFileLocation(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">,<sp/>FormatFileLocation(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">TEST(FormatFileLocationTest,<sp/>FormatsUknownLine)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo.cc:&quot;</highlight><highlight class="normal">,<sp/>FormatFileLocation(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>-1));</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">TEST(FormatFileLocationTest,<sp/>FormatsUknownFileAndLine)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;unknown<sp/>file:&quot;</highlight><highlight class="normal">,<sp/>FormatFileLocation(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>-1));</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>behavior<sp/>of<sp/>FormatCompilerIndependentFileLocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">TEST(FormatCompilerIndependentFileLocationTest,<sp/>FormatsFileLocation)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo.cc:42&quot;</highlight><highlight class="normal">,<sp/>FormatCompilerIndependentFileLocation(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">TEST(FormatCompilerIndependentFileLocationTest,<sp/>FormatsUknownFile)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;unknown<sp/>file:42&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatCompilerIndependentFileLocation(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">TEST(FormatCompilerIndependentFileLocationTest,<sp/>FormatsUknownLine)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>FormatCompilerIndependentFileLocation(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>-1));</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">TEST(FormatCompilerIndependentFileLocationTest,<sp/>FormatsUknownFileAndLine)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;unknown<sp/>file&quot;</highlight><highlight class="normal">,<sp/>FormatCompilerIndependentFileLocation(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>-1));</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_LINUX)<sp/>||<sp/>defined(GTEST_OS_MAC)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_QNX)<sp/>||<sp/>defined(GTEST_OS_FUCHSIA)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_DRAGONFLY)<sp/>||<sp/>defined(GTEST_OS_FREEBSD)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_GNU_KFREEBSD)<sp/>||<sp/>defined(GTEST_OS_NETBSD)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_OPENBSD)<sp/>||<sp/>defined(GTEST_OS_GNU_HURD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ThreadFunc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>internal::Mutex*<sp/>mutex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">internal::Mutex*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>mutex-&gt;Lock();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>mutex-&gt;Unlock();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">TEST(GetThreadCountTest,<sp/>ReturnsCorrectValue)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>starting_count;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_count_after_create;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_count_after_join;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>guarantee<sp/>that<sp/>no<sp/>other<sp/>thread<sp/>was<sp/>created<sp/>or<sp/>destroyed<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>two<sp/>calls<sp/>to<sp/>GetThreadCount().<sp/>We<sp/>make<sp/>multiple<sp/>attempts,<sp/>hoping<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>background<sp/>noise<sp/>is<sp/>not<sp/>constant<sp/>and<sp/>we<sp/>would<sp/>see<sp/>the<sp/>&quot;right&quot;<sp/>values<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>attempt<sp/>=<sp/>0;<sp/>attempt<sp/>&lt;<sp/>20;<sp/>++attempt)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>starting_count<sp/>=<sp/>GetThreadCount();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_t<sp/>thread_id;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::Mutex<sp/>mutex;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::MutexLock<sp/>lock(&amp;mutex);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_t<sp/>attr;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>pthread_attr_init(&amp;attr));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>pthread_attr_setdetachstate(&amp;attr,<sp/>PTHREAD_CREATE_JOINABLE));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>pthread_create(&amp;thread_id,<sp/>&amp;attr,<sp/>&amp;ThreadFunc,<sp/>&amp;mutex);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>pthread_attr_destroy(&amp;attr));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>status);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_count_after_create<sp/>=<sp/>GetThreadCount();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dummy;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>pthread_join(thread_id,<sp/>&amp;dummy));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Join<sp/>before<sp/>we<sp/>decide<sp/>whether<sp/>we<sp/>need<sp/>to<sp/>retry<sp/>the<sp/>test.<sp/>Retry<sp/>if<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arbitrary<sp/>other<sp/>thread<sp/>was<sp/>created<sp/>or<sp/>destroyed<sp/>in<sp/>the<sp/>meantime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_count_after_create<sp/>!=<sp/>starting_count<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>OS<sp/>may<sp/>not<sp/>immediately<sp/>report<sp/>the<sp/>updated<sp/>thread<sp/>count<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>joining<sp/>a<sp/>thread,<sp/>causing<sp/>flakiness<sp/>in<sp/>this<sp/>test.<sp/>To<sp/>counter<sp/>that,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>up<sp/>to<sp/>.5<sp/>seconds<sp/>for<sp/>the<sp/>OS<sp/>to<sp/>report<sp/>the<sp/>correct<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>thread_count_matches<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread_count_after_join<sp/>=<sp/>GetThreadCount();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_count_after_join<sp/>==<sp/>starting_count)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_count_matches<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(100));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retry<sp/>if<sp/>an<sp/>arbitrary<sp/>other<sp/>thread<sp/>was<sp/>created<sp/>or<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!thread_count_matches)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>EXPECT_EQ(thread_count_after_create,<sp/>starting_count<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>EXPECT_EQ(thread_count_after_join,<sp/>starting_count);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">TEST(GetThreadCountTest,<sp/>ReturnsZeroWhenUnableToCountThreads)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>GetThreadCount());</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX<sp/>||<sp/>GTEST_OS_MAC<sp/>||<sp/>GTEST_OS_QNX<sp/>||<sp/>GTEST_OS_FUCHSIA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">TEST(GtestCheckDeathTest,<sp/>DiesWithCorrectOutputOnFailure)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a_false_condition<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>regex[]<sp/>=</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;googletest-port-test\\.cc\\(\\d+\\):&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_USES_POSIX_RE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;googletest-port-test\\.cc:[0-9]+&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;googletest-port-test\\.cc:\\d+&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.*a_false_condition.*Extra<sp/>info.*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(GTEST_CHECK_(a_false_condition)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>info&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">TEST(GtestCheckDeathTest,<sp/>LivesSilentlyOnSuccess)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>EXPECT_EXIT(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Success\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ExitedWithCode(0),<sp/></highlight><highlight class="stringliteral">&quot;Success&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>Google<sp/>Test<sp/>choose<sp/>regular<sp/>expression<sp/>engine<sp/>appropriate<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>platform.<sp/>The<sp/>test<sp/>will<sp/>produce<sp/>compiler<sp/>errors<sp/>in<sp/>case<sp/>of<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>simplicity,<sp/>we<sp/>only<sp/>cover<sp/>the<sp/>most<sp/>important<sp/>platforms<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">TEST(RegexEngineSelectionTest,<sp/>SelectsCorrectRegexEngine)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(GTEST_USES_RE2);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_HAS_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(GTEST_USES_POSIX_RE);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(GTEST_USES_SIMPLE_RE);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_USES_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Str&gt;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RETest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>StringTypes<sp/>as<sp/>the<sp/>list<sp/>of<sp/>all<sp/>string<sp/>types<sp/>that<sp/>class<sp/>RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supports.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types&lt; ::std::string, const char*&gt;</ref><sp/>StringTypes;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">TYPED_TEST_SUITE(RETest,<sp/>StringTypes);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>RE&apos;s<sp/>implicit<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">TYPED_TEST(RETest,<sp/>ImplicitConstructorWorks)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>empty(TypeParam(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>empty.pattern());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>simple(TypeParam(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>simple.pattern());</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>normal(TypeParam(</highlight><highlight class="stringliteral">&quot;.*(\\w+)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;.*(\\w+)&quot;</highlight><highlight class="normal">,<sp/>normal.pattern());</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>RE&apos;s<sp/>constructors<sp/>reject<sp/>invalid<sp/>regular<sp/>expressions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">TYPED_TEST(RETest,<sp/>RejectsInvalidRegex)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>invalid(TypeParam(</highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">));<sp/>},</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;?\&quot;<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>POSIX<sp/>Extended<sp/>regular<sp/>expression.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>RE::FullMatch().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">TYPED_TEST(RETest,<sp/>FullMatchWorks)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>empty(TypeParam(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::FullMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>empty));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(RE::FullMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/>empty));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>re(TypeParam(</highlight><highlight class="stringliteral">&quot;a.*z&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::FullMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;az&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::FullMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;axyz&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(RE::FullMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(RE::FullMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;azy&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>RE::PartialMatch().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">TYPED_TEST(RETest,<sp/>PartialMatchWorks)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>empty(TypeParam(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>empty));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/>empty));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>re(TypeParam(</highlight><highlight class="stringliteral">&quot;a.*z&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;az&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;axyz&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;azy&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(RE::PartialMatch(TypeParam(</highlight><highlight class="stringliteral">&quot;zza&quot;</highlight><highlight class="normal">),<sp/>re));</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_USES_SIMPLE_RE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">TEST(IsInSetTest,<sp/>NulCharIsNotInAnySet)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsInSet(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsInSet(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsInSet(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">TEST(IsInSetTest,<sp/>WorksForNonNulChars)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsInSet(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsInSet(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsInSet(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bcd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsInSet(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">TEST(IsAsciiDigitTest,<sp/>IsFalseForNonDigit)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">TEST(IsAsciiDigitTest,<sp/>IsTrueForDigit)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiDigit(</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">TEST(IsAsciiPunctTest,<sp/>IsFalseForNonPunct)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiPunct(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiPunct(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiPunct(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiPunct(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiPunct(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">TEST(IsAsciiPunctTest,<sp/>IsTrueForPunct)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;^-!\&quot;#$%&amp;&apos;()*+,./:;&lt;=&gt;?@[\\]_`{|}~&quot;</highlight><highlight class="normal">;<sp/>*p;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_PRED1(IsAsciiPunct,<sp/>*p);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">TEST(IsRepeatTest,<sp/>IsFalseForNonRepeatChar)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsRepeat(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsRepeat(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsRepeat(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsRepeat(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsRepeat(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">TEST(IsRepeatTest,<sp/>IsTrueForRepeatChar)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsRepeat(</highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsRepeat(</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsRepeat(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">TEST(IsAsciiWhiteSpaceTest,<sp/>IsFalseForNonWhiteSpace)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">TEST(IsAsciiWhiteSpaceTest,<sp/>IsTrueForWhiteSpace)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWhiteSpace(</highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">TEST(IsAsciiWordCharTest,<sp/>IsFalseForNonWordChar)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">TEST(IsAsciiWordCharTest,<sp/>IsTrueForLetter)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">TEST(IsAsciiWordCharTest,<sp/>IsTrueForDigit)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">TEST(IsAsciiWordCharTest,<sp/>IsTrueForUnderscore)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsAsciiWordChar(</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal">TEST(IsValidEscapeTest,<sp/>IsFalseForNonPrintable)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsValidEscape(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsValidEscape(</highlight><highlight class="charliteral">&apos;\007&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">TEST(IsValidEscapeTest,<sp/>IsFalseForDigit)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsValidEscape(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsValidEscape(</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">TEST(IsValidEscapeTest,<sp/>IsFalseForWhiteSpace)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsValidEscape(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsValidEscape(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">TEST(IsValidEscapeTest,<sp/>IsFalseForSomeLetter)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsValidEscape(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsValidEscape(</highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">TEST(IsValidEscapeTest,<sp/>IsTrueForPunct)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal">TEST(IsValidEscapeTest,<sp/>IsTrueForSomeLetter)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsValidEscape(</highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>EscapedPunct)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>Escaped_d)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>Escaped_D)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>Escaped_s)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>Escaped_S)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>Escaped_w)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>Escaped_W)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>EscapedWhiteSpace)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>UnescapedDot)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">TEST(AtomMatchesCharTest,<sp/>UnescapedChar)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(AtomMatchesChar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">TEST(ValidateRegexTest,<sp/>GeneratesFailureAndReturnsFalseForInvalid)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(NULL)),</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>simple<sp/>regular<sp/>expression&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;a\\&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Syntax<sp/>error<sp/>at<sp/>index<sp/>1<sp/>in<sp/>simple<sp/>regular<sp/>expression<sp/>\&quot;a\\\&quot;:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;a\\&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;\\&apos;<sp/>cannot<sp/>appear<sp/>at<sp/>the<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;\\n\\&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;\\&apos;<sp/>cannot<sp/>appear<sp/>at<sp/>the<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;\\s\\hb&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>escape<sp/>sequence<sp/>\&quot;\\h\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;^^&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;^&apos;<sp/>can<sp/>only<sp/>appear<sp/>at<sp/>the<sp/>beginning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;.*^b&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;^&apos;<sp/>can<sp/>only<sp/>appear<sp/>at<sp/>the<sp/>beginning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;$$&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;$&apos;<sp/>can<sp/>only<sp/>appear<sp/>at<sp/>the<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;^$a&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;$&apos;<sp/>can<sp/>only<sp/>appear<sp/>at<sp/>the<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;a(b&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;(&apos;<sp/>is<sp/>unsupported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;ab)&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;)&apos;<sp/>is<sp/>unsupported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;[ab&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;[&apos;<sp/>is<sp/>unsupported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;a{2&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;{&apos;<sp/>is<sp/>unsupported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;?&apos;<sp/>can<sp/>only<sp/>follow<sp/>a<sp/>repeatable<sp/>token&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;^*&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;*&apos;<sp/>can<sp/>only<sp/>follow<sp/>a<sp/>repeatable<sp/>token&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ASSERT_FALSE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;5*+&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;+&apos;<sp/>can<sp/>only<sp/>follow<sp/>a<sp/>repeatable<sp/>token&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal">TEST(ValidateRegexTest,<sp/>ReturnsTrueForValid)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;^a_+&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;^a\\t\\&amp;?&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;09*$&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;^Z$&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidateRegex(</highlight><highlight class="stringliteral">&quot;a\\^Z\\$\\(\\)\\|\\[\\]\\{\\}&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal">TEST(MatchRepetitionAndRegexAtHeadTest,<sp/>WorksForZeroOrOne)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ba&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>more<sp/>than<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>zero<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ba&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;##&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">TEST(MatchRepetitionAndRegexAtHeadTest,<sp/>WorksForZeroOrMany)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a$&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;baab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>zero<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>more<sp/>than<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab_1-g&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">TEST(MatchRepetitionAndRegexAtHeadTest,<sp/>WorksForOneOrMany)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a$&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;baab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>zero<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>more<sp/>than<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRepetitionAndRegexAtHead(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab_1-g&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal">TEST(MatchRegexAtHeadTest,<sp/>ReturnsTrueForEmptyRegex)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal">TEST(MatchRegexAtHeadTest,<sp/>WorksWhenDollarIsInRegex)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;a$&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal">TEST(MatchRegexAtHeadTest,<sp/>WorksWhenRegexStartsWithEscapeSequence)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\w&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\W&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\sa&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\nab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal">TEST(MatchRegexAtHeadTest,<sp/>WorksWhenRegexStartsWithRepetition)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;.+a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;a?b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;.*a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bc12-ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;a?b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;a?b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal">TEST(MatchRegexAtHeadTest,<sp/>WorksWhenRegexStartsWithRepetionOfEscapeSequence)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\.+a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\s?b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>b&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\(*a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;((((ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\^?b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;^b&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\\\?b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;\\\\?b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal">TEST(MatchRegexAtHeadTest,<sp/>MatchesSequentially)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;ab.*c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;acabc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAtHead(</highlight><highlight class="stringliteral">&quot;ab.*c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab-fsc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal">TEST(MatchRegexAnywhereTest,<sp/>ReturnsFalseWhenStringIsNull)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>NULL));</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">TEST(MatchRegexAnywhereTest,<sp/>WorksWhenRegexStartsWithCaret)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;^a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ba&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;^$&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;^a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;^$&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal">TEST(MatchRegexAnywhereTest,<sp/>ReturnsFalseWhenNoMatch)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bcde123&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;a.+a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--aa88888888&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">TEST(MatchRegexAnywhereTest,<sp/>ReturnsTrueWhenMatchingPrefix)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;\\w+&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ab1_<sp/>-<sp/>5&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;.*=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;x.*ab?.*bc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xaaabc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal">TEST(MatchRegexAnywhereTest,<sp/>ReturnsTrueWhenMatchingNonPrefix)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;\\w+&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;$$$<sp/>ab1_<sp/>-<sp/>5&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(MatchRegexAnywhere(</highlight><highlight class="stringliteral">&quot;\\.+=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;=<sp/><sp/>...=&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>RE&apos;s<sp/>implicit<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal">TEST(RETest,<sp/>ImplicitConstructorWorks)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>empty(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>empty.pattern());</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>simple(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>simple.pattern());</highlight></codeline>
<codeline lineno="875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>RE&apos;s<sp/>constructors<sp/>reject<sp/>invalid<sp/>regular<sp/>expressions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal">TEST(RETest,<sp/>RejectsInvalidRegex)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>normal(NULL);<sp/>},</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>simple<sp/>regular<sp/>expression&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>normal(</highlight><highlight class="stringliteral">&quot;.*(\\w+&quot;</highlight><highlight class="normal">);<sp/>},</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;(&apos;<sp/>is<sp/>unsupported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>invalid(</highlight><highlight class="stringliteral">&quot;^?&quot;</highlight><highlight class="normal">);<sp/>},</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;?&apos;<sp/>can<sp/>only<sp/>follow<sp/>a<sp/>repeatable<sp/>token&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>RE::FullMatch().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal">TEST(RETest,<sp/>FullMatchWorks)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>empty(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::FullMatch(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>empty));</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(RE::FullMatch(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>empty));</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>re1(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::FullMatch(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>re1));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>re(</highlight><highlight class="stringliteral">&quot;a.*z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::FullMatch(</highlight><highlight class="stringliteral">&quot;az&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::FullMatch(</highlight><highlight class="stringliteral">&quot;axyz&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(RE::FullMatch(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(RE::FullMatch(</highlight><highlight class="stringliteral">&quot;azy&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>RE::PartialMatch().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">TEST(RETest,<sp/>PartialMatchWorks)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>empty(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>empty));</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>empty));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE<sp/>re(</highlight><highlight class="stringliteral">&quot;a.*z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(</highlight><highlight class="stringliteral">&quot;az&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(</highlight><highlight class="stringliteral">&quot;axyz&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(RE::PartialMatch(</highlight><highlight class="stringliteral">&quot;azy&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(RE::PartialMatch(</highlight><highlight class="stringliteral">&quot;zza&quot;</highlight><highlight class="normal">,<sp/>re));</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USES_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal">TEST(CaptureTest,<sp/>CapturesStdout)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStdout().c_str());</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;def%cghi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>EXPECT_EQ(::std::string(</highlight><highlight class="stringliteral">&quot;def\0ghi&quot;</highlight><highlight class="normal">,<sp/>7),<sp/>::std::string(GetCapturedStdout()));</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal">TEST(CaptureTest,<sp/>CapturesStderr)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;jkl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;jkl&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStderr().c_str());</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;jkl%cmno&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>EXPECT_EQ(::std::string(</highlight><highlight class="stringliteral">&quot;jkl\0mno&quot;</highlight><highlight class="normal">,<sp/>7),<sp/>::std::string(GetCapturedStderr()));</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>stdout<sp/>and<sp/>stderr<sp/>capture<sp/>don&apos;t<sp/>interfere<sp/>with<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">TEST(CaptureTest,<sp/>CapturesStdoutAndStderr)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;pqr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;stu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;pqr&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStdout().c_str());</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;stu&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStderr().c_str());</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">TEST(CaptureDeathTest,<sp/>CannotReenterStdoutCapture)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(CaptureStdout(),</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>one<sp/>stdout<sp/>capturer<sp/>can<sp/>exist<sp/>at<sp/>a<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>test<sp/>stderr<sp/>capturing<sp/>using<sp/>death<sp/>tests<sp/>as<sp/>they<sp/>use<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>themselves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal">TEST(ThreadLocalTest,<sp/>DefaultConstructorInitializesToDefaultValues)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>ThreadLocal&lt;int&gt;<sp/>t1;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>t1.get());</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>ThreadLocal&lt;void*&gt;<sp/>t2;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(t2.get()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">TEST(ThreadLocalTest,<sp/>SingleParamConstructorInitializesToParam)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>ThreadLocal&lt;int&gt;<sp/>t1(123);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>t1.get());</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>ThreadLocal&lt;int*&gt;<sp/>t2(&amp;i);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;i,<sp/>t2.get());</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982" refid="classtesting_1_1internal_1_1NoDefaultConstructor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1NoDefaultConstructor" kindref="compound">NoDefaultConstructor</ref><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1NoDefaultConstructor" kindref="compound">NoDefaultConstructor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1NoDefaultConstructor" kindref="compound">NoDefaultConstructor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1NoDefaultConstructor" kindref="compound">NoDefaultConstructor</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="986"><highlight class="normal">};</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">TEST(ThreadLocalTest,<sp/>ValueDefaultContructorIsNotRequiredForParamVersion)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1ThreadLocal" kindref="compound">ThreadLocal&lt;NoDefaultConstructor&gt;</ref><sp/>bar(<ref refid="classtesting_1_1internal_1_1NoDefaultConstructor" kindref="compound">NoDefaultConstructor</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>bar.pointer();</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal">TEST(ThreadLocalTest,<sp/>GetAndPointerReturnSameValue)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>ThreadLocal&lt;std::string&gt;<sp/>thread_local_string;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>EXPECT_EQ(thread_local_string.pointer(),<sp/>&amp;(thread_local_string.get()));</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>the<sp/>condition<sp/>still<sp/>holds<sp/>after<sp/>calling<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>thread_local_string.set(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>EXPECT_EQ(thread_local_string.pointer(),<sp/>&amp;(thread_local_string.get()));</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal">TEST(ThreadLocalTest,<sp/>PointerAndConstPointerReturnSameValue)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>ThreadLocal&lt;std::string&gt;<sp/>thread_local_string;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocal&lt;std::string&gt;&amp;<sp/>const_thread_local_string<sp/>=</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread_local_string;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>EXPECT_EQ(thread_local_string.pointer(),<sp/>const_thread_local_string.pointer());</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>thread_local_string.set(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>EXPECT_EQ(thread_local_string.pointer(),<sp/>const_thread_local_string.pointer());</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddTwo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>param)<sp/>{<sp/>*param<sp/>+=<sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal">TEST(ThreadWithParamTest,<sp/>ConstructorExecutesThreadFunc)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>40;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>ThreadWithParam&lt;int*&gt;<sp/>thread(&amp;AddTwo,<sp/>&amp;i,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>thread.Join();</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>i);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">TEST(MutexDeathTest,<sp/>AssertHeldShouldAssertWhenNotLocked)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>AssertHeld()<sp/>is<sp/>flaky<sp/>only<sp/>in<sp/>the<sp/>presence<sp/>of<sp/>multiple<sp/>threads<sp/>accessing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lock.<sp/>In<sp/>this<sp/>case,<sp/>the<sp/>test<sp/>is<sp/>robust.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mutex<sp/>m;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>MutexLock<sp/>lock(&amp;m);<sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.AssertHeld();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;thread<sp/>.*hold&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal">TEST(MutexTest,<sp/>AssertHeldShouldNotAssertWhenLocked)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>Mutex<sp/>m;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>MutexLock<sp/>lock(&amp;m);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>m.AssertHeld();</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AtomicCounterWithMutex<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>AtomicCounterWithMutex(Mutex*<sp/>mutex)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(0),<sp/>mutex_(mutex),<sp/>random_(42)<sp/>{}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Increment()<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>MutexLock<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>value_;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>put<sp/>up<sp/>a<sp/>memory<sp/>barrier<sp/>to<sp/>prevent<sp/>reads<sp/>and<sp/>writes<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value_<sp/>rearranged<sp/>with<sp/>the<sp/>call<sp/>to<sp/>sleep_for<sp/>when<sp/>observed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>other<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>POSIX,<sp/>locking<sp/>a<sp/>mutex<sp/>puts<sp/>up<sp/>a<sp/>memory<sp/>barrier.<sp/><sp/>We<sp/>cannot<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mutex<sp/>and<sp/>MutexLock<sp/>here<sp/>or<sp/>rely<sp/>on<sp/>their<sp/>memory<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>functionality<sp/>as<sp/>we<sp/>are<sp/>testing<sp/>them<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_t<sp/>memory_barrier_mutex;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_init(&amp;memory_barrier_mutex,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&amp;memory_barrier_mutex));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::milliseconds(random_.Generate(30)));</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&amp;memory_barrier_mutex));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&amp;memory_barrier_mutex));</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>performing<sp/>an<sp/>interlocked<sp/>access<sp/>puts<sp/>up<sp/>a<sp/>memory<sp/>barrier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>LONG<sp/>dummy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::InterlockedIncrement(&amp;dummy);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::milliseconds(random_.Generate(30)));</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::InterlockedIncrement(&amp;dummy);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Memory<sp/>barrier<sp/>not<sp/>implemented<sp/>on<sp/>this<sp/>platform.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>value_<sp/>=<sp/>temp<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>Mutex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mutex_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Protects<sp/>value_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>Random<sp/>random_;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CountingThreadFunc(pair&lt;AtomicCounterWithMutex*,<sp/>int&gt;<sp/>param)<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>param.second;<sp/>++i)<sp/>param.first-&gt;Increment();</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>mutex<sp/>only<sp/>lets<sp/>one<sp/>thread<sp/>at<sp/>a<sp/>time<sp/>to<sp/>lock<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal">TEST(MutexTest,<sp/>OnlyOneThreadCanLockAtATime)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>Mutex<sp/>mutex;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>AtomicCounterWithMutex<sp/>locked_counter(&amp;mutex);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ThreadWithParam&lt;pair&lt;AtomicCounterWithMutex*,<sp/>int&gt;<sp/>&gt;<sp/>ThreadType;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kCycleCount<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kThreadCount<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;ThreadType&gt;<sp/>counting_threads[kThreadCount];</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>Notification<sp/>threads_can_start;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>and<sp/>runs<sp/>kThreadCount<sp/>threads<sp/>that<sp/>increment<sp/>locked_counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>kCycleCount<sp/>times<sp/>each.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kThreadCount;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>counting_threads[i]<sp/>=<sp/>std::make_unique&lt;ThreadType&gt;(</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;CountingThreadFunc,<sp/>make_pair(&amp;locked_counter,<sp/>kCycleCount),</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;threads_can_start);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>threads_can_start.Notify();</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kThreadCount;<sp/>++i)<sp/>counting_threads[i]-&gt;Join();</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mutex<sp/>lets<sp/>more<sp/>than<sp/>one<sp/>thread<sp/>to<sp/>increment<sp/>the<sp/>counter<sp/>at<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>time,<sp/>they<sp/>are<sp/>likely<sp/>to<sp/>encounter<sp/>a<sp/>race<sp/>condition<sp/>and<sp/>have<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>increments<sp/>overwritten,<sp/>resulting<sp/>in<sp/>the<sp/>lower<sp/>then<sp/>expected<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kCycleCount<sp/>*<sp/>kThreadCount,<sp/>locked_counter.value());</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunFromThread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(func)(T),<sp/>T<sp/>param)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>ThreadWithParam&lt;T&gt;<sp/>thread(func,<sp/>param,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>thread.Join();</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RetrieveThreadLocalValue(</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;ThreadLocal&lt;std::string&gt;*,<sp/>std::string*&gt;<sp/>param)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>*param.second<sp/>=<sp/>param.first-&gt;get();</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal">TEST(ThreadLocalTest,<sp/>ParameterizedConstructorSetsDefault)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>ThreadLocal&lt;std::string&gt;<sp/>thread_local_string(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>thread_local_string.get().c_str());</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>thread_local_string.set(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>thread_local_string.get().c_str());</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>RunFromThread(&amp;RetrieveThreadLocalValue,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_pair(&amp;thread_local_string,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>result.c_str());</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Keeps<sp/>track<sp/>of<sp/>whether<sp/>of<sp/>destructors<sp/>being<sp/>called<sp/>on<sp/>instances<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DestructorTracker.<sp/><sp/>On<sp/>Windows,<sp/>waits<sp/>for<sp/>the<sp/>destructor<sp/>call<sp/>reports.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestructorCall<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>DestructorCall()<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>invoked_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>wait_event_.Reset(::CreateEvent(NULL,<sp/>TRUE,<sp/>FALSE,<sp/>NULL));</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(wait_event_.Get()<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CheckDestroyed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::WaitForSingleObject(wait_event_.Get(),<sp/>1000)<sp/>!=<sp/>WAIT_OBJECT_0)</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invoked_;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReportDestroyed()<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>invoked_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>::SetEvent(wait_event_.Get());</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;DestructorCall*&gt;&amp;<sp/>List()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*list_;<sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResetList()<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>list_-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>list_-&gt;at(i);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>list_-&gt;clear();</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invoked_;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>wait_event_;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;DestructorCall*&gt;*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>list_;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>DestructorCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DestructorCall&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>DestructorCall&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DestructorCall&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal">std::vector&lt;DestructorCall*&gt;*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DestructorCall::list_<sp/>=</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;DestructorCall*&gt;;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DestructorTracker<sp/>keeps<sp/>track<sp/>of<sp/>whether<sp/>its<sp/>instances<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestructorTracker<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>DestructorTracker()<sp/>:<sp/>index_(GetNewIndex())<sp/>{}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>DestructorTracker(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DestructorTracker&amp;<sp/></highlight><highlight class="comment">/*<sp/>rhs<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index_(GetNewIndex())<sp/>{}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>~DestructorTracker()<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>never<sp/>access<sp/>DestructorCall::List()<sp/>concurrently,<sp/>so<sp/>we<sp/>don&apos;t<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>protect<sp/>this<sp/>access<sp/>with<sp/>a<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>DestructorCall::List()[index_]-&gt;ReportDestroyed();</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetNewIndex()<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>DestructorCall::List().push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DestructorCall);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DestructorCall::List().size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ThreadLocal&lt;DestructorTracker&gt;*<sp/>ThreadParam;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CallThreadLocalGet(ThreadParam<sp/>thread_local_param)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>thread_local_param-&gt;get();</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>a<sp/>ThreadLocal<sp/>object<sp/>dies<sp/>in<sp/>a<sp/>thread,<sp/>it<sp/>destroys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>managed<sp/>object<sp/>for<sp/>that<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal">TEST(ThreadLocalTest,<sp/>DestroysManagedObjectForOwnThreadWhenDying)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>DestructorCall::ResetList();</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadLocal&lt;DestructorTracker&gt;<sp/>thread_local_tracker;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(0U,<sp/>DestructorCall::List().size());</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>creates<sp/>another<sp/>DestructorTracker<sp/>object<sp/>for<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_local_tracker.get();</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1U,<sp/>DestructorCall::List().size());</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(DestructorCall::List()[0]-&gt;CheckDestroyed());</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>thread_local_tracker<sp/>has<sp/>died.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1U,<sp/>DestructorCall::List().size());</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DestructorCall::List()[0]-&gt;CheckDestroyed());</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>DestructorCall::ResetList();</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>a<sp/>thread<sp/>exits,<sp/>the<sp/>thread-local<sp/>object<sp/>for<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thread<sp/>is<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal">TEST(ThreadLocalTest,<sp/>DestroysManagedObjectAtThreadExit)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>DestructorCall::ResetList();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadLocal&lt;DestructorTracker&gt;<sp/>thread_local_tracker;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(0U,<sp/>DestructorCall::List().size());</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>creates<sp/>another<sp/>DestructorTracker<sp/>object<sp/>in<sp/>the<sp/>new<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadWithParam&lt;ThreadParam&gt;<sp/>thread(&amp;CallThreadLocalGet,</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;thread_local_tracker,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.Join();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>thread<sp/>has<sp/>exited,<sp/>and<sp/>we<sp/>should<sp/>have<sp/>a<sp/>DestroyedTracker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instance<sp/>created<sp/>for<sp/>it.<sp/>But<sp/>it<sp/>may<sp/>not<sp/>have<sp/>been<sp/>destroyed<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1U,<sp/>DestructorCall::List().size());</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>thread<sp/>has<sp/>exited<sp/>and<sp/>thread_local_tracker<sp/>has<sp/>died.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1U,<sp/>DestructorCall::List().size());</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DestructorCall::List()[0]-&gt;CheckDestroyed());</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>DestructorCall::ResetList();</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal">TEST(ThreadLocalTest,<sp/>ThreadLocalMutationsAffectOnlyCurrentThread)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>ThreadLocal&lt;std::string&gt;<sp/>thread_local_string;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>thread_local_string.set(</highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">,<sp/>thread_local_string.get().c_str());</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>RunFromThread(&amp;RetrieveThreadLocalValue,</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_pair(&amp;thread_local_string,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(result.empty());</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal">TEST(WindowsTypesTest,<sp/>HANDLEIsVoidStar)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;HANDLE,<sp/>void*&gt;();</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS_MINGW)<sp/>&amp;&amp;<sp/>!defined(__MINGW64_VERSION_MAJOR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal">TEST(WindowsTypesTest,<sp/>_CRITICAL_SECTIONIs_CRITICAL_SECTION)<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;CRITICAL_SECTION,<sp/>_CRITICAL_SECTION&gt;();</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal">TEST(WindowsTypesTest,<sp/>CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;CRITICAL_SECTION,<sp/>_RTL_CRITICAL_SECTION&gt;();</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc"/>
  </compounddef>
</doxygen>
