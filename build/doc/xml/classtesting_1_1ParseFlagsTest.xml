<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classtesting_1_1ParseFlagsTest" kind="class" language="C++" prot="public">
    <compoundname>testing::ParseFlagsTest</compoundname>
    <basecompoundref refid="classtesting_1_1Test" prot="public" virt="non-virtual">testing::Test</basecompoundref>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtesting_1_1ParseFlagsTest_1a91b31cd2a108511459f49e31dcbeabe8" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void testing::ParseFlagsTest::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <qualifiedname>testing::ParseFlagsTest::SetUp</qualifiedname>
        <reimplements refid="classtesting_1_1Test_1a190315150c303ddf801313fd1a777733">SetUp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5654" column="8" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5654" bodyend="5672"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classtesting_1_1ParseFlagsTest_1ab6e898999669ae38441ed822356a2812" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void testing::ParseFlagsTest::AssertStringArrayEq</definition>
        <argsstring>(int size1, CharType **array1, int size2, CharType **array2)</argsstring>
        <name>AssertStringArrayEq</name>
        <qualifiedname>testing::ParseFlagsTest::AssertStringArrayEq</qualifiedname>
        <param>
          <type>int</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size2</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5676" column="15" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5676" bodyend="5683"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1ParseFlagsTest_1a5919553c35ebe3910fcff51cc0b59fd6" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::ParseFlagsTest::CheckFlags</definition>
        <argsstring>(const Flags &amp;expected)</argsstring>
        <name>CheckFlags</name>
        <qualifiedname>testing::ParseFlagsTest::CheckFlags</qualifiedname>
        <param>
          <type>const <ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref> &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5686" column="15" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5686" bodyend="5708"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1ParseFlagsTest_1ad769e5f5a71939c3a9ad853b415fa9d2" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void testing::ParseFlagsTest::TestParsingFlags</definition>
        <argsstring>(int argc1, const CharType **argv1, int argc2, const CharType **argv2, const Flags &amp;expected, bool should_print_help)</argsstring>
        <name>TestParsingFlags</name>
        <qualifiedname>testing::ParseFlagsTest::TestParsingFlags</qualifiedname>
        <param>
          <type>int</type>
          <declname>argc1</declname>
        </param>
        <param>
          <type>const CharType **</type>
          <declname>argv1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc2</declname>
        </param>
        <param>
          <type>const CharType **</type>
          <declname>argv2</declname>
        </param>
        <param>
          <type>const <ref refid="structtesting_1_1Flags" kindref="compound">Flags</ref> &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>should_print_help</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5714" column="15" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5714" bodyend="5754"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>testing::ParseFlagsTest</label>
        <link refid="classtesting_1_1ParseFlagsTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>testing::Test</label>
        <link refid="classtesting_1_1Test"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>testing::ParseFlagsTest</label>
        <link refid="classtesting_1_1ParseFlagsTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>testing::Test</label>
        <link refid="classtesting_1_1Test"/>
      </node>
    </collaborationgraph>
    <location file="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" line="5651" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_unittest.cc" bodystart="5651" bodyend="5763"/>
    <listofallmembers>
      <member refid="classtesting_1_1ParseFlagsTest_1ab6e898999669ae38441ed822356a2812" prot="protected" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>AssertStringArrayEq</name></member>
      <member refid="classtesting_1_1ParseFlagsTest_1a5919553c35ebe3910fcff51cc0b59fd6" prot="protected" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>CheckFlags</name></member>
      <member refid="classtesting_1_1Test_1a7a00be7dd0a6bfdc8d47a1b784623613" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>HasFailure</name></member>
      <member refid="classtesting_1_1Test_1a5e83604628ef542af888d631566ff60c" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>HasFatalFailure</name></member>
      <member refid="classtesting_1_1Test_1a8c00e8cc6fe10616b480bd54d2a426cb" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>HasNonfatalFailure</name></member>
      <member refid="classtesting_1_1Test_1a7f0ada5dbc9e772acb2b6cd0b1b300d7" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>IsSkipped</name></member>
      <member refid="classtesting_1_1Test_1a1559ce1c83f56993b582650c091535a7" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>RecordProperty</name></member>
      <member refid="classtesting_1_1Test_1a24fea27f32ac2d9b023cb8e58bb6590a" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>RecordProperty</name></member>
      <member refid="classtesting_1_1ParseFlagsTest_1a91b31cd2a108511459f49e31dcbeabe8" prot="protected" virt="virtual"><scope>testing::ParseFlagsTest</scope><name>SetUp</name></member>
      <member refid="classtesting_1_1Test_1a5ccbac42fee8c5b00b0bfe89b6c49d79" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>SetUpTestCase</name></member>
      <member refid="classtesting_1_1Test_1ae173b07a0fdd09fc1d417a2bb6cbdd76" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>SetUpTestSuite</name></member>
      <member refid="classtesting_1_1Test_1a5f0ab439802cbe0ef7552f1a9f791923" prot="protected" virt="virtual"><scope>testing::ParseFlagsTest</scope><name>TearDown</name></member>
      <member refid="classtesting_1_1Test_1af374706cbaf0ffc460f4fd04e7c150f1" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>TearDownTestCase</name></member>
      <member refid="classtesting_1_1Test_1a7704c8223ba28338a66ca2eaeba66383" prot="public" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>TearDownTestSuite</name></member>
      <member refid="classtesting_1_1Test_1a99f2bbfac6c95612322b0f10e607ebe5" prot="protected" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>Test</name></member>
      <member refid="classtesting_1_1ParseFlagsTest_1ad769e5f5a71939c3a9ad853b415fa9d2" prot="protected" virt="non-virtual"><scope>testing::ParseFlagsTest</scope><name>TestParsingFlags</name></member>
      <member refid="classtesting_1_1Test_1a2b0a62f1e667bbe8d8cb18d785bfa991" prot="public" virt="virtual"><scope>testing::ParseFlagsTest</scope><name>~Test</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
