<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock-matchers-arithmetic__test_8cc" kind="file" language="C++">
    <compoundname>gmock-matchers-arithmetic_test.cc</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes refid="gmock-matchers__test_8h" local="yes">test/gmock-matchers_test.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="79">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
      </node>
      <node id="76">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="36">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="31">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc</label>
        <link refid="gmock-matchers-arithmetic__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>test/gmock-matchers_test.h</label>
        <link refid="gmock-matchers__test_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="45">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="66">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="57">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="37">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>algorithm</label>
      </node>
      <node id="9">
        <label>array</label>
      </node>
      <node id="34">
        <label>assert.h</label>
      </node>
      <node id="59">
        <label>atomic</label>
      </node>
      <node id="69">
        <label>cassert</label>
      </node>
      <node id="40">
        <label>cerrno</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="52">
        <label>cstddef</label>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="38">
        <label>ctype.h</label>
      </node>
      <node id="11">
        <label>deque</label>
      </node>
      <node id="80">
        <label>errno.h</label>
      </node>
      <node id="27">
        <label>exception</label>
      </node>
      <node id="62">
        <label>float.h</label>
      </node>
      <node id="12">
        <label>forward_list</label>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="28">
        <label>initializer_list</label>
      </node>
      <node id="53">
        <label>iomanip</label>
      </node>
      <node id="29">
        <label>ios</label>
      </node>
      <node id="71">
        <label>iosfwd</label>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>iterator</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="82">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>list</label>
      </node>
      <node id="41">
        <label>locale</label>
      </node>
      <node id="17">
        <label>map</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="30">
        <label>ostream</label>
      </node>
      <node id="49">
        <label>regex.h</label>
      </node>
      <node id="18">
        <label>set</label>
      </node>
      <node id="19">
        <label>sstream</label>
      </node>
      <node id="39">
        <label>stddef.h</label>
      </node>
      <node id="32">
        <label>stdio.h</label>
      </node>
      <node id="35">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="47">
        <label>strings.h</label>
      </node>
      <node id="43">
        <label>sys/stat.h</label>
      </node>
      <node id="44">
        <label>sys/types.h</label>
      </node>
      <node id="8">
        <label>time.h</label>
      </node>
      <node id="42">
        <label>tuple</label>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="50">
        <label>typeinfo</label>
      </node>
      <node id="48">
        <label>unistd.h</label>
      </node>
      <node id="21">
        <label>unordered_map</label>
      </node>
      <node id="22">
        <label>unordered_set</label>
      </node>
      <node id="23">
        <label>utility</label>
      </node>
      <node id="24">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test">testing::gmock_matchers_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test_1_1adl__test">testing::gmock_matchers_test::adl_test</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a0acfbf3f4dfa04d0b7bb44771e6cf8ab" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int threshold_</definition>
        <argsstring></argsstring>
        <name>threshold_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="836" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a8bae84ae6b9a7c2bc44b84c81dfe4ef2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int number_</definition>
        <argsstring></argsstring>
        <name>number_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="868" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a26e8ed3a97a2f877e0d5dcec7b3ce708" prot="protected" static="no" mutable="no">
        <type>const Bits</type>
        <definition>const Bits max_ulps_</definition>
        <argsstring></argsstring>
        <name>max_ulps_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1095" column="14" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1aff721bdd4b7f76dda17e8d85517b4d8a" prot="protected" static="no" mutable="no">
        <type>const Bits</type>
        <definition>const Bits zero_bits_</definition>
        <argsstring></argsstring>
        <name>zero_bits_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1097" column="14" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a0ec0bdc3d8b4e8154afb55e77ab22030" prot="protected" static="no" mutable="no">
        <type>const Bits</type>
        <definition>const Bits one_bits_</definition>
        <argsstring></argsstring>
        <name>one_bits_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1098" column="14" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a4ad44eccde14ea0092f9c653bcb78b7b" prot="protected" static="no" mutable="no">
        <type>const Bits</type>
        <definition>const Bits infinity_bits_</definition>
        <argsstring></argsstring>
        <name>infinity_bits_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1099" column="14" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a70cbc89b0650ca1f4416d1a969fad9dc" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType close_to_positive_zero_</definition>
        <argsstring></argsstring>
        <name>close_to_positive_zero_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1102" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a09f17fbe78f763a4ca1f0685332e5575" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType close_to_negative_zero_</definition>
        <argsstring></argsstring>
        <name>close_to_negative_zero_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1103" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a90400147137d051c30cf8fe490752fca" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType further_from_negative_zero_</definition>
        <argsstring></argsstring>
        <name>further_from_negative_zero_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1104" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1abfe9970138bdbace97f58ddbd7ee9b6f" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType close_to_one_</definition>
        <argsstring></argsstring>
        <name>close_to_one_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1107" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a1404cc9e3588fcf479fd9c3d65d337be" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType further_from_one_</definition>
        <argsstring></argsstring>
        <name>further_from_one_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1108" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a3143d48c15b0e93bcc0289d127c10174" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType infinity_</definition>
        <argsstring></argsstring>
        <name>infinity_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1111" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1ae54128ac32e8c219eb139764d1896bf2" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType close_to_infinity_</definition>
        <argsstring></argsstring>
        <name>close_to_infinity_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1112" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1ad467780da10ab2e8c7990f2cd791c054" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType further_from_infinity_</definition>
        <argsstring></argsstring>
        <name>further_from_infinity_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1113" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a8b4b03f444ad244777f88abd3c67084b" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType max_</definition>
        <argsstring></argsstring>
        <name>max_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1116" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a9ed3badd852ca9a04e77a4dedf98d001" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType nan1_</definition>
        <argsstring></argsstring>
        <name>nan1_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1119" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers-arithmetic__test_8cc_1a1aa30dd66c622a6a7aed2db980ac7630" prot="protected" static="no" mutable="no">
        <type>const RawType</type>
        <definition>const RawType nan2_</definition>
        <argsstring></argsstring>
        <name>nan2_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="1120" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" bodystart="1120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>some<sp/>commonly<sp/>used<sp/>argument<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test/gmock-matchers_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silence<sp/>warning<sp/>C4244:<sp/>&apos;initializing&apos;:<sp/>conversion<sp/>from<sp/>&apos;int&apos;<sp/>to<sp/>&apos;short&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possible<sp/>loss<sp/>of<sp/>data<sp/>and<sp/>C4100,<sp/>unreferenced<sp/>local<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4244<sp/>4100)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">namespace<sp/>testing<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_matchers_test<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">typedef<sp/>::std::tuple&lt;long,<sp/>int&gt;<sp/>Tuple2;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Eq()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>==<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">TEST(Eq2Test,<sp/>MatchesEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Eq();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Eq()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">TEST(Eq2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Eq();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ge()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>&gt;=<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">TEST(Ge2Test,<sp/>MatchesGreaterThanOrEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Ge();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ge()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">TEST(Ge2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Ge();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&gt;=<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Gt()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>&gt;<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">TEST(Gt2Test,<sp/>MatchesGreaterThanArguments)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Gt();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Gt()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">TEST(Gt2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Gt();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&gt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Le()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>&lt;=<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">TEST(Le2Test,<sp/>MatchesLessThanOrEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Le();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Le()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">TEST(Le2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Le();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&lt;=<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Lt()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>&lt;<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">TEST(Lt2Test,<sp/>MatchesLessThanArguments)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Lt();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Lt()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">TEST(Lt2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Lt();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&lt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ne()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>!=<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">TEST(Ne2Test,<sp/>MatchesUnequalArguments)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Ne();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ne()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">TEST(Ne2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tuple2&amp;&gt;<sp/>m<sp/>=<sp/>Ne();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>unequal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">TEST(PairMatchBaseTest,<sp/>WorksWithMoveOnly)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Pointers<sp/>=<sp/>std::tuple&lt;std::unique_ptr&lt;int&gt;,<sp/>std::unique_ptr&lt;int&gt;&gt;;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>Matcher&lt;Pointers&gt;<sp/>matcher<sp/>=<sp/>Eq();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>Pointers<sp/>pointers;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tested<sp/>values<sp/>don&apos;t<sp/>matter;<sp/>the<sp/>point<sp/>is<sp/>that<sp/>matcher<sp/>does<sp/>not<sp/>copy<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matched<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(pointers));</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNan()<sp/>matches<sp/>a<sp/>NaN,<sp/>with<sp/>float.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">TEST(IsNan,<sp/>FloatMatchesNan)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>quiet_nan<sp/>=<sp/>std::numeric_limits&lt;float&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>other_nan<sp/>=<sp/>std::nanf(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>real_value<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(other_nan));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(real_value));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>Matcher&lt;float&amp;&gt;<sp/>m_ref<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_ref.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_ref.Matches(other_nan));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m_ref.Matches(real_value));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>float&amp;&gt;<sp/>m_cref<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_cref.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_cref.Matches(other_nan));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m_cref.Matches(real_value));</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNan()<sp/>matches<sp/>a<sp/>NaN,<sp/>with<sp/>double.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">TEST(IsNan,<sp/>DoubleMatchesNan)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quiet_nan<sp/>=<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>other_nan<sp/>=<sp/>std::nan(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>real_value<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(other_nan));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(real_value));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>Matcher&lt;double&amp;&gt;<sp/>m_ref<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_ref.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_ref.Matches(other_nan));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m_ref.Matches(real_value));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>double&amp;&gt;<sp/>m_cref<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_cref.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_cref.Matches(other_nan));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m_cref.Matches(real_value));</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNan()<sp/>matches<sp/>a<sp/>NaN,<sp/>with<sp/>long<sp/>double.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">TEST(IsNan,<sp/>LongDoubleMatchesNan)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quiet_nan<sp/>=<sp/>std::numeric_limits&lt;long<sp/>double&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>other_nan<sp/>=<sp/>std::nan(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>real_value<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>Matcher&lt;long<sp/>double&gt;<sp/>m<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(other_nan));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(real_value));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>Matcher&lt;long<sp/>double&amp;&gt;<sp/>m_ref<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_ref.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_ref.Matches(other_nan));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m_ref.Matches(real_value));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>long<sp/>double&amp;&gt;<sp/>m_cref<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_cref.Matches(quiet_nan));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m_cref.Matches(other_nan));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m_cref.Matches(real_value));</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNan()<sp/>works<sp/>with<sp/>Not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">TEST(IsNan,<sp/>NotMatchesNan)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>mf<sp/>=<sp/>Not(IsNan());</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(mf.Matches(std::numeric_limits&lt;float&gt;::quiet_NaN()));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(mf.Matches(std::nanf(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(mf.Matches(1.0));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>md<sp/>=<sp/>Not(IsNan());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(md.Matches(std::numeric_limits&lt;double&gt;::quiet_NaN()));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(md.Matches(std::nan(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(md.Matches(1.0));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>Matcher&lt;long<sp/>double&gt;<sp/>mld<sp/>=<sp/>Not(IsNan());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(mld.Matches(std::numeric_limits&lt;long<sp/>double&gt;::quiet_NaN()));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(mld.Matches(std::nanl(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(mld.Matches(1.0));</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNan()<sp/>can<sp/>describe<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">TEST(IsNan,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>mf<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(mf));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>md<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(md));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>Matcher&lt;long<sp/>double&gt;<sp/>mld<sp/>=<sp/>IsNan();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(mld));</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNan()<sp/>can<sp/>describe<sp/>itself<sp/>with<sp/>Not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">TEST(IsNan,<sp/>CanDescribeSelfWithNot)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>mf<sp/>=<sp/>Not(IsNan());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(mf));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>md<sp/>=<sp/>Not(IsNan());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(md));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>Matcher&lt;long<sp/>double&gt;<sp/>mld<sp/>=<sp/>Not(IsNan());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(mld));</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>FloatEq()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatEq(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">TEST(FloatEq2Test,<sp/>MatchesEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;float,<sp/>float&gt;<sp/>Tpl;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tpl&amp;&gt;<sp/>m<sp/>=<sp/>FloatEq();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.0f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(0.3f,<sp/>0.1f<sp/>+<sp/>0.1f<sp/>+<sp/>0.1f)));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.1f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>FloatEq()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">TEST(FloatEq2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>::std::tuple&lt;float,<sp/>float&gt;&amp;&gt;<sp/>m<sp/>=<sp/>FloatEq();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NanSensitiveFloatEq()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NanSensitiveFloatEq(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">TEST(NanSensitiveFloatEqTest,<sp/>MatchesEqualArgumentsWithNaN)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;float,<sp/>float&gt;<sp/>Tpl;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tpl&amp;&gt;<sp/>m<sp/>=<sp/>NanSensitiveFloatEq();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.0f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(std::numeric_limits&lt;float&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;float&gt;::quiet_NaN())));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.1f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.0f,<sp/>std::numeric_limits&lt;float&gt;::quiet_NaN())));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(std::numeric_limits&lt;float&gt;::quiet_NaN(),<sp/>1.0f)));</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NanSensitiveFloatEq()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">TEST(NanSensitiveFloatEqTest,<sp/>CanDescribeSelfWithNaNs)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>::std::tuple&lt;float,<sp/>float&gt;&amp;&gt;<sp/>m<sp/>=<sp/>NanSensitiveFloatEq();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoubleEq()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleEq(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">TEST(DoubleEq2Test,<sp/>MatchesEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;double,<sp/>double&gt;<sp/>Tpl;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tpl&amp;&gt;<sp/>m<sp/>=<sp/>DoubleEq();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.0,<sp/>1.0)));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(0.3,<sp/>0.1<sp/>+<sp/>0.1<sp/>+<sp/>0.1)));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.1,<sp/>1.0)));</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoubleEq()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">TEST(DoubleEq2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>::std::tuple&lt;double,<sp/>double&gt;&amp;&gt;<sp/>m<sp/>=<sp/>DoubleEq();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NanSensitiveDoubleEq()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NanSensitiveDoubleEq(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">TEST(NanSensitiveDoubleEqTest,<sp/>MatchesEqualArgumentsWithNaN)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;double,<sp/>double&gt;<sp/>Tpl;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tpl&amp;&gt;<sp/>m<sp/>=<sp/>NanSensitiveDoubleEq();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.0f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN())));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.1f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.0f,<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN())));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(std::numeric_limits&lt;double&gt;::quiet_NaN(),<sp/>1.0f)));</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoubleEq()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">TEST(NanSensitiveDoubleEqTest,<sp/>CanDescribeSelfWithNaNs)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>::std::tuple&lt;double,<sp/>double&gt;&amp;&gt;<sp/>m<sp/>=<sp/>NanSensitiveDoubleEq();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>FloatEq()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatNear(first<sp/>field,<sp/>max_abs_error)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">TEST(FloatNear2Test,<sp/>MatchesEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;float,<sp/>float&gt;<sp/>Tpl;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tpl&amp;&gt;<sp/>m<sp/>=<sp/>FloatNear(0.5f);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.0f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.3f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.8f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>FloatNear()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">TEST(FloatNear2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>::std::tuple&lt;float,<sp/>float&gt;&amp;&gt;<sp/>m<sp/>=<sp/>FloatNear(0.5f);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NanSensitiveFloatNear()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NanSensitiveFloatNear(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">TEST(NanSensitiveFloatNearTest,<sp/>MatchesNearbyArgumentsWithNaN)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;float,<sp/>float&gt;<sp/>Tpl;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tpl&amp;&gt;<sp/>m<sp/>=<sp/>NanSensitiveFloatNear(0.5f);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.0f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.1f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(std::numeric_limits&lt;float&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;float&gt;::quiet_NaN())));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.6f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.0f,<sp/>std::numeric_limits&lt;float&gt;::quiet_NaN())));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(std::numeric_limits&lt;float&gt;::quiet_NaN(),<sp/>1.0f)));</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NanSensitiveFloatNear()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">TEST(NanSensitiveFloatNearTest,<sp/>CanDescribeSelfWithNaNs)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>::std::tuple&lt;float,<sp/>float&gt;&amp;&gt;<sp/>m<sp/>=<sp/>NanSensitiveFloatNear(0.5f);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>FloatEq()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoubleNear(first<sp/>field,<sp/>max_abs_error)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">TEST(DoubleNear2Test,<sp/>MatchesEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;double,<sp/>double&gt;<sp/>Tpl;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tpl&amp;&gt;<sp/>m<sp/>=<sp/>DoubleNear(0.5);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.0,<sp/>1.0)));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.3,<sp/>1.0)));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.8,<sp/>1.0)));</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoubleNear()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">TEST(DoubleNear2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>::std::tuple&lt;double,<sp/>double&gt;&amp;&gt;<sp/>m<sp/>=<sp/>DoubleNear(0.5);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NanSensitiveDoubleNear()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NanSensitiveDoubleNear(first<sp/>field)<sp/>matches<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">TEST(NanSensitiveDoubleNearTest,<sp/>MatchesNearbyArgumentsWithNaN)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;double,<sp/>double&gt;<sp/>Tpl;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>Tpl&amp;&gt;<sp/>m<sp/>=<sp/>NanSensitiveDoubleNear(0.5f);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.0f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(1.1f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tpl(std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN())));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.6f,<sp/>1.0f)));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(1.0f,<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN())));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tpl(std::numeric_limits&lt;double&gt;::quiet_NaN(),<sp/>1.0f)));</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NanSensitiveDoubleNear()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">TEST(NanSensitiveDoubleNearTest,<sp/>CanDescribeSelfWithNaNs)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>::std::tuple&lt;double,<sp/>double&gt;&amp;&gt;<sp/>m<sp/>=<sp/>NanSensitiveDoubleNear(0.5f);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>almost-equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Not(m)<sp/>matches<sp/>any<sp/>value<sp/>that<sp/>doesn&apos;t<sp/>match<sp/>m.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">TEST(NotTest,<sp/>NegatesMatcher)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Not(Eq(2));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(3));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Not(m)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">TEST(NotTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>Not(Eq(5));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>monomorphic<sp/>matchers<sp/>are<sp/>safely<sp/>cast<sp/>by<sp/>the<sp/>Not<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">TEST(NotTest,<sp/>NotMatcherSafelyCastsMonomorphicMatchers)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>greater_than_5<sp/>is<sp/>a<sp/>monomorphic<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>greater_than_5<sp/>=<sp/>Gt(5);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>int&amp;&gt;<sp/>m<sp/>=<sp/>Not(greater_than_5);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m2<sp/>=<sp/>Not(greater_than_5);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m3<sp/>=<sp/>Not(m);</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>to<sp/>allow<sp/>easy<sp/>testing<sp/>of<sp/>AllOf<sp/>matchers<sp/>with<sp/>num<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllOfMatches(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(Describe(m));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(0));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>num;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m.Matches(i));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(num<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">INSTANTIATE_GTEST_MATCHER_TEST_P(AllOfTest);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AllOf(m1,<sp/>...,<sp/>mn)<sp/>matches<sp/>any<sp/>value<sp/>that<sp/>matches<sp/>all<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">TEST(AllOfTest,<sp/>MatchesWhenAllMatch)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Le(2),<sp/>Ge(1));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(3));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(3));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2),<sp/>Ne(3));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(4));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(3));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Ge(0),<sp/>Lt(10),<sp/>Ne(3),<sp/>Ne(5),<sp/>Ne(7));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(0));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(3));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>tests<sp/>for<sp/>varying<sp/>number<sp/>of<sp/>sub-matchers.<sp/>Due<sp/>to<sp/>the<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>sub-matchers<sp/>are<sp/>handled<sp/>it<sp/>is<sp/>enough<sp/>to<sp/>test<sp/>every<sp/>sub-matcher<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>sub-matchers<sp/>using<sp/>the<sp/>same<sp/>matcher<sp/>type.<sp/>Varying<sp/>matcher<sp/>types<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>checked<sp/>for<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>AllOfMatches(2,<sp/>AllOf(Ne(1),<sp/>Ne(2)));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>AllOfMatches(3,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3)));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>AllOfMatches(4,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4)));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>AllOfMatches(5,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5)));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>AllOfMatches(6,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6)));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>AllOfMatches(7,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7)));</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>AllOfMatches(8,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),<sp/>Ne(8)));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>AllOfMatches(</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>9,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),<sp/>Ne(8),<sp/>Ne(9)));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>AllOfMatches(10,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),<sp/>Ne(8),</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(9),<sp/>Ne(10)));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>AllOfMatches(</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>50,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),<sp/>Ne(8),<sp/>Ne(9),</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(10),<sp/>Ne(11),<sp/>Ne(12),<sp/>Ne(13),<sp/>Ne(14),<sp/>Ne(15),<sp/>Ne(16),<sp/>Ne(17),</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(18),<sp/>Ne(19),<sp/>Ne(20),<sp/>Ne(21),<sp/>Ne(22),<sp/>Ne(23),<sp/>Ne(24),<sp/>Ne(25),</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(26),<sp/>Ne(27),<sp/>Ne(28),<sp/>Ne(29),<sp/>Ne(30),<sp/>Ne(31),<sp/>Ne(32),<sp/>Ne(33),</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(34),<sp/>Ne(35),<sp/>Ne(36),<sp/>Ne(37),<sp/>Ne(38),<sp/>Ne(39),<sp/>Ne(40),<sp/>Ne(41),</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(42),<sp/>Ne(43),<sp/>Ne(44),<sp/>Ne(45),<sp/>Ne(46),<sp/>Ne(47),<sp/>Ne(48),<sp/>Ne(49),</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(50)));</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AllOf(m1,<sp/>...,<sp/>mn)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">TEST(AllOfTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Le(2),<sp/>Ge(1));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;=<sp/>2)<sp/>and<sp/>(is<sp/>&gt;=<sp/>1)&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_descr1<sp/>=</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>&gt;<sp/>0)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>1)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>2)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_descr1,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2),<sp/>Ne(3));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_descr2<sp/>=</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>&gt;<sp/>0)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>1)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>2)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>3)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_descr2,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Ge(0),<sp/>Lt(10),<sp/>Ne(3),<sp/>Ne(5),<sp/>Ne(7));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_descr3<sp/>=</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>&gt;=<sp/>0)<sp/>and<sp/>(is<sp/>&lt;<sp/>10)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>3)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>5)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>7)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_descr3,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AllOf(m1,<sp/>...,<sp/>mn)<sp/>describes<sp/>its<sp/>negation<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">TEST(AllOfTest,<sp/>CanDescribeNegation)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Le(2),<sp/>Ge(1));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_descr4<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;=<sp/>2)<sp/>or<sp/>(isn&apos;t<sp/>&gt;=<sp/>1)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_descr4,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_descr5<sp/>=</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&gt;<sp/>0)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>1)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>2)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_descr5,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2),<sp/>Ne(3));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_descr6<sp/>=</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&gt;<sp/>0)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>1)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>2)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>3)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_descr6,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Ge(0),<sp/>Lt(10),<sp/>Ne(3),<sp/>Ne(5),<sp/>Ne(7));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_desr7<sp/>=</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&gt;=<sp/>0)<sp/>or<sp/>(isn&apos;t<sp/>&lt;<sp/>10)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>3)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>5)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>7)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_desr7,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),<sp/>Ne(8),<sp/>Ne(9),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(10),<sp/>Ne(11));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>AllOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Describe(m),<sp/>EndsWith(</highlight><highlight class="stringliteral">&quot;and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>11)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>AllOfMatches(11,<sp/>m);</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>monomorphic<sp/>matchers<sp/>are<sp/>safely<sp/>cast<sp/>by<sp/>the<sp/>AllOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">TEST(AllOfTest,<sp/>AllOfMatcherSafelyCastsMonomorphicMatchers)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>greater_than_5<sp/>and<sp/>less_than_10<sp/>are<sp/>monomorphic<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>greater_than_5<sp/>=<sp/>Gt(5);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>less_than_10<sp/>=<sp/>Lt(10);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>int&amp;&gt;<sp/>m<sp/>=<sp/>AllOf(greater_than_5,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m2<sp/>=<sp/>AllOf(greater_than_5,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m3<sp/>=<sp/>AllOf(greater_than_5,<sp/>m2);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BothOf<sp/>works<sp/>when<sp/>composing<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>int&amp;&gt;<sp/>m4<sp/>=<sp/>AllOf(greater_than_5,<sp/>less_than_10,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m5<sp/>=<sp/>AllOf(greater_than_5,<sp/>less_than_10,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">TEST_P(AllOfTestP,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>Both<sp/>matchers<sp/>need<sp/>to<sp/>explain.<sp/><sp/>The<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher<sp/>doesn&apos;t<sp/>give<sp/>an<sp/>explanation,<sp/>so<sp/>only<sp/>the<sp/>first<sp/>matcher&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation<sp/>is<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>Lt(30));</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>15<sp/>more<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>25));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>Both<sp/>matchers<sp/>need<sp/>to<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>20<sp/>more<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>10<sp/>more<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>30));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>All<sp/>matchers<sp/>need<sp/>to<sp/>explain.<sp/><sp/>The<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher<sp/>doesn&apos;t<sp/>given<sp/>an<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>Lt(30),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>15<sp/>more<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>5<sp/>more<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>25));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>All<sp/>matchers<sp/>need<sp/>to<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>GreaterThan(20),<sp/>GreaterThan(30));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>30<sp/>more<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>20<sp/>more<sp/>than<sp/>20,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>which<sp/>is<sp/>10<sp/>more<sp/>than<sp/>30&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>40));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>The<sp/>first<sp/>matcher,<sp/>which<sp/>failed,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>The<sp/>second<sp/>matcher,<sp/>which<sp/>failed,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.<sp/><sp/>Since<sp/>it<sp/>doesn&apos;t<sp/>given<sp/>an<sp/>explanation,<sp/>nothing<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>Lt(30));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>40));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>The<sp/>second<sp/>matcher,<sp/>which<sp/>failed,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>15));</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>to<sp/>allow<sp/>easy<sp/>testing<sp/>of<sp/>AnyOf<sp/>matchers<sp/>with<sp/>num<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnyOfMatches(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(Describe(m));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>num;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m.Matches(i));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(num<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnyOfStringMatches(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;std::string&gt;&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(Describe(m));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(std::to_string(0)));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>num;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m.Matches(std::to_string(i)));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(std::to_string(num<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">INSTANTIATE_GTEST_MATCHER_TEST_P(AnyOfTest);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AnyOf(m1,<sp/>...,<sp/>mn)<sp/>matches<sp/>any<sp/>value<sp/>that<sp/>matches<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>least<sp/>one<sp/>of<sp/>the<sp/>given<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">TEST(AnyOfTest,<sp/>MatchesWhenAnyMatches)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(1),<sp/>Ge(3));</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(4));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(-1));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(-1));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(3));</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(0),<sp/>Gt(10),<sp/>3,<sp/>5,<sp/>7);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(0));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(11));</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(3));</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>tests<sp/>for<sp/>varying<sp/>number<sp/>of<sp/>sub-matchers.<sp/>Due<sp/>to<sp/>the<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>sub-matchers<sp/>are<sp/>handled<sp/>it<sp/>is<sp/>enough<sp/>to<sp/>test<sp/>every<sp/>sub-matcher<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>sub-matchers<sp/>using<sp/>the<sp/>same<sp/>matcher<sp/>type.<sp/>Varying<sp/>matcher<sp/>types<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>checked<sp/>for<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>AnyOfMatches(2,<sp/>AnyOf(1,<sp/>2));</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>AnyOfMatches(3,<sp/>AnyOf(1,<sp/>2,<sp/>3));</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>AnyOfMatches(4,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4));</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>AnyOfMatches(5,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>AnyOfMatches(6,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6));</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>AnyOfMatches(7,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>AnyOfMatches(8,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>AnyOfMatches(9,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>AnyOfMatches(10,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10));</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>variadic<sp/>version<sp/>of<sp/>the<sp/>AnyOfMatcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">TEST(AnyOfTest,<sp/>VariadicMatchesWhenAnyMatches)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>make<sp/>sure<sp/>AnyOf<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>right<sp/>namespace<sp/>and<sp/>does<sp/>not<sp/>depend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>ADL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>::testing::AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Describe(m),<sp/>EndsWith(</highlight><highlight class="stringliteral">&quot;or<sp/>(is<sp/>equal<sp/>to<sp/>11)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>AnyOfMatches(11,<sp/>m);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>AnyOfMatches(50,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/>18,<sp/>19,<sp/>20,<sp/>21,<sp/>22,<sp/>23,<sp/>24,<sp/>25,<sp/>26,<sp/>27,<sp/>28,<sp/>29,<sp/>30,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>31,<sp/>32,<sp/>33,<sp/>34,<sp/>35,<sp/>36,<sp/>37,<sp/>38,<sp/>39,<sp/>40,<sp/>41,<sp/>42,<sp/>43,<sp/>44,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>45,<sp/>46,<sp/>47,<sp/>48,<sp/>49,<sp/>50));</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>AnyOfStringMatches(</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>50,<sp/>AnyOf(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;11&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;12&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;13&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;14&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;15&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;16&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;17&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;18&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;19&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;20&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;21&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;22&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;23&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;24&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;25&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;26&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;27&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;28&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;29&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;30&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;31&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;32&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;33&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;34&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;35&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;36&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;37&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;38&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;39&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;40&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;41&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;43&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;44&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;45&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;46&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;47&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;48&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;49&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;50&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">TEST(ConditionalTest,<sp/>MatchesFirstIfCondition)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>Matcher&lt;std::string&gt;<sp/>eq_red<sp/>=<sp/>Eq(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>Matcher&lt;std::string&gt;<sp/>ne_red<sp/>=<sp/>Ne(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>Matcher&lt;std::string&gt;<sp/>m<sp/>=<sp/>Conditional(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>eq_red,<sp/>ne_red);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>expected;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.MatchAndExplain(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(eq_red.MatchAndExplain(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/>&amp;expected));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>Eq(expected.str()));</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">TEST(ConditionalTest,<sp/>MatchesSecondIfCondition)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>Matcher&lt;std::string&gt;<sp/>eq_red<sp/>=<sp/>Eq(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>Matcher&lt;std::string&gt;<sp/>ne_red<sp/>=<sp/>Ne(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>Matcher&lt;std::string&gt;<sp/>m<sp/>=<sp/>Conditional(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>eq_red,<sp/>ne_red);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>expected;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.MatchAndExplain(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ne_red.MatchAndExplain(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>&amp;expected));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>Eq(expected.str()));</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AnyOf(m1,<sp/>...,<sp/>mn)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">TEST(AnyOfTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(1),<sp/>Ge(3));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;=<sp/>1)<sp/>or<sp/>(is<sp/>&gt;=<sp/>3)&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2));</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;<sp/>0)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>1)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>2)&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3));</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;<sp/>0)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>1)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>2)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>3)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(0),<sp/>Gt(10),<sp/>3,<sp/>5,<sp/>7);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;=<sp/>0)<sp/>or<sp/>(is<sp/>&gt;<sp/>10)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>3)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>5)<sp/>or<sp/>(is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;equal<sp/>to<sp/>7)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AnyOf(m1,<sp/>...,<sp/>mn)<sp/>describes<sp/>its<sp/>negation<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal">TEST(AnyOfTest,<sp/>CanDescribeNegation)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(1),<sp/>Ge(3));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;=<sp/>1)<sp/>and<sp/>(isn&apos;t<sp/>&gt;=<sp/>3)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2));</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;<sp/>0)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>1)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>2)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3));</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;<sp/>0)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>1)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>2)<sp/>and<sp/>(isn&apos;t<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;equal<sp/>to<sp/>3)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(0),<sp/>Gt(10),<sp/>3,<sp/>5,<sp/>7);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;=<sp/>0)<sp/>and<sp/>(isn&apos;t<sp/>&gt;<sp/>10)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>3)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>5)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>7)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>monomorphic<sp/>matchers<sp/>are<sp/>safely<sp/>cast<sp/>by<sp/>the<sp/>AnyOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal">TEST(AnyOfTest,<sp/>AnyOfMatcherSafelyCastsMonomorphicMatchers)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>greater_than_5<sp/>and<sp/>less_than_10<sp/>are<sp/>monomorphic<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>greater_than_5<sp/>=<sp/>Gt(5);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>less_than_10<sp/>=<sp/>Lt(10);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>int&amp;&gt;<sp/>m<sp/>=<sp/>AnyOf(greater_than_5,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m2<sp/>=<sp/>AnyOf(greater_than_5,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m3<sp/>=<sp/>AnyOf(greater_than_5,<sp/>m2);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EitherOf<sp/>works<sp/>when<sp/>composing<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>int&amp;&gt;<sp/>m4<sp/>=<sp/>AnyOf(greater_than_5,<sp/>less_than_10,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>Matcher&lt;int&amp;&gt;<sp/>m5<sp/>=<sp/>AnyOf(greater_than_5,<sp/>less_than_10,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal">TEST_P(AnyOfTestP,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>Both<sp/>matchers<sp/>need<sp/>to<sp/>explain.<sp/><sp/>The<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher<sp/>doesn&apos;t<sp/>give<sp/>an<sp/>explanation,<sp/>so<sp/>only<sp/>the<sp/>first<sp/>matcher&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation<sp/>is<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>Lt(0));</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>Both<sp/>matchers<sp/>need<sp/>to<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>15<sp/>less<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>All<sp/>matchers<sp/>need<sp/>to<sp/>explain.<sp/><sp/>The<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher<sp/>doesn&apos;t<sp/>given<sp/>an<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>Gt(20),<sp/>GreaterThan(30));</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>25<sp/>less<sp/>than<sp/>30&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>All<sp/>matchers<sp/>need<sp/>to<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>GreaterThan(20),<sp/>GreaterThan(30));</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>15<sp/>less<sp/>than<sp/>20,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>which<sp/>is<sp/>25<sp/>less<sp/>than<sp/>30&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>The<sp/>first<sp/>matcher,<sp/>which<sp/>succeeded,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>more<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>15));</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>The<sp/>second<sp/>matcher,<sp/>which<sp/>succeeded,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.<sp/><sp/>Since<sp/>it<sp/>doesn&apos;t<sp/>given<sp/>an<sp/>explanation,<sp/>nothing<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>Lt(30));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>0));</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>The<sp/>second<sp/>matcher,<sp/>which<sp/>succeeded,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(30),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>more<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>25));</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>predicate<sp/>function<sp/>and<sp/>predicate<sp/>functor<sp/>are<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>testing<sp/>the<sp/>Truly(predicate)<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>non-zero<sp/>if<sp/>the<sp/>input<sp/>is<sp/>positive.<sp/><sp/>Note<sp/>that<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>this<sp/>function<sp/>is<sp/>not<sp/>bool.<sp/><sp/>It&apos;s<sp/>OK<sp/>as<sp/>Truly()<sp/>accepts<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unary<sp/>function<sp/>or<sp/>functor<sp/>whose<sp/>return<sp/>type<sp/>can<sp/>be<sp/>implicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>converted<sp/>to<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsPositive(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>functor<sp/>returns<sp/>true<sp/>if<sp/>the<sp/>input<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IsGreaterThan<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>IsGreaterThan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold)<sp/>:<sp/>threshold_(threshold)<sp/>{}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>&gt;<sp/>threshold_;<sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold_;</highlight></codeline>
<codeline lineno="837"><highlight class="normal">};</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>Truly().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>predicate<sp/>returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>argument<sp/>references<sp/>foo<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>a<sp/>zero<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ReferencesFooAndIsZero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(&amp;n<sp/>==<sp/>&amp;foo)<sp/>&amp;&amp;<sp/>(n<sp/>==<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate)<sp/>matches<sp/>what<sp/>satisfies<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal">TEST(TrulyTest,<sp/>MatchesWhatSatisfiesThePredicate)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m<sp/>=<sp/>Truly(IsPositive);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2.0));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(-1.5));</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate_functor)<sp/>works<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal">TEST(TrulyTest,<sp/>CanBeUsedWithFunctor)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>Truly(IsGreaterThan(5));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(6));</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(4));</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>that<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertibleToBool<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ConvertibleToBool(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)<sp/>:<sp/>number_(number)<sp/>{}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number_<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_;</highlight></codeline>
<codeline lineno="869"><highlight class="normal">};</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">ConvertibleToBool<sp/>IsNotZero(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertibleToBool(number);<sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>predicate<sp/>used<sp/>in<sp/>Truly()<sp/>may<sp/>return<sp/>a<sp/>class<sp/>that&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implicitly<sp/>convertible<sp/>to<sp/>bool,<sp/>even<sp/>when<sp/>the<sp/>class<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator!().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">TEST(TrulyTest,<sp/>PredicateCanReturnAClassConvertibleToBool)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>Truly(IsNotZero);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate)<sp/>can<sp/>describe<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal">TEST(TrulyTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m<sp/>=<sp/>Truly(IsPositive);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;satisfies<sp/>the<sp/>given<sp/>predicate&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate)<sp/>works<sp/>when<sp/>the<sp/>matcher<sp/>takes<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>by<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal">TEST(TrulyTest,<sp/>WorksForByRefArguments)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>int&amp;&gt;<sp/>m<sp/>=<sp/>Truly(ReferencesFooAndIsZero);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(foo));</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(n));</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate)<sp/>provides<sp/>a<sp/>helpful<sp/>reason<sp/>when<sp/>it<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">TEST(TrulyTest,<sp/>ExplainsFailures)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>StringMatchResultListener<sp/>listener;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(Truly(IsPositive),<sp/>-1,<sp/>&amp;listener));</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>EXPECT_EQ(listener.str(),<sp/></highlight><highlight class="stringliteral">&quot;didn&apos;t<sp/>satisfy<sp/>the<sp/>given<sp/>predicate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Matches(m)<sp/>is<sp/>a<sp/>predicate<sp/>satisfied<sp/>by<sp/>whatever<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>matcher<sp/>m.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">TEST(MatchesTest,<sp/>IsSatisfiedByWhatMatchesTheMatcher)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Matches(Ge(0))(1));</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Matches(Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">))(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Matches(m)<sp/>works<sp/>when<sp/>the<sp/>matcher<sp/>takes<sp/>its<sp/>argument<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal">TEST(MatchesTest,<sp/>WorksOnByRefArguments)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Matches(AllOf(Ref(n),<sp/>Eq(0)))(n));</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Matches(Ref(m))(n));</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>Matcher<sp/>on<sp/>non-reference<sp/>type<sp/>can<sp/>be<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal">TEST(MatchesTest,<sp/>WorksWithMatcherOnNonRefType)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>eq5<sp/>=<sp/>Eq(5);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Matches(eq5)(5));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Matches(eq5)(2));</highlight></codeline>
<codeline lineno="925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Value(value,<sp/>matcher).<sp/><sp/>Since<sp/>Value()<sp/>is<sp/>a<sp/>simple<sp/>wrapper<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches(),<sp/>which<sp/>has<sp/>been<sp/>tested<sp/>already,<sp/>we<sp/>don&apos;t<sp/>spend<sp/>a<sp/>lot<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>effort<sp/>on<sp/>testing<sp/>Value().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal">TEST(ValueTest,<sp/>WorksWithPolymorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Value(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Value(5,<sp/>Gt(10)));</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal">TEST(ValueTest,<sp/>WorksWithMonomorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>is_zero<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Value(0,<sp/>is_zero));</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Value(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>is_zero));</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>int&amp;&gt;<sp/>ref_n<sp/>=<sp/>Ref(n);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Value(n,<sp/>ref_n));</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Value(1,<sp/>ref_n));</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal">TEST(AllArgsTest,<sp/>WorksForTuple)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(1,<sp/>2L),<sp/>AllArgs(Lt()));</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::make_tuple(2L,<sp/>1),<sp/>Not(AllArgs(Lt())));</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">TEST(AllArgsTest,<sp/>WorksForNonTuple)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>EXPECT_THAT(42,<sp/>AllArgs(Gt(0)));</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>Not(AllArgs(Eq(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AllArgsHelper<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>AllArgsHelper()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Helper,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>AllArgsHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AllArgsHelper&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>AllArgsHelper&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AllArgsHelper&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">};</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal">TEST(AllArgsTest,<sp/>WorksInWithClause)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>AllArgsHelper<sp/>helper;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>ON_CALL(helper,<sp/>Helper(_,<sp/>_)).With(AllArgs(Lt())).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>Helper(_,<sp/>_));</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>Helper(_,<sp/>_)).With(AllArgs(Gt())).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>helper.Helper(</highlight><highlight class="charliteral">&apos;\1&apos;</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>helper.Helper(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">OptionalMatchersHelper<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>OptionalMatchersHelper()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(NoArgs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(OneArg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(TwoArgs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Overloaded,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x));</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Overloaded,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>OptionalMatchersHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OptionalMatchersHelper&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>OptionalMatchersHelper&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OptionalMatchersHelper&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="993"><highlight class="normal">};</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal">TEST(AllArgsTest,<sp/>WorksWithoutMatchers)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>OptionalMatchersHelper<sp/>helper;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>ON_CALL(helper,<sp/>NoArgs).WillByDefault(Return(10));</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>ON_CALL(helper,<sp/>OneArg).WillByDefault(Return(20));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>ON_CALL(helper,<sp/>TwoArgs).WillByDefault(Return(30));</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>helper.NoArgs());</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>EXPECT_EQ(20,<sp/>helper.OneArg(1));</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>EXPECT_EQ(30,<sp/>helper.TwoArgs(</highlight><highlight class="charliteral">&apos;\1&apos;</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>NoArgs).Times(1);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>OneArg).WillOnce(Return(100));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>OneArg(17)).WillOnce(Return(200));</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>TwoArgs).Times(0);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>helper.NoArgs());</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>EXPECT_EQ(100,<sp/>helper.OneArg(1));</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>EXPECT_EQ(200,<sp/>helper.OneArg(17));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>floating-point<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FloatingPointTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">testing::internal::FloatingPoint&lt;RawType&gt;</ref><sp/>Floating;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Floating::Bits<sp/>Bits;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>FloatingPointTest()</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>max_ulps_(Floating::kMaxUlps),</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_bits_(Floating(0).bits()),</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one_bits_(Floating(1).bits()),</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity_bits_(Floating(Floating::Infinity()).bits()),</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_to_positive_zero_(</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::ReinterpretBits(zero_bits_<sp/>+<sp/>max_ulps_<sp/>/<sp/>2)),</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_to_negative_zero_(</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-Floating::ReinterpretBits(zero_bits_<sp/>+<sp/>max_ulps_<sp/>-<sp/>max_ulps_<sp/>/<sp/>2)),</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>further_from_negative_zero_(-Floating::ReinterpretBits(</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_bits_<sp/>+<sp/>max_ulps_<sp/>+<sp/>1<sp/>-<sp/>max_ulps_<sp/>/<sp/>2)),</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_to_one_(Floating::ReinterpretBits(one_bits_<sp/>+<sp/>max_ulps_)),</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>further_from_one_(Floating::ReinterpretBits(one_bits_<sp/>+<sp/>max_ulps_<sp/>+<sp/>1)),</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity_(Floating::Infinity()),</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_to_infinity_(</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::ReinterpretBits(infinity_bits_<sp/>-<sp/>max_ulps_)),</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>further_from_infinity_(</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Floating::ReinterpretBits(infinity_bits_<sp/>-<sp/>max_ulps_<sp/>-<sp/>1)),</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_(std::numeric_limits&lt;RawType&gt;::max()),</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nan1_(Floating::ReinterpretBits(Floating::kExponentBitMask<sp/>|<sp/>1)),</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nan2_(Floating::ReinterpretBits(Floating::kExponentBitMask<sp/>|<sp/>200))<sp/>{}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSize()<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RawType),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Bits));<sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>battery<sp/>of<sp/>tests<sp/>for<sp/>FloatingEqMatcher::Matches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>function<sp/>which<sp/>creates<sp/>a<sp/>FloatingEqMatcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestMatches(</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing::internal::FloatingEqMatcher&lt;RawType&gt;<sp/>(*matcher_maker)(RawType))<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m1<sp/>=<sp/>matcher_maker(0.0);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(-0.0));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(close_to_positive_zero_));</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(close_to_negative_zero_));</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m1.Matches(1.0));</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m2<sp/>=<sp/>matcher_maker(close_to_positive_zero_);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m2.Matches(further_from_negative_zero_));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m3<sp/>=<sp/>matcher_maker(1.0);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m3.Matches(close_to_one_));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m3.Matches(further_from_one_));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>commutativity:<sp/>matcher_maker(0.0).Matches(1.0)<sp/>was<sp/>tested<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m3.Matches(0.0));</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m4<sp/>=<sp/>matcher_maker(-infinity_);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m4.Matches(-close_to_infinity_));</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m5<sp/>=<sp/>matcher_maker(infinity_);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m5.Matches(close_to_infinity_));</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>interesting<sp/>as<sp/>the<sp/>representations<sp/>of<sp/>infinity_<sp/>and<sp/>nan1_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>only<sp/>1<sp/>DLP<sp/>apart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m5.Matches(nan1_));</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>can<sp/>produce<sp/>a<sp/>Matcher&lt;const<sp/>RawType&amp;&gt;,<sp/>which<sp/>is<sp/>needed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;const<sp/>RawType&amp;&gt;<sp/>m6<sp/>=<sp/>matcher_maker(0.0);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m6.Matches(-0.0));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m6.Matches(close_to_positive_zero_));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m6.Matches(1.0));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>can<sp/>produce<sp/>a<sp/>Matcher&lt;RawType&amp;&gt;,<sp/>which<sp/>is<sp/>needed<sp/>in<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&amp;&gt;<sp/>m7<sp/>=<sp/>matcher_maker(0.0);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m7.Matches(x));</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m7.Matches(x));</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre-calculated<sp/>numbers<sp/>to<sp/>be<sp/>used<sp/>by<sp/>the<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>max_ulps_;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>zero_bits_;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>0.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>one_bits_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>infinity_bits_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>+infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>numbers<sp/>close<sp/>to<sp/>0.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>close_to_positive_zero_;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>close_to_negative_zero_;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>further_from_negative_zero_;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>numbers<sp/>close<sp/>to<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>close_to_one_;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>further_from_one_;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>numbers<sp/>close<sp/>to<sp/>+infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>infinity_;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>close_to_infinity_;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>further_from_infinity_;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>representable<sp/>value<sp/>that&apos;s<sp/>not<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>max_;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>NaNs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>nan1_;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>nan2_;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>floating-point<sp/>matchers<sp/>with<sp/>fixed<sp/>epsilons.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FloatingPointNearTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>FloatingPointTest&lt;RawType&gt;<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FloatingPointTest&lt;RawType&gt;<sp/>ParentType;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>battery<sp/>of<sp/>tests<sp/>for<sp/>FloatingEqMatcher::Matches<sp/>with<sp/>a<sp/>fixed<sp/>epsilon.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>function<sp/>which<sp/>creates<sp/>a<sp/>FloatingEqMatcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestNearMatches(testing::internal::FloatingEqMatcher&lt;RawType&gt;<sp/>(</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*matcher_maker)(RawType,<sp/>RawType))<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m1<sp/>=<sp/>matcher_maker(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(0.0));</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(-0.0));</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m1.Matches(ParentType::close_to_positive_zero_));</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m1.Matches(ParentType::close_to_negative_zero_));</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m1.Matches(1.0));</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m2<sp/>=<sp/>matcher_maker(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m2.Matches(0.0));</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m2.Matches(-0.0));</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m2.Matches(1.0));</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m2.Matches(-1.0));</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m2.Matches(ParentType::close_to_one_));</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m2.Matches(-ParentType::close_to_one_));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>inf<sp/>matches<sp/>inf,<sp/>regardless<sp/>of<sp/>the<sp/>of<sp/>the<sp/>specified<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>absolute<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m3<sp/>=<sp/>matcher_maker(ParentType::infinity_,<sp/>0.0);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m3.Matches(ParentType::infinity_));</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m3.Matches(ParentType::close_to_infinity_));</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m3.Matches(-ParentType::infinity_));</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m4<sp/>=<sp/>matcher_maker(-ParentType::infinity_,<sp/>0.0);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m4.Matches(-ParentType::infinity_));</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m4.Matches(-ParentType::close_to_infinity_));</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m4.Matches(ParentType::infinity_));</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>various<sp/>overflow<sp/>scenarios.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m5<sp/>=<sp/>matcher_maker(ParentType::max_,<sp/>ParentType::max_);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m5.Matches(ParentType::max_));</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m5.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m6<sp/>=<sp/>matcher_maker(-ParentType::max_,<sp/>ParentType::max_);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m6.Matches(ParentType::max_));</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m6.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m7<sp/>=<sp/>matcher_maker(ParentType::max_,<sp/>0);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m7.Matches(ParentType::max_));</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m7.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m8<sp/>=<sp/>matcher_maker(-ParentType::max_,<sp/>0);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m8.Matches(ParentType::max_));</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m8.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>difference<sp/>between<sp/>max()<sp/>and<sp/>-max()<sp/>normally<sp/>overflows<sp/>to<sp/>infinity,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>should<sp/>still<sp/>match<sp/>if<sp/>the<sp/>max_abs_error<sp/>is<sp/>also<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&gt;<sp/>m9<sp/>=</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher_maker(ParentType::max_,<sp/>ParentType::infinity_);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m8.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>can<sp/>produce<sp/>a<sp/>Matcher&lt;const<sp/>RawType&amp;&gt;,<sp/>which<sp/>is<sp/>needed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;const<sp/>RawType&amp;&gt;<sp/>m10<sp/>=<sp/>matcher_maker(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m10.Matches(-0.0));</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m10.Matches(ParentType::close_to_positive_zero_));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m10.Matches(ParentType::close_to_one_));</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>can<sp/>produce<sp/>a<sp/>Matcher&lt;RawType&amp;&gt;,<sp/>which<sp/>is<sp/>needed<sp/>in<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>Matcher&lt;RawType&amp;&gt;<sp/>m11<sp/>=<sp/>matcher_maker(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m11.Matches(x));</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m11.Matches(x));</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m11.Matches(x));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1.1f;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m11.Matches(x));</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>-1.1f;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m11.Matches(x));</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>floats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FloatingPointTest&lt;float&gt;<sp/>FloatTest;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal">TEST_F(FloatTest,<sp/>FloatEqApproximatelyMatchesFloats)<sp/>{<sp/>TestMatches(&amp;FloatEq);<sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal">TEST_F(FloatTest,<sp/>NanSensitiveFloatEqApproximatelyMatchesFloats)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>TestMatches(&amp;NanSensitiveFloatEq);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal">TEST_F(FloatTest,<sp/>FloatEqCannotMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FloatEq<sp/>never<sp/>matches<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m<sp/>=<sp/>FloatEq(nan1_);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal">TEST_F(FloatTest,<sp/>NanSensitiveFloatEqCanMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveFloatEq<sp/>will<sp/>match<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m<sp/>=<sp/>NanSensitiveFloatEq(nan1_);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal">TEST_F(FloatTest,<sp/>FloatEqCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m1<sp/>=<sp/>FloatEq(2.0f);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m2<sp/>=<sp/>FloatEq(0.5f);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m3<sp/>=<sp/>FloatEq(nan1_);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal">TEST_F(FloatTest,<sp/>NanSensitiveFloatEqCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m1<sp/>=<sp/>NanSensitiveFloatEq(2.0f);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m2<sp/>=<sp/>NanSensitiveFloatEq(0.5f);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m3<sp/>=<sp/>NanSensitiveFloatEq(nan1_);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>floats<sp/>with<sp/>a<sp/>user-specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>max<sp/>absolute<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FloatingPointNearTest&lt;float&gt;<sp/>FloatNearTest;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal">TEST_F(FloatNearTest,<sp/>FloatNearMatches)<sp/>{<sp/>TestNearMatches(&amp;FloatNear);<sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal">TEST_F(FloatNearTest,<sp/>NanSensitiveFloatNearApproximatelyMatchesFloats)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>TestNearMatches(&amp;NanSensitiveFloatNear);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal">TEST_F(FloatNearTest,<sp/>FloatNearCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m1<sp/>=<sp/>FloatNear(2.0f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m2<sp/>=<sp/>FloatNear(0.5f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m3<sp/>=<sp/>FloatNear(nan1_,<sp/>0.0);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal">TEST_F(FloatNearTest,<sp/>NanSensitiveFloatNearCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m1<sp/>=<sp/>NanSensitiveFloatNear(2.0f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m2<sp/>=<sp/>NanSensitiveFloatNear(0.5f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m3<sp/>=<sp/>NanSensitiveFloatNear(nan1_,<sp/>0.1f);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal">TEST_F(FloatNearTest,<sp/>FloatNearCannotMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FloatNear<sp/>never<sp/>matches<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m<sp/>=<sp/>FloatNear(ParentType::nan1_,<sp/>0.1f);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal">TEST_F(FloatNearTest,<sp/>NanSensitiveFloatNearCanMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveFloatNear<sp/>will<sp/>match<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>Matcher&lt;float&gt;<sp/>m<sp/>=<sp/>NanSensitiveFloatNear(nan1_,<sp/>0.1f);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>doubles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FloatingPointTest&lt;double&gt;<sp/>DoubleTest;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal">TEST_F(DoubleTest,<sp/>DoubleEqApproximatelyMatchesDoubles)<sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>TestMatches(&amp;DoubleEq);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal">TEST_F(DoubleTest,<sp/>NanSensitiveDoubleEqApproximatelyMatchesDoubles)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>TestMatches(&amp;NanSensitiveDoubleEq);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal">TEST_F(DoubleTest,<sp/>DoubleEqCannotMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoubleEq<sp/>never<sp/>matches<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m<sp/>=<sp/>DoubleEq(nan1_);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal">TEST_F(DoubleTest,<sp/>NanSensitiveDoubleEqCanMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveDoubleEq<sp/>will<sp/>match<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m<sp/>=<sp/>NanSensitiveDoubleEq(nan1_);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal">TEST_F(DoubleTest,<sp/>DoubleEqCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m1<sp/>=<sp/>DoubleEq(2.0);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m2<sp/>=<sp/>DoubleEq(0.5);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m3<sp/>=<sp/>DoubleEq(nan1_);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="1356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal">TEST_F(DoubleTest,<sp/>NanSensitiveDoubleEqCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m1<sp/>=<sp/>NanSensitiveDoubleEq(2.0);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m2<sp/>=<sp/>NanSensitiveDoubleEq(0.5);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m3<sp/>=<sp/>NanSensitiveDoubleEq(nan1_);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>floats<sp/>with<sp/>a<sp/>user-specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>max<sp/>absolute<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FloatingPointNearTest&lt;double&gt;<sp/>DoubleNearTest;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal">TEST_F(DoubleNearTest,<sp/>DoubleNearMatches)<sp/>{<sp/>TestNearMatches(&amp;DoubleNear);<sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal">TEST_F(DoubleNearTest,<sp/>NanSensitiveDoubleNearApproximatelyMatchesDoubles)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>TestNearMatches(&amp;NanSensitiveDoubleNear);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal">TEST_F(DoubleNearTest,<sp/>DoubleNearCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m1<sp/>=<sp/>DoubleNear(2.0,<sp/>0.5);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m2<sp/>=<sp/>DoubleNear(0.5,<sp/>0.5);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m3<sp/>=<sp/>DoubleNear(nan1_,<sp/>0.0);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="1396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal">TEST_F(DoubleNearTest,<sp/>ExplainsResultWhenMatchFails)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(DoubleNear(2.0,<sp/>0.1),<sp/>2.05));</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>0.2<sp/>from<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Explain(DoubleNear(2.0,<sp/>0.1),<sp/>2.2));</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>-0.3<sp/>from<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Explain(DoubleNear(2.0,<sp/>0.1),<sp/>1.7));</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>explanation<sp/>=</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(DoubleNear(2.1,<sp/>1e-10),<sp/>2.1<sp/>+<sp/>1.2e-10);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>C++<sp/>implementations<sp/>may<sp/>print<sp/>floating-point<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>slightly<sp/>differently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(explanation<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1.2e-10<sp/>from<sp/>2.1&quot;</highlight><highlight class="normal"><sp/>||<sp/><sp/></highlight><highlight class="comment">//<sp/>GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>explanation<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1.2e-010<sp/>from<sp/>2.1&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>where<sp/>explanation<sp/>is<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>explanation<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal">TEST_F(DoubleNearTest,<sp/>NanSensitiveDoubleNearCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m1<sp/>=<sp/>NanSensitiveDoubleNear(2.0,<sp/>0.5);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m2<sp/>=<sp/>NanSensitiveDoubleNear(0.5,<sp/>0.5);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m3<sp/>=<sp/>NanSensitiveDoubleNear(nan1_,<sp/>0.1);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal">TEST_F(DoubleNearTest,<sp/>DoubleNearCannotMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoubleNear<sp/>never<sp/>matches<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m<sp/>=<sp/>DoubleNear(ParentType::nan1_,<sp/>0.1);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="1434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal">TEST_F(DoubleNearTest,<sp/>NanSensitiveDoubleNearCanMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveDoubleNear<sp/>will<sp/>match<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/>Matcher&lt;double&gt;<sp/>m<sp/>=<sp/>NanSensitiveDoubleNear(nan1_,<sp/>0.1);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal">TEST(NotTest,<sp/>WorksOnMoveOnlyType)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Pointee(Eq(3)));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pointee(Eq(2))));</highlight></codeline>
<codeline lineno="1448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal">TEST(AllOfTest,<sp/>HugeMatcher)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>using<sp/>AllOf<sp/>with<sp/>many<sp/>arguments<sp/>doesn&apos;t<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>compiler<sp/>to<sp/>exceed<sp/>template<sp/>instantiation<sp/>depth<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>testing::AllOf(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::AllOf(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_)));</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal">TEST(AnyOfTest,<sp/>HugeMatcher)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>using<sp/>AnyOf<sp/>with<sp/>many<sp/>arguments<sp/>doesn&apos;t<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>compiler<sp/>to<sp/>exceed<sp/>template<sp/>instantiation<sp/>depth<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>testing::AnyOf(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::AnyOf(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_)));</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">adl_test<sp/>{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>implementation<sp/>of<sp/>::testing::AllOf<sp/>and<sp/>::testing::AnyOf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>issue<sp/>unqualified<sp/>recursive<sp/>calls.<sp/><sp/>If<sp/>they<sp/>do,<sp/>the<sp/>argument<sp/>dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name<sp/>lookup<sp/>will<sp/>cause<sp/>AllOf/AnyOf<sp/>in<sp/>the<sp/>&apos;adl_test&apos;<sp/>namespace<sp/>to<sp/>be<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>candidate<sp/>and<sp/>the<sp/>compilation<sp/>will<sp/>break<sp/>due<sp/>to<sp/>an<sp/>ambiguous<sp/>overload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matcher<sp/>must<sp/>be<sp/>in<sp/>the<sp/>same<sp/>namespace<sp/>as<sp/>AllOf/AnyOf<sp/>to<sp/>make<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dependent<sp/>lookup<sp/>find<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal">MATCHER(M,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>(void)arg;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AllOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/></highlight><highlight class="comment">/*t1*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/></highlight><highlight class="comment">/*t2*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal">TEST(AllOfTest,<sp/>DoesNotCallAllOfUnqualified)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>EXPECT_THAT(42,</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::AllOf(M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M()));</highlight></codeline>
<codeline lineno="1486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AnyOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal">TEST(AnyOfTest,<sp/>DoesNotCallAnyOfUnqualified)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>EXPECT_THAT(42,</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::AnyOf(M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M()));</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>adl_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal">TEST(AllOfTest,<sp/>WorksOnMoveOnlyType)<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>AllOf(Pointee(Eq(3)),<sp/>Pointee(Gt(0)),<sp/>Pointee(Lt(5))));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(AllOf(Pointee(Eq(3)),<sp/>Pointee(Gt(0)),<sp/>Pointee(Lt(3)))));</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal">TEST(AnyOfTest,<sp/>WorksOnMoveOnlyType)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>AnyOf(Pointee(Eq(5)),<sp/>Pointee(Lt(0)),<sp/>Pointee(Lt(5))));</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(AnyOf(Pointee(Eq(5)),<sp/>Pointee(Lt(0)),<sp/>Pointee(Gt(5)))));</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_matchers_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4244<sp/>4100</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc"/>
  </compounddef>
</doxygen>
