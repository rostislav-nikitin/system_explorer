<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classIntWrapper" kind="class" language="C++" prot="public">
    <compoundname>IntWrapper</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classIntWrapper_1a9695c22c2bcd5a7bc2775cf6e3a6e33a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int IntWrapper::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <qualifiedname>IntWrapper::value_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="265" column="7" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="265" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classIntWrapper_1a1d35e0d0b9c0fc109a8d2a2118ae6010" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IntWrapper::IntWrapper</definition>
        <argsstring>(int a_value)</argsstring>
        <name>IntWrapper</name>
        <qualifiedname>IntWrapper::IntWrapper</qualifiedname>
        <param>
          <type>int</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="250" column="12" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classIntWrapper_1af23efe3c8d8bf176948922b41e8f253e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IntWrapper::IntWrapper</definition>
        <argsstring>(const IntWrapper &amp;other)</argsstring>
        <name>IntWrapper</name>
        <qualifiedname>IntWrapper::IntWrapper</qualifiedname>
        <param>
          <type>const <ref refid="classIntWrapper" kindref="compound">IntWrapper</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="251" column="3" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="251" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classIntWrapper_1a39077b3c0eb1dd8a296a81bfb0a047b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref></type>
        <definition>IntWrapper IntWrapper::operator=</definition>
        <argsstring>(const IntWrapper &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>IntWrapper::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classIntWrapper" kindref="compound">IntWrapper</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="253" column="14" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classIntWrapper_1abf97bd11dd2825f3cb9e4d9f48152b56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classIntWrapper" kindref="compound">IntWrapper</ref></type>
        <definition>IntWrapper IntWrapper::operator+</definition>
        <argsstring>(int other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>IntWrapper::operator+</qualifiedname>
        <param>
          <type>int</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="258" column="14" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classIntWrapper_1a940fd2978cdf7849281f11b32df94163" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IntWrapper::operator&lt;</definition>
        <argsstring>(const IntWrapper &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>IntWrapper::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classIntWrapper" kindref="compound">IntWrapper</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="259" column="3" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="259" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classIntWrapper_1a6103e9dc5eb94678985e3c2ac481b508" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int IntWrapper::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <qualifiedname>IntWrapper::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="262" column="7" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="262" bodyend="262"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="248" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="248" bodyend="266"/>
    <listofallmembers>
      <member refid="classIntWrapper_1a1d35e0d0b9c0fc109a8d2a2118ae6010" prot="public" virt="non-virtual"><scope>IntWrapper</scope><name>IntWrapper</name></member>
      <member refid="classIntWrapper_1af23efe3c8d8bf176948922b41e8f253e" prot="public" virt="non-virtual"><scope>IntWrapper</scope><name>IntWrapper</name></member>
      <member refid="classIntWrapper_1abf97bd11dd2825f3cb9e4d9f48152b56" prot="public" virt="non-virtual"><scope>IntWrapper</scope><name>operator+</name></member>
      <member refid="classIntWrapper_1a940fd2978cdf7849281f11b32df94163" prot="public" virt="non-virtual"><scope>IntWrapper</scope><name>operator&lt;</name></member>
      <member refid="classIntWrapper_1a39077b3c0eb1dd8a296a81bfb0a047b3" prot="public" virt="non-virtual"><scope>IntWrapper</scope><name>operator=</name></member>
      <member refid="classIntWrapper_1a6103e9dc5eb94678985e3c2ac481b508" prot="public" virt="non-virtual"><scope>IntWrapper</scope><name>value</name></member>
      <member refid="classIntWrapper_1a9695c22c2bcd5a7bc2775cf6e3a6e33a" prot="private" virt="non-virtual"><scope>IntWrapper</scope><name>value_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
