<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gtest__pred__impl__unittest_8cc" kind="file" language="C++">
    <compoundname>gtest_pred_impl_unittest.cc</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">ostream</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includedby refid="gtest__all__test_8cc" local="yes">build/_deps/googletest-src/googletest/test/gtest_all_test.cc</includedby>
    <incdepgraph>
      <node id="16">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="29">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="48">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="36">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="18">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc</label>
        <link refid="gtest__pred__impl__unittest_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>atomic</label>
      </node>
      <node id="52">
        <label>cassert</label>
      </node>
      <node id="24">
        <label>cerrno</label>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="19">
        <label>ctype.h</label>
      </node>
      <node id="43">
        <label>float.h</label>
      </node>
      <node id="39">
        <label>functional</label>
      </node>
      <node id="9">
        <label>iomanip</label>
      </node>
      <node id="54">
        <label>iosfwd</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="50">
        <label>iterator</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="25">
        <label>locale</label>
      </node>
      <node id="44">
        <label>map</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="3">
        <label>ostream</label>
      </node>
      <node id="33">
        <label>regex.h</label>
      </node>
      <node id="12">
        <label>set</label>
      </node>
      <node id="13">
        <label>sstream</label>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="21">
        <label>stdio.h</label>
      </node>
      <node id="22">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="23">
        <label>string.h</label>
      </node>
      <node id="31">
        <label>strings.h</label>
      </node>
      <node id="27">
        <label>sys/stat.h</label>
      </node>
      <node id="28">
        <label>sys/types.h</label>
      </node>
      <node id="26">
        <label>tuple</label>
      </node>
      <node id="14">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>typeinfo</label>
      </node>
      <node id="32">
        <label>unistd.h</label>
      </node>
      <node id="41">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structBool" prot="public">Bool</innerclass>
    <innerclass refid="structPredFunctor1" prot="public">PredFunctor1</innerclass>
    <innerclass refid="structPredFormatFunctor1" prot="public">PredFormatFunctor1</innerclass>
    <innerclass refid="classPredicate1Test" prot="public">Predicate1Test</innerclass>
    <innerclass refid="structPredFunctor2" prot="public">PredFunctor2</innerclass>
    <innerclass refid="structPredFormatFunctor2" prot="public">PredFormatFunctor2</innerclass>
    <innerclass refid="classPredicate2Test" prot="public">Predicate2Test</innerclass>
    <innerclass refid="structPredFunctor3" prot="public">PredFunctor3</innerclass>
    <innerclass refid="structPredFormatFunctor3" prot="public">PredFormatFunctor3</innerclass>
    <innerclass refid="classPredicate3Test" prot="public">Predicate3Test</innerclass>
    <innerclass refid="structPredFunctor4" prot="public">PredFunctor4</innerclass>
    <innerclass refid="structPredFormatFunctor4" prot="public">PredFormatFunctor4</innerclass>
    <innerclass refid="classPredicate4Test" prot="public">Predicate4Test</innerclass>
    <innerclass refid="structPredFunctor5" prot="public">PredFunctor5</innerclass>
    <innerclass refid="structPredFormatFunctor5" prot="public">PredFormatFunctor5</innerclass>
    <innerclass refid="classPredicate5Test" prot="public">Predicate5Test</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a35f3fc7e63ce8c37737b59138d45b871" prot="public" static="no">
        <type><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref></type>
        <definition>typedef Predicate1Test EXPECT_PRED_FORMAT1Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED_FORMAT1Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="147" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a74baa3f09c1626584580dd9595545a9a" prot="public" static="no">
        <type><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref></type>
        <definition>typedef Predicate1Test ASSERT_PRED_FORMAT1Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED_FORMAT1Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="148" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1ad745775376a8f891faadd4d168798bab" prot="public" static="no">
        <type><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref></type>
        <definition>typedef Predicate1Test EXPECT_PRED1Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED1Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="149" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a14984d780d451975d1895e5de7c9dbca" prot="public" static="no">
        <type><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref></type>
        <definition>typedef Predicate1Test ASSERT_PRED1Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED1Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="150" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a87f67a2091d35818da5a6ed7551b457e" prot="public" static="no">
        <type><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref></type>
        <definition>typedef Predicate2Test EXPECT_PRED_FORMAT2Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED_FORMAT2Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="530" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a9cc3995c305c9ec8ea5884ed6fd98911" prot="public" static="no">
        <type><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref></type>
        <definition>typedef Predicate2Test ASSERT_PRED_FORMAT2Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED_FORMAT2Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="531" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a232826190f0ba7ce5dffa1ced1219acc" prot="public" static="no">
        <type><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref></type>
        <definition>typedef Predicate2Test EXPECT_PRED2Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED2Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="532" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a1b78024909002227ea625b831d27ea8b" prot="public" static="no">
        <type><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref></type>
        <definition>typedef Predicate2Test ASSERT_PRED2Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED2Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="533" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a338bfbaa3935e8ed55c11195e5b53c20" prot="public" static="no">
        <type><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref></type>
        <definition>typedef Predicate3Test EXPECT_PRED_FORMAT3Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED_FORMAT3Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="920" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1ac2bfdb213c3119d730d1aa3fcc4daa56" prot="public" static="no">
        <type><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref></type>
        <definition>typedef Predicate3Test ASSERT_PRED_FORMAT3Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED_FORMAT3Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="921" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="921" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a15eb53ab3f302d7bfffe1352f3902eb4" prot="public" static="no">
        <type><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref></type>
        <definition>typedef Predicate3Test EXPECT_PRED3Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED3Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="922" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a631dbdd4bb24b4cf62268ea432a2719e" prot="public" static="no">
        <type><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref></type>
        <definition>typedef Predicate3Test ASSERT_PRED3Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED3Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="923" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a259c13bd25f54a4f79b72de17fd86caa" prot="public" static="no">
        <type><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref></type>
        <definition>typedef Predicate4Test EXPECT_PRED_FORMAT4Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED_FORMAT4Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1328" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1abea1e8f7f9efe2e944f9e90056d2d805" prot="public" static="no">
        <type><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref></type>
        <definition>typedef Predicate4Test ASSERT_PRED_FORMAT4Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED_FORMAT4Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1329" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1abbf7ac63ea663c0dec815df5770cd2a8" prot="public" static="no">
        <type><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref></type>
        <definition>typedef Predicate4Test EXPECT_PRED4Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED4Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1330" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a0467f5052687e11dccf9f45db63e9941" prot="public" static="no">
        <type><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref></type>
        <definition>typedef Predicate4Test ASSERT_PRED4Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED4Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1331" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1aedface39db3a4a232e856e9e5b0d93b4" prot="public" static="no">
        <type><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref></type>
        <definition>typedef Predicate5Test EXPECT_PRED_FORMAT5Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED_FORMAT5Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1751" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1acd5253924c1b0c73917bb9b180805798" prot="public" static="no">
        <type><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref></type>
        <definition>typedef Predicate5Test ASSERT_PRED_FORMAT5Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED_FORMAT5Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1752" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a9e7ab56ee0997fdc5c9f7318d0f1094c" prot="public" static="no">
        <type><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref></type>
        <definition>typedef Predicate5Test EXPECT_PRED5Test</definition>
        <argsstring></argsstring>
        <name>EXPECT_PRED5Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1753" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest__pred__impl__unittest_8cc_1a93627727c60bdb52cadef77d479bf1da" prot="public" static="no">
        <type><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref></type>
        <definition>typedef Predicate5Test ASSERT_PRED5Test</definition>
        <argsstring></argsstring>
        <name>ASSERT_PRED5Test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1754" column="24" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1754" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a5f45eafac0eb1e73929abdd45cb54026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Bool &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structBool" kindref="compound">Bool</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="67" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1aa8827b7fab495de26f406affdf47a697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool PredFunction1</definition>
        <argsstring>(T1 v1)</argsstring>
        <name>PredFunction1</name>
        <param>
          <type>T1</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="75" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a0cfa23f9b62be9c5bf65d0971510bac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction1Int</definition>
        <argsstring>(int v1)</argsstring>
        <name>PredFunction1Int</name>
        <param>
          <type>int</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="81" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a1c12be7e61ecd333d5c9d5f251d3809f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction1Bool</definition>
        <argsstring>(Bool v1)</argsstring>
        <name>PredFunction1Bool</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="82" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1af5b63802199e417c73c46cbacc73f4ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
        </templateparamlist>
        <type>testing::AssertionResult</type>
        <definition>testing::AssertionResult PredFormatFunction1</definition>
        <argsstring>(const char *e1, const T1 &amp;v1)</argsstring>
        <name>PredFormatFunction1</name>
        <param>
          <type>const char *</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="94" column="26" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1acf6422eca13944f695085fc6c7527748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED1Test, FunctionOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="154" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a7ae9f4aac70507b021c7f828ba06c600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED1Test, FunctionOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="161" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1ac6309545f87fbb12ae87710af1dddf0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED1Test, FunctorOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="168" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1acaedb8d892427455232522cca9d0ce36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED1Test, FunctorOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="175" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a33183522648e7235772c7ae107918e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED1Test, FunctionOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="182" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="182" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a6c7394c22028809dd2a31ec37021957d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED1Test, FunctionOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="193" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="193" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a3a672df7ea6af2695c3f1a97c7b32714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED1Test, FunctorOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="204" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="204" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a00575e7356ae80bbd71ab684ccd65ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED1Test, FunctorOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="215" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="215" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a6af405b7411fcd37c51a5fc96a869eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool PredFunction2</definition>
        <argsstring>(T1 v1, T2 v2)</argsstring>
        <name>PredFunction2</name>
        <param>
          <type>T1</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="451" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="451" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a7a3b834b08a5176afbd4bfc97d06bedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction2Int</definition>
        <argsstring>(int v1, int v2)</argsstring>
        <name>PredFunction2Int</name>
        <param>
          <type>int</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="457" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="457" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1ab00487cdc08174c122cfaccc6abf221d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction2Bool</definition>
        <argsstring>(Bool v1, Bool v2)</argsstring>
        <name>PredFunction2Bool</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="458" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="458" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1ac47f2d44062a47c907d113375ec47d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>testing::AssertionResult</type>
        <definition>testing::AssertionResult PredFormatFunction2</definition>
        <argsstring>(const char *e1, const char *e2, const T1 &amp;v1, const T2 &amp;v2)</argsstring>
        <name>PredFormatFunction2</name>
        <param>
          <type>const char *</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="470" column="26" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="470" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1aba0b6cfb33acecfb0ab3092f2194f958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED2Test, FunctionOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="537" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="537" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a6c5a246f545dedba3863fc60fdcec435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED2Test, FunctionOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="544" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="544" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a512e6b394b152d77349f5b884043710c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED2Test, FunctorOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="551" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="551" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a4ce1ae190c7b5477db170623d18ea48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED2Test, FunctorOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="558" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="558" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1ae8492c15e79d2d012460a71eb08483ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED2Test, FunctionOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="565" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="565" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a590341b72b346a170ff6d8c73bf559b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED2Test, FunctionOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="576" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="576" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1abf5bb7d7ccccca88e88947d21091caf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED2Test, FunctorOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="587" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="587" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1aab4f3bf01d55a7228147db3c959fd830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED2Test, FunctorOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="598" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="598" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a78a1ff258fe5a85da5b2645983311a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool PredFunction3</definition>
        <argsstring>(T1 v1, T2 v2, T3 v3)</argsstring>
        <name>PredFunction3</name>
        <param>
          <type>T1</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="834" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="834" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a31b4c93e469feb1523b6073634c1ca4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction3Int</definition>
        <argsstring>(int v1, int v2, int v3)</argsstring>
        <name>PredFunction3Int</name>
        <param>
          <type>int</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="840" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="840" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1afa4ce2143c2ffedb2fa5d5f8cff6f6e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction3Bool</definition>
        <argsstring>(Bool v1, Bool v2, Bool v3)</argsstring>
        <name>PredFunction3Bool</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="841" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="841" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1abddc62e1faf4d19992a0acb69577e0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type>testing::AssertionResult</type>
        <definition>testing::AssertionResult PredFormatFunction3</definition>
        <argsstring>(const char *e1, const char *e2, const char *e3, const T1 &amp;v1, const T2 &amp;v2, const T3 &amp;v3)</argsstring>
        <name>PredFormatFunction3</name>
        <param>
          <type>const char *</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="853" column="26" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="853" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a6f0143d40175fd8e84aba9b52e16f3fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED3Test, FunctionOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="927" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="927" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a509632492410e91aa0d85ff1cdeaf1cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED3Test, FunctionOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="934" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="934" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1af0ec20ab73360a222fe9303586d05411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED3Test, FunctorOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="941" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="941" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a199c9d914ca008105f5521d245e7c1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED3Test, FunctorOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="948" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="948" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a7de002e386b26ebf47a90ca9b10c7323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED3Test, FunctionOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="955" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="955" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a106aff3a64136441885a6948e79a35fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED3Test, FunctionOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="966" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="966" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1abc0b1019edf3bdd56ee46e82ece4cff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED3Test, FunctorOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="977" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="977" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a1d3e62b254c408b35bf05205699dca87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED3Test, FunctorOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="988" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="988" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a69db8bec40f25365dbd42dbe6c3319fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool PredFunction4</definition>
        <argsstring>(T1 v1, T2 v2, T3 v3, T4 v4)</argsstring>
        <name>PredFunction4</name>
        <param>
          <type>T1</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>T4</type>
          <declname>v4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1232" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1232" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a105a045112a34fb2b65360c0d5daf81e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction4Int</definition>
        <argsstring>(int v1, int v2, int v3, int v4)</argsstring>
        <name>PredFunction4Int</name>
        <param>
          <type>int</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1238" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1238" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a5d842d3bce2d16793299e77d1cb5c980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction4Bool</definition>
        <argsstring>(Bool v1, Bool v2, Bool v3, Bool v4)</argsstring>
        <name>PredFunction4Bool</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v3</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1241" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1241" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a9fbd4c3333dcc98c0cfee19ce28bc2b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
        </templateparamlist>
        <type>testing::AssertionResult</type>
        <definition>testing::AssertionResult PredFormatFunction4</definition>
        <argsstring>(const char *e1, const char *e2, const char *e3, const char *e4, const T1 &amp;v1, const T2 &amp;v2, const T3 &amp;v3, const T4 &amp;v4)</argsstring>
        <name>PredFormatFunction4</name>
        <param>
          <type>const char *</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>v4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1255" column="26" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1255" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a15e705507c885f4d89c6f9d9d1601c96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED4Test, FunctionOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1335" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1335" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a666c4a544439533ef0fbac4fad0b3cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED4Test, FunctionOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1342" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1342" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a49b56c08cb83d1e00a1768dd9f6b8d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED4Test, FunctorOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1350" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1350" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1ac6b2261e169a9c32d631ac71909a0458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED4Test, FunctorOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1357" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1357" bodyend="1361"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a036a7d32fdb4da1b6db4966f4b8fa711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED4Test, FunctionOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1365" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1365" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a952a5460f9f761948d852ce164241e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED4Test, FunctionOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1376" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1376" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a971a33d3e9ef7ab80cca352c1ffb9259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED4Test, FunctorOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1388" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1388" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a1a34c19097ac1b8c806460f6bbaad59a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED4Test, FunctorOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1399" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1399" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1aacb9302c548682f154ddf1a02a23a99f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool PredFunction5</definition>
        <argsstring>(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5)</argsstring>
        <name>PredFunction5</name>
        <param>
          <type>T1</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>T4</type>
          <declname>v4</declname>
        </param>
        <param>
          <type>T5</type>
          <declname>v5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1648" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1648" bodyend="1650"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1ac2bb9ad4db9fc578bd739bbba5aa374f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction5Int</definition>
        <argsstring>(int v1, int v2, int v3, int v4, int v5)</argsstring>
        <name>PredFunction5Int</name>
        <param>
          <type>int</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v4</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1654" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1654" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a6e081dd19571256aef33154ce936563f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PredFunction5Bool</definition>
        <argsstring>(Bool v1, Bool v2, Bool v3, Bool v4, Bool v5)</argsstring>
        <name>PredFunction5Bool</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v3</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v4</declname>
        </param>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>v5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1657" column="6" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1657" bodyend="1659"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a09cbd3b6651151c3b97a890d28bdb75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
        </templateparamlist>
        <type>testing::AssertionResult</type>
        <definition>testing::AssertionResult PredFormatFunction5</definition>
        <argsstring>(const char *e1, const char *e2, const char *e3, const char *e4, const char *e5, const T1 &amp;v1, const T2 &amp;v2, const T3 &amp;v3, const T4 &amp;v4, const T5 &amp;v5)</argsstring>
        <name>PredFormatFunction5</name>
        <param>
          <type>const char *</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>v4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>v5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1672" column="26" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1672" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a1b36f70a595ae4a209741df2a62002c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED5Test, FunctionOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1758" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1758" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a2d0901e19bffadc3482d9116cd590eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED5Test, FunctionOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1765" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1765" bodyend="1769"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a1b7aaebfa64a21ec7a7cdd0a4258108d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED5Test, FunctorOnBuiltInTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1773" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1773" bodyend="1776"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a4afff8ae16f447497e2d682ab8835470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED5Test, FunctorOnUserTypeSuccess)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1780" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1780" bodyend="1784"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a9f91ab913ee8017bc5e837cc34e30ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED5Test, FunctionOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref></type>
        </param>
        <param>
          <type>FunctionOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1788" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1788" bodyend="1795"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a6188c218f102846ec55e25fcd29c1e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED5Test, FunctionOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref></type>
        </param>
        <param>
          <type>FunctionOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1799" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1799" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1a7c8988c2d19eb5ed71e3bd4a0f69f96d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED5Test, FunctorOnBuiltInTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref></type>
        </param>
        <param>
          <type>FunctorOnBuiltInTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1811" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1811" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="gtest__pred__impl__unittest_8cc_1ada0ed61c55660de8027dfe787136c0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EXPECT_PRED5Test, FunctorOnUserTypeFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref></type>
        </param>
        <param>
          <type>FunctorOnUserTypeFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" line="1822" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc" bodystart="1822" bodyend="1830"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2006,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regression<sp/>test<sp/>for<sp/>gtest_pred_impl.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>generated<sp/>by<sp/>a<sp/>script<sp/>and<sp/>quite<sp/>long.<sp/><sp/>If<sp/>you<sp/>intend<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>learn<sp/>how<sp/>Google<sp/>Test<sp/>works<sp/>by<sp/>reading<sp/>its<sp/>unit<sp/>tests,<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gtest_unittest.cc<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>intended<sp/>as<sp/>a<sp/>regression<sp/>test<sp/>for<sp/>the<sp/>Google<sp/>Test<sp/>predicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertions.<sp/><sp/>We<sp/>compile<sp/>it<sp/>as<sp/>part<sp/>of<sp/>the<sp/>gtest_unittest<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>to<sp/>keep<sp/>the<sp/>implementation<sp/>tidy<sp/>and<sp/>compact,<sp/>as<sp/>it<sp/>is<sp/>quite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>involved<sp/>to<sp/>set<sp/>up<sp/>the<sp/>stage<sp/>for<sp/>testing<sp/>Google<sp/>Test<sp/>using<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Currently,<sp/>gtest_unittest<sp/>takes<sp/>~11<sp/>seconds<sp/>to<sp/>run<sp/>in<sp/>the<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>daemon.<sp/><sp/>In<sp/>the<sp/>future,<sp/>if<sp/>it<sp/>grows<sp/>too<sp/>large<sp/>and<sp/>needs<sp/>much<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time<sp/>to<sp/>finish,<sp/>we<sp/>should<sp/>consider<sp/>separating<sp/>this<sp/>file<sp/>into<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stand-alone<sp/>regression<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>data<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structBool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structBool" kindref="compound">Bool</ref><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structBool" kindref="compound">Bool</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>value(val<sp/>!=<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&gt;<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n).value;<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBool" kindref="compound">Bool</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structBool" kindref="compound">Bool</ref>(value<sp/>+<sp/>rhs.value);<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBool" kindref="compound">Bool</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>==<sp/>rhs.value;<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enables<sp/>Bool<sp/>to<sp/>be<sp/>used<sp/>in<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBool" kindref="compound">Bool</ref>&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>(x.value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions/functors<sp/>for<sp/>testing<sp/>unary<sp/>predicate<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>unary<sp/>predicate<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction1(T1<sp/>v1)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>are<sp/>needed<sp/>because<sp/>a<sp/>compiler<sp/>doesn&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>context<sp/>yet<sp/>to<sp/>know<sp/>which<sp/>template<sp/>function<sp/>must<sp/>be<sp/>instantiated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction1Int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction1Bool(<ref refid="structBool" kindref="compound">Bool</ref><sp/>v1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>unary<sp/>predicate<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="structPredFunctor1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>unary<sp/>predicate-formatter<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">testing::AssertionResult<sp/>PredFormatFunction1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PredFunction1(v1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionFailure()</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>e1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>positive,<sp/>but<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>unary<sp/>predicate-formatter<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structPredFormatFunctor1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>testing::AssertionResult<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PredFormatFunction1(e1,<sp/>v1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>{EXPECT|ASSERT}_PRED_FORMAT1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classPredicate1Test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>n1_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>each<sp/>of<sp/>the<sp/>predicate&apos;s<sp/>arguments<sp/>was<sp/>evaluated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n1_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>2<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>control<sp/>flow<sp/>in<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_to_finish_<sp/>&amp;&amp;<sp/>!finished_)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>unexpectedly<sp/>aborted<sp/>the<sp/>test.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expected_to_finish_<sp/>&amp;&amp;<sp/>finished_)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>failed<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>abort<sp/>the<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected<sp/>to<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expected_to_finish_;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>did<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finished_;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1_;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate1Test::expected_to_finish_;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate1Test::finished_;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate1Test::n1_;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref><sp/><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref><sp/><ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref><sp/><ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate1Test" kindref="compound">Predicate1Test</ref><sp/><ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(PredFunction1Int,<sp/>++n1_);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(PredFunction1Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(<ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref>(),<sp/>++n1_);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(<ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED1(PredFunction1Int,<sp/>n1_++);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED1(PredFunction1Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED1(<ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref>(),<sp/>n1_++);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED1Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED1(<ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(PredFunction1Int,<sp/>++n1_);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(PredFunction1Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(<ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref>(),<sp/>++n1_);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>ASSERT_PRED1(<ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED1(PredFunction1Int,<sp/>n1_++);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED1(PredFunction1Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED1(<ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref>(),<sp/>n1_++);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED1Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED1(<ref refid="structPredFunctor1" kindref="compound">PredFunctor1</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT1(PredFormatFunction1,<sp/>++n1_);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT1(PredFormatFunction1,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT1(<ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref>(),<sp/>++n1_);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT1(<ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT1(PredFormatFunction1,<sp/>n1_++);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT1(PredFormatFunction1,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT1(<ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref>(),<sp/>n1_++);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">EXPECT_PRED_FORMAT1Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT1(<ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT1(PredFormatFunction1,<sp/>++n1_);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT1(PredFormatFunction1,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT1(<ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref>(),<sp/>++n1_);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT1(<ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(PredFormatFunction1,<sp/>n1_++);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(PredFormatFunction1,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(<ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref>(),<sp/>n1_++);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT1<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">TEST_F(<ref refid="classPredicate1Test" kindref="compound">ASSERT_PRED_FORMAT1Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(<ref refid="structPredFormatFunctor1" kindref="compound">PredFormatFunctor1</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions/functors<sp/>for<sp/>testing<sp/>binary<sp/>predicate<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>binary<sp/>predicate<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction2(T1<sp/>v1,<sp/>T2<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>are<sp/>needed<sp/>because<sp/>a<sp/>compiler<sp/>doesn&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>context<sp/>yet<sp/>to<sp/>know<sp/>which<sp/>template<sp/>function<sp/>must<sp/>be<sp/>instantiated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction2Int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction2Bool(<ref refid="structBool" kindref="compound">Bool</ref><sp/>v1,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>binary<sp/>predicate<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="structPredFunctor2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal">};</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>binary<sp/>predicate-formatter<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">testing::AssertionResult<sp/>PredFormatFunction2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PredFunction2(v1,<sp/>v2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionFailure()</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>e1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e2</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>positive,<sp/>but<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1<sp/>+<sp/>v2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>binary<sp/>predicate-formatter<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="structPredFormatFunctor2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>testing::AssertionResult<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PredFormatFunction2(e1,<sp/>e2,<sp/>v1,<sp/>v2);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal">};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>{EXPECT|ASSERT}_PRED_FORMAT2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="classPredicate2Test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>n1_<sp/>=<sp/>n2_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>each<sp/>of<sp/>the<sp/>predicate&apos;s<sp/>arguments<sp/>was<sp/>evaluated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n1_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>2<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n2_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>3<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>control<sp/>flow<sp/>in<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_to_finish_<sp/>&amp;&amp;<sp/>!finished_)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>unexpectedly<sp/>aborted<sp/>the<sp/>test.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expected_to_finish_<sp/>&amp;&amp;<sp/>finished_)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>failed<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>abort<sp/>the<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected<sp/>to<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expected_to_finish_;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>did<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finished_;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1_;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2_;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">};</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate2Test::expected_to_finish_;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate2Test::finished_;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate2Test::n1_;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate2Test::n2_;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref><sp/><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref><sp/><ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref><sp/><ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate2Test" kindref="compound">Predicate2Test</ref><sp/><ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>EXPECT_PRED2(PredFunction2Int,<sp/>++n1_,<sp/>++n2_);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>EXPECT_PRED2(PredFunction2Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>EXPECT_PRED2(<ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref>(),<sp/>++n1_,<sp/>++n2_);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>EXPECT_PRED2(<ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED2(PredFunction2Int,<sp/>n1_++,<sp/>n2_++);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED2(PredFunction2Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED2(<ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref>(),<sp/>n1_++,<sp/>n2_++);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED2Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED2(<ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>ASSERT_PRED2(PredFunction2Int,<sp/>++n1_,<sp/>++n2_);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>ASSERT_PRED2(PredFunction2Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>ASSERT_PRED2(<ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref>(),<sp/>++n1_,<sp/>++n2_);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>ASSERT_PRED2(<ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED2(PredFunction2Int,<sp/>n1_++,<sp/>n2_++);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED2(PredFunction2Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++));</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED2(<ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref>(),<sp/>n1_++,<sp/>n2_++);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED2Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED2(<ref refid="structPredFunctor2" kindref="compound">PredFunctor2</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(PredFormatFunction2,<sp/>++n1_,<sp/>++n2_);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(PredFormatFunction2,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(<ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref>(),<sp/>++n1_,<sp/>++n2_);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(<ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(PredFormatFunction2,<sp/>n1_++,<sp/>n2_++);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(PredFormatFunction2,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++));</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(<ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref>(),<sp/>n1_++,<sp/>n2_++);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">EXPECT_PRED_FORMAT2Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT2(<ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT2(PredFormatFunction2,<sp/>++n1_,<sp/>++n2_);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT2(PredFormatFunction2,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT2(<ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref>(),<sp/>++n1_,<sp/>++n2_);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT2(<ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_));</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT2(PredFormatFunction2,<sp/>n1_++,<sp/>n2_++);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT2(PredFormatFunction2,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT2(<ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref>(),<sp/>n1_++,<sp/>n2_++);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT2<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">TEST_F(<ref refid="classPredicate2Test" kindref="compound">ASSERT_PRED_FORMAT2Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT2(<ref refid="structPredFormatFunctor2" kindref="compound">PredFormatFunctor2</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++));</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions/functors<sp/>for<sp/>testing<sp/>ternary<sp/>predicate<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>ternary<sp/>predicate<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction3(T1<sp/>v1,<sp/>T2<sp/>v2,<sp/>T3<sp/>v3)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>are<sp/>needed<sp/>because<sp/>a<sp/>compiler<sp/>doesn&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>context<sp/>yet<sp/>to<sp/>know<sp/>which<sp/>template<sp/>function<sp/>must<sp/>be<sp/>instantiated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction3Int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v3)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction3Bool(<ref refid="structBool" kindref="compound">Bool</ref><sp/>v1,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v2,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v3)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>ternary<sp/>predicate<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844" refid="structPredFunctor3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal">};</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>ternary<sp/>predicate-formatter<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="853"><highlight class="normal">testing::AssertionResult<sp/>PredFormatFunction3(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PredFunction3(v1,<sp/>v2,<sp/>v3))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionFailure()</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>e1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e3</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>positive,<sp/>but<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>ternary<sp/>predicate-formatter<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="structPredFormatFunctor3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>testing::AssertionResult<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PredFormatFunction3(e1,<sp/>e2,<sp/>e3,<sp/>v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal">};</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>{EXPECT|ASSERT}_PRED_FORMAT3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876" refid="classPredicate3Test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>n1_<sp/>=<sp/>n2_<sp/>=<sp/>n3_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>each<sp/>of<sp/>the<sp/>predicate&apos;s<sp/>arguments<sp/>was<sp/>evaluated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n1_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>2<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n2_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>3<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n3_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>4<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>control<sp/>flow<sp/>in<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_to_finish_<sp/>&amp;&amp;<sp/>!finished_)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>unexpectedly<sp/>aborted<sp/>the<sp/>test.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expected_to_finish_<sp/>&amp;&amp;<sp/>finished_)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>failed<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>abort<sp/>the<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected<sp/>to<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expected_to_finish_;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>did<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finished_;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1_;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2_;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3_;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">};</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate3Test::expected_to_finish_;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate3Test::finished_;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate3Test::n1_;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate3Test::n2_;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate3Test::n3_;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref><sp/><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref><sp/><ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref><sp/><ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate3Test" kindref="compound">Predicate3Test</ref><sp/><ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(PredFunction3Int,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(PredFunction3Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_));</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(<ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>EXPECT_PRED3(<ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_));</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED3(PredFunction3Int,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED3(PredFunction3Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED3(<ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED3Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED3(<ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++));</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>ASSERT_PRED3(PredFunction3Int,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>ASSERT_PRED3(PredFunction3Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>ASSERT_PRED3(<ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>ASSERT_PRED3(<ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_));</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED3(PredFunction3Int,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED3(PredFunction3Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++));</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED3(<ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED3Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED3(<ref refid="structPredFunctor3" kindref="compound">PredFunctor3</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT3(PredFormatFunction3,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT3(PredFormatFunction3,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_));</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT3(<ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT3(<ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT3(PredFormatFunction3,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT3(PredFormatFunction3,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++));</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT3(<ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">EXPECT_PRED_FORMAT3Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT3(<ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++));</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT3(PredFormatFunction3,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT3(PredFormatFunction3,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_));</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT3(<ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT3(<ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_));</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT3(PredFormatFunction3,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT3(PredFormatFunction3,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT3(<ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT3<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal">TEST_F(<ref refid="classPredicate3Test" kindref="compound">ASSERT_PRED_FORMAT3Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT3(<ref refid="structPredFormatFunctor3" kindref="compound">PredFormatFunctor3</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++));</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions/functors<sp/>for<sp/>testing<sp/>4-ary<sp/>predicate<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>4-ary<sp/>predicate<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4&gt;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction4(T1<sp/>v1,<sp/>T2<sp/>v2,<sp/>T3<sp/>v3,<sp/>T4<sp/>v4)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>are<sp/>needed<sp/>because<sp/>a<sp/>compiler<sp/>doesn&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>context<sp/>yet<sp/>to<sp/>know<sp/>which<sp/>template<sp/>function<sp/>must<sp/>be<sp/>instantiated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction4Int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v4)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction4Bool(<ref refid="structBool" kindref="compound">Bool</ref><sp/>v1,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v2,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v3,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v4)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>4-ary<sp/>predicate<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246" refid="structPredFunctor4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref><sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4&gt;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T4&amp;<sp/>v4)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>4-ary<sp/>predicate-formatter<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4&gt;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">testing::AssertionResult<sp/>PredFormatFunction4(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e4,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T4&amp;<sp/>v4)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PredFunction4(v1,<sp/>v2,<sp/>v3,<sp/>v4))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionFailure()</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>e1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e4</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>positive,<sp/>but<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>4-ary<sp/>predicate-formatter<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268" refid="structPredFormatFunctor4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref><sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4&gt;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>testing::AssertionResult<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e4,</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T4&amp;<sp/>v4)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PredFormatFunction4(e1,<sp/>e2,<sp/>e3,<sp/>e4,<sp/>v1,<sp/>v2,<sp/>v3,<sp/>v4);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>{EXPECT|ASSERT}_PRED_FORMAT4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280" refid="classPredicate4Test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>n1_<sp/>=<sp/>n2_<sp/>=<sp/>n3_<sp/>=<sp/>n4_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>each<sp/>of<sp/>the<sp/>predicate&apos;s<sp/>arguments<sp/>was<sp/>evaluated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n1_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>2<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n2_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>3<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n3_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>4<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n4_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>5<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>control<sp/>flow<sp/>in<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_to_finish_<sp/>&amp;&amp;<sp/>!finished_)<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>unexpectedly<sp/>aborted<sp/>the<sp/>test.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expected_to_finish_<sp/>&amp;&amp;<sp/>finished_)<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>failed<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>abort<sp/>the<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected<sp/>to<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expected_to_finish_;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>did<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finished_;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1_;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2_;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3_;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4_;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate4Test::expected_to_finish_;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate4Test::finished_;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate4Test::n1_;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate4Test::n2_;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate4Test::n3_;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate4Test::n4_;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref><sp/><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref><sp/><ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref><sp/><ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate4Test" kindref="compound">Predicate4Test</ref><sp/><ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>EXPECT_PRED4(PredFunction4Int,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>EXPECT_PRED4(PredFunction4Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_));</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>EXPECT_PRED4(<ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>EXPECT_PRED4(<ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_));</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED4(PredFunction4Int,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED4(PredFunction4Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++));</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED4(<ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED4Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED4(<ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++));</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>ASSERT_PRED4(PredFunction4Int,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>ASSERT_PRED4(PredFunction4Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_));</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>ASSERT_PRED4(<ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>ASSERT_PRED4(<ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_));</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED4(PredFunction4Int,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED4(PredFunction4Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++));</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED4(<ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED4Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED4(<ref refid="structPredFunctor4" kindref="compound">PredFunctor4</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++));</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT4(PredFormatFunction4,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT4(PredFormatFunction4,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_));</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT4(<ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT4(<ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_));</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT4(PredFormatFunction4,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT4(PredFormatFunction4,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++));</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT4(<ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">EXPECT_PRED_FORMAT4Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT4(<ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++));</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT4(PredFormatFunction4,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT4(PredFormatFunction4,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_));</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT4(<ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT4(<ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_));</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT4(PredFormatFunction4,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT4(PredFormatFunction4,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++));</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT4(<ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT4<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal">TEST_F(<ref refid="classPredicate4Test" kindref="compound">ASSERT_PRED_FORMAT4Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT4(<ref refid="structPredFormatFunctor4" kindref="compound">PredFormatFunctor4</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++));</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions/functors<sp/>for<sp/>testing<sp/>5-ary<sp/>predicate<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>5-ary<sp/>predicate<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5&gt;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction5(T1<sp/>v1,<sp/>T2<sp/>v2,<sp/>T3<sp/>v3,<sp/>T4<sp/>v4,<sp/>T5<sp/>v5)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>v5<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>are<sp/>needed<sp/>because<sp/>a<sp/>compiler<sp/>doesn&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>context<sp/>yet<sp/>to<sp/>know<sp/>which<sp/>template<sp/>function<sp/>must<sp/>be<sp/>instantiated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction5Int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v4,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v5)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>v5<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PredFunction5Bool(<ref refid="structBool" kindref="compound">Bool</ref><sp/>v1,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v2,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v3,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v4,<sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>v5)<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>v5<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>5-ary<sp/>predicate<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662" refid="structPredFunctor5" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref><sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5&gt;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T4&amp;<sp/>v4,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T5&amp;<sp/>v5)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>v5<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>5-ary<sp/>predicate-formatter<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5&gt;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">testing::AssertionResult<sp/>PredFormatFunction5(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e4,</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3,</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T4&amp;<sp/>v4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T5&amp;<sp/>v5)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PredFunction5(v1,<sp/>v2,<sp/>v3,<sp/>v4,<sp/>v5))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionFailure()</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>e1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e4<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e5</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>positive,<sp/>but<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v1<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>v5<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>5-ary<sp/>predicate-formatter<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686" refid="structPredFormatFunctor5" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref><sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5&gt;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>testing::AssertionResult<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e2,</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e4,</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>e5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>v1,</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;<sp/>v3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T4&amp;<sp/>v4,</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T5&amp;<sp/>v5)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PredFormatFunction5(e1,<sp/>e2,<sp/>e3,<sp/>e4,<sp/>e5,<sp/>v1,<sp/>v2,<sp/>v3,<sp/>v4,<sp/>v5);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>{EXPECT|ASSERT}_PRED_FORMAT5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699" refid="classPredicate5Test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>n1_<sp/>=<sp/>n2_<sp/>=<sp/>n3_<sp/>=<sp/>n4_<sp/>=<sp/>n5_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>each<sp/>of<sp/>the<sp/>predicate&apos;s<sp/>arguments<sp/>was<sp/>evaluated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n1_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>2<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n2_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>3<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n3_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>4<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n4_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>5<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n5_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>6<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>control<sp/>flow<sp/>in<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_to_finish_<sp/>&amp;&amp;<sp/>!finished_)<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>predicate<sp/>assertion<sp/>unexpectedly<sp/>aborted<sp/>the<sp/>test.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expected_to_finish_<sp/>&amp;&amp;<sp/>finished_)<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>failed<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>abort<sp/>the<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;as<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected<sp/>to<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expected_to_finish_;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>test<sp/>function<sp/>did<sp/>run<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finished_;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1_;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2_;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n3_;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4_;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n5_;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate5Test::expected_to_finish_;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Predicate5Test::finished_;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate5Test::n1_;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate5Test::n2_;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate5Test::n3_;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate5Test::n4_;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Predicate5Test::n5_;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref><sp/><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref><sp/><ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref><sp/><ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPredicate5Test" kindref="compound">Predicate5Test</ref><sp/><ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>EXPECT_PRED5(PredFunction5Int,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_,<sp/>++n5_);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/>EXPECT_PRED5(PredFunction5Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n5_));</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>EXPECT_PRED5(<ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_,<sp/>++n5_);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>EXPECT_PRED5(<ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n5_));</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED5(PredFunction5Int,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++,<sp/>n5_++);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED5(PredFunction5Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n5_++));</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED5(<ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++,<sp/>n5_++);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED5Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED5(<ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n5_++));</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>ASSERT_PRED5(PredFunction5Int,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_,<sp/>++n5_);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>ASSERT_PRED5(PredFunction5Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n5_));</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>ASSERT_PRED5(<ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_,<sp/>++n5_);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>ASSERT_PRED5(<ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n5_));</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED5(PredFunction5Int,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++,<sp/>n5_++);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED5(PredFunction5Bool,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n5_++));</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED5(<ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++,<sp/>n5_++);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED5Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED5(<ref refid="structPredFunctor5" kindref="compound">PredFunctor5</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n5_++));</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT5(PredFormatFunction5,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_,<sp/>++n5_);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT5(PredFormatFunction5,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n5_));</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT5(<ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_,<sp/>++n5_);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT5(<ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n5_));</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT5(PredFormatFunction5,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++,</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n5_++);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT5(PredFormatFunction5,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n5_++));</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT5(<ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++,</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n5_++);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>EXPECT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">EXPECT_PRED_FORMAT5Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT5(<ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n5_++));</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>,<sp/>FunctionOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT5(PredFormatFunction5,<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_,<sp/>++n5_);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>,<sp/>FunctionOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT5(PredFormatFunction5,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n5_));</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>,<sp/>FunctorOnBuiltInTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT5(<ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref>(),<sp/>++n1_,<sp/>++n2_,<sp/>++n3_,<sp/>++n4_,<sp/>++n5_);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>successful<sp/>ASSERT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>,<sp/>FunctorOnUserTypeSuccess)<sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/>ASSERT_PRED_FORMAT5(<ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n1_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n2_),</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n3_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n4_),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(++n5_));</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>,<sp/>FunctionOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT5(PredFormatFunction5,<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++,</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n5_++);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>function<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>,<sp/>FunctionOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT5(PredFormatFunction5,<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n5_++));</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>built-in<sp/>type<sp/>(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>,<sp/>FunctorOnBuiltInTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT5(<ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref>(),<sp/>n1_++,<sp/>n2_++,<sp/>n3_++,<sp/>n4_++,</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n5_++);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>failed<sp/>ASSERT_PRED_FORMAT5<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>functor<sp/>on<sp/>a<sp/>user-defined<sp/>type<sp/>(Bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal">TEST_F(<ref refid="classPredicate5Test" kindref="compound">ASSERT_PRED_FORMAT5Test</ref>,<sp/>FunctorOnUserTypeFailure)<sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/>expected_to_finish_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT5(<ref refid="structPredFormatFunctor5" kindref="compound">PredFormatFunctor5</ref>(),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n1_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n2_++),</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref>(n3_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n4_++),<sp/><ref refid="structBool" kindref="compound">Bool</ref>(n5_++));</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc"/>
  </compounddef>
</doxygen>
