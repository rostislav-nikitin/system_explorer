<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gtest-typed-test__test_8cc" kind="file" language="C++">
    <compoundname>gtest-typed-test_test.cc</compoundname>
    <includes refid="gtest-typed-test__test_8h" local="yes">test/gtest-typed-test_test.h</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includedby refid="gtest__all__test_8cc" local="yes">build/_deps/googletest-src/googletest/test/gtest_all_test.cc</includedby>
    <incdepgraph>
      <node id="15">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="29">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="48">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="36">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="17">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc</label>
        <link refid="gtest-typed-test__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>test/gtest-typed-test_test.h</label>
        <link refid="gtest-typed-test__test_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>atomic</label>
      </node>
      <node id="52">
        <label>cassert</label>
      </node>
      <node id="23">
        <label>cerrno</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="18">
        <label>ctype.h</label>
      </node>
      <node id="43">
        <label>float.h</label>
      </node>
      <node id="39">
        <label>functional</label>
      </node>
      <node id="6">
        <label>iomanip</label>
      </node>
      <node id="54">
        <label>iosfwd</label>
      </node>
      <node id="24">
        <label>iostream</label>
      </node>
      <node id="50">
        <label>iterator</label>
      </node>
      <node id="7">
        <label>limits</label>
      </node>
      <node id="25">
        <label>locale</label>
      </node>
      <node id="44">
        <label>map</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="9">
        <label>ostream</label>
      </node>
      <node id="33">
        <label>regex.h</label>
      </node>
      <node id="10">
        <label>set</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="19">
        <label>stddef.h</label>
      </node>
      <node id="20">
        <label>stdio.h</label>
      </node>
      <node id="21">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>string.h</label>
      </node>
      <node id="31">
        <label>strings.h</label>
      </node>
      <node id="27">
        <label>sys/stat.h</label>
      </node>
      <node id="28">
        <label>sys/types.h</label>
      </node>
      <node id="26">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>typeinfo</label>
      </node>
      <node id="32">
        <label>unistd.h</label>
      </node>
      <node id="41">
        <label>utility</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classCommonTest" prot="public">CommonTest</innerclass>
    <innerclass refid="classTypedTest1" prot="public">TypedTest1</innerclass>
    <innerclass refid="classTypedTest2" prot="public">TypedTest2</innerclass>
    <innerclass refid="classlibrary1_1_1NumericTest" prot="public">library1::NumericTest</innerclass>
    <innerclass refid="classTypedTestWithNames" prot="public">TypedTestWithNames</innerclass>
    <innerclass refid="classTypedTestNames" prot="public">TypedTestNames</innerclass>
    <innerclass refid="classTypedTestSuitePStateTest" prot="public">TypedTestSuitePStateTest</innerclass>
    <innerclass refid="classDerivedTest" prot="public">DerivedTest</innerclass>
    <innerclass refid="classTypeParametrizedTestWithNames" prot="public">TypeParametrizedTestWithNames</innerclass>
    <innerclass refid="classTypeParametrizedTestNames" prot="public">TypeParametrizedTestNames</innerclass>
    <innerclass refid="classTypedTestP1" prot="public">TypedTestP1</innerclass>
    <innerclass refid="classTypedTestP2" prot="public">TypedTestP2</innerclass>
    <innerclass refid="classlibrary2_1_1NumericTest" prot="public">library2::NumericTest</innerclass>
    <innerclass refid="classlibrary2_1_1TrimmedTest" prot="public">library2::TrimmedTest</innerclass>
    <innerclass refid="structlibrary2_1_1MyPair" prot="public">library2::MyPair</innerclass>
    <innernamespace refid="namespacelibrary1">library1</innernamespace>
    <innernamespace refid="namespacelibrary2">library2</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gtest-typed-test__test_8cc_1ad49f0952beb9fd54fb161ac6dc87343e" prot="public" static="no">
        <type>Types&lt; char, int &gt;</type>
        <definition>typedef Types&lt;char, int&gt; TwoTypes</definition>
        <argsstring></argsstring>
        <name>TwoTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="92" column="15" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-typed-test__test_8cc_1a49990ee49c88e51cee349b4253bd3f69" prot="public" static="no">
        <type><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateTest</ref></type>
        <definition>using TypedTestSuitePStateDeathTest =  TypedTestSuitePStateTest</definition>
        <argsstring></argsstring>
        <name>TypedTestSuitePStateDeathTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="225" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-typed-test__test_8cc_1af4f5a083ef5c0ad9ab2f5b2587554a42" prot="public" static="no">
        <type>Types&lt; short, long &gt;</type>
        <definition>typedef Types&lt;short, long&gt; MyTwoTypes</definition>
        <argsstring></argsstring>
        <name>MyTwoTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="286" column="15" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-typed-test__test_8cc_1a0fff4470cfda9886679574d9efbe9590" prot="public" static="no">
        <type>int</type>
        <definition>using IntAfterTypedTestSuiteP =  int</definition>
        <argsstring></argsstring>
        <name>IntAfterTypedTestSuiteP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="339" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-typed-test__test_8cc_1a3bd806f3f16509f8dcf9ea1f61430b0d" prot="public" static="no">
        <type>int</type>
        <definition>using IntBeforeRegisterTypedTestSuiteP =  int</definition>
        <argsstring></argsstring>
        <name>IntBeforeRegisterTypedTestSuiteP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="346" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-typed-test__test_8cc_1a5f624619197d3b529f3f5a8364026b54" prot="public" static="no">
        <type>Types&lt; std::vector&lt; double &gt;, std::set&lt; char &gt; &gt;</type>
        <definition>typedef Types&lt;std::vector&lt;double&gt;, std::set&lt;char&gt; &gt; MyContainers</definition>
        <argsstring></argsstring>
        <name>MyContainers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="378" column="15" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="378" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gtest-typed-test__test_8cc_1ad2f70c2c6afb6af671a58629eed70a7b" prot="public" static="no" mutable="no">
        <type>IntAfterTypedTestSuiteP</type>
        <definition>IntAfterTypedTestSuiteP after</definition>
        <argsstring></argsstring>
        <name>after</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="363" column="25" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-typed-test__test_8cc_1aeebfd9871e2af1c35803e67cec4897cc" prot="public" static="no" mutable="no">
        <type>IntBeforeRegisterTypedTestSuiteP</type>
        <definition>IntBeforeRegisterTypedTestSuiteP before</definition>
        <argsstring></argsstring>
        <name>before</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="364" column="34" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="364" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1aadf8e4cfb921d0f226bdc7997e8b2482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE</definition>
        <argsstring>(CommonTest, TwoTypes)</argsstring>
        <name>TYPED_TEST_SUITE</name>
        <param>
          <type><ref refid="classCommonTest" kindref="compound">CommonTest</ref></type>
        </param>
        <param>
          <type>TwoTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="93" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="93" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1ad75307f2de8059ff255ed81aac011a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(CommonTest, ValuesAreCorrect)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classCommonTest" kindref="compound">CommonTest</ref></type>
        </param>
        <param>
          <type>ValuesAreCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="95" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="95" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a589fc841e37ad99fab163fabf793cd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(CommonTest, ValuesAreStillCorrect)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classCommonTest" kindref="compound">CommonTest</ref></type>
        </param>
        <param>
          <type>ValuesAreStillCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="115" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="115" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a50492e84855ce46a0b3b675a03e1dec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE</definition>
        <argsstring>(TypedTest1, int)</argsstring>
        <name>TYPED_TEST_SUITE</name>
        <param>
          <type><ref refid="classTypedTest1" kindref="compound">TypedTest1</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="133" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="133" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a9de72dc36201eb84abd95829d03884ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTest1, A)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classTypedTest1" kindref="compound">TypedTest1</ref></type>
        </param>
        <param>
          <type>A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="134" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a2f7ad06acdaa444e6b6bdd6990cea2ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE</definition>
        <argsstring>(TypedTest2, Types&lt; int &gt;)</argsstring>
        <name>TYPED_TEST_SUITE</name>
        <param>
          <type><ref refid="classTypedTest2" kindref="compound">TypedTest2</ref></type>
        </param>
        <param>
          <type>Types&lt; int &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="141" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="141" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a7c371e4011b43640b9c86f0f4ffc38ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTest2, A)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classTypedTest2" kindref="compound">TypedTest2</ref></type>
        </param>
        <param>
          <type>A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="145" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a7c5906e4421ddfa1c6f86029056ad00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE</definition>
        <argsstring>(TypedTestWithNames, TwoTypes, TypedTestNames)</argsstring>
        <name>TYPED_TEST_SUITE</name>
        <param>
          <type><ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref></type>
        </param>
        <param>
          <type>TwoTypes</type>
        </param>
        <param>
          <type><ref refid="classTypedTestNames" kindref="compound">TypedTestNames</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="178" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="178" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a5814b2358a3c428ef409dcf3b7ba2dc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTestWithNames, TestSuiteName)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref></type>
        </param>
        <param>
          <type>TestSuiteName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="180" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="180" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a6bd4cc69fb6139a538666703b66d5400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TypedTestSuitePStateTest, SucceedsForMatchingList)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateTest</ref></type>
        </param>
        <param>
          <type>SucceedsForMatchingList</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="211" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a711675d300be11dea8f1b89931941042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TypedTestSuitePStateTest, IgnoresOrderAndSpaces)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateTest</ref></type>
        </param>
        <param>
          <type>IgnoresOrderAndSpaces</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="219" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a17cc42a558124c77bb8dace9cd0dc95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TypedTestSuitePStateDeathTest, DetectsDuplicates)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref></type>
        </param>
        <param>
          <type>DetectsDuplicates</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="227" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a6c4e0210affec76bfd71dfcf9a218b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TypedTestSuitePStateDeathTest, DetectsExtraTest)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref></type>
        </param>
        <param>
          <type>DetectsExtraTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="233" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="233" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1ac17138c9aab3ae7c6e2252de4395917f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TypedTestSuitePStateDeathTest, DetectsMissedTest)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref></type>
        </param>
        <param>
          <type>DetectsMissedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="239" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1aee316d11cbc1f14ef19af410a16c45ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TypedTestSuitePStateDeathTest, DetectsTestAfterRegistration)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref></type>
        </param>
        <param>
          <type>DetectsTestAfterRegistration</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="247" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="247" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1aecdf955da71f250921ea7b0731638241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE_P</definition>
        <argsstring>(DerivedTest)</argsstring>
        <name>TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classDerivedTest" kindref="compound">DerivedTest</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="261" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="261" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a36e4c6825c9d82fac20498437b3d0be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(DerivedTest, ValuesAreCorrect)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classDerivedTest" kindref="compound">DerivedTest</ref></type>
        </param>
        <param>
          <type>ValuesAreCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="263" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="263" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1ada894decbca23cc40b4b34a2e7d5dece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(DerivedTest, ValuesAreStillCorrect)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classDerivedTest" kindref="compound">DerivedTest</ref></type>
        </param>
        <param>
          <type>ValuesAreStillCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="275" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="275" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a34afb46e760c0b1a2034451d052a9905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_TYPED_TEST_SUITE_P</definition>
        <argsstring>(DerivedTest, ValuesAreCorrect, ValuesAreStillCorrect)</argsstring>
        <name>REGISTER_TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classDerivedTest" kindref="compound">DerivedTest</ref></type>
        </param>
        <param>
          <type>ValuesAreCorrect</type>
        </param>
        <param>
          <type>ValuesAreStillCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="283" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="283" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a43a34f7aabe8c62b6be49f7a6aca323b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_SUITE_P</definition>
        <argsstring>(My, DerivedTest, MyTwoTypes)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_SUITE_P</name>
        <param>
          <type>My</type>
        </param>
        <param>
          <type><ref refid="classDerivedTest" kindref="compound">DerivedTest</ref></type>
        </param>
        <param>
          <type>MyTwoTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="287" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="287" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1ad03f2ff2b55b7d4b1df160dca65daaf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE_P</definition>
        <argsstring>(TypeParametrizedTestWithNames)</argsstring>
        <name>TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="294" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="294" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1ad3da1989d036f70490bdd4d4ee6db463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(TypeParametrizedTestWithNames, TestSuiteName)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref></type>
        </param>
        <param>
          <type>TestSuiteName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="296" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="296" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1afe1a3ec8df75c4211015ec542db4b638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_TYPED_TEST_SUITE_P</definition>
        <argsstring>(TypeParametrizedTestWithNames, TestSuiteName)</argsstring>
        <name>REGISTER_TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref></type>
        </param>
        <param>
          <type>TestSuiteName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="311" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="311" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a084e5d836341f18cfb524a4450ecf967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_SUITE_P</definition>
        <argsstring>(CustomName, TypeParametrizedTestWithNames, TwoTypes, TypeParametrizedTestNames)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_SUITE_P</name>
        <param>
          <type>CustomName</type>
        </param>
        <param>
          <type><ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref></type>
        </param>
        <param>
          <type>TwoTypes</type>
        </param>
        <param>
          <type><ref refid="classTypeParametrizedTestNames" kindref="compound">TypeParametrizedTestNames</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="326" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="326" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a120b26ca25f7e2df89662920cc9ea71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE_P</definition>
        <argsstring>(TypedTestP1)</argsstring>
        <name>TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="335" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="335" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a5fbbdbeee78dc5cc4d73ac525f3b3fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(TypedTestP1, A)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref></type>
        </param>
        <param>
          <type>A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="341" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a6947eb035b57ff20e8779d940b02ad66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(TypedTestP1, B)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref></type>
        </param>
        <param>
          <type>B</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="342" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a9ee8c917f8154c02db9b476d06fb1b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_TYPED_TEST_SUITE_P</definition>
        <argsstring>(TypedTestP1, A, B)</argsstring>
        <name>REGISTER_TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref></type>
        </param>
        <param>
          <type>A</type>
        </param>
        <param>
          <type>B</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="348" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="348" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1afbade402cc278ff72790cb0db1ac5188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE_P</definition>
        <argsstring>(TypedTestP2)</argsstring>
        <name>TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="353" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="353" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a8dba287ec5c21ac944a5f9445778c7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(TypedTestP2, A)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref></type>
        </param>
        <param>
          <type>A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="357" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" bodystart="357" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1ab2c2fee4109bc911b8f34fd80520c583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_TYPED_TEST_SUITE_P</definition>
        <argsstring>(TypedTestP2, A)</argsstring>
        <name>REGISTER_TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref></type>
        </param>
        <param>
          <type>A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="359" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="359" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1ac84a2f00a6a91a0063d223fd036257c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_SUITE_P</definition>
        <argsstring>(Int, TypedTestP1, int)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_SUITE_P</name>
        <param>
          <type>Int</type>
        </param>
        <param>
          <type><ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="368" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="368" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a0a6f5e29333107370e605bccc67c8bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_SUITE_P</definition>
        <argsstring>(Int, TypedTestP2, Types&lt; int &gt;)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_SUITE_P</name>
        <param>
          <type>Int</type>
        </param>
        <param>
          <type><ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref></type>
        </param>
        <param>
          <type>Types&lt; int &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="369" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="369" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a7a4cdfa92a7c38c8437faad6fa2f93cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_SUITE_P</definition>
        <argsstring>(Double, TypedTestP2, Types&lt; double &gt;)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_SUITE_P</name>
        <param>
          <type>Double</type>
        </param>
        <param>
          <type><ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref></type>
        </param>
        <param>
          <type>Types&lt; double &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="373" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="373" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a7fbd0950a13b6c454f43d0e2ad8aad45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_SUITE_P</definition>
        <argsstring>(My, ContainerTest, MyContainers)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_SUITE_P</name>
        <param>
          <type>My</type>
        </param>
        <param>
          <type><ref refid="classContainerTest" kindref="compound">ContainerTest</ref></type>
        </param>
        <param>
          <type>MyContainers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" line="379" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc" declline="379" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test/gtest-typed-test_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127<sp/></highlight><highlight class="comment">/*<sp/>conditional<sp/>expression<sp/>is<sp/>constant<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">using<sp/>testing::<ref refid="classtesting_1_1Test" kindref="compound">Test</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>testing<sp/>that<sp/>SetUpTestSuite()/TearDownTestSuite(),<sp/>fixture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor,<sp/>and<sp/>SetUp()/TearDown()<sp/>work<sp/>correctly<sp/>in<sp/>typed<sp/>tests<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="47" refid="classCommonTest" refkind="compound"><highlight class="normal">class<sp/><ref refid="classCommonTest" kindref="compound">CommonTest</ref><sp/>:<sp/>public<sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>some<sp/>technical<sp/>reason,<sp/>SetUpTestSuite()<sp/>and<sp/>TearDownTestSuite()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>public.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{<sp/>shared_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(5);<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shared_;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>&apos;protected:&apos;<sp/>is<sp/>optional.<sp/><sp/>There&apos;s<sp/>no<sp/>harm<sp/>in<sp/>making<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>members<sp/>of<sp/>this<sp/>fixture<sp/>class<sp/>template<sp/>public.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>used<sp/>to<sp/>use<sp/>std::list<sp/>here,<sp/>but<sp/>switched<sp/>to<sp/>std::vector<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC&apos;s<sp/>&lt;list&gt;<sp/>doesn&apos;t<sp/>compile<sp/>cleanly<sp/>with<sp/>/W4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>Vector;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::set&lt;int&gt;<sp/>IntSet;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="classCommonTest" kindref="compound">CommonTest</ref>()<sp/>:<sp/>value_(1)<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classCommonTest" kindref="compound">~CommonTest</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>EXPECT_EQ(3,<sp/>value_);<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>value_);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>value_++;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>value_);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>value_++;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T*<sp/>shared_;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">T*<sp/><ref refid="classCommonTest" kindref="compound">CommonTest&lt;T&gt;::shared_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetUpTestSuite()/TearDownTestSuite(),<sp/>fixture<sp/>ctor/dtor,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>SetUp()/TearDown()<sp/>work<sp/>correctly<sp/>in<sp/>typed<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;char,<sp/>int&gt;<sp/>TwoTypes;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classCommonTest" kindref="compound">CommonTest</ref>,<sp/>TwoTypes);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">TYPED_TEST(<ref refid="classCommonTest" kindref="compound">CommonTest</ref>,<sp/>ValuesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>be<sp/>visited<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>TestFixture::<sp/>prefix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*TestFixture::shared_);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Typedefs<sp/>in<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>be<sp/>visited<sp/>via<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;typename<sp/>TestFixture::&quot;<sp/>prefix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TestFixture::Vector<sp/>empty;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>empty.size());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TestFixture::IntSet<sp/>empty2;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>empty2.size());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>must<sp/>be<sp/>visited<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;this&apos;,<sp/>as<sp/>required<sp/>by<sp/>C++<sp/>for<sp/>class<sp/>templates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>this-&gt;value_);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>test<sp/>makes<sp/>sure<sp/>shared_<sp/>is<sp/>not<sp/>deleted<sp/>after<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">TYPED_TEST(<ref refid="classCommonTest" kindref="compound">CommonTest</ref>,<sp/>ValuesAreStillCorrect)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>also<sp/>be<sp/>visited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>via<sp/>&apos;this&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(this-&gt;shared_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*this-&gt;shared_);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TypeParam<sp/>can<sp/>be<sp/>used<sp/>to<sp/>refer<sp/>to<sp/>the<sp/>type<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TypeParam</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2),<sp/>this-&gt;value_);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>multiple<sp/>TYPED_TEST_SUITE&apos;s<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>translation<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="129" refid="classTypedTest1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTest1" kindref="compound">TypedTest1</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>second<sp/>argument<sp/>of<sp/>TYPED_TEST_SUITE<sp/>can<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>single<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classTypedTest1" kindref="compound">TypedTest1</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">TYPED_TEST(<ref refid="classTypedTest1" kindref="compound">TypedTest1</ref>,<sp/>A)<sp/>{}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="137" refid="classTypedTest2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTest2" kindref="compound">TypedTest2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>second<sp/>argument<sp/>of<sp/>TYPED_TEST_SUITE<sp/>can<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Types&lt;...&gt;<sp/>type<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classTypedTest2" kindref="compound">TypedTest2</ref>,<sp/>Types&lt;int&gt;);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>verifies<sp/>that<sp/>tests<sp/>from<sp/>different<sp/>typed<sp/>test<sp/>cases<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>share<sp/>the<sp/>same<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">TYPED_TEST(<ref refid="classTypedTest2" kindref="compound">TypedTest2</ref>,<sp/>A)<sp/>{}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>typed<sp/>test<sp/>case<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">library1<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="152" refid="classlibrary1_1_1NumericTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlibrary1_1_1NumericTest" kindref="compound">NumericTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;int,<sp/>long&gt;<sp/>NumericTypes;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classlibrary1_1_1NumericTest" kindref="compound">NumericTest</ref>,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">TYPED_TEST(<ref refid="classlibrary1_1_1NumericTest" kindref="compound">NumericTest</ref>,<sp/>DefaultIsZero)<sp/>{<sp/>EXPECT_EQ(0,<sp/>TypeParam());<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>library1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>custom<sp/>names<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestNames" kindref="compound">TypedTestNames</ref><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetName(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>char&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;char&quot;</highlight><highlight class="normal">)<sp/>+<sp/>::testing::PrintToString(i);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>int&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>+<sp/>::testing::PrintToString(i);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal">};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref>,<sp/>TwoTypes,<sp/><ref refid="classTypedTestNames" kindref="compound">TypedTestNames</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">TYPED_TEST(<ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref>,<sp/>TestSuiteName)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;TypeParam,<sp/>char&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(::testing::UnitTest::GetInstance()</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;current_test_info()</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;test_suite_name(),</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TypedTestWithNames/char0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;TypeParam,<sp/>int&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(::testing::UnitTest::GetInstance()</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;current_test_info()</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;test_suite_name(),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TypedTestWithNames/int1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::TypedTestSuitePState;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TypedTestSuitePState.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="classTypedTestSuitePStateTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.AddTestName(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.AddTestName(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.AddTestName(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>TypedTestSuitePState<sp/>state_;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">TEST_F(<ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateTest</ref>,<sp/>SucceedsForMatchingList)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tests<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>B,<sp/>C&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>EXPECT_EQ(tests,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;Suite&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>tests));</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>the<sp/>order<sp/>of<sp/>the<sp/>tests<sp/>and<sp/>spaces<sp/>around<sp/>the<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>matter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">TEST_F(<ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateTest</ref>,<sp/>IgnoresOrderAndSpaces)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tests<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A,C,<sp/><sp/><sp/>B&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>EXPECT_EQ(tests,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;Suite&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>tests));</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref><sp/>=<sp/><ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateTest</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">TEST_F(<ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref>,<sp/>DetectsDuplicates)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;Suite&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>B,<sp/>A,<sp/>C&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo\\.cc.1.?:<sp/>Test<sp/>A<sp/>is<sp/>listed<sp/>more<sp/>than<sp/>once\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">TEST_F(<ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref>,<sp/>DetectsExtraTest)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;Suite&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>B,<sp/>C,<sp/>D&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo\\.cc.1.?:<sp/>No<sp/>test<sp/>named<sp/>D<sp/>can<sp/>be<sp/>found<sp/>in<sp/>this<sp/>test<sp/>suite\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">TEST_F(<ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref>,<sp/>DetectsMissedTest)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;Suite&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>C&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo\\.cc.1.?:<sp/>You<sp/>forgot<sp/>to<sp/>list<sp/>test<sp/>B\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>defining<sp/>a<sp/>test<sp/>for<sp/>a<sp/>parameterized<sp/>test<sp/>case<sp/>generates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>run-time<sp/>error<sp/>if<sp/>the<sp/>test<sp/>case<sp/>has<sp/>been<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST_F(<ref refid="classTypedTestSuitePStateTest" kindref="compound">TypedTestSuitePStateDeathTest</ref>,<sp/>DetectsTestAfterRegistration)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;Suite&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>B,<sp/>C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_.AddTestName(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo\\.cc.2.?:<sp/>Test<sp/>D<sp/>must<sp/>be<sp/>defined<sp/>before<sp/>REGISTER_TYPED_TEST_SUITE_P&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\\(FooTest,<sp/>\\.\\.\\.\\)\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetUpTestSuite()/TearDownTestSuite(),<sp/>fixture<sp/>ctor/dtor,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>SetUp()/TearDown()<sp/>work<sp/>correctly<sp/>in<sp/>type-parameterized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="259" refid="classDerivedTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDerivedTest" kindref="compound">DerivedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCommonTest" kindref="compound">CommonTest</ref>&lt;T&gt;<sp/>{};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classDerivedTest" kindref="compound">DerivedTest</ref>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">TYPED_TEST_P(<ref refid="classDerivedTest" kindref="compound">DerivedTest</ref>,<sp/>ValuesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>be<sp/>visited<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>TestFixture::<sp/>prefix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*TestFixture::shared_);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>must<sp/>be<sp/>visited<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;this&apos;,<sp/>as<sp/>required<sp/>by<sp/>C++<sp/>for<sp/>class<sp/>templates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>this-&gt;value_);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>test<sp/>makes<sp/>sure<sp/>shared_<sp/>is<sp/>not<sp/>deleted<sp/>after<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">TYPED_TEST_P(<ref refid="classDerivedTest" kindref="compound">DerivedTest</ref>,<sp/>ValuesAreStillCorrect)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>also<sp/>be<sp/>visited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>via<sp/>&apos;this&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(this-&gt;shared_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*this-&gt;shared_);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>this-&gt;value_);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(<ref refid="classDerivedTest" kindref="compound">DerivedTest</ref>,<sp/>ValuesAreCorrect,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValuesAreStillCorrect);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;short,<sp/>long&gt;<sp/>MyTwoTypes;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/><ref refid="classDerivedTest" kindref="compound">DerivedTest</ref>,<sp/>MyTwoTypes);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>custom<sp/>names<sp/>work<sp/>with<sp/>type<sp/>parametrized<sp/>tests.<sp/>We<sp/>reuse<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TwoTypes<sp/>from<sp/>above<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="292" refid="classTypeParametrizedTestWithNames" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">TYPED_TEST_P(<ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref>,<sp/>TestSuiteName)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;TypeParam,<sp/>char&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(::testing::UnitTest::GetInstance()</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;current_test_info()</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;test_suite_name(),</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CustomName/TypeParametrizedTestWithNames/parChar0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;TypeParam,<sp/>int&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(::testing::UnitTest::GetInstance()</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;current_test_info()</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;test_suite_name(),</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CustomName/TypeParametrizedTestWithNames/parInt1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(<ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref>,<sp/>TestSuiteName);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="classTypeParametrizedTestNames" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypeParametrizedTestNames" kindref="compound">TypeParametrizedTestNames</ref><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetName(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>char&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;parChar&quot;</highlight><highlight class="normal">)<sp/>+<sp/>::testing::PrintToString(i);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>int&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;parInt&quot;</highlight><highlight class="normal">)<sp/>+<sp/>::testing::PrintToString(i);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal">};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(CustomName,<sp/><ref refid="classTypeParametrizedTestWithNames" kindref="compound">TypeParametrizedTestWithNames</ref>,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TwoTypes,<sp/><ref refid="classTypeParametrizedTestNames" kindref="compound">TypeParametrizedTestNames</ref>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>multiple<sp/>TYPED_TEST_SUITE_P&apos;s<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>translation<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="333" refid="classTypedTestP1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>that<sp/>the<sp/>code<sp/>between<sp/>TYPED_TEST_SUITE_P()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TYPED_TEST_P()<sp/>is<sp/>not<sp/>enclosed<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IntAfterTypedTestSuiteP<sp/>=<sp/>int;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">TYPED_TEST_P(<ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref>,<sp/>A)<sp/>{}</highlight></codeline>
<codeline lineno="342"><highlight class="normal">TYPED_TEST_P(<ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref>,<sp/>B)<sp/>{}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>that<sp/>the<sp/>code<sp/>between<sp/>TYPED_TEST_P()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REGISTER_TYPED_TEST_SUITE_P()<sp/>is<sp/>not<sp/>enclosed<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IntBeforeRegisterTypedTestSuiteP<sp/>=<sp/>int;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(<ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref>,<sp/>A,<sp/>B);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="351" refid="classTypedTestP2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>verifies<sp/>that<sp/>tests<sp/>from<sp/>different<sp/>type-parameterized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>cases<sp/>can<sp/>share<sp/>the<sp/>same<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">TYPED_TEST_P(<ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref>,<sp/>A)<sp/>{}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(<ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref>,<sp/>A);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>code<sp/>between<sp/>TYPED_TEST_SUITE_P()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REGISTER_TYPED_TEST_SUITE_P()<sp/>is<sp/>not<sp/>enclosed<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">IntAfterTypedTestSuiteP<sp/>after<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">IntBeforeRegisterTypedTestSuiteP<sp/>before<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>last<sp/>argument<sp/>of<sp/>INSTANTIATE_TYPED_TEST_SUITE_P()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>either<sp/>a<sp/>single<sp/>type<sp/>or<sp/>a<sp/>Types&lt;...&gt;<sp/>type<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(Int,<sp/><ref refid="classTypedTestP1" kindref="compound">TypedTestP1</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(Int,<sp/><ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref>,<sp/>Types&lt;int&gt;);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>same<sp/>type-parameterized<sp/>test<sp/>case<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>more<sp/>than<sp/>once<sp/>in<sp/>the<sp/>same<sp/>translation<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(Double,<sp/><ref refid="classTypedTestP2" kindref="compound">TypedTestP2</ref>,<sp/>Types&lt;double&gt;);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>same<sp/>type-parameterized<sp/>test<sp/>case<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>in<sp/>different<sp/>translation<sp/>units<sp/>linked<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(ContainerTest<sp/>is<sp/>also<sp/>instantiated<sp/>in<sp/>gtest-typed-test_test.cc.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;std::vector&lt;double&gt;,<sp/>std::set&lt;char&gt;<sp/>&gt;<sp/>MyContainers;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/><ref refid="classContainerTest" kindref="compound">ContainerTest</ref>,<sp/>MyContainers);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>type-parameterized<sp/>test<sp/>case<sp/>can<sp/>be<sp/>defined<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">library2<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="387" refid="classlibrary2_1_1NumericTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlibrary2_1_1NumericTest" kindref="compound">NumericTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classlibrary2_1_1NumericTest" kindref="compound">NumericTest</ref>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">TYPED_TEST_P(<ref refid="classlibrary2_1_1NumericTest" kindref="compound">NumericTest</ref>,<sp/>DefaultIsZero)<sp/>{<sp/>EXPECT_EQ(0,<sp/>TypeParam());<sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">TYPED_TEST_P(NumericTest,<sp/>ZeroIsLessThanOne)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>EXPECT_LT(TypeParam(0),<sp/>TypeParam(1));</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(NumericTest,<sp/>DefaultIsZero,<sp/>ZeroIsLessThanOne);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;int,<sp/>double&gt;<sp/>NumericTypes;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/>NumericTest,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>GetTestName()<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::UnitTest::GetInstance()-&gt;current_test_info()-&gt;name();</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>stripping<sp/>of<sp/>space<sp/>from<sp/>test<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="406" refid="classlibrary2_1_1TrimmedTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlibrary2_1_1TrimmedTest" kindref="compound">TrimmedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="407"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classlibrary2_1_1TrimmedTest" kindref="compound">TrimmedTest</ref>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">TYPED_TEST_P(<ref refid="classlibrary2_1_1TrimmedTest" kindref="compound">TrimmedTest</ref>,<sp/>Test1)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test1&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test2)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test2&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test3)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test3&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test4)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test4&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test5)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test5&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(TrimmedTest,<sp/>Test1,<sp/>Test2,<sp/>Test3,<sp/>Test4,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test5);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="416" refid="structlibrary2_1_1MyPair" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibrary2_1_1MyPair" kindref="compound">MyPair</ref><sp/>{};</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Be<sp/>sure<sp/>to<sp/>try<sp/>a<sp/>type<sp/>with<sp/>a<sp/>comma<sp/>in<sp/>its<sp/>name<sp/>just<sp/>in<sp/>case<sp/>it<sp/>matters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;int,<sp/>double,<sp/>MyPair&lt;int,<sp/>int&gt;<sp/>&gt;<sp/>TrimTypes;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/><ref refid="classlibrary2_1_1TrimmedTest" kindref="compound">TrimmedTest</ref>,<sp/>TrimTypes);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>library2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4127</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc"/>
  </compounddef>
</doxygen>
