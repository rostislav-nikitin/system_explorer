<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gtest-port_8h" kind="file" language="C++">
    <compoundname>gtest-port.h</compoundname>
    <includes local="no">ctype.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">cerrno</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">iostream</includes>
    <includes local="no">limits</includes>
    <includes local="no">locale</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">vector</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="custom_2gtest-port_8h" local="yes">gtest/internal/custom/gtest-port.h</includes>
    <includes refid="gtest-port-arch_8h" local="yes">gtest/internal/gtest-port-arch.h</includes>
    <includes local="no">strings.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">regex.h</includes>
    <includes local="no">typeinfo</includes>
    <includedby refid="gmock-port_8h" local="yes">build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-port.h</includedby>
    <includedby refid="gmock-spec-builders_8cc" local="yes">build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc</includedby>
    <includedby refid="gmock-actions__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc</includedby>
    <includedby refid="gmock-spec-builders__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc</includedby>
    <includedby refid="gmock__link__test_8h" local="yes">build/_deps/googletest-src/googlemock/test/gmock_link_test.h</includedby>
    <includedby refid="gtest-assertion-result_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/gtest-assertion-result.h</includedby>
    <includedby refid="gtest-matchers_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/gtest-matchers.h</includedby>
    <includedby refid="gtest-message_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/gtest-message.h</includedby>
    <includedby refid="gtest-param-test_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/gtest-param-test.h</includedby>
    <includedby refid="gtest-printers_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h</includedby>
    <includedby refid="gtest-typed-test_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/gtest-typed-test.h</includedby>
    <includedby refid="gtest__pred__impl_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/gtest_pred_impl.h</includedby>
    <includedby refid="gtest-filepath_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/internal/gtest-filepath.h</includedby>
    <includedby refid="gtest-internal_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h</includedby>
    <includedby refid="gtest-param-util_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h</includedby>
    <includedby refid="gtest-string_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/internal/gtest-string.h</includedby>
    <includedby refid="gtest-type-util_8h" local="yes">build/_deps/googletest-src/googletest/include/gtest/internal/gtest-type-util.h</includedby>
    <includedby refid="gtest-death-test_8cc" local="yes">build/_deps/googletest-src/googletest/src/gtest-death-test.cc</includedby>
    <includedby refid="gtest-filepath_8cc" local="yes">build/_deps/googletest-src/googletest/src/gtest-filepath.cc</includedby>
    <includedby refid="gtest-internal-inl_8h" local="yes">build/_deps/googletest-src/googletest/src/gtest-internal-inl.h</includedby>
    <includedby refid="gtest-matchers_8cc" local="yes">build/_deps/googletest-src/googletest/src/gtest-matchers.cc</includedby>
    <includedby refid="gtest-port_8cc" local="yes">build/_deps/googletest-src/googletest/src/gtest-port.cc</includedby>
    <includedby refid="gtest-printers_8cc" local="yes">build/_deps/googletest-src/googletest/src/gtest-printers.cc</includedby>
    <includedby refid="gtest-test-part_8cc" local="yes">build/_deps/googletest-src/googletest/src/gtest-test-part.cc</includedby>
    <includedby refid="gtest_8cc" local="yes">build/_deps/googletest-src/googletest/src/gtest.cc</includedby>
    <includedby refid="googletest-port-test_8cc" local="yes">build/_deps/googletest-src/googletest/test/googletest-port-test.cc</includedby>
    <includedby refid="gtest__dirs__test_8cc" local="yes">build/_deps/googletest-src/googletest/test/gtest_dirs_test.cc</includedby>
    <incdepgraph>
      <node id="20">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="21">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cerrno</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="2">
        <label>ctype.h</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="11">
        <label>locale</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="13">
        <label>ostream</label>
      </node>
      <node id="24">
        <label>regex.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="22">
        <label>strings.h</label>
      </node>
      <node id="18">
        <label>sys/stat.h</label>
      </node>
      <node id="19">
        <label>sys/types.h</label>
      </node>
      <node id="15">
        <label>tuple</label>
      </node>
      <node id="16">
        <label>type_traits</label>
      </node>
      <node id="25">
        <label>typeinfo</label>
      </node>
      <node id="23">
        <label>unistd.h</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>build/_deps/googletest-src/googlemock/include/gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h</label>
        <link refid="gmock-matchers__test_8h_source"/>
      </node>
      <node id="7">
        <label>build/_deps/googletest-src/googlemock/test/gmock_link_test.h</label>
        <link refid="gmock__link__test_8h_source"/>
      </node>
      <node id="15">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>build/_deps/googletest-src/googletest/include/gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>build/_deps/googletest-src/googletest/include/gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>build/_deps/googletest-src/googletest/include/gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>build/_deps/googletest-src/googletest/include/gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>build/_deps/googletest-src/googletest/src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h_source"/>
      </node>
      <node id="19">
        <label>build/_deps/googletest-src/googletest/test/googletest-param-test-test.h</label>
        <link refid="googletest-param-test-test_8h_source"/>
      </node>
      <node id="20">
        <label>build/_deps/googletest-src/googletest/test/gtest-typed-test_test.h</label>
        <link refid="gtest-typed-test__test_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1internal_1_1Secret" prot="public">testing::internal::Secret</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1GTestLog" prot="public">testing::internal::GTestLog</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1ConstRef" prot="public">testing::internal::ConstRef</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1ConstRef_3_01T_01_6_01_4" prot="public">testing::internal::ConstRef&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1Mutex" prot="public">testing::internal::Mutex</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1GTestMutexLock" prot="public">testing::internal::GTestMutexLock</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1ThreadLocal" prot="public">testing::internal::ThreadLocal</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1TypeWithSize" prot="public">testing::internal::TypeWithSize</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1TypeWithSize_3_014_01_4" prot="public">testing::internal::TypeWithSize&lt; 4 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1TypeWithSize_3_018_01_4" prot="public">testing::internal::TypeWithSize&lt; 8 &gt;</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal_1_1posix">testing::internal::posix</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gtest-port_8h_1a790f114f04a22110c153ee0814c58776" prot="public" static="no">
        <name>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="316" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1af32361ecb11a04425870ea6ae93323b5" prot="public" static="no">
        <name>GTEST_HAS_NOTIFICATION_</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="320" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a21086d276b1a64d6763ee8a94b12c1b8" prot="public" static="no">
        <name>GTEST_DEV_EMAIL_</name>
        <initializer>&quot;googletestframework@@googlegroups.com&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="330" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" prot="public" static="no">
        <name>GTEST_FLAG_PREFIX_</name>
        <initializer>&quot;gtest_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="331" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a4251ff898f9f94ec6b8b9402c3436759" prot="public" static="no">
        <name>GTEST_FLAG_PREFIX_DASH_</name>
        <initializer>&quot;gtest-&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="332" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a4018b7f288f974d022df397e2730633a" prot="public" static="no">
        <name>GTEST_FLAG_PREFIX_UPPER_</name>
        <initializer>&quot;GTEST_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="333" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" prot="public" static="no">
        <name>GTEST_NAME_</name>
        <initializer>&quot;Google Test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="334" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a5aa3c938fc1d049f1d9c5332f6a0b1d4" prot="public" static="no">
        <name>GTEST_PROJECT_URL_</name>
        <initializer>&quot;https://github.com/google/googletest/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="335" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1aa5e27ad4f88278501ef71bd9ddbb44c6" prot="public" static="no">
        <name>GTEST_INIT_GOOGLE_TEST_NAME_</name>
        <initializer>&quot;testing::InitGoogleTest&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="339" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a86994cc68e844d8b82089c70408dfc61" prot="public" static="no">
        <name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name>
        <param><defname>warnings</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="360" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" prot="public" static="no">
        <name>GTEST_DISABLE_MSC_WARNINGS_POP_</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="361" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a5b130138db254deaf29dbe3dffa1a2a8" prot="public" static="no">
        <name>GTEST_DISABLE_MSC_DEPRECATED_PUSH_</name>
        <param></param>
        <initializer>  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="373" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1aa0dc86dc9837f1610e91da65458f53b3" prot="public" static="no">
        <name>GTEST_DISABLE_MSC_DEPRECATED_POP_</name>
        <param></param>
        <initializer>GTEST_DISABLE_MSC_WARNINGS_POP_()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="375" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1af5c4295ea1d76f07f65934f659792431" prot="public" static="no">
        <name>GTEST_HAS_POSIX_RE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="423" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1acecef794eeb09598cd47da764271cb18" prot="public" static="no">
        <name>GTEST_USES_POSIX_RE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="438" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1aedcf220690e6589d0fc2bd3db768ea66" prot="public" static="no">
        <name>GTEST_HAS_EXCEPTIONS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="490" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a6e087748d8bbd2ca57c487b6ad268670" prot="public" static="no">
        <name>GTEST_HAS_STD_WSTRING</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="505" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a4d38591c7e16216fc387d881f10e4038" prot="public" static="no">
        <name>GTEST_HAS_FILE_SYSTEM</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="513" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a9ba781217167f905bff2f1c410a97930" prot="public" static="no">
        <name>GTEST_HAS_RTTI</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="568" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a3341397e1952de0b9cd88762d4d3ae4b" prot="public" static="no">
        <name>GTEST_HAS_PTHREAD</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="596" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a40c075a7f969a694e59532356be59fd5" prot="public" static="no">
        <name>GTEST_HAS_CLONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="631" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1add695166eb7b691f93777525d5881062" prot="public" static="no">
        <name>GTEST_HAS_STREAM_REDIRECTION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="648" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a0e3904ca8d62334ab5f29c057dceb6a1" prot="public" static="no">
        <name>GTEST_WIDE_STRING_USES_UTF16_</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="685" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a9c2aaa3728c32ce169a899cdcfb3b160" prot="public" static="no">
        <name>GTEST_CAN_STREAM_RESULTS_</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="695" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a00b3684a621ce1422b55a0e7e8a6aecb" prot="public" static="no">
        <name>GTEST_AMBIGUOUS_ELSE_BLOCKER_</name>
        <initializer>  switch (0)                          \
  case 0:                             \
  default:</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="711" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1ad66d755e9b34a04aa6a6f6bf87a7e7f6" prot="public" static="no">
        <name>GTEST_HAVE_ATTRIBUTE_</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="730" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a4ba98e42fe6241738632ae9c5719651e" prot="public" static="no">
        <name>GTEST_HAVE_FEATURE_</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="740" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a01f3b31960fc7c4c7ee4b398a914f89a" prot="public" static="no">
        <name>GTEST_ATTRIBUTE_UNUSED_</name>
        <initializer>=
    StaticAssertTypeEq&lt;const int, const int&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="751" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1ae29b00ca46783509cc900cd03d61ef37" prot="public" static="no">
        <name>GTEST_ATTRIBUTE_PRINTF_</name>
        <param><defname>string_index</defname></param>
        <param><defname>first_to_check</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="765" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a8e5aab8276b2645f64f41c9e3021b935" prot="public" static="no">
        <name>GTEST_MUST_USE_RESULT_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="776" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a69b0cadb05bf2a1ef96151243c6b6241" prot="public" static="no">
        <name>GTEST_INTENTIONAL_CONST_COND_PUSH_</name>
        <param></param>
        <initializer>  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="787" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1ad115e2c466f7e8a32f1cf23ef2e5f220" prot="public" static="no">
        <name>GTEST_INTENTIONAL_CONST_COND_POP_</name>
        <param></param>
        <initializer>GTEST_DISABLE_MSC_WARNINGS_POP_()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="789" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a8f6a84e8be3c94cd1f6f46a136df2c62" prot="public" static="no">
        <name>GTEST_HAS_SEH</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="802" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" prot="public" static="no">
        <name>GTEST_API_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="842" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a491d09ee62f1c9cfeafa3dbf75aaa9e2" prot="public" static="no">
        <name>GTEST_DEFAULT_DEATH_TEST_STYLE</name>
        <initializer>&quot;fast&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="846" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a9945cbd967fbccb15f8de711f58955c7" prot="public" static="no">
        <name>GTEST_NO_INLINE_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="853" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a40c9f887f61bb2b18c6b42d22b1a340e" prot="public" static="no">
        <name>GTEST_NO_TAIL_CALL_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="864" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="864" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1ae6239a8ccf4c230008d1db1ea8bd738e" prot="public" static="no">
        <name>GTEST_HAS_CXXABI_H_</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="872" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a2a83dd79037e53814a509cc3f5702650" prot="public" static="no">
        <name>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="881" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1af18b465f4ba6e36eea7a8d2d79521873" prot="public" static="no">
        <name>GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="889" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="889" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a7385650ead929a8efc18490aa19f35a7" prot="public" static="no">
        <name>GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="898" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1abf30a6b1b3a12ecb2cc1bc1a6f5f9646" prot="public" static="no">
        <name>GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="905" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="905" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" prot="public" static="no">
        <name>GTEST_LOG_</name>
        <param><defname>severity</defname></param>
        <initializer>  <ref refid="classtesting_1_1internal_1_1GTestLog" kindref="compound">::testing::internal::GTestLog</ref>(::testing::internal::GTEST_##severity, \
                                __FILE__, __LINE__)                    \
      .GetStream()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1053" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" prot="public" static="no">
        <name>GTEST_CHECK_</name>
        <param><defname>condition</defname></param>
        <initializer>  GTEST_AMBIGUOUS_ELSE_BLOCKER_               \
  if (::testing::internal::IsTrue(condition)) \
    ;                                         \
  else                                        \
    GTEST_LOG_(FATAL) &lt;&lt; &quot;Condition &quot; #condition &quot; failed. &quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1078" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a38f6151210e363ad7c69a836b13cf0af" prot="public" static="no">
        <name>GTEST_CHECK_POSIX_SUCCESS_</name>
        <param><defname>posix_call</defname></param>
        <initializer>  if (const int gtest_error = (posix_call))    \
  GTEST_LOG_(FATAL) &lt;&lt; #posix_call &lt;&lt; &quot;failed with error &quot; &lt;&lt; gtest_error</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1091" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a9f91fcd24cae0b48fdaeb19102dac525" prot="public" static="no">
        <name>GTEST_REFERENCE_TO_CONST_</name>
        <param><defname>T</defname></param>
        <initializer>  typename <ref refid="structtesting_1_1internal_1_1ConstRef" kindref="compound">::testing::internal::ConstRef</ref>&lt;T&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1116" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1af0970cdea09f16dbb1dbfccdaa693eeb" prot="public" static="no">
        <name>GTEST_DECLARE_STATIC_MUTEX_</name>
        <param><defname>mutex</defname></param>
        <initializer>  extern <ref refid="classtesting_1_1internal_1_1Mutex" kindref="compound">::testing::internal::Mutex</ref> mutex</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1877" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a85d5cd679fdbe87383e7dfd1c6651eaa" prot="public" static="no">
        <name>GTEST_DEFINE_STATIC_MUTEX_</name>
        <param><defname>mutex</defname></param>
        <initializer><ref refid="classtesting_1_1internal_1_1Mutex" kindref="compound">::testing::internal::Mutex</ref> mutex</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1880" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1880" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1afbb636e91bdd50267dbef11a50490b29" prot="public" static="no">
        <name>GTEST_PATH_SEP_</name>
        <initializer>&quot;/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1918" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1acf0ee1851e6d342237bb64806ee1fd27" prot="public" static="no">
        <name>GTEST_HAS_ALT_PATH_SEP_</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1919" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1aed1cc8143222d7a845a1269448ec203e" prot="public" static="no">
        <name>GTEST_SNPRINTF_</name>
        <initializer>snprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2165" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a965321b1208203a00e59ffd9e8d803a8" prot="public" static="no">
        <name>GTEST_FLAG_NAME_</name>
        <param><defname>name</defname></param>
        <initializer>gtest_##name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2225" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" prot="public" static="no">
        <name>GTEST_FLAG</name>
        <param><defname>name</defname></param>
        <initializer>FLAGS_gtest_##name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2226" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a48e05814779e5a2f432b06a12618a760" prot="public" static="no">
        <name>GTEST_DEFINE_bool_</name>
        <param><defname>name</defname></param>
        <param><defname>default_val</defname></param>
        <param><defname>doc</defname></param>
        <initializer>  namespace testing {                               \
  GTEST_API_ bool GTEST_FLAG(name) = (default_val); \
  }                                                 \
  static_assert(true, &quot;no-op to require trailing semicolon&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2258" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a88ee2f19589ffff86ca742fd33611358" prot="public" static="no">
        <name>GTEST_DEFINE_int32_</name>
        <param><defname>name</defname></param>
        <param><defname>default_val</defname></param>
        <param><defname>doc</defname></param>
        <initializer>  namespace testing {                                       \
  GTEST_API_ std::int32_t GTEST_FLAG(name) = (default_val); \
  }                                                         \
  static_assert(true, &quot;no-op to require trailing semicolon&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2263" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a885e18fe217a6e85553d408b99252c12" prot="public" static="no">
        <name>GTEST_DEFINE_string_</name>
        <param><defname>name</defname></param>
        <param><defname>default_val</defname></param>
        <param><defname>doc</defname></param>
        <initializer>  namespace testing {                                        \
  GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val); \
  }                                                          \
  static_assert(true, &quot;no-op to require trailing semicolon&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2268" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a14eb0e9c6e0df765d1fbfd2db6966d14" prot="public" static="no">
        <name>GTEST_DECLARE_bool_</name>
        <param><defname>name</defname></param>
        <initializer>  namespace testing {                      \
  GTEST_API_ extern bool GTEST_FLAG(name); \
  }                                        \
  static_assert(true, &quot;no-op to require trailing semicolon&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2275" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1aab2ee98cb616054b1d3a7dc71efe81fc" prot="public" static="no">
        <name>GTEST_DECLARE_int32_</name>
        <param><defname>name</defname></param>
        <initializer>  namespace testing {                              \
  GTEST_API_ extern std::int32_t GTEST_FLAG(name); \
  }                                                \
  static_assert(true, &quot;no-op to require trailing semicolon&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2280" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a9f74eee05f7ee5534139a622fe7da7dd" prot="public" static="no">
        <name>GTEST_DECLARE_string_</name>
        <param><defname>name</defname></param>
        <initializer>  namespace testing {                               \
  GTEST_API_ extern ::std::string GTEST_FLAG(name); \
  }                                                 \
  static_assert(true, &quot;no-op to require trailing semicolon&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2285" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a3749ef4fba6b3c3993609b336031644d" prot="public" static="no">
        <name>GTEST_FLAG_SAVER_</name>
        <initializer><ref refid="classtesting_1_1internal_1_1GTestFlagSaver" kindref="compound">::testing::internal::GTestFlagSaver</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2291" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1ae080d884d5f6cf021d407995a0e32db5" prot="public" static="no">
        <name>GTEST_FLAG_GET</name>
        <param><defname>name</defname></param>
        <initializer>::testing::GTEST_FLAG(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2293" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1aa853dfc7a440ce6989b66d15baaee1a2" prot="public" static="no">
        <name>GTEST_FLAG_SET</name>
        <param><defname>name</defname></param>
        <param><defname>value</defname></param>
        <initializer>(void)(::testing::GTEST_FLAG(name) = value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2294" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1aa2315948dda8dba4fc516575657f193c" prot="public" static="no">
        <name>GTEST_USE_OWN_FLAGFILE_FLAG_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2295" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a149f693bd59fa1bc937af54c0cdcb32f" prot="public" static="no">
        <name>GTEST_EXCLUSIVE_LOCK_REQUIRED_</name>
        <param><defname>locks</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2301" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" prot="public" static="no">
        <name>GTEST_LOCK_EXCLUDED_</name>
        <param><defname>locks</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2302" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a6aa594029905b65753d0e85f2db521ab" prot="public" static="no">
        <name>GTEST_INTERNAL_DEPRECATED</name>
        <param><defname>message</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2336" column="10" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a3dd288b88c182c1aa4e9f9d8de226413" prot="public" static="no">
        <name>GTEST_INTERNAL_HAS_ANY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2371" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a833d03f30361e5057f41cf48daa1b3c9" prot="public" static="no">
        <name>GTEST_INTERNAL_HAS_OPTIONAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2407" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1a72603a093db1f1055ee69f44eadeee1f" prot="public" static="no">
        <name>GTEST_INTERNAL_HAS_STRING_VIEW</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2440" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-port_8h_1ac94bbf6a3e3515dd3cac225df69d1da1" prot="public" static="no">
        <name>GTEST_INTERNAL_HAS_VARIANT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2473" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2473" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Low-level<sp/>types<sp/>and<sp/>utilities<sp/>for<sp/>porting<sp/>Google<sp/>Test<sp/>to<sp/>various</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platforms.<sp/><sp/>All<sp/>macros<sp/>ending<sp/>with<sp/>_<sp/>and<sp/>symbols<sp/>defined<sp/>in<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal<sp/>namespace<sp/>are<sp/>subject<sp/>to<sp/>change<sp/>without<sp/>notice.<sp/><sp/>Code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>outside<sp/>Google<sp/>Test<sp/>MUST<sp/>NOT<sp/>USE<sp/>THEM<sp/>DIRECTLY.<sp/><sp/>Macros<sp/>that<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>with<sp/>_<sp/>are<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s<sp/>public<sp/>API<sp/>and<sp/>can<sp/>be<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>outside<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>fundamental<sp/>to<sp/>Google<sp/>Test.<sp/><sp/>All<sp/>other<sp/>Google<sp/>Test<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>files<sp/>are<sp/>expected<sp/>to<sp/>#include<sp/>this.<sp/><sp/>Therefore,<sp/>it<sp/>cannot<sp/>#include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any<sp/>other<sp/>Google<sp/>Test<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>private,<sp/>include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>friend<sp/>gtest/.*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>friend<sp/>gmock/.*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Environment-describing<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>can<sp/>be<sp/>used<sp/>in<sp/>many<sp/>different<sp/>environments.<sp/><sp/>Macros<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>section<sp/>tell<sp/>Google<sp/>Test<sp/>what<sp/>kind<sp/>of<sp/>environment<sp/>it<sp/>is<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>in,<sp/>such<sp/>that<sp/>Google<sp/>Test<sp/>can<sp/>provide<sp/>environment-specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>features<sp/>and<sp/>implementations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>tries<sp/>to<sp/>automatically<sp/>detect<sp/>the<sp/>properties<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment,<sp/>so<sp/>users<sp/>usually<sp/>don&apos;t<sp/>need<sp/>to<sp/>worry<sp/>about<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macros.<sp/><sp/>However,<sp/>the<sp/>automatic<sp/>detection<sp/>is<sp/>not<sp/>perfect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sometimes<sp/>it&apos;s<sp/>necessary<sp/>for<sp/>a<sp/>user<sp/>to<sp/>define<sp/>some<sp/>of<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macros<sp/>in<sp/>the<sp/>build<sp/>script<sp/>to<sp/>override<sp/>Google<sp/>Test&apos;s<sp/>decisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>user<sp/>doesn&apos;t<sp/>define<sp/>a<sp/>macro<sp/>in<sp/>the<sp/>list,<sp/>Google<sp/>Test<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>provide<sp/>a<sp/>default<sp/>definition.<sp/><sp/>After<sp/>this<sp/>header<sp/>is<sp/>#included,<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macros<sp/>in<sp/>this<sp/>list<sp/>will<sp/>be<sp/>defined<sp/>to<sp/>either<sp/>1<sp/>or<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notes<sp/>to<sp/>maintainers:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>Each<sp/>macro<sp/>here<sp/>is<sp/>a<sp/>user-tweakable<sp/>knob;<sp/>do<sp/>not<sp/>grow<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>lightly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>Use<sp/>#if<sp/>to<sp/>key<sp/>off<sp/>these<sp/>macros.<sp/><sp/>Don&apos;t<sp/>use<sp/>#ifdef<sp/>or<sp/>&quot;#if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>defined(...)&quot;,<sp/>which<sp/>will<sp/>not<sp/>work<sp/>as<sp/>these<sp/>macros<sp/>are<sp/>ALWAYS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_CLONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>that<sp/>clone(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is/isn&apos;t<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_EXCEPTIONS<sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>that<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_POSIX_RE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>that<sp/>POSIX<sp/>regular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressions<sp/>are/aren&apos;t<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_PTHREAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>that<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is/isn&apos;t<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_RTTI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>that<sp/>RTTI<sp/>is/isn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_STD_WSTRING<sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>does/doesn&apos;t<sp/>work<sp/>(Google<sp/>Test<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>used<sp/>where<sp/>std::wstring<sp/>is<sp/>unavailable).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_FILE_SYSTEM<sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>whether<sp/>or<sp/>not<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>system<sp/>is/isn&apos;t<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_SEH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>whether<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler<sp/>supports<sp/>Microsoft&apos;s<sp/>&quot;Structured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exception<sp/>Handling&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>it<sp/>to<sp/>1/0<sp/>to<sp/>indicate<sp/>whether<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>platform<sp/>supports<sp/>I/O<sp/>stream<sp/>redirection<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dup()<sp/>and<sp/>dup2().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_LINKED_AS_SHARED_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>to<sp/>1<sp/>when<sp/>compiling<sp/>tests<sp/>that<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Google<sp/>Test<sp/>as<sp/>a<sp/>shared<sp/>library<sp/>(known<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DLL<sp/>on<sp/>Windows).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_CREATE_SHARED_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Define<sp/>to<sp/>1<sp/>when<sp/>compiling<sp/>Google<sp/>Test<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>a<sp/>shared<sp/>library.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_DEFAULT_DEATH_TEST_STYLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>default<sp/>value<sp/>of<sp/>--gtest_death_test_style.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>legacy<sp/>default<sp/>has<sp/>been<sp/>&quot;fast&quot;<sp/>in<sp/>the<sp/>open</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>version<sp/>since<sp/>2008.<sp/>The<sp/>recommended<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>&quot;threadsafe&quot;,<sp/>and<sp/>can<sp/>be<sp/>set<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>custom/gtest-port.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Platform-indicating<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>indicating<sp/>the<sp/>platform<sp/>on<sp/>which<sp/>Google<sp/>Test<sp/>is<sp/>being<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(a<sp/>macro<sp/>is<sp/>defined<sp/>to<sp/>1<sp/>if<sp/>compiled<sp/>on<sp/>the<sp/>given<sp/>platform;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>UNDEFINED<sp/>--<sp/>it&apos;s<sp/>never<sp/>defined<sp/>to<sp/>0.).<sp/><sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>these<sp/>macros<sp/>automatically.<sp/><sp/>Code<sp/>outside<sp/>Google<sp/>Test<sp/>MUST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOT<sp/>define<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_AIX<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>IBM<sp/>AIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_CYGWIN<sp/><sp/><sp/>-<sp/>Cygwin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_DRAGONFLY<sp/>-<sp/>DragonFlyBSD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_FREEBSD<sp/><sp/>-<sp/>FreeBSD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_FUCHSIA<sp/><sp/>-<sp/>Fuchsia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_GNU_HURD<sp/>-<sp/>GNU/Hurd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_GNU_KFREEBSD<sp/>-<sp/>GNU/kFreeBSD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_HAIKU<sp/><sp/><sp/><sp/>-<sp/>Haiku</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_HPUX<sp/><sp/><sp/><sp/><sp/>-<sp/>HP-UX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_LINUX<sp/><sp/><sp/><sp/>-<sp/>Linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>GTEST_OS_LINUX_ANDROID<sp/>-<sp/>Google<sp/>Android</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_MAC<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Mac<sp/>OS<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>GTEST_OS_IOS<sp/><sp/><sp/><sp/>-<sp/>iOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_NACL<sp/><sp/><sp/><sp/><sp/>-<sp/>Google<sp/>Native<sp/>Client<sp/>(NaCl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_NETBSD<sp/><sp/><sp/>-<sp/>NetBSD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_OPENBSD<sp/><sp/>-<sp/>OpenBSD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_OS2<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>OS/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_QNX<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_SOLARIS<sp/><sp/>-<sp/>Sun<sp/>Solaris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_WINDOWS<sp/><sp/>-<sp/>Windows<sp/>(Desktop,<sp/>MinGW,<sp/>or<sp/>Mobile)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>GTEST_OS_WINDOWS_DESKTOP<sp/><sp/>-<sp/>Windows<sp/>Desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>GTEST_OS_WINDOWS_MINGW<sp/><sp/><sp/><sp/>-<sp/>MinGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>GTEST_OS_WINDOWS_MOBILE<sp/><sp/><sp/>-<sp/>Windows<sp/>Mobile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>GTEST_OS_WINDOWS_PHONE<sp/><sp/><sp/><sp/>-<sp/>Windows<sp/>Phone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>GTEST_OS_WINDOWS_RT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Windows<sp/>Store<sp/>App/WinRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_OS_ZOS<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>z/OS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Among<sp/>the<sp/>platforms,<sp/>Cygwin,<sp/>Linux,<sp/>Mac<sp/>OS<sp/>X,<sp/>and<sp/>Windows<sp/>have<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>most<sp/>stable<sp/>support.<sp/><sp/>Since<sp/>core<sp/>members<sp/>of<sp/>the<sp/>Google<sp/>Test<sp/>project</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>have<sp/>access<sp/>to<sp/>other<sp/>platforms,<sp/>support<sp/>for<sp/>them<sp/>may<sp/>be<sp/>less</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stable.<sp/><sp/>If<sp/>you<sp/>notice<sp/>any<sp/>problems<sp/>on<sp/>your<sp/>platform,<sp/>please<sp/>notify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>googletestframework@googlegroups.com<sp/>(patches<sp/>for<sp/>fixing<sp/>them<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>more<sp/>welcome!).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>possible<sp/>that<sp/>none<sp/>of<sp/>the<sp/>GTEST_OS_*<sp/>macros<sp/>are<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Feature-indicating<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>indicating<sp/>which<sp/>Google<sp/>Test<sp/>features<sp/>are<sp/>available<sp/>(a<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>defined<sp/>to<sp/>1<sp/>if<sp/>the<sp/>corresponding<sp/>feature<sp/>is<sp/>supported;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>UNDEFINED<sp/>--<sp/>it&apos;s<sp/>never<sp/>defined<sp/>to<sp/>0.).<sp/><sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>these<sp/>macros<sp/>automatically.<sp/><sp/>Code<sp/>outside<sp/>Google<sp/>Test<sp/>MUST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOT<sp/>define<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>macros<sp/>are<sp/>public<sp/>so<sp/>that<sp/>portable<sp/>tests<sp/>can<sp/>be<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Such<sp/>tests<sp/>typically<sp/>surround<sp/>code<sp/>using<sp/>a<sp/>feature<sp/>with<sp/>an<sp/>#ifdef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>controls<sp/>that<sp/>code.<sp/><sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_DEATH(DoSomethingDeadly());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_DEATH_TEST<sp/><sp/><sp/>-<sp/>death<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_TYPED_TEST<sp/><sp/><sp/>-<sp/>typed<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_TYPED_TEST_P<sp/>-<sp/>type-parameterized<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_IS_THREADSAFE<sp/><sp/><sp/><sp/>-<sp/>Google<sp/>Test<sp/>is<sp/>thread-safe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_USES_RE2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>the<sp/>RE2<sp/>regular<sp/>expression<sp/>library<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_USES_POSIX_RE<sp/><sp/><sp/><sp/>-<sp/>enhanced<sp/>POSIX<sp/>regex<sp/>is<sp/>used.<sp/>Do<sp/>not<sp/>confuse<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_HAS_POSIX_RE<sp/>(see<sp/>above)<sp/>which<sp/>users<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>themselves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_USES_SIMPLE_RE<sp/><sp/><sp/>-<sp/>our<sp/>own<sp/>simple<sp/>regex<sp/>is<sp/>used;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>above<sp/>RE\b(s)<sp/>are<sp/>mutually<sp/>exclusive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_ABSL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Google<sp/>Test<sp/>is<sp/>compiled<sp/>with<sp/>Abseil.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Misc<sp/>public<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_FLAG(flag_name)<sp/><sp/>-<sp/>references<sp/>the<sp/>variable<sp/>corresponding<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>given<sp/>Google<sp/>Test<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>utilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>macros<sp/>and<sp/>utilities<sp/>are<sp/>for<sp/>Google<sp/>Test&apos;s<sp/>INTERNAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>only.<sp/><sp/>Code<sp/>outside<sp/>Google<sp/>Test<sp/>MUST<sp/>NOT<sp/>USE<sp/>THEM<sp/>DIRECTLY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>basic<sp/>C++<sp/>coding:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>-<sp/>for<sp/>disabling<sp/>a<sp/>gcc<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_ATTRIBUTE_UNUSED_<sp/><sp/>-<sp/>declares<sp/>that<sp/>a<sp/>class&apos;<sp/>instances<sp/>or<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>don&apos;t<sp/>have<sp/>to<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_MUST_USE_RESULT_<sp/><sp/><sp/>-<sp/>declares<sp/>that<sp/>a<sp/>function&apos;s<sp/>result<sp/>must<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_INTENTIONAL_CONST_COND_PUSH_<sp/>-<sp/>start<sp/>code<sp/>section<sp/>where<sp/>MSVC<sp/>C4127<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suppressed<sp/>(constant<sp/>conditional).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_INTENTIONAL_CONST_COND_POP_<sp/><sp/>-<sp/>finish<sp/>code<sp/>section<sp/>where<sp/>MSVC<sp/>C4127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>suppressed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_INTERNAL_HAS_ANY<sp/>-<sp/>for<sp/>enabling<sp/>UniversalPrinter&lt;std::any&gt;<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrinter&lt;absl::any&gt;<sp/>specializations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_INTERNAL_HAS_OPTIONAL<sp/>-<sp/>for<sp/>enabling<sp/>UniversalPrinter&lt;std::optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrinter&lt;absl::optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specializations.<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_INTERNAL_HAS_STRING_VIEW<sp/>-<sp/>for<sp/>enabling<sp/>Matcher&lt;std::string_view&gt;<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matcher&lt;absl::string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specializations.<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_INTERNAL_HAS_VARIANT<sp/>-<sp/>for<sp/>enabling<sp/>UniversalPrinter&lt;std::variant&gt;<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UniversalPrinter&lt;absl::variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specializations.<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_USE_OWN_FLAGFILE_FLAG_<sp/>-<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_CXXABI_H_<sp/>-<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_CAN_STREAM_RESULTS_<sp/>-<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_ALT_PATH_SEP_<sp/>-<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_WIDE_STRING_USES_UTF16_<sp/>-<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_<sp/>-<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_HAS_NOTIFICATION_-<sp/>Always<sp/>defined<sp/>to<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Synchronization:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Mutex,<sp/>MutexLock,<sp/>ThreadLocal,<sp/>GetThreadCount()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>synchronization<sp/>primitives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regular<sp/>expressions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>RE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>a<sp/>simple<sp/>regular<sp/>expression<sp/>class<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>the<sp/>RE2<sp/>syntax<sp/>on<sp/>all<sp/>platforms<sp/>when<sp/>built<sp/>with<sp/>RE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>Abseil<sp/>as<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2)<sp/>the<sp/>POSIX<sp/>Extended<sp/>Regular<sp/>Expression<sp/>syntax<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNIX-like<sp/>platforms,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3)<sp/>A<sp/>reduced<sp/>regular<sp/>exception<sp/>syntax<sp/>on<sp/>other<sp/>platforms,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>including<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logging:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_LOG_()<sp/><sp/><sp/>-<sp/>logs<sp/>messages<sp/>at<sp/>the<sp/>specified<sp/>severity<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>LogToStderr()<sp/><sp/>-<sp/>directs<sp/>all<sp/>log<sp/>messages<sp/>to<sp/>stderr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>FlushInfoLog()<sp/>-<sp/>flushes<sp/>informational<sp/>log<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stdout<sp/>and<sp/>stderr<sp/>capturing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>CaptureStdout()<sp/><sp/><sp/><sp/><sp/>-<sp/>starts<sp/>capturing<sp/>stdout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GetCapturedStdout()<sp/>-<sp/>stops<sp/>capturing<sp/>stdout<sp/>and<sp/>returns<sp/>the<sp/>captured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>CaptureStderr()<sp/><sp/><sp/><sp/><sp/>-<sp/>starts<sp/>capturing<sp/>stderr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GetCapturedStderr()<sp/>-<sp/>stops<sp/>capturing<sp/>stderr<sp/>and<sp/>returns<sp/>the<sp/>captured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Integer<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TypeWithSize<sp/><sp/><sp/>-<sp/>maps<sp/>an<sp/>integer<sp/>to<sp/>a<sp/>int<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TimeInMillis<sp/><sp/><sp/>-<sp/>integers<sp/>of<sp/>known<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>BiggestInt<sp/><sp/><sp/><sp/><sp/>-<sp/>the<sp/>biggest<sp/>signed<sp/>integer<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Command-line<sp/>utilities:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GetInjectableArgvs()<sp/>-<sp/>returns<sp/>the<sp/>command<sp/>line<sp/>as<sp/>a<sp/>vector<sp/>of<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Environment<sp/>variable<sp/>utilities:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GetEnv()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>gets<sp/>the<sp/>value<sp/>of<sp/>an<sp/>environment<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>BoolFromGTestEnv()<sp/><sp/><sp/>-<sp/>parses<sp/>a<sp/>bool<sp/>environment<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Int32FromGTestEnv()<sp/><sp/>-<sp/>parses<sp/>an<sp/>int32_t<sp/>environment<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>StringFromGTestEnv()<sp/>-<sp/>parses<sp/>a<sp/>string<sp/>environment<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deprecation<sp/>warnings:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_INTERNAL_DEPRECATED(message)<sp/>-<sp/>attribute<sp/>marking<sp/>a<sp/>function<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deprecated;<sp/>calling<sp/>a<sp/>marked<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>generate<sp/>a<sp/>compiler<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>definition<sp/>of<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>comes<sp/>first<sp/>because<sp/>it<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>potentially<sp/>be<sp/>used<sp/>as<sp/>an<sp/>#include<sp/>guard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSVC_LANG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>_MSVC_LANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_INTERNAL_CPLUSPLUS_LANG)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&lt;<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>C++<sp/>versions<sp/>less<sp/>than<sp/>C++14<sp/>are<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>isspace,<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>ptrdiff_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;condition_variable&gt;<sp/><sp/>//<sp/>Guarded<sp/>by<sp/>GTEST_IS_THREADSAFE<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;mutex&gt;<sp/><sp/>//<sp/>Guarded<sp/>by<sp/>GTEST_IS_THREADSAFE<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32_WCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!_WIN32_WCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AvailabilityMacros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TargetConditionals.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/custom/gtest-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-port-arch.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_NOTIFICATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_NOTIFICATION_<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/flags/declare.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/flags/flag.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/flags/reflection.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_DEV_EMAIL_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEV_EMAIL_<sp/>&quot;googletestframework@@googlegroups.com&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_PREFIX_<sp/>&quot;gtest_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_PREFIX_DASH_<sp/>&quot;gtest-&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_PREFIX_UPPER_<sp/>&quot;GTEST_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_NAME_<sp/>&quot;Google<sp/>Test&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_PROJECT_URL_<sp/>&quot;https://github.com/google/googletest/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!defined(GTEST_DEV_EMAIL_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_INIT_GOOGLE_TEST_NAME_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INIT_GOOGLE_TEST_NAME_<sp/>&quot;testing::InitGoogleTest&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!defined(GTEST_INIT_GOOGLE_TEST_NAME_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>the<sp/>version<sp/>of<sp/>gcc<sp/>that<sp/>is<sp/>used<sp/>to<sp/>compile<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>40302<sp/>means<sp/>version<sp/>4.3.2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_GCC_VER_<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/>(__GNUC__<sp/>*<sp/>10000<sp/>+<sp/>__GNUC_MINOR__<sp/>*<sp/>100<sp/>+<sp/>__GNUC_PATCHLEVEL__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>disabling<sp/>Microsoft<sp/>Visual<sp/>C++<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800<sp/>4385)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>/*<sp/>code<sp/>that<sp/>triggers<sp/>warnings<sp/>C4800<sp/>and<sp/>C4385<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)<sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"><sp/><sp/>__pragma(warning(push))<sp/>__pragma(warning(disable<sp/>:<sp/>warnings))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/>__pragma(warning(pop))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Not<sp/>all<sp/>compilers<sp/>are<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clang<sp/>on<sp/>Windows<sp/>does<sp/>not<sp/>understand<sp/>MSVC&apos;s<sp/>pragma<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>clang-specific<sp/>way<sp/>to<sp/>disable<sp/>function<sp/>deprecation<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DISABLE_MSC_DEPRECATED_PUSH_()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/>_Pragma(&quot;clang<sp/>diagnostic<sp/>push&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma(&quot;clang<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wdeprecated-declarations\&quot;&quot;)<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma(&quot;clang<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wdeprecated-implementations\&quot;&quot;)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DISABLE_MSC_DEPRECATED_POP_()<sp/>_Pragma(&quot;clang<sp/>diagnostic<sp/>pop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DISABLE_MSC_DEPRECATED_PUSH_()<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DISABLE_MSC_DEPRECATED_POP_()<sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Brings<sp/>in<sp/>definitions<sp/>for<sp/>functions<sp/>used<sp/>in<sp/>the<sp/>testing::internal::posix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>(read,<sp/>write,<sp/>close,<sp/>chdir,<sp/>isatty,<sp/>stat).<sp/>We<sp/>do<sp/>not<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>them<sp/>on<sp/>Windows<sp/>Mobile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>avoid<sp/>having<sp/>to<sp/>include<sp/>&lt;windows.h&gt;,<sp/>use<sp/>forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS_MINGW)<sp/>&amp;&amp;<sp/>!defined(__MINGW64_VERSION_MAJOR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MinGW<sp/>defined<sp/>_CRITICAL_SECTION<sp/>and<sp/>_RTL_CRITICAL_SECTION<sp/>as<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>separate<sp/>(equivalent)<sp/>structs,<sp/>instead<sp/>of<sp/>using<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_CRITICAL_SECTION<sp/>GTEST_CRITICAL_SECTION;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assume<sp/>CRITICAL_SECTION<sp/>is<sp/>a<sp/>typedef<sp/>of<sp/>_RTL_CRITICAL_SECTION.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>assumption<sp/>is<sp/>verified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_RTL_CRITICAL_SECTION<sp/>GTEST_CRITICAL_SECTION;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_OS_XTENSA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Xtensa<sp/>toolchains<sp/>define<sp/>strcasecmp<sp/>in<sp/>the<sp/>string.h<sp/>header<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>strings.h.<sp/>string.h<sp/>is<sp/>already<sp/>included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>assumes<sp/>that<sp/>non-Windows<sp/>OSes<sp/>provide<sp/>unistd.h.<sp/>For<sp/>OSes<sp/>where<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>the<sp/>case,<sp/>we<sp/>need<sp/>to<sp/>include<sp/>headers<sp/>that<sp/>provide<sp/>the<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mentioned<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_LINUX_ANDROID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>define<sp/>__ANDROID_API__<sp/>matching<sp/>the<sp/>target<sp/>NDK<sp/>API<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;android/api-level.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>this<sp/>to<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>Google<sp/>Test<sp/>can<sp/>use<sp/>POSIX<sp/>regular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expressions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_LINUX_ANDROID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Android,<sp/>&lt;regex.h&gt;<sp/>is<sp/>only<sp/>available<sp/>starting<sp/>with<sp/>Gingerbread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_POSIX_RE<sp/>(__ANDROID_API__<sp/>&gt;=<sp/>9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(GTEST_OS_WINDOWS)<sp/>||<sp/>defined(GTEST_OS_XTENSA)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_QURT))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_POSIX_RE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_POSIX_RE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX_ANDROID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Select<sp/>the<sp/>regular<sp/>expression<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>using<sp/>Abseil,<sp/>RE2<sp/>is<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/strings/string_view.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;re2/re2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_USES_RE2<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_HAS_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_USES_POSIX_RE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>our<sp/>own<sp/>simple<sp/>regex<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_USES_SIMPLE_RE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>didn&apos;t<sp/>tell<sp/>us<sp/>whether<sp/>exceptions<sp/>are<sp/>enabled,<sp/>so<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>figure<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>defined(_CPPUNWIND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>defines<sp/>_CPPUNWIND<sp/>to<sp/>1<sp/>if<sp/>and<sp/>only<sp/>if<sp/>exceptions<sp/>are<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++Builder&apos;s<sp/>implementation<sp/>of<sp/>the<sp/>STL<sp/>uses<sp/>the<sp/>_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macro<sp/>to<sp/>enable<sp/>exceptions,<sp/>so<sp/>we&apos;ll<sp/>do<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assumes<sp/>that<sp/>exceptions<sp/>are<sp/>enabled<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_HAS_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang<sp/>defines<sp/>__EXCEPTIONS<sp/>if<sp/>and<sp/>only<sp/>if<sp/>exceptions<sp/>are<sp/>enabled<sp/>before<sp/>clang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>220714,<sp/>but<sp/>if<sp/>and<sp/>only<sp/>if<sp/>cleanups<sp/>are<sp/>enabled<sp/>after<sp/>that.<sp/>In<sp/>Obj-C++<sp/>files,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>there<sp/>can<sp/>be<sp/>cleanups<sp/>for<sp/>ObjC<sp/>exceptions<sp/>which<sp/>also<sp/>need<sp/>cleanups,<sp/>even<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>exceptions<sp/>are<sp/>disabled.<sp/>clang<sp/>has<sp/>__has_feature(cxx_exceptions)<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>checks<sp/>for<sp/>C++<sp/>exceptions<sp/>starting<sp/>at<sp/>clang<sp/>r206352,<sp/>but<sp/>which<sp/>checked<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cleanups<sp/>prior<sp/>to<sp/>that.<sp/>To<sp/>reliably<sp/>check<sp/>for<sp/>C++<sp/>exception<sp/>availability<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang,<sp/>check<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>__EXCEPTIONS<sp/>&amp;&amp;<sp/>__has_feature(cxx_exceptions).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__EXCEPTIONS)<sp/>&amp;&amp;<sp/>__EXCEPTIONS<sp/>&amp;&amp;<sp/>__has_feature(cxx_exceptions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>defined(__EXCEPTIONS)<sp/>&amp;&amp;<sp/>__EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gcc<sp/>defines<sp/>__EXCEPTIONS<sp/>to<sp/>1<sp/>if<sp/>and<sp/>only<sp/>if<sp/>exceptions<sp/>are<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SUNPRO_CC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sun<sp/>Pro<sp/>CC<sp/>supports<sp/>exceptions.<sp/><sp/>However,<sp/>there<sp/>is<sp/>no<sp/>compile-time<sp/>way<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>detecting<sp/>whether<sp/>they<sp/>are<sp/>enabled<sp/>or<sp/>not.<sp/><sp/>Therefore,<sp/>we<sp/>assume<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>enabled<sp/>unless<sp/>the<sp/>user<sp/>tells<sp/>us<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__IBMCPP__)<sp/>&amp;&amp;<sp/>defined(__EXCEPTIONS)<sp/>&amp;&amp;<sp/>__EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>xlC<sp/>defines<sp/>__EXCEPTIONS<sp/>to<sp/>1<sp/>if<sp/>and<sp/>only<sp/>if<sp/>exceptions<sp/>are<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__HP_aCC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Exception<sp/>handling<sp/>is<sp/>in<sp/>effect<sp/>by<sp/>default<sp/>in<sp/>HP<sp/>aCC<sp/>compiler.<sp/>It<sp/>has<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>turned<sp/>of<sp/>by<sp/>+noeh<sp/>compiler<sp/>option<sp/>if<sp/>desired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>other<sp/>compilers,<sp/>we<sp/>assume<sp/>exceptions<sp/>are<sp/>disabled<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conservative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_EXCEPTIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(_MSC_VER)<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>didn&apos;t<sp/>tell<sp/>us<sp/>whether<sp/>::std::wstring<sp/>is<sp/>available,<sp/>so<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>figure<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cygwin<sp/>1.7<sp/>and<sp/>below<sp/>doesn&apos;t<sp/>support<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Solaris&apos;<sp/>libc++<sp/>doesn&apos;t<sp/>support<sp/>it<sp/>either.<sp/><sp/>Android<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>support<sp/>for<sp/>it<sp/>at<sp/>least<sp/>as<sp/>recent<sp/>as<sp/>Froyo<sp/>(2.2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!(defined(GTEST_OS_LINUX_ANDROID)<sp/>||<sp/>defined(GTEST_OS_CYGWIN)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_SOLARIS)<sp/>||<sp/>defined(GTEST_OS_HAIKU)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_ESP32)<sp/>||<sp/>defined(GTEST_OS_ESP8266)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_XTENSA)<sp/>||<sp/>defined(GTEST_OS_QURT)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_NXP_QN9090)<sp/>||<sp/>defined(GTEST_OS_NRF52)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_STD_WSTRING<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_STD_WSTRING<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Most<sp/>platforms<sp/>support<sp/>a<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_FILE_SYSTEM<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>RTTI<sp/>is<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>didn&apos;t<sp/>tell<sp/>us<sp/>whether<sp/>RTTI<sp/>is<sp/>enabled,<sp/>so<sp/>we<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>figure<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_CPPRTTI<sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>defines<sp/>this<sp/>macro<sp/>if<sp/>and<sp/>only<sp/>if<sp/>RTTI<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Starting<sp/>with<sp/>version<sp/>4.3.2,<sp/>gcc<sp/>defines<sp/>__GXX_RTTI<sp/>if<sp/>and<sp/>only<sp/>if<sp/>RTTI<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GXX_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>building<sp/>against<sp/>STLport<sp/>with<sp/>the<sp/>Android<sp/>NDK<sp/>and<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-frtti<sp/>-fno-exceptions,<sp/>the<sp/>build<sp/>fails<sp/>at<sp/>link<sp/>time<sp/>with<sp/>undefined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>references<sp/>to<sp/>__cxa_bad_typeid.<sp/>Note<sp/>sure<sp/>if<sp/>STL<sp/>or<sp/>toolchain<sp/>bug,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>disable<sp/>RTTI<sp/>when<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_LINUX_ANDROID)<sp/>&amp;&amp;<sp/>defined(_STLPORT_MAJOR)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(__EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX_ANDROID<sp/>&amp;&amp;<sp/>__STLPORT_MAJOR<sp/>&amp;&amp;<sp/>!__EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__GXX_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clang<sp/>defines<sp/>__GXX_RTTI<sp/>starting<sp/>with<sp/>version<sp/>3.0,<sp/>but<sp/>its<sp/>manual<sp/>recommends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>has_feature<sp/>instead.<sp/>has_feature(cxx_rtti)<sp/>is<sp/>supported<sp/>since<sp/>2.7,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>version<sp/>with<sp/>C++<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>__has_feature(cxx_rtti)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Starting<sp/>with<sp/>version<sp/>9.0<sp/>IBM<sp/>Visual<sp/>Age<sp/>defines<sp/>__RTTI_ALL__<sp/>to<sp/>1<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>the<sp/>typeid<sp/>and<sp/>dynamic_cast<sp/>features<sp/>are<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__IBMCPP__)<sp/>&amp;&amp;<sp/>(__IBMCPP__<sp/>&gt;=<sp/>900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__RTTI_ALL__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>all<sp/>other<sp/>compilers,<sp/>we<sp/>assume<sp/>RTTI<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_RTTI<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>this<sp/>header&apos;s<sp/>responsibility<sp/>to<sp/>#include<sp/>&lt;typeinfo&gt;<sp/>when<sp/>RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>Google<sp/>Test<sp/>can<sp/>use<sp/>the<sp/>pthreads<sp/>library.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>didn&apos;t<sp/>tell<sp/>us<sp/>explicitly,<sp/>so<sp/>we<sp/>make<sp/>reasonable<sp/>assumptions<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>platforms<sp/>have<sp/>pthreads<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>disable<sp/>threading<sp/>support<sp/>in<sp/>Google<sp/>Test,<sp/>add<sp/>-DGTEST_HAS_PTHREAD=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>your<sp/>compiler<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(GTEST_OS_LINUX)<sp/>||<sp/>defined(GTEST_OS_MAC)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_HPUX)<sp/>||<sp/>defined(GTEST_OS_QNX)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="589"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_FREEBSD)<sp/>||<sp/>defined(GTEST_OS_NACL)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_NETBSD)<sp/>||<sp/>defined(GTEST_OS_FUCHSIA)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_DRAGONFLY)<sp/>||<sp/>defined(GTEST_OS_GNU_KFREEBSD)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_OPENBSD)<sp/>||<sp/>defined(GTEST_OS_HAIKU)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_GNU_HURD))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_PTHREAD<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_PTHREAD<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gtest-port.h<sp/>guarantees<sp/>to<sp/>#include<sp/>&lt;pthread.h&gt;<sp/>when<sp/>GTEST_HAS_PTHREAD<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>timespec<sp/>and<sp/>nanosleep,<sp/>used<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>clone(2)<sp/>is<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Usually<sp/>it<sp/>will<sp/>only<sp/>be<sp/>available<sp/>on<sp/>Linux,<sp/>excluding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Linux<sp/>on<sp/>the<sp/>Itanium<sp/>architecture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also<sp/>see<sp/>http://linux.die.net/man/2/clone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_CLONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>didn&apos;t<sp/>tell<sp/>us,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>figure<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_LINUX)<sp/>&amp;&amp;<sp/>!defined(__ia64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_LINUX_ANDROID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Android,<sp/>clone()<sp/>became<sp/>available<sp/>at<sp/>different<sp/>API<sp/>levels<sp/>for<sp/>each<sp/>32-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>architecture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__LP64__)<sp/>||<sp/>(defined(__arm__)<sp/>&amp;&amp;<sp/>__ANDROID_API__<sp/>&gt;=<sp/>9)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(__mips__)<sp/>&amp;&amp;<sp/>__ANDROID_API__<sp/>&gt;=<sp/>12)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(__i386__)<sp/>&amp;&amp;<sp/>__ANDROID_API__<sp/>&gt;=<sp/>17)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_CLONE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_CLONE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_CLONE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_CLONE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX<sp/>&amp;&amp;<sp/>!defined(__ia64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_CLONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>to<sp/>support<sp/>stream<sp/>redirection.<sp/>This<sp/>is<sp/>used<sp/>to<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>correctness<sp/>and<sp/>to<sp/>implement<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>we<sp/>assume<sp/>that<sp/>stream<sp/>redirection<sp/>is<sp/>supported<sp/>on<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platforms<sp/>except<sp/>known<sp/>mobile<sp/>/<sp/>embedded<sp/>ones.<sp/>Also,<sp/>if<sp/>the<sp/>port<sp/>doesn&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>file<sp/>system,<sp/>stream<sp/>redirection<sp/>is<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS_MOBILE)<sp/>||<sp/>defined(GTEST_OS_WINDOWS_PHONE)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_WINDOWS_RT)<sp/>||<sp/>defined(GTEST_OS_ESP8266)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_XTENSA)<sp/>||<sp/>defined(GTEST_OS_QURT)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_STREAM_REDIRECTION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_STREAM_REDIRECTION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>to<sp/>support<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pops<sp/>up<sp/>a<sp/>dialog<sp/>window<sp/>that<sp/>cannot<sp/>be<sp/>suppressed<sp/>programmatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(GTEST_OS_LINUX)<sp/>||<sp/>defined(GTEST_OS_CYGWIN)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_SOLARIS)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(defined(GTEST_OS_MAC)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_IOS))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(defined(GTEST_OS_WINDOWS_DESKTOP)<sp/>&amp;&amp;<sp/>_MSC_VER)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_WINDOWS_MINGW)<sp/>||<sp/>defined(GTEST_OS_AIX)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_HPUX)<sp/>||<sp/>defined(GTEST_OS_OPENBSD)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_QNX)<sp/>||<sp/>defined(GTEST_OS_FREEBSD)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_NETBSD)<sp/>||<sp/>defined(GTEST_OS_FUCHSIA)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_DRAGONFLY)<sp/>||<sp/>defined(GTEST_OS_GNU_KFREEBSD)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="663"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(GTEST_OS_HAIKU)<sp/>||<sp/>defined(GTEST_OS_GNU_HURD))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Death<sp/>tests<sp/>require<sp/>a<sp/>file<sp/>system<sp/>to<sp/>work<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_DEATH_TEST<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>to<sp/>support<sp/>type-driven<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Typed<sp/>tests<sp/>need<sp/>&lt;typeinfo&gt;<sp/>and<sp/>variadic<sp/>macros,<sp/>which<sp/>GCC,<sp/>VC++<sp/>8.0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sun<sp/>Pro<sp/>CC,<sp/>IBM<sp/>Visual<sp/>Age,<sp/>and<sp/>HP<sp/>aCC<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>||<sp/>defined(_MSC_VER)<sp/>||<sp/>defined(__SUNPRO_CC)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__IBMCPP__)<sp/>||<sp/>defined(__HP_aCC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_TYPED_TEST<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_TYPED_TEST_P<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>the<sp/>system<sp/>compiler<sp/>uses<sp/>UTF-16<sp/>for<sp/>encoding<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS)<sp/>||<sp/>defined(GTEST_OS_CYGWIN)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_AIX)<sp/>||<sp/>defined(GTEST_OS_OS2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_WIDE_STRING_USES_UTF16_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_WIDE_STRING_USES_UTF16_<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>test<sp/>results<sp/>can<sp/>be<sp/>streamed<sp/>to<sp/>a<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_LINUX)<sp/>||<sp/>defined(GTEST_OS_GNU_KFREEBSD)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_DRAGONFLY)<sp/>||<sp/>defined(GTEST_OS_FREEBSD)<sp/>||<sp/><sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_NETBSD)<sp/>||<sp/>defined(GTEST_OS_OPENBSD)<sp/>||<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_GNU_HURD)<sp/>||<sp/>defined(GTEST_OS_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_CAN_STREAM_RESULTS_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_CAN_STREAM_RESULTS_<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>some<sp/>utility<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>GNU<sp/>compiler<sp/>emits<sp/>a<sp/>warning<sp/>if<sp/>nested<sp/>&quot;if&quot;<sp/>statements<sp/>are<sp/>followed<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>&quot;else&quot;<sp/>statement<sp/>and<sp/>braces<sp/>are<sp/>not<sp/>used<sp/>to<sp/>explicitly<sp/>disambiguate<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;else&quot;<sp/>binding.<sp/><sp/>This<sp/>leads<sp/>to<sp/>problems<sp/>with<sp/>code<sp/>like:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(gate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ASSERT_*(condition)<sp/>&lt;&lt;<sp/>&quot;Some<sp/>message&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;switch<sp/>(0)<sp/>case<sp/>0:&quot;<sp/>idiom<sp/>is<sp/>used<sp/>to<sp/>suppress<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__INTEL_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor"><sp/><sp/>switch<sp/>(0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"><sp/><sp/>case<sp/>0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"><sp/><sp/>default:<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_HAVE_ATTRIBUTE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function-like<sp/>feature<sp/>checking<sp/>macro<sp/>that<sp/>is<sp/>a<sp/>wrapper<sp/>around</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`__has_attribute`,<sp/>which<sp/>is<sp/>defined<sp/>by<sp/>GCC<sp/>5+<sp/>and<sp/>Clang<sp/>and<sp/>evaluates<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nonzero<sp/>constant<sp/>integer<sp/>if<sp/>the<sp/>attribute<sp/>is<sp/>supported<sp/>or<sp/>0<sp/>if<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>evaluates<sp/>to<sp/>zero<sp/>if<sp/>`__has_attribute`<sp/>is<sp/>not<sp/>defined<sp/>by<sp/>the<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GCC:<sp/>https://gcc.gnu.org/gcc-5/changes.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clang:<sp/>https://clang.llvm.org/docs/LanguageExtensions.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAVE_ATTRIBUTE_(x)<sp/>__has_attribute(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAVE_ATTRIBUTE_(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_HAVE_FEATURE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function-like<sp/>feature<sp/>checking<sp/>macro<sp/>that<sp/>is<sp/>a<sp/>wrapper<sp/>around</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`__has_feature`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAVE_FEATURE_(x)<sp/>__has_feature(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAVE_FEATURE_(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>this<sp/>annotation<sp/>after<sp/>a<sp/>variable<sp/>or<sp/>parameter<sp/>declaration<sp/>to<sp/>tell<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler<sp/>the<sp/>variable/parameter<sp/>does<sp/>not<sp/>have<sp/>to<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_ATTRIBUTE_UNUSED_<sp/>int<sp/>foo<sp/>=<sp/>bar();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_ATTRIBUTE_(unused)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_UNUSED_<sp/>__attribute__((unused))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_UNUSED_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>this<sp/>annotation<sp/>before<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>printf<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_ATTRIBUTE_(format)<sp/>&amp;&amp;<sp/>defined(__MINGW_PRINTF_FORMAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MinGW<sp/>has<sp/>two<sp/>different<sp/>printf<sp/>implementations.<sp/>Ensure<sp/>the<sp/>format<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>the<sp/>selected<sp/>implementation.<sp/>See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_PRINTF_(string_index,<sp/>first_to_check)<sp/>\</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"><sp/><sp/>__attribute__((format(__MINGW_PRINTF_FORMAT,<sp/>string_index,<sp/>first_to_check)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_HAVE_ATTRIBUTE_(format)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_PRINTF_(string_index,<sp/>first_to_check)<sp/>\</highlight></codeline>
<codeline lineno="763"><highlight class="preprocessor"><sp/><sp/>__attribute__((format(printf,<sp/>string_index,<sp/>first_to_check)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_PRINTF_(string_index,<sp/>first_to_check)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tell<sp/>the<sp/>compiler<sp/>to<sp/>warn<sp/>about<sp/>unused<sp/>return<sp/>values<sp/>for<sp/>functions<sp/>declared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>this<sp/>macro.<sp/><sp/>The<sp/>macro<sp/>should<sp/>be<sp/>used<sp/>on<sp/>function<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>following<sp/>the<sp/>argument<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Sprocket*<sp/>AllocateSprocket()<sp/>GTEST_MUST_USE_RESULT_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_ATTRIBUTE_(warn_unused_result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_MUST_USE_RESULT_<sp/>__attribute__((warn_unused_result))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_MUST_USE_RESULT_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MS<sp/>C++<sp/>compiler<sp/>emits<sp/>warning<sp/>when<sp/>a<sp/>conditional<sp/>expression<sp/>is<sp/>compile<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constant.<sp/>In<sp/>some<sp/>contexts<sp/>this<sp/>warning<sp/>is<sp/>false<sp/>positive<sp/>and<sp/>needs<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suppressed.<sp/>Use<sp/>the<sp/>following<sp/>two<sp/>macros<sp/>in<sp/>such<sp/>cases:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_INTENTIONAL_CONST_COND_PUSH_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>while<sp/>(true)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_INTENTIONAL_CONST_COND_POP_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTENTIONAL_CONST_COND_PUSH_()<sp/>\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTENTIONAL_CONST_COND_POP_()<sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determine<sp/>whether<sp/>the<sp/>compiler<sp/>supports<sp/>Microsoft&apos;s<sp/>Structured<sp/>Exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Handling.<sp/><sp/>This<sp/>is<sp/>supported<sp/>by<sp/>several<sp/>Windows<sp/>compilers<sp/>but<sp/>generally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>exist<sp/>on<sp/>any<sp/>other<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>didn&apos;t<sp/>tell<sp/>us,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>figure<sp/>it<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>compilers<sp/>are<sp/>known<sp/>to<sp/>support<sp/>SEH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_SEH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assume<sp/>no<sp/>SEH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_SEH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(GTEST_HAS_MUTEX_AND_THREAD_LOCAL_<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(defined(GTEST_OS_WINDOWS)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_WINDOWS_PHONE)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>!defined(GTEST_OS_WINDOWS_RT))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>GTEST_HAS_PTHREAD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IS_THREADSAFE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>platforms<sp/>don&apos;t<sp/>support<sp/>including<sp/>these<sp/>threading<sp/>related<sp/>headers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_API_<sp/>qualifies<sp/>all<sp/>symbols<sp/>that<sp/>must<sp/>be<sp/>exported.<sp/>The<sp/>definitions<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>guarded<sp/>by<sp/>#ifndef<sp/>to<sp/>give<sp/>embedders<sp/>a<sp/>chance<sp/>to<sp/>define<sp/>GTEST_API_<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gtest/internal/custom/gtest-port.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_API_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_LINKED_AS_SHARED_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_API_<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_CREATE_SHARED_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_API_<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_HAVE_ATTRIBUTE_(visibility)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_API_<sp/>__attribute__((visibility(&quot;default&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_API_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_API_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_API_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_API_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_DEFAULT_DEATH_TEST_STYLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFAULT_DEATH_TEST_STYLE<sp/>&quot;fast&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_DEFAULT_DEATH_TEST_STYLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_ATTRIBUTE_(noinline)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>compiler<sp/>to<sp/>never<sp/>inline<sp/>a<sp/>given<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_NO_INLINE_<sp/>__attribute__((noinline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_NO_INLINE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_ATTRIBUTE_(disable_tail_calls)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>compiler<sp/>not<sp/>to<sp/>perform<sp/>tail<sp/>call<sp/>optimization<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>marked<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_NO_TAIL_CALL_<sp/>__attribute__((disable_tail_calls))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__NVCOMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_NO_TAIL_CALL_<sp/>\</highlight></codeline>
<codeline lineno="862"><highlight class="preprocessor"><sp/><sp/>__attribute__((optimize(&quot;no-optimize-sibling-calls&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_NO_TAIL_CALL_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_LIBCPP_VERSION<sp/>is<sp/>defined<sp/>by<sp/>the<sp/>libc++<sp/>library<sp/>from<sp/>the<sp/>LLVM<sp/>project.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_HAS_CXXABI_H_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GLIBCXX__)<sp/>||<sp/>(defined(_LIBCPP_VERSION)<sp/>&amp;&amp;<sp/>!defined(_MSC_VER))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_CXXABI_H_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_CXXABI_H_<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>level<sp/>attribute<sp/>to<sp/>disable<sp/>checking<sp/>for<sp/>use<sp/>of<sp/>uninitialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>when<sp/>built<sp/>with<sp/>MemorySanitizer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_ATTRIBUTE_(no_sanitize_memory)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_<sp/>__attribute__((no_sanitize_memory))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>level<sp/>attribute<sp/>to<sp/>disable<sp/>AddressSanitizer<sp/>instrumentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_ATTRIBUTE_(no_sanitize_address)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_<sp/>\</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"><sp/><sp/>__attribute__((no_sanitize_address))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>level<sp/>attribute<sp/>to<sp/>disable<sp/>HWAddressSanitizer<sp/>instrumentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_FEATURE_(hwaddress_sanitizer)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="894"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_HAVE_ATTRIBUTE_(no_sanitize)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_<sp/>\</highlight></codeline>
<codeline lineno="896"><highlight class="preprocessor"><sp/><sp/>__attribute__((no_sanitize(&quot;hwaddress&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>level<sp/>attribute<sp/>to<sp/>disable<sp/>ThreadSanitizer<sp/>instrumentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAVE_ATTRIBUTE_(no_sanitize_thread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_<sp/>__attribute((no_sanitize_thread))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Legacy<sp/>imports<sp/>for<sp/>backwards<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>New<sp/>code<sp/>should<sp/>use<sp/>std::<sp/>names<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::get;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::make_tuple;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::tuple;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::tuple_element;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::tuple_size;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>secret<sp/>type<sp/>that<sp/>Google<sp/>Test<sp/>users<sp/>don&apos;t<sp/>know<sp/>about.<sp/><sp/>It<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//<sp/>accessible<sp/>constructors<sp/>on<sp/>purpose.<sp/><sp/>Therefore<sp/>it&apos;s<sp/>impossible<sp/>to<sp/>create<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Secret<sp/>object,<sp/>which<sp/>is<sp/>what<sp/>we<sp/>want.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925" refid="classtesting_1_1internal_1_1Secret" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1Secret" kindref="compound">Secret</ref><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Secret" kindref="compound">Secret</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1Secret" kindref="compound">Secret</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="927"><highlight class="normal">};</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>for<sp/>suppressing<sp/>warnings<sp/>on<sp/>constant<sp/>condition.<sp/><sp/>It<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>&apos;condition&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsTrue(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>RE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_USES_RE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>almost<sp/>`using<sp/>RE<sp/>=<sp/>::RE2`,<sp/>except<sp/>it<sp/>is<sp/>copy-constructible,<sp/>and<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>needs<sp/>to<sp/>disambiguate<sp/>the<sp/>`std::string`,<sp/>`absl::string_view`,<sp/>and<sp/>`const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char*`<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>RE<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>RE(absl::string_view<sp/>regex)<sp/>:<sp/>regex_(regex)<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>RE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex)<sp/>:<sp/>RE(absl::string_view(regex))<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>RE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>regex)<sp/>:<sp/>RE(absl::string_view(regex))<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>RE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>other)<sp/>:<sp/>RE(other.pattern())<sp/>{}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>pattern()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex_.pattern();<sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FullMatch(absl::string_view<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RE2::FullMatch(str,<sp/>re.regex_);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PartialMatch(absl::string_view<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RE2::PartialMatch(str,<sp/>re.regex_);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>RE2<sp/>regex_;</highlight></codeline>
<codeline lineno="958"><highlight class="normal">};</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_USES_POSIX_RE)<sp/>||<sp/>defined(GTEST_USES_SIMPLE_RE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251<sp/>\</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>class<sp/>A<sp/>needs<sp/>to<sp/>have<sp/>dll-interface<sp/>to<sp/>be<sp/>used<sp/>by<sp/>clients<sp/>of<sp/>class<sp/>B<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>simple<sp/>C++<sp/>wrapper<sp/>for<sp/>&lt;regex.h&gt;.<sp/><sp/>It<sp/>uses<sp/>the<sp/>POSIX<sp/>Extended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regular<sp/>Expression<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal">class<sp/>GTEST_API_<sp/>RE<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>copy<sp/>constructor<sp/>is<sp/>required<sp/>by<sp/>the<sp/>Standard<sp/>to<sp/>initialize<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>references<sp/>from<sp/>r-values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>RE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>other)<sp/>{<sp/>Init(other.pattern());<sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>RE<sp/>from<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>RE(const<sp/>::std::string&amp;<sp/>regex)<sp/>{<sp/>Init(regex.c_str());<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>RE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex)<sp/>{<sp/>Init(regex);<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>~RE();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>regex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pattern_.c_str();<sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FullMatch(str,<sp/>re)<sp/>returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>regular<sp/>expression<sp/>re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matches<sp/>the<sp/>entire<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PartialMatch(str,<sp/>re)<sp/>returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>regular<sp/>expression<sp/>re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matches<sp/>a<sp/>substring<sp/>of<sp/>str<sp/>(including<sp/>str<sp/>itself).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FullMatch(const<sp/>::std::string&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FullMatch(str.c_str(),<sp/>re);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PartialMatch(const<sp/>::std::string&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PartialMatch(str.c_str(),<sp/>re);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FullMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PartialMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE&amp;<sp/>re);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>std::string<sp/>pattern_;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_valid_;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_USES_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>regex_t<sp/>full_regex_;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>FullMatch().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>regex_t<sp/>partial_regex_;<sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>PartialMatch().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USES_SIMPLE_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>std::string<sp/>full_pattern_;<sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>FullMatch();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4251</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>::testing::internal::RE<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>source<sp/>file<sp/>path<sp/>and<sp/>a<sp/>line<sp/>number<sp/>as<sp/>they<sp/>would<sp/>appear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>an<sp/>error<sp/>message<sp/>from<sp/>the<sp/>compiler<sp/>used<sp/>to<sp/>compile<sp/>this<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal">GTEST_API_<sp/>::std::string<sp/>FormatFileLocation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>file<sp/>location<sp/>for<sp/>compiler-independent<sp/>XML<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Although<sp/>this<sp/>function<sp/>is<sp/>not<sp/>platform<sp/>dependent,<sp/>we<sp/>put<sp/>it<sp/>next<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FormatFileLocation<sp/>in<sp/>order<sp/>to<sp/>contrast<sp/>the<sp/>two<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal">GTEST_API_<sp/>::std::string<sp/>FormatCompilerIndependentFileLocation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>logging<sp/>utilities:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_LOG_(severity)<sp/>-<sp/>logs<sp/>messages<sp/>at<sp/>the<sp/>specified<sp/>severity<sp/>level.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>itself<sp/>is<sp/>streamed<sp/>into<sp/>the<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>LogToStderr()<sp/><sp/>-<sp/>directs<sp/>all<sp/>log<sp/>messages<sp/>to<sp/>stderr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>FlushInfoLog()<sp/>-<sp/>flushes<sp/>informational<sp/>log<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>GTestLogSeverity<sp/>{<sp/>GTEST_INFO,<sp/>GTEST_WARNING,<sp/>GTEST_ERROR,<sp/>GTEST_FATAL<sp/>};</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>log<sp/>entry<sp/>severity,<sp/>provides<sp/>a<sp/>stream<sp/>object<sp/>for<sp/>streaming<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>log<sp/>message,<sp/>and<sp/>terminates<sp/>the<sp/>message<sp/>with<sp/>a<sp/>newline<sp/>when<sp/>going<sp/>out<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035" refid="classtesting_1_1internal_1_1GTestLog" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1internal_1_1GTestLog" kindref="compound">GTestLog</ref><sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1GTestLog" kindref="compound">GTestLog</ref>(GTestLogSeverity<sp/>severity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flushes<sp/>the<sp/>buffers<sp/>and,<sp/>if<sp/>severity<sp/>is<sp/>GTEST_FATAL,<sp/>aborts<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1GTestLog" kindref="compound">~GTestLog</ref>();</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>::std::ostream&amp;<sp/>GetStream()<sp/>{<sp/>return<sp/>::std::cerr;<sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GTestLogSeverity<sp/>severity_;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1GTestLog" kindref="compound">GTestLog</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1GTestLog" kindref="compound">GTestLog</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1GTestLog" kindref="compound">GTestLog</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1GTestLog" kindref="compound">GTestLog</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_LOG_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_LOG_(severity)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1054"><highlight class="preprocessor"><sp/><sp/>::testing::internal::GTestLog(::testing::internal::GTEST_##severity,<sp/>\</highlight></codeline>
<codeline lineno="1055"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1056"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>.GetStream()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogToStderr()<sp/>{}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlushInfoLog()<sp/>{<sp/>fflush(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!defined(GTEST_LOG_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_CHECK_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_CHECK_<sp/>is<sp/>an<sp/>all-mode<sp/>assert.<sp/>It<sp/>aborts<sp/>the<sp/>program<sp/>if<sp/>the<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>satisfied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Synopsis:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>GTEST_CHECK_(boolean_condition);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>GTEST_CHECK_(boolean_condition)<sp/>&lt;&lt;<sp/>&quot;Additional<sp/>message&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>This<sp/>checks<sp/>the<sp/>condition<sp/>and<sp/>if<sp/>the<sp/>condition<sp/>is<sp/>not<sp/>satisfied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>it<sp/>prints<sp/>message<sp/>about<sp/>the<sp/>condition<sp/>violation,<sp/>including<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>condition<sp/>itself,<sp/>plus<sp/>additional<sp/>message<sp/>streamed<sp/>into<sp/>it,<sp/>if<sp/>any,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>then<sp/>it<sp/>aborts<sp/>the<sp/>program.<sp/>It<sp/>aborts<sp/>the<sp/>program<sp/>irrespective<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>whether<sp/>it<sp/>is<sp/>built<sp/>in<sp/>the<sp/>debug<sp/>mode<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_CHECK_(condition)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1079"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1080"><highlight class="preprocessor"><sp/><sp/>if<sp/>(::testing::internal::IsTrue(condition))<sp/>\</highlight></codeline>
<codeline lineno="1081"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1082"><highlight class="preprocessor"><sp/><sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1083"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_LOG_(FATAL)<sp/>&lt;&lt;<sp/>&quot;Condition<sp/>&quot;</highlight><highlight class="normal"><sp/>#condition<sp/>&quot;<sp/>failed.<sp/>&quot;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!defined(GTEST_CHECK_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>all-mode<sp/>assert<sp/>to<sp/>verify<sp/>that<sp/>the<sp/>given<sp/>POSIX-style<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>returns<sp/>0<sp/>(indicating<sp/>success).<sp/><sp/>Known<sp/>limitation:<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>expand<sp/>to<sp/>a<sp/>balanced<sp/>&apos;if&apos;<sp/>statement,<sp/>so<sp/>enclose<sp/>the<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>{}<sp/>if<sp/>you<sp/>need<sp/>to<sp/>use<sp/>it<sp/>as<sp/>the<sp/>only<sp/>statement<sp/>in<sp/>an<sp/>&apos;if&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>branch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_CHECK_POSIX_SUCCESS_(posix_call)<sp/>\</highlight></codeline>
<codeline lineno="1092"><highlight class="preprocessor"><sp/><sp/>if<sp/>(const<sp/>int<sp/>gtest_error<sp/>=<sp/>(posix_call))<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1093"><highlight class="preprocessor"><sp/><sp/>GTEST_LOG_(FATAL)<sp/>&lt;&lt;<sp/>#posix_call<sp/>&lt;&lt;<sp/>&quot;failed<sp/>with<sp/>error<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gtest_error</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Transforms<sp/>&quot;T&quot;<sp/>into<sp/>&quot;const<sp/>T&amp;&quot;<sp/>according<sp/>to<sp/>standard<sp/>reference<sp/>collapsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rules<sp/>(this<sp/>is<sp/>only<sp/>needed<sp/>as<sp/>a<sp/>backport<sp/>for<sp/>C++98<sp/>compilers<sp/>that<sp/>do<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>reference<sp/>collapsing).<sp/>Specifically,<sp/>it<sp/>transforms:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==&gt;<sp/>const<sp/>char&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char<sp/><sp/><sp/>==&gt;<sp/>const<sp/>char&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>char&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==&gt;<sp/>char&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char&amp;<sp/><sp/>==&gt;<sp/>const<sp/>char&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>non-const<sp/>reference<sp/>will<sp/>not<sp/>have<sp/>&quot;const&quot;<sp/>added.<sp/>This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard,<sp/>and<sp/>necessary<sp/>so<sp/>that<sp/>&quot;T&quot;<sp/>can<sp/>always<sp/>bind<sp/>to<sp/>&quot;const<sp/>T&amp;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1107" refid="structtesting_1_1internal_1_1ConstRef" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ConstRef" kindref="compound">ConstRef</ref><sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>type;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1111" refid="structtesting_1_1internal_1_1ConstRef_3_01T_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1ConstRef" kindref="compound">ConstRef</ref>&lt;T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T&amp;<sp/>type;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>argument<sp/>T<sp/>must<sp/>depend<sp/>on<sp/>some<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REFERENCE_TO_CONST_(T)<sp/>\</highlight></codeline>
<codeline lineno="1117"><highlight class="preprocessor"><sp/><sp/>typename<sp/>::testing::internal::ConstRef&lt;T&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>USER<sp/>CODE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>ImplicitCast_<sp/>as<sp/>a<sp/>safe<sp/>version<sp/>of<sp/>static_cast<sp/>for<sp/>upcasting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>type<sp/>hierarchy<sp/>(e.g.<sp/>casting<sp/>a<sp/>Foo*<sp/>to<sp/>a<sp/>SuperclassOfFoo*<sp/>or<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>Foo*).<sp/><sp/>When<sp/>you<sp/>use<sp/>ImplicitCast_,<sp/>the<sp/>compiler<sp/>checks<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>cast<sp/>is<sp/>safe.<sp/><sp/>Such<sp/>explicit<sp/>ImplicitCast_s<sp/>are<sp/>necessary<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>surprisingly<sp/>many<sp/>situations<sp/>where<sp/>C++<sp/>demands<sp/>an<sp/>exact<sp/>type<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>an<sp/>argument<sp/>type<sp/>convertible<sp/>to<sp/>a<sp/>target<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>syntax<sp/>for<sp/>using<sp/>ImplicitCast_<sp/>is<sp/>the<sp/>same<sp/>as<sp/>for<sp/>static_cast:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ImplicitCast_&lt;ToType&gt;(expr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ImplicitCast_<sp/>would<sp/>have<sp/>been<sp/>part<sp/>of<sp/>the<sp/>C++<sp/>standard<sp/>library,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>proposal<sp/>was<sp/>submitted<sp/>too<sp/>late.<sp/><sp/>It<sp/>will<sp/>probably<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>its<sp/>way<sp/>into<sp/>the<sp/>language<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>relatively<sp/>ugly<sp/>name<sp/>is<sp/>intentional.<sp/>It<sp/>prevents<sp/>clashes<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>similar<sp/>functions<sp/>users<sp/>may<sp/>have<sp/>(e.g.,<sp/>implicit_cast).<sp/>The<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>alone<sp/>is<sp/>not<sp/>enough<sp/>because<sp/>the<sp/>function<sp/>can<sp/>be<sp/>found<sp/>by<sp/>ADL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1To" kindref="compound">To</ref><sp/>ImplicitCast_(<ref refid="classtesting_1_1internal_1_1To" kindref="compound">To</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Downcasts<sp/>the<sp/>pointer<sp/>of<sp/>type<sp/>Base<sp/>to<sp/>Derived.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Derived<sp/>must<sp/>be<sp/>a<sp/>subclass<sp/>of<sp/>Base.<sp/>The<sp/>parameter<sp/>MUST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>point<sp/>to<sp/>a<sp/>class<sp/>of<sp/>type<sp/>Derived,<sp/>not<sp/>any<sp/>subclass<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>RTTI<sp/>is<sp/>available,<sp/>the<sp/>function<sp/>performs<sp/>a<sp/>runtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>enforce<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">Derived*<sp/>CheckedDowncastToActualType(Base*<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;Base,<sp/>Derived&gt;::value,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;target<sp/>type<sp/>not<sp/>derived<sp/>from<sp/>source<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>GTEST_CHECK_(base<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">Derived*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(base)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Derived*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(base);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>the<sp/>stderr<sp/>capturer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>CaptureStdout<sp/><sp/><sp/><sp/><sp/>-<sp/>starts<sp/>capturing<sp/>stdout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GetCapturedStdout<sp/>-<sp/>stops<sp/>capturing<sp/>stdout<sp/>and<sp/>returns<sp/>the<sp/>captured<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>CaptureStderr<sp/><sp/><sp/><sp/><sp/>-<sp/>starts<sp/>capturing<sp/>stderr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GetCapturedStderr<sp/>-<sp/>stops<sp/>capturing<sp/>stderr<sp/>and<sp/>returns<sp/>the<sp/>captured<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>GetCapturedStderr();</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>size<sp/>(in<sp/>bytes)<sp/>of<sp/>a<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetFileSize(FILE*<sp/>file);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>the<sp/>entire<sp/>content<sp/>of<sp/>a<sp/>file<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">GTEST_API_<sp/>std::string<sp/>ReadEntireFile(FILE*<sp/>file);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>command<sp/>line<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">GTEST_API_<sp/>std::vector&lt;std::string&gt;<sp/>GetArgvs();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>GetInjectableArgvs();</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deprecated:<sp/>pass<sp/>the<sp/>args<sp/>vector<sp/>by<sp/>value<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetInjectableArgvs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>new_argvs);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetInjectableArgvs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>new_argvs);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearInjectableArgvs();</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>synchronization<sp/>primitives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provides<sp/>leak-safe<sp/>Windows<sp/>kernel<sp/>handle<sp/>ownership.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>in<sp/>death<sp/>tests<sp/>and<sp/>in<sp/>threading<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>AutoHandle<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>that<sp/>Win32<sp/>HANDLE<sp/>type<sp/>is<sp/>equivalent<sp/>to<sp/>void*.<sp/>Doing<sp/>so<sp/>allows<sp/>us<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>including<sp/>&lt;windows.h&gt;<sp/>in<sp/>this<sp/>header<sp/>file.<sp/>Including<sp/>&lt;windows.h&gt;<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>undesirable<sp/>because<sp/>it<sp/>defines<sp/>a<sp/>lot<sp/>of<sp/>symbols<sp/>and<sp/>macros<sp/>that<sp/>tend<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conflict<sp/>with<sp/>client<sp/>code.<sp/>This<sp/>assumption<sp/>is<sp/>verified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>WindowsTypesTest.HANDLEIsVoidStar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Handle;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>AutoHandle();</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>AutoHandle(Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>~AutoHandle();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>Handle<sp/>Get()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset();</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset(Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>handle<sp/>is<sp/>a<sp/>valid<sp/>handle<sp/>object<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsCloseable()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>Handle<sp/>handle_;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>AutoHandle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AutoHandle&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>AutoHandle&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AutoHandle&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_NOTIFICATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notification<sp/>has<sp/>already<sp/>been<sp/>imported<sp/>into<sp/>the<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251<sp/>\</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>class<sp/>A<sp/>needs<sp/>to<sp/>have<sp/>dll-interface<sp/>to<sp/>be<sp/>used<sp/>by<sp/>clients<sp/>of<sp/>class<sp/>B<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>a<sp/>controller<sp/>thread<sp/>to<sp/>pause<sp/>execution<sp/>of<sp/>newly<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>threads<sp/>until<sp/>notified.<sp/><sp/>Instances<sp/>of<sp/>this<sp/>class<sp/>must<sp/>be<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>destroyed<sp/>in<sp/>the<sp/>controller<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>only<sp/>for<sp/>testing<sp/>Google<sp/>Test&apos;s<sp/>own<sp/>constructs.<sp/>Do<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>it<sp/>in<sp/>user<sp/>tests,<sp/>either<sp/>directly<sp/>or<sp/>indirectly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(b/203539622):<sp/>Replace<sp/>unconditionally<sp/>with<sp/>absl::Notification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal">class<sp/>GTEST_API_<sp/>Notification<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>Notification()<sp/>:<sp/>notified_(false)<sp/>{}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>Notification(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Notification&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>Notification&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Notification&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>all<sp/>threads<sp/>created<sp/>with<sp/>this<sp/>notification<sp/>to<sp/>start.<sp/>Must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>called<sp/>from<sp/>the<sp/>controller<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Notify()<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mu_);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>notified_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>cv_.notify_all();</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>until<sp/>the<sp/>controller<sp/>thread<sp/>notifies.<sp/>Must<sp/>be<sp/>called<sp/>from<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaitForNotification()<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(mu_);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>cv_.wait(lock,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notified_;<sp/>});</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>std::mutex<sp/>mu_;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>std::condition_variable<sp/>cv_;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>notified_;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4251</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_NOTIFICATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>MinGW,<sp/>we<sp/>can<sp/>have<sp/>both<sp/>GTEST_OS_WINDOWS<sp/>and<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined,<sp/>but<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>use<sp/>MinGW&apos;s<sp/>pthreads<sp/>implementation,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>conformance<sp/>problems<sp/>with<sp/>some<sp/>versions<sp/>of<sp/>the<sp/>POSIX<sp/>standard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PTHREAD<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_WINDOWS_MINGW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>a<sp/>C-function,<sp/>ThreadFuncWithCLinkage<sp/>cannot<sp/>be<sp/>templated<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Consequently,<sp/>it<sp/>cannot<sp/>select<sp/>a<sp/>correct<sp/>instantiation<sp/>of<sp/>ThreadWithParam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>order<sp/>to<sp/>call<sp/>its<sp/>Run().<sp/>Introducing<sp/>ThreadWithParamBase<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-templated<sp/>base<sp/>class<sp/>for<sp/>ThreadWithParam<sp/>allows<sp/>us<sp/>to<sp/>bypass<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ThreadWithParamBase<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ThreadWithParamBase()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pthread_create()<sp/>accepts<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>function<sp/>type<sp/>with<sp/>the<sp/>C<sp/>linkage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>According<sp/>to<sp/>the<sp/>Standard<sp/>(7.5/1),<sp/>function<sp/>types<sp/>with<sp/>different<sp/>linkages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>different<sp/>even<sp/>if<sp/>they<sp/>are<sp/>otherwise<sp/>identical.<sp/><sp/>Some<sp/>compilers<sp/>(for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>example,<sp/>SunStudio)<sp/>treat<sp/>them<sp/>as<sp/>different<sp/>types.<sp/><sp/>Since<sp/>class<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cannot<sp/>be<sp/>defined<sp/>with<sp/>C-linkage<sp/>we<sp/>need<sp/>to<sp/>define<sp/>a<sp/>free<sp/>C-function<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pass<sp/>into<sp/>pthread_create().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ThreadFuncWithCLinkage(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ThreadWithParamBase*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(thread)-&gt;Run();</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>class<sp/>for<sp/>testing<sp/>Google<sp/>Test&apos;s<sp/>multi-threading<sp/>constructs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>use<sp/>it,<sp/>write:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>ThreadFunc(int<sp/>param)<sp/>{<sp/>/*<sp/>Do<sp/>things<sp/>with<sp/>param<sp/>*/<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Notification<sp/>thread_can_start;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>The<sp/>thread_can_start<sp/>parameter<sp/>is<sp/>optional;<sp/>you<sp/>can<sp/>supply<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ThreadWithParam&lt;int&gt;<sp/>thread(&amp;ThreadFunc,<sp/>5,<sp/>&amp;thread_can_start);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>thread_can_start.Notify();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>classes<sp/>are<sp/>only<sp/>for<sp/>testing<sp/>Google<sp/>Test&apos;s<sp/>own<sp/>constructs.<sp/>Do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>use<sp/>them<sp/>in<sp/>user<sp/>tests,<sp/>either<sp/>directly<sp/>or<sp/>indirectly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ThreadWithParam<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ThreadWithParamBase<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UserThreadFunc(T);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>ThreadWithParam(UserThreadFunc*<sp/>func,<sp/>T<sp/>param,<sp/>Notification*<sp/>thread_can_start)</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>func_(func),</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_(param),</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_can_start_(thread_can_start),</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_(false)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadWithParamBase*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>thread<sp/>can<sp/>be<sp/>created<sp/>only<sp/>after<sp/>all<sp/>fields<sp/>except<sp/>thread_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>been<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_create(&amp;thread_,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;ThreadFuncWithCLinkage,<sp/>base));</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>~ThreadWithParam()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>Join();<sp/>}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Join()<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!finished_)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_join(thread_,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_can_start_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>thread_can_start_-&gt;WaitForNotification();</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>func_(param_);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>UserThreadFunc*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>func_;<sp/><sp/></highlight><highlight class="comment">//<sp/>User-supplied<sp/>thread<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>param_;<sp/><sp/></highlight><highlight class="comment">//<sp/>User-supplied<sp/>parameter<sp/>to<sp/>the<sp/>thread<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>non-NULL,<sp/>used<sp/>to<sp/>block<sp/>execution<sp/>until<sp/>the<sp/>controller<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>notifies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>Notification*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>thread_can_start_;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finished_;<sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>we<sp/>know<sp/>that<sp/>the<sp/>thread<sp/>function<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>pthread_t<sp/>thread_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>native<sp/>thread<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>ThreadWithParam(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadWithParam&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>ThreadWithParam&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadWithParam&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>GTEST_HAS_PTHREAD<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mutex<sp/>and<sp/>ThreadLocal<sp/>have<sp/>already<sp/>been<sp/>imported<sp/>into<sp/>the<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_OS_WINDOWS)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_WINDOWS_PHONE)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(GTEST_OS_WINDOWS_RT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mutex<sp/>implements<sp/>mutex<sp/>on<sp/>Windows<sp/>platforms.<sp/><sp/>It<sp/>is<sp/>used<sp/>in<sp/>conjunction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>class<sp/>MutexLock:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Mutex<sp/>mutex;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MutexLock<sp/>lock(&amp;mutex);<sp/><sp/>//<sp/>Acquires<sp/>the<sp/>mutex<sp/>and<sp/>releases<sp/>it<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>end<sp/>of<sp/>the<sp/>current<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>static<sp/>Mutex<sp/>*must*<sp/>be<sp/>defined<sp/>or<sp/>declared<sp/>using<sp/>one<sp/>of<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macros:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(A<sp/>non-static<sp/>Mutex<sp/>is<sp/>defined/declared<sp/>in<sp/>the<sp/>usual<sp/>way).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>Mutex<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>MutexType<sp/>{<sp/>kStatic<sp/>=<sp/>0,<sp/>kDynamic<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>rely<sp/>on<sp/>kStaticMutex<sp/>being<sp/>0<sp/>as<sp/>it<sp/>is<sp/>to<sp/>what<sp/>the<sp/>linker<sp/>initializes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type_<sp/>in<sp/>static<sp/>mutexes.<sp/><sp/>critical_section_<sp/>will<sp/>be<sp/>initialized<sp/>lazily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>ThreadSafeLazyInit().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>StaticConstructorSelector<sp/>{<sp/>kStaticMutex<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>constructor<sp/>intentionally<sp/>does<sp/>nothing.<sp/><sp/>It<sp/>relies<sp/>on<sp/>type_<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>statically<sp/>initialized<sp/>to<sp/>0<sp/>(effectively<sp/>setting<sp/>it<sp/>to<sp/>kStatic)<sp/>and<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ThreadSafeLazyInit()<sp/>to<sp/>lazily<sp/>initialize<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Mutex(StaticConstructorSelector<sp/></highlight><highlight class="comment">/*dummy*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>Mutex();</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>~Mutex();</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Lock();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Unlock();</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>nothing<sp/>if<sp/>the<sp/>current<sp/>thread<sp/>holds<sp/>the<sp/>mutex.<sp/>Otherwise,<sp/>crashes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>high<sp/>probability.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertHeld();</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializes<sp/>owner_thread_id_<sp/>and<sp/>critical_section_<sp/>in<sp/>static<sp/>mutexes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ThreadSafeLazyInit();</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Per<sp/>https://blogs.msdn.microsoft.com/oldnewthing/20040223-00/?p=40503,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>assume<sp/>that<sp/>0<sp/>is<sp/>an<sp/>invalid<sp/>value<sp/>for<sp/>thread<sp/>IDs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>owner_thread_id_;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>static<sp/>mutexes,<sp/>we<sp/>rely<sp/>on<sp/>these<sp/>members<sp/>being<sp/>initialized<sp/>to<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>linker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>MutexType<sp/>type_;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>critical_section_init_phase_;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>GTEST_CRITICAL_SECTION*<sp/>critical_section_;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>Mutex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mutex&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>Mutex&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mutex&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_STATIC_MUTEX_(mutex)<sp/>\</highlight></codeline>
<codeline lineno="1420"><highlight class="preprocessor"><sp/><sp/>extern<sp/>::testing::internal::Mutex<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_STATIC_MUTEX_(mutex)<sp/>\</highlight></codeline>
<codeline lineno="1423"><highlight class="preprocessor"><sp/><sp/>::testing::internal::Mutex<sp/>mutex(::testing::internal::Mutex::kStaticMutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>name<sp/>this<sp/>class<sp/>MutexLock<sp/>because<sp/>the<sp/>ctor<sp/>declaration<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conflict<sp/>with<sp/>a<sp/>macro<sp/>named<sp/>MutexLock,<sp/>which<sp/>is<sp/>defined<sp/>on<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platforms.<sp/>That<sp/>macro<sp/>is<sp/>used<sp/>as<sp/>a<sp/>defensive<sp/>measure<sp/>to<sp/>prevent<sp/>against</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inadvertent<sp/>misuses<sp/>of<sp/>MutexLock<sp/>like<sp/>&quot;MutexLock(&amp;mu)&quot;<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;MutexLock<sp/>l(&amp;mu)&quot;.<sp/><sp/>Hence<sp/>the<sp/>typedef<sp/>trick<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTestMutexLock<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>GTestMutexLock(Mutex*<sp/>mutex)<sp/>:<sp/>mutex_(mutex)<sp/>{<sp/>mutex_-&gt;Lock();<sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>~GTestMutexLock()<sp/>{<sp/>mutex_-&gt;Unlock();<sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>Mutex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mutex_;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>GTestMutexLock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GTestMutexLock&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>GTestMutexLock&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GTestMutexLock&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTestMutexLock<sp/>MutexLock;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>ValueHolder&lt;T&gt;.<sp/><sp/>Allows<sp/>a<sp/>caller<sp/>to<sp/>hold<sp/>and<sp/>delete<sp/>a<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>without<sp/>knowing<sp/>its<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ThreadLocalValueHolderBase<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ThreadLocalValueHolderBase()<sp/>{}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provides<sp/>a<sp/>way<sp/>for<sp/>a<sp/>thread<sp/>to<sp/>send<sp/>notifications<sp/>to<sp/>a<sp/>ThreadLocal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regardless<sp/>of<sp/>its<sp/>parameter<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ThreadLocalBase<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>ValueHolder&lt;T&gt;<sp/>object<sp/>holding<sp/>a<sp/>default<sp/>value<sp/>passed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>ThreadLocal&lt;T&gt;&apos;s<sp/>constructor<sp/>and<sp/>returns<sp/>it.<sp/><sp/>It<sp/>is<sp/>the<sp/>caller&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>responsibility<sp/>not<sp/>to<sp/>call<sp/>this<sp/>when<sp/>the<sp/>ThreadLocal&lt;T&gt;<sp/>instance<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>a<sp/>value<sp/>on<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ThreadLocalValueHolderBase*<sp/>NewValueForCurrentThread()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>ThreadLocalBase()<sp/>{}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ThreadLocalBase()<sp/>{}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>ThreadLocalBase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocalBase&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>ThreadLocalBase&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocalBase&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maps<sp/>a<sp/>thread<sp/>to<sp/>a<sp/>set<sp/>of<sp/>ThreadLocals<sp/>that<sp/>have<sp/>values<sp/>instantiated<sp/>on<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thread<sp/>and<sp/>notifies<sp/>them<sp/>when<sp/>the<sp/>thread<sp/>exits.<sp/><sp/>A<sp/>ThreadLocal<sp/>instance<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expected<sp/>to<sp/>persist<sp/>until<sp/>all<sp/>threads<sp/>it<sp/>has<sp/>values<sp/>on<sp/>have<sp/>terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>ThreadLocalRegistry<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>thread_local_instance<sp/>as<sp/>having<sp/>value<sp/>on<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>value<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>identify<sp/>the<sp/>thread<sp/>from<sp/>other<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ThreadLocalValueHolderBase*<sp/>GetValueOnCurrentThread(</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocalBase*<sp/>thread_local_instance);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoked<sp/>when<sp/>a<sp/>ThreadLocal<sp/>instance<sp/>is<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnThreadLocalDestroyed(</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocalBase*<sp/>thread_local_instance);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>ThreadWithParamBase<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Join();</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Runnable<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Runnable()<sp/>{}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>ThreadWithParamBase(Runnable*<sp/>runnable,<sp/>Notification*<sp/>thread_can_start);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ThreadWithParamBase();</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>thread_;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>class<sp/>for<sp/>testing<sp/>Google<sp/>Test&apos;s<sp/>multi-threading<sp/>constructs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ThreadWithParam<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ThreadWithParamBase<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UserThreadFunc(T);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>ThreadWithParam(UserThreadFunc*<sp/>func,<sp/>T<sp/>param,<sp/>Notification*<sp/>thread_can_start)</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ThreadWithParamBase(new<sp/>RunnableImpl(func,<sp/>param),<sp/>thread_can_start)<sp/>{}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ThreadWithParam()<sp/>{}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RunnableImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Runnable<sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>RunnableImpl(UserThreadFunc*<sp/>func,<sp/>T<sp/>param)<sp/>:<sp/>func_(func),<sp/>param_(param)<sp/>{}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~RunnableImpl()<sp/>{}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run()<sp/>{<sp/>func_(param_);<sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>UserThreadFunc*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>func_;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>param_;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>RunnableImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RunnableImpl&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>RunnableImpl&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RunnableImpl&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>ThreadWithParam(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadWithParam&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>ThreadWithParam&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadWithParam&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>thread-local<sp/>storage<sp/>on<sp/>Windows<sp/>systems.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Thread<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ThreadLocal&lt;int&gt;<sp/>tl(100);<sp/><sp/>//<sp/>100<sp/>is<sp/>the<sp/>default<sp/>value<sp/>for<sp/>each<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Thread<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tl.set(150);<sp/><sp/>//<sp/>Changes<sp/>the<sp/>value<sp/>for<sp/>thread<sp/>2<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_EQ(150,<sp/>tl.get());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Thread<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_EQ(100,<sp/>tl.get());<sp/><sp/>//<sp/>In<sp/>thread<sp/>1,<sp/>tl<sp/>has<sp/>the<sp/>original<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tl.set(200);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_EQ(200,<sp/>tl.get());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>template<sp/>type<sp/>argument<sp/>T<sp/>must<sp/>have<sp/>a<sp/>public<sp/>copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>addition,<sp/>the<sp/>default<sp/>ThreadLocal<sp/>constructor<sp/>requires<sp/>T<sp/>to<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>public<sp/>default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>users<sp/>of<sp/>a<sp/>TheadLocal<sp/>instance<sp/>have<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>all<sp/>but<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>threads<sp/>(including<sp/>the<sp/>main<sp/>one)<sp/>using<sp/>that<sp/>instance<sp/>have<sp/>exited<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destroying<sp/>it.<sp/>Otherwise,<sp/>the<sp/>per-thread<sp/>objects<sp/>managed<sp/>for<sp/>them<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ThreadLocal<sp/>instance<sp/>are<sp/>not<sp/>guaranteed<sp/>to<sp/>be<sp/>destroyed<sp/>on<sp/>all<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>only<sp/>uses<sp/>global<sp/>ThreadLocal<sp/>objects.<sp/><sp/>That<sp/>means<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>die<sp/>after<sp/>main()<sp/>has<sp/>returned.<sp/><sp/>Therefore,<sp/>no<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>managed<sp/>by<sp/>Google<sp/>Test<sp/>will<sp/>be<sp/>leaked<sp/>as<sp/>long<sp/>as<sp/>all<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>Google<sp/>Test<sp/>have<sp/>exited<sp/>when<sp/>main()<sp/>returns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ThreadLocal<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ThreadLocalBase<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>ThreadLocal()<sp/>:<sp/>default_factory_(new<sp/>DefaultValueHolderFactory())<sp/>{}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ThreadLocal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>default_factory_(new<sp/>InstanceValueHolderFactory(value))<sp/>{}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>~ThreadLocal()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>ThreadLocalRegistry::OnThreadLocalDestroyed(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>T*<sp/>pointer()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetOrCreateValue();<sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>pointer()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetOrCreateValue();<sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pointer();<sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{<sp/>*pointer()<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Holds<sp/>a<sp/>value<sp/>of<sp/>T.<sp/><sp/>Can<sp/>be<sp/>deleted<sp/>via<sp/>its<sp/>base<sp/>class<sp/>without<sp/>the<sp/>caller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>knowing<sp/>the<sp/>type<sp/>of<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ValueHolder<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ThreadLocalValueHolderBase<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder()<sp/>:<sp/>value_()<sp/>{}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ValueHolder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>pointer()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;value_;<sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueHolder&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueHolder&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/>T*<sp/>GetOrCreateValue()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ValueHolder*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThreadLocalRegistry::GetValueOnCurrentThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;pointer();</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/>ThreadLocalValueHolderBase*<sp/>NewValueForCurrentThread()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_factory_-&gt;MakeNewHolder();</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ValueHolderFactory<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolderFactory()<sp/>{}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ValueHolderFactory()<sp/>{}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueHolder*<sp/>MakeNewHolder()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolderFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueHolderFactory&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolderFactory&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueHolderFactory&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DefaultValueHolderFactory<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ValueHolderFactory<sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultValueHolderFactory()<sp/>{}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder*<sp/>MakeNewHolder()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueHolder();<sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultValueHolderFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DefaultValueHolderFactory&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultValueHolderFactory&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DefaultValueHolderFactory&amp;)<sp/>=</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">InstanceValueHolderFactory<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ValueHolderFactory<sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>InstanceValueHolderFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder*<sp/>MakeNewHolder()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueHolder(value_);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>value_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>for<sp/>each<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>InstanceValueHolderFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstanceValueHolderFactory&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>InstanceValueHolderFactory&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstanceValueHolderFactory&amp;)<sp/>=</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;ValueHolderFactory&gt;<sp/>default_factory_;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>ThreadLocal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocal&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>ThreadLocal&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocal&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MutexBase<sp/>and<sp/>Mutex<sp/>implement<sp/>mutex<sp/>on<sp/>pthreads-based<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MutexBase<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Acquires<sp/>this<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Lock()<sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&amp;mutex_));</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>owner_<sp/>=<sp/>pthread_self();</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>has_owner_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Releases<sp/>this<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Unlock()<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>lock<sp/>is<sp/>being<sp/>released<sp/>the<sp/>owner_<sp/>field<sp/>should<sp/>no<sp/>longer<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>considered<sp/>valid.<sp/>We<sp/>don&apos;t<sp/>protect<sp/>writing<sp/>to<sp/>has_owner_<sp/>here,<sp/>as<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>caller&apos;s<sp/>responsibility<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>current<sp/>thread<sp/>holds<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mutex<sp/>when<sp/>this<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>has_owner_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&amp;mutex_));</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>nothing<sp/>if<sp/>the<sp/>current<sp/>thread<sp/>holds<sp/>the<sp/>mutex.<sp/>Otherwise,<sp/>crashes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>high<sp/>probability.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertHeld()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_(has_owner_<sp/>&amp;&amp;<sp/>pthread_equal(owner_,<sp/>pthread_self()))</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>current<sp/>thread<sp/>is<sp/>not<sp/>holding<sp/>the<sp/>mutex<sp/>@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>static<sp/>mutex<sp/>may<sp/>be<sp/>used<sp/>before<sp/>main()<sp/>is<sp/>entered.<sp/><sp/>It<sp/>may<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>used<sp/>before<sp/>the<sp/>dynamic<sp/>initialization<sp/>stage.<sp/><sp/>Therefore<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>able<sp/>to<sp/>initialize<sp/>a<sp/>static<sp/>mutex<sp/>object<sp/>at<sp/>link<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>MutexBase<sp/>has<sp/>to<sp/>be<sp/>a<sp/>POD<sp/>and<sp/>its<sp/>member<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>be<sp/>public.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>pthread_mutex_t<sp/>mutex_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>underlying<sp/>pthread<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>has_owner_<sp/>indicates<sp/>whether<sp/>the<sp/>owner_<sp/>field<sp/>below<sp/>contains<sp/>a<sp/>valid<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ID<sp/>and<sp/>is<sp/>therefore<sp/>safe<sp/>to<sp/>inspect<sp/>(e.g.,<sp/>to<sp/>use<sp/>in<sp/>pthread_equal()).<sp/>All</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>accesses<sp/>to<sp/>the<sp/>owner_<sp/>field<sp/>should<sp/>be<sp/>protected<sp/>by<sp/>a<sp/>check<sp/>of<sp/>this<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>alternative<sp/>might<sp/>be<sp/>to<sp/>memset()<sp/>owner_<sp/>to<sp/>all<sp/>zeros,<sp/>but<sp/>there&apos;s<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>guarantee<sp/>that<sp/>a<sp/>zero&apos;d<sp/>pthread_t<sp/>is<sp/>necessarily<sp/>invalid<sp/>or<sp/>even<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>pthread_self().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_owner_;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/>pthread_t<sp/>owner_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>thread<sp/>holding<sp/>the<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward-declares<sp/>a<sp/>static<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_STATIC_MUTEX_(mutex)<sp/>\</highlight></codeline>
<codeline lineno="1691"><highlight class="preprocessor"><sp/><sp/>extern<sp/>::testing::internal::MutexBase<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>and<sp/>statically<sp/>(i.e.<sp/>at<sp/>link<sp/>time)<sp/>initializes<sp/>a<sp/>static<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>initialization<sp/>list<sp/>here<sp/>does<sp/>not<sp/>explicitly<sp/>initialize<sp/>each<sp/>field,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>relying<sp/>on<sp/>default<sp/>initialization<sp/>for<sp/>the<sp/>unspecified<sp/>fields.<sp/>In</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>particular,<sp/>the<sp/>owner_<sp/>field<sp/>(a<sp/>pthread_t)<sp/>is<sp/>not<sp/>explicitly<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>initialization<sp/>to<sp/>work<sp/>whether<sp/>pthread_t<sp/>is<sp/>a<sp/>scalar<sp/>or<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>flag<sp/>-Wmissing-field-initializers<sp/>must<sp/>not<sp/>be<sp/>specified<sp/>for<sp/>this<sp/>to<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_STATIC_MUTEX_(mutex)<sp/>\</highlight></codeline>
<codeline lineno="1700"><highlight class="preprocessor"><sp/><sp/>::testing::internal::MutexBase<sp/>mutex<sp/>=<sp/>{PTHREAD_MUTEX_INITIALIZER,<sp/>false,<sp/>0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Mutex<sp/>class<sp/>can<sp/>only<sp/>be<sp/>used<sp/>for<sp/>mutexes<sp/>created<sp/>at<sp/>runtime.<sp/>It</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shares<sp/>its<sp/>API<sp/>with<sp/>MutexBase<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Mutex<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MutexBase<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>Mutex()<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&amp;mutex_,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>has_owner_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>~Mutex()<sp/>{<sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&amp;mutex_));<sp/>}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>Mutex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mutex&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>Mutex&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mutex&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>name<sp/>this<sp/>class<sp/>MutexLock<sp/>because<sp/>the<sp/>ctor<sp/>declaration<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conflict<sp/>with<sp/>a<sp/>macro<sp/>named<sp/>MutexLock,<sp/>which<sp/>is<sp/>defined<sp/>on<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platforms.<sp/>That<sp/>macro<sp/>is<sp/>used<sp/>as<sp/>a<sp/>defensive<sp/>measure<sp/>to<sp/>prevent<sp/>against</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inadvertent<sp/>misuses<sp/>of<sp/>MutexLock<sp/>like<sp/>&quot;MutexLock(&amp;mu)&quot;<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;MutexLock<sp/>l(&amp;mu)&quot;.<sp/><sp/>Hence<sp/>the<sp/>typedef<sp/>trick<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTestMutexLock<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>GTestMutexLock(MutexBase*<sp/>mutex)<sp/>:<sp/>mutex_(mutex)<sp/>{<sp/>mutex_-&gt;Lock();<sp/>}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>~GTestMutexLock()<sp/>{<sp/>mutex_-&gt;Unlock();<sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>MutexBase*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mutex_;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/>GTestMutexLock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GTestMutexLock&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>GTestMutexLock&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GTestMutexLock&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTestMutexLock<sp/>MutexLock;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>ThreadLocal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pthread_key_create()<sp/>requires<sp/>DeleteThreadLocalValue()<sp/>to<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C-linkage.<sp/><sp/>Therefore<sp/>it<sp/>cannot<sp/>be<sp/>templatized<sp/>to<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ThreadLocal&lt;T&gt;.<sp/><sp/>Hence<sp/>the<sp/>need<sp/>for<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ThreadLocalValueHolderBase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>ThreadLocalValueHolderBase<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ThreadLocalValueHolderBase()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>by<sp/>pthread<sp/>to<sp/>delete<sp/>thread-local<sp/>data<sp/>stored<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pthread_setspecific().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeleteThreadLocalValue(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value_holder)<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ThreadLocalValueHolderBase*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_holder);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>thread-local<sp/>storage<sp/>on<sp/>pthreads-based<sp/>systems.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/>ThreadLocal<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/>ThreadLocal()</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>key_(CreateKey()),<sp/>default_factory_(new<sp/>DefaultValueHolderFactory())<sp/>{}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ThreadLocal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>key_(CreateKey()),</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_factory_(new<sp/>InstanceValueHolderFactory(value))<sp/>{}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>~ThreadLocal()<sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroys<sp/>the<sp/>managed<sp/>object<sp/>for<sp/>the<sp/>current<sp/>thread,<sp/>if<sp/>any.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>DeleteThreadLocalValue(pthread_getspecific(key_));</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Releases<sp/>resources<sp/>associated<sp/>with<sp/>the<sp/>key.<sp/><sp/>This<sp/>will<sp/>*not*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>managed<sp/>objects<sp/>for<sp/>other<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/>T*<sp/>pointer()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetOrCreateValue();<sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>pointer()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetOrCreateValue();<sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pointer();<sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{<sp/>*pointer()<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Holds<sp/>a<sp/>value<sp/>of<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ValueHolder<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ThreadLocalValueHolderBase<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder()<sp/>:<sp/>value_()<sp/>{}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ValueHolder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>pointer()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;value_;<sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueHolder&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueHolder&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_key_t<sp/>CreateKey()<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_key_t<sp/>key;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>a<sp/>thread<sp/>exits,<sp/>DeleteThreadLocalValue()<sp/>will<sp/>be<sp/>called<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>object<sp/>managed<sp/>for<sp/>that<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_key_create(&amp;key,<sp/>&amp;DeleteThreadLocalValue));</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/>T*<sp/>GetOrCreateValue()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadLocalValueHolderBase*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>holder<sp/>=</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ThreadLocalValueHolderBase*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pthread_getspecific(key_));</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holder<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CheckedDowncastToActualType&lt;ValueHolder&gt;(holder)-&gt;pointer();</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>new_holder<sp/>=<sp/>default_factory_-&gt;MakeNewHolder();</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadLocalValueHolderBase*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>holder_base<sp/>=<sp/>new_holder;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_,<sp/>holder_base));</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_holder-&gt;pointer();</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ValueHolderFactory<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolderFactory()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ValueHolderFactory()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueHolder*<sp/>MakeNewHolder()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolderFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueHolderFactory&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolderFactory&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueHolderFactory&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DefaultValueHolderFactory<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ValueHolderFactory<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultValueHolderFactory()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder*<sp/>MakeNewHolder()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueHolder();<sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultValueHolderFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DefaultValueHolderFactory&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultValueHolderFactory&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DefaultValueHolderFactory&amp;)<sp/>=</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">InstanceValueHolderFactory<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ValueHolderFactory<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>InstanceValueHolderFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueHolder*<sp/>MakeNewHolder()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueHolder(value_);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>value_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>for<sp/>each<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>InstanceValueHolderFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstanceValueHolderFactory&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>InstanceValueHolderFactory&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstanceValueHolderFactory&amp;)<sp/>=</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>key<sp/>pthreads<sp/>uses<sp/>for<sp/>looking<sp/>up<sp/>per-thread<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_key_t<sp/>key_;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;ValueHolderFactory&gt;<sp/>default_factory_;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>ThreadLocal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocal&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>ThreadLocal&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ThreadLocal&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>dummy<sp/>implementation<sp/>of<sp/>synchronization<sp/>primitives<sp/>(mutex,<sp/>lock,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>thread-local<sp/>variable).<sp/><sp/>Necessary<sp/>for<sp/>compiling<sp/>Google<sp/>Test<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mutex<sp/>is<sp/>not<sp/>supported<sp/>-<sp/>using<sp/>Google<sp/>Test<sp/>in<sp/>multiple<sp/>threads<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supported<sp/>on<sp/>such<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869" refid="classtesting_1_1internal_1_1Mutex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1Mutex" kindref="compound">Mutex</ref><sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1Mutex" kindref="compound">Mutex</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Lock()<sp/>{}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Unlock()<sp/>{}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertHeld()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_STATIC_MUTEX_(mutex)<sp/>\</highlight></codeline>
<codeline lineno="1878"><highlight class="preprocessor"><sp/><sp/>extern<sp/>::testing::internal::Mutex<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_STATIC_MUTEX_(mutex)<sp/>::testing::internal::Mutex<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>name<sp/>this<sp/>class<sp/>MutexLock<sp/>because<sp/>the<sp/>ctor<sp/>declaration<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conflict<sp/>with<sp/>a<sp/>macro<sp/>named<sp/>MutexLock,<sp/>which<sp/>is<sp/>defined<sp/>on<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platforms.<sp/>That<sp/>macro<sp/>is<sp/>used<sp/>as<sp/>a<sp/>defensive<sp/>measure<sp/>to<sp/>prevent<sp/>against</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inadvertent<sp/>misuses<sp/>of<sp/>MutexLock<sp/>like<sp/>&quot;MutexLock(&amp;mu)&quot;<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;MutexLock<sp/>l(&amp;mu)&quot;.<sp/><sp/>Hence<sp/>the<sp/>typedef<sp/>trick<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887" refid="classtesting_1_1internal_1_1GTestMutexLock" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1GTestMutexLock" kindref="compound">GTestMutexLock</ref><sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1GTestMutexLock" kindref="compound">GTestMutexLock</ref>(<ref refid="classtesting_1_1internal_1_1Mutex" kindref="compound">Mutex</ref>*)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1GTestMutexLock" kindref="compound">GTestMutexLock</ref><sp/><ref refid="classtesting_1_1internal_1_1GTestMutexLock" kindref="compound">MutexLock</ref>;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1895" refid="classtesting_1_1internal_1_1ThreadLocal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1internal_1_1ThreadLocal" kindref="compound">ThreadLocal</ref><sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1ThreadLocal" kindref="compound">ThreadLocal</ref>()<sp/>:<sp/>value_()<sp/>{}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1ThreadLocal" kindref="compound">ThreadLocal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/>T*<sp/>pointer()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;value_;<sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>pointer()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;value_;<sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{<sp/>value_<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>threads<sp/>running<sp/>in<sp/>the<sp/>process,<sp/>or<sp/>0<sp/>to<sp/>indicate<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>cannot<sp/>detect<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetThreadCount();</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_PATH_SEP_<sp/>&quot;\\&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_ALT_PATH_SEP_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_PATH_SEP_<sp/>&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_HAS_ALT_PATH_SEP_<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>for<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>isspace(int<sp/>ch)<sp/>and<sp/>friends<sp/>accept<sp/>an<sp/>unsigned<sp/>char<sp/>or<sp/>EOF.<sp/><sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>signed,<sp/>depending<sp/>on<sp/>the<sp/>compiler<sp/>(or<sp/>compiler<sp/>flags).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Therefore<sp/>we<sp/>need<sp/>to<sp/>cast<sp/>a<sp/>char<sp/>to<sp/>unsigned<sp/>char<sp/>before<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>isspace(),<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAlpha(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isalpha(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsAlNum(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isalnum(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsDigit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isdigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsLower(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>islower(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSpace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isspace(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsUpper(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isupper(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsXDigit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isxdigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_lib_char8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsXDigit(</highlight><highlight class="keywordtype">char8_t</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isxdigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsXDigit(</highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>low_byte<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/>low_byte<sp/>&amp;&amp;<sp/>isxdigit(low_byte)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsXDigit(</highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>low_byte<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/>low_byte<sp/>&amp;&amp;<sp/>isxdigit(low_byte)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsXDigit(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>low_byte<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/>low_byte<sp/>&amp;&amp;<sp/>isxdigit(low_byte)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ToLower(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tolower(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch)));</highlight></codeline>
<codeline lineno="1970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ToUpper(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(toupper(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch)));</highlight></codeline>
<codeline lineno="1973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>StripTrailingSpaces(std::string<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>std::string::iterator<sp/>it<sp/>=<sp/>str.end();</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>str.begin()<sp/>&amp;&amp;<sp/>IsSpace(*--it))<sp/>it<sp/>=<sp/>str.erase(it);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>testing::internal::posix<sp/>namespace<sp/>holds<sp/>wrappers<sp/>for<sp/>common</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>POSIX<sp/>functions.<sp/><sp/>These<sp/>wrappers<sp/>hide<sp/>the<sp/>differences<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows/MSVC<sp/>and<sp/>POSIX<sp/>systems.<sp/><sp/>Since<sp/>some<sp/>compilers<sp/>define<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard<sp/>functions<sp/>as<sp/>macros,<sp/>the<sp/>wrapper<sp/>cannot<sp/>have<sp/>the<sp/>same<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>wrapped<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">posix<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>File<sp/>system<sp/>porting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_stat<sp/>StatStruct;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FileNo(FILE*<sp/>file)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_fileno(file));<sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stat(),<sp/>RmDir(),<sp/>and<sp/>IsDir()<sp/>are<sp/>not<sp/>needed<sp/>on<sp/>Windows<sp/>CE<sp/>at<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time<sp/>and<sp/>thus<sp/>not<sp/>defined<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FileNo(FILE*<sp/>file)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_fileno(file);<sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>StatStruct*<sp/>buf)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_stat(path,<sp/>buf);<sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RmDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dir)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_rmdir(dir);<sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StatStruct&amp;<sp/>st)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_S_IFDIR<sp/>&amp;<sp/>st.st_mode)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_OS_ESP8266)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>StatStruct;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FileNo(FILE*<sp/>file)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fileno(file);<sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>StatStruct*<sp/>buf)<sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stat<sp/>function<sp/>not<sp/>implemented<sp/>on<sp/>ESP8266</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RmDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dir)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rmdir(dir);<sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StatStruct&amp;<sp/>st)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_ISDIR(st.st_mode);<sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>StatStruct;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FileNo(FILE*<sp/>file)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fileno(file);<sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>StatStruct*<sp/>buf)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat(path,<sp/>buf);<sp/>}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_QURT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QuRT<sp/>doesn&apos;t<sp/>support<sp/>any<sp/>directory<sp/>functions,<sp/>including<sp/>rmdir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RmDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RmDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dir)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rmdir(dir);<sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StatStruct&amp;<sp/>st)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_ISDIR(st.st_mode);<sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Other<sp/>functions<sp/>with<sp/>a<sp/>different<sp/>name<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DoIsATTY(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isatty(fd);<sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrCaseCmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stricmp(s1,<sp/>s2);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>!__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS_MOBILE)<sp/>||<sp/>defined(GTEST_OS_ZOS)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="2045"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_IOS)<sp/>||<sp/>defined(GTEST_OS_WINDOWS_PHONE)<sp/>||<sp/><sp/>\</highlight></codeline>
<codeline lineno="2046"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_WINDOWS_RT)<sp/>||<sp/>defined(ESP_PLATFORM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DoIsATTY(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>fd<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DoIsATTY(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_isatty(fd);<sp/>}</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrCaseCmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_stricmp(s1,<sp/>s2);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DoIsATTY(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isatty(fd);<sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrCaseCmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcasecmp(s1,<sp/>s2);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsATTY(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoIsATTY<sp/>might<sp/>change<sp/>errno<sp/>(for<sp/>example<sp/>ENOTTY<sp/>in<sp/>case<sp/>you<sp/>redirect<sp/>stdout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>file<sp/>on<sp/>Linux),<sp/>which<sp/>is<sp/>unexpected,<sp/>so<sp/>save<sp/>the<sp/>previous<sp/>value,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>it<sp/>after<sp/>the<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>savedErrno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isAttyValue<sp/>=<sp/>DoIsATTY(fd);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>savedErrno;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isAttyValue;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>deprecated<sp/>by<sp/>MSVC<sp/>8.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal">GTEST_DISABLE_MSC_DEPRECATED_PUSH_()</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ChDir(),<sp/>FReopen(),<sp/>FDOpen(),<sp/>Read(),<sp/>Write(),<sp/>Close(),<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StrError()<sp/>aren&apos;t<sp/>needed<sp/>on<sp/>Windows<sp/>CE<sp/>at<sp/>this<sp/>time<sp/>and<sp/>thus<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_OS_WINDOWS_MOBILE)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_WINDOWS_PHONE)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="2085"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(GTEST_OS_WINDOWS_RT)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_ESP8266)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2086"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(GTEST_OS_XTENSA)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_QURT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ChDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dir)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chdir(dir);<sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FILE*<sp/>FOpen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_WINDOWS_MINGW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">wchar_codecvt<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::codecvt&lt;wchar_t,<sp/>char,<sp/>std::mbstate_t&gt;<sp/>{};</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/>std::wstring_convert&lt;wchar_codecvt&gt;<sp/>converter;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/>std::wstring<sp/>wide_path<sp/>=<sp/>converter.from_bytes(path);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/>std::wstring<sp/>wide_mode<sp/>=<sp/>converter.from_bytes(mode);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_wfopen(wide_path.c_str(),<sp/>wide_mode.c_str());</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MINGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fopen(path,<sp/>mode);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MINGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_OS_WINDOWS_MOBILE)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_QURT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FILE*<sp/>FReopen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,<sp/>FILE*<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>freopen(path,<sp/>mode,<sp/>stream);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FILE*<sp/>FDOpen(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdopen(fd,<sp/>mode);<sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE<sp/>&amp;&amp;<sp/>!GTEST_OS_QURT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FClose(FILE*<sp/>fp)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fclose(fp);<sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_OS_WINDOWS_MOBILE)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_QURT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Read(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(read(fd,<sp/>buf,<sp/>count));</highlight></codeline>
<codeline lineno="2110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Write(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(write(fd,<sp/>buf,<sp/>count));</highlight></codeline>
<codeline lineno="2113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Close(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>close(fd);<sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE<sp/>&amp;&amp;<sp/>!GTEST_OS_QURT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_FILE_SYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_OS_WINDOWS_MOBILE)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_QURT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>StrError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strerror(errnum);<sp/>}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE<sp/>&amp;&amp;<sp/>!GTEST_OS_QURT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>GetEnv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS_MOBILE)<sp/>||<sp/>defined(GTEST_OS_WINDOWS_PHONE)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="2124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_ESP8266)<sp/>||<sp/>defined(GTEST_OS_XTENSA)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(GTEST_OS_QURT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>on<sp/>an<sp/>embedded<sp/>platform,<sp/>which<sp/>has<sp/>no<sp/>environment<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(name);<sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>prevent<sp/>&apos;unused<sp/>argument&apos;<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__BORLANDC__)<sp/>||<sp/>defined(__SunOS_5_8)<sp/>||<sp/>defined(__SunOS_5_9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Environment<sp/>variables<sp/>which<sp/>we<sp/>programmatically<sp/>clear<sp/>will<sp/>be<sp/>set<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>string<sp/>rather<sp/>than<sp/>unset<sp/>(NULL).<sp/><sp/>Handle<sp/>that<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>env<sp/>=<sp/>getenv(name);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(env<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>env[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>?<sp/>env<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getenv(name);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal">GTEST_DISABLE_MSC_DEPRECATED_POP_()</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>has<sp/>no<sp/>C<sp/>library.<sp/>The<sp/>abort()<sp/>function<sp/>is<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>several<sp/>places<sp/>in<sp/>Google<sp/>Test.<sp/>This<sp/>implementation<sp/>provides<sp/>a<sp/>reasonable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>imitation<sp/>of<sp/>standard<sp/>behaviour.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal">[[noreturn]]<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Abort();</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal">[[noreturn]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Abort()<sp/>{<sp/>abort();<sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>posix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>&quot;deprecates&quot;<sp/>snprintf<sp/>and<sp/>issues<sp/>warnings<sp/>wherever<sp/>it<sp/>is<sp/>used.<sp/><sp/>In</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order<sp/>to<sp/>avoid<sp/>these<sp/>warnings,<sp/>we<sp/>need<sp/>to<sp/>use<sp/>_snprintf<sp/>or<sp/>_snprintf_s<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC-based<sp/>platforms.<sp/><sp/>We<sp/>map<sp/>the<sp/>GTEST_SNPRINTF_<sp/>macro<sp/>to<sp/>the<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>in<sp/>order<sp/>to<sp/>achieve<sp/>that.<sp/><sp/>We<sp/>use<sp/>macro<sp/>definition<sp/>here<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>snprintf<sp/>is<sp/>a<sp/>variadic<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(GTEST_OS_WINDOWS_MOBILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>2005<sp/>and<sp/>above<sp/>support<sp/>variadic<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_SNPRINTF_(buffer,<sp/>size,<sp/>format,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="2160"><highlight class="preprocessor"><sp/><sp/>_snprintf_s(buffer,<sp/>size,<sp/>size,<sp/>format,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>does<sp/>not<sp/>define<sp/>_snprintf_s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_SNPRINTF_<sp/>_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_SNPRINTF_<sp/>snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>biggest<sp/>signed<sp/>integer<sp/>type<sp/>the<sp/>compiler<sp/>supports.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>long<sp/>long<sp/>is<sp/>guaranteed<sp/>to<sp/>be<sp/>at<sp/>least<sp/>64-bits<sp/>in<sp/>C++11.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">BiggestInt<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>a<sp/>BiggestInt<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>BiggestInt<sp/>kMaxBiggestInt<sp/>=<sp/>(std::numeric_limits&lt;BiggestInt&gt;::max)();</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>class<sp/>serves<sp/>as<sp/>a<sp/>compile-time<sp/>function<sp/>from<sp/>size<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type.<sp/><sp/>It<sp/>maps<sp/>a<sp/>size<sp/>in<sp/>bytes<sp/>to<sp/>a<sp/>primitive<sp/>type<sp/>with<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>size.<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TypeWithSize&lt;4&gt;::UInt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>typedef-ed<sp/>to<sp/>be<sp/>unsigned<sp/>int<sp/>(unsigned<sp/>integer<sp/>made<sp/>up<sp/>of<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bytes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Such<sp/>functionality<sp/>should<sp/>belong<sp/>to<sp/>STL,<sp/>but<sp/>I<sp/>cannot<sp/>find<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>uses<sp/>this<sp/>class<sp/>in<sp/>the<sp/>implementation<sp/>of<sp/>floating-point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>now<sp/>it<sp/>only<sp/>handles<sp/>UInt<sp/>(unsigned<sp/>int)<sp/>as<sp/>that&apos;s<sp/>all<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>needs.<sp/><sp/>Other<sp/>types<sp/>can<sp/>be<sp/>easily<sp/>added<sp/>in<sp/>the<sp/>future<sp/>if<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arises.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="2195" refid="classtesting_1_1internal_1_1TypeWithSize" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TypeWithSize" kindref="compound">TypeWithSize</ref><sp/>{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>prevents<sp/>the<sp/>user<sp/>from<sp/>using<sp/>TypeWithSize&lt;N&gt;<sp/>with<sp/>incorrect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>of<sp/>N.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UInt<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>specialization<sp/>for<sp/>size<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2204" refid="classtesting_1_1internal_1_1TypeWithSize_3_014_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TypeWithSize" kindref="compound">TypeWithSize</ref>&lt;4&gt;<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Int<sp/>=<sp/>std::int32_t;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UInt<sp/>=<sp/>std::uint32_t;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>specialization<sp/>for<sp/>size<sp/>8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2212" refid="classtesting_1_1internal_1_1TypeWithSize_3_018_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TypeWithSize" kindref="compound">TypeWithSize</ref>&lt;8&gt;<sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Int<sp/>=<sp/>std::int64_t;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UInt<sp/>=<sp/>std::uint64_t;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Integer<sp/>types<sp/>of<sp/>known<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TimeInMillis<sp/>=<sp/>int64_t;<sp/><sp/></highlight><highlight class="comment">//<sp/>Represents<sp/>time<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>for<sp/>command<sp/>line<sp/>flags<sp/>and<sp/>environment<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macro<sp/>for<sp/>referencing<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_FLAG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_NAME_(name)<sp/>gtest_##name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG(name)<sp/>FLAGS_gtest_##name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!defined(GTEST_FLAG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pick<sp/>a<sp/>command<sp/>line<sp/>flags<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>defining<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_bool_(name,<sp/>default_val,<sp/>doc)<sp/>\</highlight></codeline>
<codeline lineno="2234"><highlight class="preprocessor"><sp/><sp/>ABSL_FLAG(bool,<sp/>GTEST_FLAG_NAME_(name),<sp/>default_val,<sp/>doc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_int32_(name,<sp/>default_val,<sp/>doc)<sp/>\</highlight></codeline>
<codeline lineno="2236"><highlight class="preprocessor"><sp/><sp/>ABSL_FLAG(int32_t,<sp/>GTEST_FLAG_NAME_(name),<sp/>default_val,<sp/>doc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_string_(name,<sp/>default_val,<sp/>doc)<sp/>\</highlight></codeline>
<codeline lineno="2238"><highlight class="preprocessor"><sp/><sp/>ABSL_FLAG(std::string,<sp/>GTEST_FLAG_NAME_(name),<sp/>default_val,<sp/>doc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>declaring<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_bool_(name)<sp/>\</highlight></codeline>
<codeline lineno="2242"><highlight class="preprocessor"><sp/><sp/>ABSL_DECLARE_FLAG(bool,<sp/>GTEST_FLAG_NAME_(name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_int32_(name)<sp/>\</highlight></codeline>
<codeline lineno="2244"><highlight class="preprocessor"><sp/><sp/>ABSL_DECLARE_FLAG(int32_t,<sp/>GTEST_FLAG_NAME_(name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_string_(name)<sp/>\</highlight></codeline>
<codeline lineno="2246"><highlight class="preprocessor"><sp/><sp/>ABSL_DECLARE_FLAG(std::string,<sp/>GTEST_FLAG_NAME_(name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_SAVER_<sp/>::absl::FlagSaver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_GET(name)<sp/>::absl::GetFlag(GTEST_FLAG(name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_SET(name,<sp/>value)<sp/>\</highlight></codeline>
<codeline lineno="2252"><highlight class="preprocessor"><sp/><sp/>(void)(::absl::SetFlag(&amp;GTEST_FLAG(name),<sp/>value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>defining<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_bool_(name,<sp/>default_val,<sp/>doc)<sp/><sp/>\</highlight></codeline>
<codeline lineno="2259"><highlight class="preprocessor"><sp/><sp/>namespace<sp/>testing<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2260"><highlight class="preprocessor"><sp/><sp/>GTEST_API_<sp/>bool<sp/>GTEST_FLAG(name)<sp/>=<sp/>(default_val);<sp/>\</highlight></codeline>
<codeline lineno="2261"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2262"><highlight class="preprocessor"><sp/><sp/>static_assert(true,<sp/>&quot;no-op<sp/>to<sp/>require<sp/>trailing<sp/>semicolon&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_int32_(name,<sp/>default_val,<sp/>doc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2264"><highlight class="preprocessor"><sp/><sp/>namespace<sp/>testing<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2265"><highlight class="preprocessor"><sp/><sp/>GTEST_API_<sp/>std::int32_t<sp/>GTEST_FLAG(name)<sp/>=<sp/>(default_val);<sp/>\</highlight></codeline>
<codeline lineno="2266"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2267"><highlight class="preprocessor"><sp/><sp/>static_assert(true,<sp/>&quot;no-op<sp/>to<sp/>require<sp/>trailing<sp/>semicolon&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DEFINE_string_(name,<sp/>default_val,<sp/>doc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2269"><highlight class="preprocessor"><sp/><sp/>namespace<sp/>testing<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2270"><highlight class="preprocessor"><sp/><sp/>GTEST_API_<sp/>::std::string<sp/>GTEST_FLAG(name)<sp/>=<sp/>(default_val);<sp/>\</highlight></codeline>
<codeline lineno="2271"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2272"><highlight class="preprocessor"><sp/><sp/>static_assert(true,<sp/>&quot;no-op<sp/>to<sp/>require<sp/>trailing<sp/>semicolon&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>declaring<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_bool_(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2276"><highlight class="preprocessor"><sp/><sp/>namespace<sp/>testing<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2277"><highlight class="preprocessor"><sp/><sp/>GTEST_API_<sp/>extern<sp/>bool<sp/>GTEST_FLAG(name);<sp/>\</highlight></codeline>
<codeline lineno="2278"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2279"><highlight class="preprocessor"><sp/><sp/>static_assert(true,<sp/>&quot;no-op<sp/>to<sp/>require<sp/>trailing<sp/>semicolon&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_int32_(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2281"><highlight class="preprocessor"><sp/><sp/>namespace<sp/>testing<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2282"><highlight class="preprocessor"><sp/><sp/>GTEST_API_<sp/>extern<sp/>std::int32_t<sp/>GTEST_FLAG(name);<sp/>\</highlight></codeline>
<codeline lineno="2283"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2284"><highlight class="preprocessor"><sp/><sp/>static_assert(true,<sp/>&quot;no-op<sp/>to<sp/>require<sp/>trailing<sp/>semicolon&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_DECLARE_string_(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2286"><highlight class="preprocessor"><sp/><sp/>namespace<sp/>testing<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2287"><highlight class="preprocessor"><sp/><sp/>GTEST_API_<sp/>extern<sp/>::std::string<sp/>GTEST_FLAG(name);<sp/>\</highlight></codeline>
<codeline lineno="2288"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2289"><highlight class="preprocessor"><sp/><sp/>static_assert(true,<sp/>&quot;no-op<sp/>to<sp/>require<sp/>trailing<sp/>semicolon&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_SAVER_<sp/>::testing::internal::GTestFlagSaver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_GET(name)<sp/>::testing::GTEST_FLAG(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FLAG_SET(name,<sp/>value)<sp/>(void)(::testing::GTEST_FLAG(name)<sp/>=<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Thread<sp/>annotations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_LOCK_EXCLUDED_(locks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>&apos;str&apos;<sp/>for<sp/>a<sp/>32-bit<sp/>signed<sp/>integer.<sp/><sp/>If<sp/>successful,<sp/>writes<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>*value<sp/>and<sp/>returns<sp/>true;<sp/>otherwise<sp/>leaves<sp/>*value<sp/>unchanged<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParseInt32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/>src_text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t*<sp/>value);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>bool/int32_t/string<sp/>from<sp/>the<sp/>environment<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>corresponding<sp/>to<sp/>the<sp/>given<sp/>Google<sp/>Test<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BoolFromGTestEnv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_val);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal">GTEST_API_<sp/>int32_t<sp/>Int32FromGTestEnv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/>int32_t<sp/>default_val);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal">std::string<sp/>OutputFlagAlsoCheckEnvVar();</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>StringFromGTestEnv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>default_val);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_INTERNAL_DEPRECATED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>Macro<sp/>to<sp/>mark<sp/>an<sp/>API<sp/>deprecated,<sp/>for<sp/>googletest<sp/>usage<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Usage:<sp/>class<sp/>GTEST_INTERNAL_DEPRECATED(message)<sp/>MyClass<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_DEPRECATED(message)<sp/>&lt;return_type&gt;<sp/>myFunction();<sp/>Every<sp/>usage<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>deprecated<sp/>entity<sp/>will<sp/>trigger<sp/>a<sp/>warning<sp/>when<sp/>compiled<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`-Wdeprecated-declarations`<sp/>option<sp/>(clang,<sp/>gcc,<sp/>any<sp/>__GNUC__<sp/>compiler).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>msvc<sp/>/W3<sp/>option<sp/>will<sp/>need<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>for<sp/>&apos;other&apos;<sp/>compilers<sp/>this<sp/>macro<sp/>evaluates<sp/>to<sp/>nothing<sp/>to<sp/>prevent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compilations<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_DEPRECATED(message)<sp/>__declspec(deprecated(message))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_DEPRECATED(message)<sp/>__attribute__((deprecated(message)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_DEPRECATED(message)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!defined(GTEST_INTERNAL_DEPRECATED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Always<sp/>use<sp/>absl::any<sp/>for<sp/>UniversalPrinter&lt;&gt;<sp/>specializations<sp/>if<sp/>googletest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>built<sp/>with<sp/>absl<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_ANY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/types/any.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Any<sp/>=<sp/>::absl::any;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;any&gt;)<sp/>&amp;&amp;<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="2354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!defined(_MSC_VER)<sp/>||<sp/>GTEST_HAS_RTTI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>for<sp/>C++17<sp/>and<sp/>higher<sp/>use<sp/>std::any<sp/>for<sp/>UniversalPrinter&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specializations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_ANY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;any&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Any<sp/>=<sp/>::std::any;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>case<sp/>where<sp/>absl<sp/>is<sp/>configured<sp/>NOT<sp/>to<sp/>alias<sp/>std::any<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__has_include(&lt;any&gt;)<sp/>&amp;&amp;<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INTERNAL_HAS_ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_ANY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Always<sp/>use<sp/>absl::optional<sp/>for<sp/>UniversalPrinter&lt;&gt;<sp/>specializations<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>googletest<sp/>is<sp/>built<sp/>with<sp/>absl<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_OPTIONAL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/types/optional.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Optional<sp/>=<sp/>::absl::optional&lt;T&gt;;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal">inline<sp/>::absl::nullopt_t<sp/>Nullopt()<sp/>{<sp/>return<sp/>::absl::nullopt;<sp/>}</highlight></codeline>
<codeline lineno="2384"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;optional&gt;)<sp/>&amp;&amp;<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>for<sp/>C++17<sp/>and<sp/>higher<sp/>use<sp/>std::optional<sp/>for<sp/>UniversalPrinter&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specializations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_OPTIONAL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Optional<sp/>=<sp/>::std::optional&lt;T&gt;;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal">inline<sp/>::std::nullopt_t<sp/>Nullopt()<sp/>{<sp/>return<sp/>::std::nullopt;<sp/>}</highlight></codeline>
<codeline lineno="2398"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>case<sp/>where<sp/>absl<sp/>is<sp/>configured<sp/>NOT<sp/>to<sp/>alias<sp/>std::optional<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__has_include(&lt;optional&gt;)<sp/>&amp;&amp;<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INTERNAL_HAS_OPTIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_OPTIONAL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Always<sp/>use<sp/>absl::string_view<sp/>for<sp/>Matcher&lt;&gt;<sp/>specializations<sp/>if<sp/>googletest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>built<sp/>with<sp/>absl<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_STRING_VIEW<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/strings/string_view.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">StringView<sp/>=<sp/>::absl::string_view;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;string_view&gt;)<sp/>&amp;&amp;<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>for<sp/>C++17<sp/>and<sp/>higher<sp/>use<sp/>std::string_view<sp/>for<sp/>Matcher&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specializations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_STRING_VIEW<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">StringView<sp/>=<sp/>::std::string_view;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>case<sp/>where<sp/>absl<sp/>is<sp/>configured<sp/>NOT<sp/>to<sp/>alias<sp/>std::string_view<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__has_include(&lt;string_view&gt;)<sp/>&amp;&amp;<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_STRING_VIEW<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Always<sp/>use<sp/>absl::variant<sp/>for<sp/>UniversalPrinter&lt;&gt;<sp/>specializations<sp/>if<sp/>googletest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>built<sp/>with<sp/>absl<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_VARIANT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/types/variant.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Variant<sp/>=<sp/>::absl::variant&lt;T...&gt;;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;variant&gt;)<sp/>&amp;&amp;<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>for<sp/>C++17<sp/>and<sp/>higher<sp/>use<sp/>std::variant<sp/>for<sp/>UniversalPrinter&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specializations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_VARIANT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Variant<sp/>=<sp/>::std::variant&lt;T...&gt;;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>case<sp/>where<sp/>absl<sp/>is<sp/>configured<sp/>NOT<sp/>to<sp/>alias<sp/>std::variant<sp/>is<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__has_include(&lt;variant&gt;)<sp/>&amp;&amp;<sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INTERNAL_HAS_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_HAS_VARIANT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_INTERNAL_CPLUSPLUS_LANG)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="2477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&lt;<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INTERNAL_NEED_REDUNDANT_CONSTEXPR_DECL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h"/>
  </compounddef>
</doxygen>
