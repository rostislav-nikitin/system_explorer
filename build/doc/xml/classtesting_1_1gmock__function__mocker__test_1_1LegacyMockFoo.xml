<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kind="class" language="C++" prot="public">
    <compoundname>testing::gmock_function_mocker_test::LegacyMockFoo</compoundname>
    <basecompoundref refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" prot="public" virt="non-virtual">testing::gmock_function_mocker_test::FooInterface</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ac197c2d39ef92dede55317dc4e2fb776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::LegacyMockFoo</definition>
        <argsstring>()=default</argsstring>
        <name>LegacyMockFoo</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::LegacyMockFoo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="211" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a8262f43f13e4a14a3a1701a22b70dbce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(VoidReturning, void(int n))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>VoidReturning</type>
        </param>
        <param>
          <type>void(int n)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="214" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1af7292c8acf4a42f4de86e857d0310013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD0</definition>
        <argsstring>(Nullary, int())</argsstring>
        <name>MOCK_METHOD0</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD0</qualifiedname>
        <param>
          <type>Nullary</type>
        </param>
        <param>
          <type>int()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="216" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a303e06bec9e89322d50d78c65d612a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(Unary, bool(int))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>Unary</type>
        </param>
        <param>
          <type>bool(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="219" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ae579eeb5d0e6fa5200868cb1d74ccdb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD2</definition>
        <argsstring>(Binary, long(short, int))</argsstring>
        <name>MOCK_METHOD2</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD2</qualifiedname>
        <param>
          <type>Binary</type>
        </param>
        <param>
          <type>long(short, int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="220" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a129f7eee269cfdee37758ec15b795fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD10</definition>
        <argsstring>(Decimal, int(bool, char, short, int, long, float, double, unsigned, char *, const std::string &amp;str))</argsstring>
        <name>MOCK_METHOD10</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD10</qualifiedname>
        <param>
          <type>Decimal</type>
        </param>
        <param>
          <type>int(bool, char, short, int, long, float, double, unsigned, char *, const std::string &amp;str)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="221" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1adf03410bee6d7f5345036857b48d2a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(TakesNonConstReference, bool(int &amp;))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>TakesNonConstReference</type>
        </param>
        <param>
          <type>bool(int &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="224" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a842e5e4499f9042ac2193e31b19b98c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(TakesConstReference, std::string(const int &amp;))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>TakesConstReference</type>
        </param>
        <param>
          <type>std::string(const int &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="225" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ab1757ec948df353ac259b0e37752f4c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(TakesConst, bool(const int))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>TakesConst</type>
        </param>
        <param>
          <type>bool(const int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="226" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a9173d8a2a77921ea32a74d27ef425a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD0</definition>
        <argsstring>(ReturnTypeWithComma, std::map&lt; int, std::string &gt;())</argsstring>
        <name>MOCK_METHOD0</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD0</qualifiedname>
        <param>
          <type>ReturnTypeWithComma</type>
        </param>
        <param>
          <type>std::map&lt; int, std::string &gt;</type>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="229" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1acc5444194616f279908cc27fc1ad3042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_CONST_METHOD1</definition>
        <argsstring>(ReturnTypeWithComma, std::map&lt; int, std::string &gt;(int))</argsstring>
        <name>MOCK_CONST_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_CONST_METHOD1</qualifiedname>
        <param>
          <type>ReturnTypeWithComma</type>
        </param>
        <param>
          <type>std::map&lt; int, std::string &gt;</type>
          <array>int</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="230" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a95b6830083d3a570edb2c6724bb9b49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD0</definition>
        <argsstring>(OverloadedOnArgumentNumber, int())</argsstring>
        <name>MOCK_METHOD0</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD0</qualifiedname>
        <param>
          <type>OverloadedOnArgumentNumber</type>
        </param>
        <param>
          <type>int()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="233" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a58bcbf28f96a9c25d7255607ce3502bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(OverloadedOnArgumentNumber, int(int))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>OverloadedOnArgumentNumber</type>
        </param>
        <param>
          <type>int(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="234" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1abdbf3c510a10b237f885db1d6f27366b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(OverloadedOnArgumentType, int(int))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>OverloadedOnArgumentType</type>
        </param>
        <param>
          <type>int(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="236" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a64402cd309aa4edf585974199fa1129e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(OverloadedOnArgumentType, char(char))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>OverloadedOnArgumentType</type>
        </param>
        <param>
          <type>char(char)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="237" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ae60b5b4dd84995c668572a83aaaee4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD0</definition>
        <argsstring>(OverloadedOnConstness, int())</argsstring>
        <name>MOCK_METHOD0</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD0</qualifiedname>
        <param>
          <type>OverloadedOnConstness</type>
        </param>
        <param>
          <type>int()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="239" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a072f3444d6a2257b8decc3ea65e2456c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_CONST_METHOD0</definition>
        <argsstring>(OverloadedOnConstness, char())</argsstring>
        <name>MOCK_CONST_METHOD0</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_CONST_METHOD0</qualifiedname>
        <param>
          <type>OverloadedOnConstness</type>
        </param>
        <param>
          <type>char()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="240" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a4398b0decae5fe3c32e432d64c2ce00e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(TypeWithHole, int(int(*)()))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>TypeWithHole</type>
        </param>
        <param>
          <type>int(int(*)())</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="242" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ac429e72e47753040fc7a23e5bd491a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(TypeWithComma, int(const std::map&lt; int, std::string &gt; &amp;))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>TypeWithComma</type>
        </param>
        <param>
          <type>int(const std::map&lt; int, std::string &gt; &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="243" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a92510319821db0ceaf3e037a63df5c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(TypeWithTemplatedCopyCtor, int(const TemplatedCopyable&lt; int &gt; &amp;))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>TypeWithTemplatedCopyCtor</type>
        </param>
        <param>
          <type>int(const <ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" kindref="compound">TemplatedCopyable</ref>&lt; int &gt; &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="245" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1aea8adf40a66bbb704e4d24dbd919fdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(ReturnsFunctionPointer1, int(*(int))(bool))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>ReturnsFunctionPointer1</type>
        </param>
        <param>
          <type>int(*(int))(bool)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="248" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a28ac0c96150878e488e87b91c58af4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</definition>
        <argsstring>(ReturnsFunctionPointer2, fn_ptr(int))</argsstring>
        <name>MOCK_METHOD1</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::MOCK_METHOD1</qualifiedname>
        <param>
          <type>ReturnsFunctionPointer2</type>
        </param>
        <param>
          <type>fn_ptr(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="249" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a5b586a1db3bbe520061f450551f238b3" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="virtual">
        <type>int</type>
        <definition>int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedConstRef</definition>
        <argsstring>() const &amp;override</argsstring>
        <name>RefQualifiedConstRef</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedConstRef</qualifiedname>
        <reimplements refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a97d8d9433b4c154e96f6523589ebf4da">RefQualifiedConstRef</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="268" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a99b57a335543fe6828ff2c70c0a726f5" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="rvalue" virt="virtual">
        <type>int</type>
        <definition>int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedConstRefRef</definition>
        <argsstring>() const &amp;&amp;override</argsstring>
        <name>RefQualifiedConstRefRef</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedConstRefRef</qualifiedname>
        <reimplements refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1aa51eb97c5a8fe915a6a5ef2a24c8b192">RefQualifiedConstRefRef</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="269" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a53204e0e486eb2240659c468259c5f27" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="virtual">
        <type>int</type>
        <definition>int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedRef</definition>
        <argsstring>() &amp;override</argsstring>
        <name>RefQualifiedRef</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedRef</qualifiedname>
        <reimplements refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ab593a18ba3b8f905b7d1af553d0d2ea1">RefQualifiedRef</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="270" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1af7bb0a91b68ba5aaeca67615c99a20c3" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="virtual">
        <type>int</type>
        <definition>int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedRefRef</definition>
        <argsstring>() &amp;&amp;override</argsstring>
        <name>RefQualifiedRefRef</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedRefRef</qualifiedname>
        <reimplements refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a4029023fc8c82f8810b46dc87f6887e6">RefQualifiedRefRef</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="271" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ae21eb58ea09d921bc244859687c21a16" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="virtual">
        <type>int</type>
        <definition>int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded</definition>
        <argsstring>() const &amp;override</argsstring>
        <name>RefQualifiedOverloaded</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded</qualifiedname>
        <reimplements refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1aa38bdef20c08e3e0afff67b86bb0effb">RefQualifiedOverloaded</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="272" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a3fef0197e50b004509d02cfa4c6da20a" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="rvalue" virt="virtual">
        <type>int</type>
        <definition>int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded</definition>
        <argsstring>() const &amp;&amp;override</argsstring>
        <name>RefQualifiedOverloaded</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded</qualifiedname>
        <reimplements refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1adc4c965116f6ee2b1f57abfbe95aaa2f">RefQualifiedOverloaded</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="273" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a6544443eb2ab978a74c4e1dd5e92675e" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="virtual">
        <type>int</type>
        <definition>int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded</definition>
        <argsstring>() &amp;override</argsstring>
        <name>RefQualifiedOverloaded</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded</qualifiedname>
        <reimplements refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a75ffd8cf08541392ae272de1580c48ca">RefQualifiedOverloaded</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="274" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ab88054355288ae3fc6bdd3fbf82044d2" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="virtual">
        <type>int</type>
        <definition>int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded</definition>
        <argsstring>() &amp;&amp;override</argsstring>
        <name>RefQualifiedOverloaded</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded</qualifiedname>
        <reimplements refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a60ea15ae778c97867cecb71bdd4f750d">RefQualifiedOverloaded</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="275" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="275" bodyend="275"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a5a9b9e20219ad6f856d3acaa1d5cf13a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::LegacyMockFoo::LegacyMockFoo</definition>
        <argsstring>(const LegacyMockFoo &amp;)=delete</argsstring>
        <name>LegacyMockFoo</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::LegacyMockFoo</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="278" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a8b7192d7008ba18710aa53804c022217" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref> &amp;</type>
        <definition>LegacyMockFoo &amp; testing::gmock_function_mocker_test::LegacyMockFoo::operator=</definition>
        <argsstring>(const LegacyMockFoo &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>testing::gmock_function_mocker_test::LegacyMockFoo::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo" kindref="compound">LegacyMockFoo</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="279" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>testing::gmock_function_mocker_test::FooInterface</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface"/>
      </node>
      <node id="1">
        <label>testing::gmock_function_mocker_test::LegacyMockFoo</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>testing::gmock_function_mocker_test::FooInterface</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface"/>
      </node>
      <node id="1">
        <label>testing::gmock_function_mocker_test::LegacyMockFoo</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="209" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="209" bodyend="280"/>
    <listofallmembers>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a8d6e54401a3addca464903257529ace4" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>Binary</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a2a415a61b9a9c7a69bba9a4b5ef2a63e" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>Decimal</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a70abf7998b6302d9ea2f330ea3e01b8f" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>fn_ptr</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ac197c2d39ef92dede55317dc4e2fb776" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>LegacyMockFoo</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a5a9b9e20219ad6f856d3acaa1d5cf13a" prot="private" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>LegacyMockFoo</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a072f3444d6a2257b8decc3ea65e2456c" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_CONST_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1acc5444194616f279908cc27fc1ad3042" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_CONST_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1af7292c8acf4a42f4de86e857d0310013" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a9173d8a2a77921ea32a74d27ef425a8f" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a95b6830083d3a570edb2c6724bb9b49e" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ae60b5b4dd84995c668572a83aaaee4c6" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a8262f43f13e4a14a3a1701a22b70dbce" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a303e06bec9e89322d50d78c65d612a33" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1adf03410bee6d7f5345036857b48d2a38" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a842e5e4499f9042ac2193e31b19b98c1" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ab1757ec948df353ac259b0e37752f4c8" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a58bcbf28f96a9c25d7255607ce3502bf" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1abdbf3c510a10b237f885db1d6f27366b" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a64402cd309aa4edf585974199fa1129e" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a4398b0decae5fe3c32e432d64c2ce00e" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ac429e72e47753040fc7a23e5bd491a83" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a92510319821db0ceaf3e037a63df5c68" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1aea8adf40a66bbb704e4d24dbd919fdcc" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a28ac0c96150878e488e87b91c58af4c6" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a129f7eee269cfdee37758ec15b795fee" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD10</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ae579eeb5d0e6fa5200868cb1d74ccdb7" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>MOCK_METHOD2</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a9440f75381e8a44977c2caee7914098f" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>Nullary</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a8b7192d7008ba18710aa53804c022217" prot="private" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>operator=</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ae27d00da9698493b196d0913dd5b6c1a" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>OverloadedOnArgumentNumber</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1abc3dde10866e94084cdf5b3b412d2274" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>OverloadedOnArgumentNumber</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a78fc84ae56ba53a36047f0791d03fc58" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>OverloadedOnArgumentType</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ae45c3906c2196a0978720b91c521f91f" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>OverloadedOnArgumentType</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a94e43dbddc176d1702a7a7d7281f2642" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>OverloadedOnConstness</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a9014d2f6527f719b718b0915b27ff5c5" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>OverloadedOnConstness</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a5b586a1db3bbe520061f450551f238b3" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>RefQualifiedConstRef</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a99b57a335543fe6828ff2c70c0a726f5" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>RefQualifiedConstRefRef</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ae21eb58ea09d921bc244859687c21a16" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>RefQualifiedOverloaded</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a3fef0197e50b004509d02cfa4c6da20a" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>RefQualifiedOverloaded</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a6544443eb2ab978a74c4e1dd5e92675e" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>RefQualifiedOverloaded</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1ab88054355288ae3fc6bdd3fbf82044d2" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>RefQualifiedOverloaded</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1a53204e0e486eb2240659c468259c5f27" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>RefQualifiedRef</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1LegacyMockFoo_1af7bb0a91b68ba5aaeca67615c99a20c3" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>RefQualifiedRefRef</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a855bdcea5e7f0b17ee050da4969c8027" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>ReturnsFunctionPointer1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ae1315a533d4f38afb178623ac7c2337d" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>ReturnsFunctionPointer2</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1abb43737fd2eeb7599b6f0af540890f50" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>TakesConst</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a4765c543c11b5d544a35f9fe8de758bd" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>TakesConstReference</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1aaf21cef138ffa4a8f2372c7fbed95b18" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>TakesNonConstReference</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1af1f1d96db798fadbf53fbd886e7c738e" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>TypeWithComma</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1aa14850645cd7a5462480f1717df5153c" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>TypeWithHole</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1af9e3190c69647229baed1dba41c2fdf8" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>TypeWithTemplatedCopyCtor</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a6f28f91c92b59da029ed0cb61c3d1da6" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>Unary</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ab62327ee683b362d9e5579266b74a09c" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>VoidReturning</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a519fed9f1a8dceee37c8bb1fc990434d" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::LegacyMockFoo</scope><name>~FooInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
