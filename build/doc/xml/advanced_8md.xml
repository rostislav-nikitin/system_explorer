<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="advanced_8md" kind="file" language="Markdown">
    <compoundname>advanced.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Advanced<sp/>GoogleTest<sp/>Topics</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Introduction</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>that<sp/>you<sp/>have<sp/>read<sp/>the<sp/>[GoogleTest<sp/>Primer](primer.md)<sp/>and<sp/>learned<sp/>how<sp/>to</highlight></codeline>
<codeline><highlight class="normal">write<sp/>tests<sp/>using<sp/>GoogleTest,<sp/>it&apos;s<sp/>time<sp/>to<sp/>learn<sp/>some<sp/>new<sp/>tricks.<sp/>This<sp/>document</highlight></codeline>
<codeline><highlight class="normal">will<sp/>show<sp/>you<sp/>more<sp/>assertions<sp/>as<sp/>well<sp/>as<sp/>how<sp/>to<sp/>construct<sp/>complex<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">messages,<sp/>propagate<sp/>fatal<sp/>failures,<sp/>reuse<sp/>and<sp/>speed<sp/>up<sp/>your<sp/>test<sp/>fixtures,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">use<sp/>various<sp/>flags<sp/>with<sp/>your<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>More<sp/>Assertions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>section<sp/>covers<sp/>some<sp/>less<sp/>frequently<sp/>used,<sp/>but<sp/>still<sp/>significant,</highlight></codeline>
<codeline><highlight class="normal">assertions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Explicit<sp/>Success<sp/>and<sp/>Failure</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See<sp/>[Explicit<sp/>Success<sp/>and<sp/>Failure](reference/assertions.md#success-failure)<sp/>in</highlight></codeline>
<codeline><highlight class="normal">the<sp/>Assertions<sp/>Reference.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Exception<sp/>Assertions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See<sp/>[Exception<sp/>Assertions](reference/assertions.md#exceptions)<sp/>in<sp/>the<sp/>Assertions</highlight></codeline>
<codeline><highlight class="normal">Reference.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Predicate<sp/>Assertions<sp/>for<sp/>Better<sp/>Error<sp/>Messages</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Even<sp/>though<sp/>GoogleTest<sp/>has<sp/>a<sp/>rich<sp/>set<sp/>of<sp/>assertions,<sp/>they<sp/>can<sp/>never<sp/>be<sp/>complete,</highlight></codeline>
<codeline><highlight class="normal">as<sp/>it&apos;s<sp/>impossible<sp/>(nor<sp/>a<sp/>good<sp/>idea)<sp/>to<sp/>anticipate<sp/>all<sp/>scenarios<sp/>a<sp/>user<sp/>might</highlight></codeline>
<codeline><highlight class="normal">run<sp/>into.<sp/>Therefore,<sp/>sometimes<sp/>a<sp/>user<sp/>has<sp/>to<sp/>use<sp/>`EXPECT_TRUE()`<sp/>to<sp/>check<sp/>a</highlight></codeline>
<codeline><highlight class="normal">complex<sp/>expression,<sp/>for<sp/>lack<sp/>of<sp/>a<sp/>better<sp/>macro.<sp/>This<sp/>has<sp/>the<sp/>problem<sp/>of<sp/>not</highlight></codeline>
<codeline><highlight class="normal">showing<sp/>you<sp/>the<sp/>values<sp/>of<sp/>the<sp/>parts<sp/>of<sp/>the<sp/>expression,<sp/>making<sp/>it<sp/>hard<sp/>to</highlight></codeline>
<codeline><highlight class="normal">understand<sp/>what<sp/>went<sp/>wrong.<sp/>As<sp/>a<sp/>workaround,<sp/>some<sp/>users<sp/>choose<sp/>to<sp/>construct<sp/>the</highlight></codeline>
<codeline><highlight class="normal">failure<sp/>message<sp/>by<sp/>themselves,<sp/>streaming<sp/>it<sp/>into<sp/>`EXPECT_TRUE()`.<sp/>However,<sp/>this</highlight></codeline>
<codeline><highlight class="normal">is<sp/>awkward<sp/>especially<sp/>when<sp/>the<sp/>expression<sp/>has<sp/>side-effects<sp/>or<sp/>is<sp/>expensive<sp/>to</highlight></codeline>
<codeline><highlight class="normal">evaluate.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>gives<sp/>you<sp/>three<sp/>different<sp/>options<sp/>to<sp/>solve<sp/>this<sp/>problem:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Using<sp/>an<sp/>Existing<sp/>Boolean<sp/>Function</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>already<sp/>have<sp/>a<sp/>function<sp/>or<sp/>functor<sp/>that<sp/>returns<sp/>`bool`<sp/>(or<sp/>a<sp/>type<sp/>that</highlight></codeline>
<codeline><highlight class="normal">can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>`bool`),<sp/>you<sp/>can<sp/>use<sp/>it<sp/>in<sp/>a<sp/>*predicate</highlight></codeline>
<codeline><highlight class="normal">assertion*<sp/>to<sp/>get<sp/>the<sp/>function<sp/>arguments<sp/>printed<sp/>for<sp/>free.<sp/>See</highlight></codeline>
<codeline><highlight class="normal">[`EXPECT_PRED*`](reference/assertions.md#EXPECT_PRED)<sp/>in<sp/>the<sp/>Assertions</highlight></codeline>
<codeline><highlight class="normal">Reference<sp/>for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Using<sp/>a<sp/>Function<sp/>That<sp/>Returns<sp/>an<sp/>AssertionResult</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">While<sp/>`EXPECT_PRED*()`<sp/>and<sp/>friends<sp/>are<sp/>handy<sp/>for<sp/>a<sp/>quick<sp/>job,<sp/>the<sp/>syntax<sp/>is<sp/>not</highlight></codeline>
<codeline><highlight class="normal">satisfactory:<sp/>you<sp/>have<sp/>to<sp/>use<sp/>different<sp/>macros<sp/>for<sp/>different<sp/>arities,<sp/>and<sp/>it</highlight></codeline>
<codeline><highlight class="normal">feels<sp/>more<sp/>like<sp/>Lisp<sp/>than<sp/>C++.<sp/>The<sp/>`::testing::AssertionResult`<sp/>class<sp/>solves</highlight></codeline>
<codeline><highlight class="normal">this<sp/>problem.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">An<sp/>`AssertionResult`<sp/>object<sp/>represents<sp/>the<sp/>result<sp/>of<sp/>an<sp/>assertion<sp/>(whether<sp/>it&apos;s</highlight></codeline>
<codeline><highlight class="normal">a<sp/>success<sp/>or<sp/>a<sp/>failure,<sp/>and<sp/>an<sp/>associated<sp/>message).<sp/>You<sp/>can<sp/>create<sp/>an</highlight></codeline>
<codeline><highlight class="normal">`AssertionResult`<sp/>using<sp/>one<sp/>of<sp/>these<sp/>factory<sp/>functions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>testing<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>an<sp/>AssertionResult<sp/>object<sp/>to<sp/>indicate<sp/>that<sp/>an<sp/>assertion<sp/>has</highlight></codeline>
<codeline><highlight class="normal">//<sp/>succeeded.</highlight></codeline>
<codeline><highlight class="normal">AssertionResult<sp/>AssertionSuccess();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>an<sp/>AssertionResult<sp/>object<sp/>to<sp/>indicate<sp/>that<sp/>an<sp/>assertion<sp/>has</highlight></codeline>
<codeline><highlight class="normal">//<sp/>failed.</highlight></codeline>
<codeline><highlight class="normal">AssertionResult<sp/>AssertionFailure();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>then<sp/>use<sp/>the<sp/>`&lt;&lt;`<sp/>operator<sp/>to<sp/>stream<sp/>messages<sp/>to<sp/>the<sp/>`AssertionResult`</highlight></codeline>
<codeline><highlight class="normal">object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>provide<sp/>more<sp/>readable<sp/>messages<sp/>in<sp/>Boolean<sp/>assertions<sp/>(e.g.<sp/>`EXPECT_TRUE()`),</highlight></codeline>
<codeline><highlight class="normal">write<sp/>a<sp/>predicate<sp/>function<sp/>that<sp/>returns<sp/>`AssertionResult`<sp/>instead<sp/>of<sp/>`bool`.<sp/>For</highlight></codeline>
<codeline><highlight class="normal">example,<sp/>if<sp/>you<sp/>define<sp/>`IsEven()`<sp/>as:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">testing::AssertionResult<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionSuccess();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>odd&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">instead<sp/>of:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(n<sp/>%<sp/>2)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">the<sp/>failed<sp/>assertion<sp/>`EXPECT_TRUE(IsEven(Fib(4)))`<sp/>will<sp/>print:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```none</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>IsEven(Fib(4))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>false<sp/>(3<sp/>is<sp/>odd)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">instead<sp/>of<sp/>a<sp/>more<sp/>opaque</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```none</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>IsEven(Fib(4))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>informative<sp/>messages<sp/>in<sp/>`EXPECT_FALSE`<sp/>and<sp/>`ASSERT_FALSE`<sp/>as<sp/>well</highlight></codeline>
<codeline><highlight class="normal">(one<sp/>third<sp/>of<sp/>Boolean<sp/>assertions<sp/>in<sp/>the<sp/>Google<sp/>code<sp/>base<sp/>are<sp/>negative<sp/>ones),<sp/>and</highlight></codeline>
<codeline><highlight class="normal">are<sp/>fine<sp/>with<sp/>making<sp/>the<sp/>predicate<sp/>slower<sp/>in<sp/>the<sp/>success<sp/>case,<sp/>you<sp/>can<sp/>supply<sp/>a</highlight></codeline>
<codeline><highlight class="normal">success<sp/>message:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">testing::AssertionResult<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionSuccess()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>even&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>odd&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then<sp/>the<sp/>statement<sp/>`EXPECT_FALSE(IsEven(Fib(6)))`<sp/>will<sp/>print</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```none</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Value<sp/>of:<sp/>IsEven(Fib(6))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>true<sp/>(8<sp/>is<sp/>even)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Expected:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Using<sp/>a<sp/>Predicate-Formatter</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>find<sp/>the<sp/>default<sp/>message<sp/>generated<sp/>by</highlight></codeline>
<codeline><highlight class="normal">[`EXPECT_PRED*`](reference/assertions.md#EXPECT_PRED)<sp/>and</highlight></codeline>
<codeline><highlight class="normal">[`EXPECT_TRUE`](reference/assertions.md#EXPECT_TRUE)<sp/>unsatisfactory,<sp/>or<sp/>some</highlight></codeline>
<codeline><highlight class="normal">arguments<sp/>to<sp/>your<sp/>predicate<sp/>do<sp/>not<sp/>support<sp/>streaming<sp/>to<sp/>`ostream`,<sp/>you<sp/>can</highlight></codeline>
<codeline><highlight class="normal">instead<sp/>use<sp/>*predicate-formatter<sp/>assertions*<sp/>to<sp/>*fully*<sp/>customize<sp/>how<sp/>the</highlight></codeline>
<codeline><highlight class="normal">message<sp/>is<sp/>formatted.<sp/>See</highlight></codeline>
<codeline><highlight class="normal">[`EXPECT_PRED_FORMAT*`](reference/assertions.md#EXPECT_PRED_FORMAT)<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">Assertions<sp/>Reference<sp/>for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Floating-Point<sp/>Comparison</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See<sp/>[Floating-Point<sp/>Comparison](reference/assertions.md#floating-point)<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">Assertions<sp/>Reference.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Floating-Point<sp/>Predicate-Format<sp/>Functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Some<sp/>floating-point<sp/>operations<sp/>are<sp/>useful,<sp/>but<sp/>not<sp/>that<sp/>often<sp/>used.<sp/>In<sp/>order<sp/>to</highlight></codeline>
<codeline><highlight class="normal">avoid<sp/>an<sp/>explosion<sp/>of<sp/>new<sp/>macros,<sp/>we<sp/>provide<sp/>them<sp/>as<sp/>predicate-format<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">that<sp/>can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>predicate<sp/>assertion<sp/>macro</highlight></codeline>
<codeline><highlight class="normal">[`EXPECT_PRED_FORMAT2`](reference/assertions.md#EXPECT_PRED_FORMAT),<sp/>for</highlight></codeline>
<codeline><highlight class="normal">example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::FloatLE;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::DoubleLE;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">EXPECT_PRED_FORMAT2(FloatLE,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_PRED_FORMAT2(DoubleLE,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>above<sp/>code<sp/>verifies<sp/>that<sp/>`val1`<sp/>is<sp/>less<sp/>than,<sp/>or<sp/>approximately<sp/>equal<sp/>to,</highlight></codeline>
<codeline><highlight class="normal">`val2`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Asserting<sp/>Using<sp/>gMock<sp/>Matchers</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See<sp/>[`EXPECT_THAT`](reference/assertions.md#EXPECT_THAT)<sp/>in<sp/>the<sp/>Assertions</highlight></codeline>
<codeline><highlight class="normal">Reference.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>More<sp/>String<sp/>Assertions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(Please<sp/>read<sp/>the<sp/>[previous](#asserting-using-gmock-matchers)<sp/>section<sp/>first<sp/>if</highlight></codeline>
<codeline><highlight class="normal">you<sp/>haven&apos;t.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>the<sp/>gMock<sp/>[string<sp/>matchers](reference/matchers.md#string-matchers)</highlight></codeline>
<codeline><highlight class="normal">with<sp/>[`EXPECT_THAT`](reference/assertions.md#EXPECT_THAT)<sp/>to<sp/>do<sp/>more<sp/>string</highlight></codeline>
<codeline><highlight class="normal">comparison<sp/>tricks<sp/>(sub-string,<sp/>prefix,<sp/>suffix,<sp/>regular<sp/>expression,<sp/>and<sp/>etc).<sp/>For</highlight></codeline>
<codeline><highlight class="normal">example,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::HasSubstr;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MatchesRegex;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_THAT(foo_string,<sp/>HasSubstr(&quot;needle&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_THAT(bar_string,<sp/>MatchesRegex(&quot;\\w*\\d+&quot;));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Windows<sp/>HRESULT<sp/>assertions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See<sp/>[Windows<sp/>HRESULT<sp/>Assertions](reference/assertions.md#HRESULT)<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">Assertions<sp/>Reference.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Type<sp/>Assertions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>call<sp/>the<sp/>function</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">::testing::StaticAssertTypeEq&lt;T1,<sp/>T2&gt;();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">to<sp/>assert<sp/>that<sp/>types<sp/>`T1`<sp/>and<sp/>`T2`<sp/>are<sp/>the<sp/>same.<sp/>The<sp/>function<sp/>does<sp/>nothing<sp/>if</highlight></codeline>
<codeline><highlight class="normal">the<sp/>assertion<sp/>is<sp/>satisfied.<sp/>If<sp/>the<sp/>types<sp/>are<sp/>different,<sp/>the<sp/>function<sp/>call<sp/>will</highlight></codeline>
<codeline><highlight class="normal">fail<sp/>to<sp/>compile,<sp/>the<sp/>compiler<sp/>error<sp/>message<sp/>will<sp/>say<sp/>that<sp/>`T1<sp/>and<sp/>T2<sp/>are<sp/>not<sp/>the</highlight></codeline>
<codeline><highlight class="normal">same<sp/>type`<sp/>and<sp/>most<sp/>likely<sp/>(depending<sp/>on<sp/>the<sp/>compiler)<sp/>show<sp/>you<sp/>the<sp/>actual</highlight></codeline>
<codeline><highlight class="normal">values<sp/>of<sp/>`T1`<sp/>and<sp/>`T2`.<sp/>This<sp/>is<sp/>mainly<sp/>useful<sp/>inside<sp/>template<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Caveat**:<sp/>When<sp/>used<sp/>inside<sp/>a<sp/>member<sp/>function<sp/>of<sp/>a<sp/>class<sp/>template<sp/>or<sp/>a<sp/>function</highlight></codeline>
<codeline><highlight class="normal">template,<sp/>`StaticAssertTypeEq&lt;T1,<sp/>T2&gt;()`<sp/>is<sp/>effective<sp/>only<sp/>if<sp/>the<sp/>function<sp/>is</highlight></codeline>
<codeline><highlight class="normal">instantiated.<sp/>For<sp/>example,<sp/>given:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>Bar()<sp/>{<sp/>testing::StaticAssertTypeEq&lt;int,<sp/>T&gt;();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">the<sp/>code:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Test1()<sp/>{<sp/>Foo&lt;bool&gt;<sp/>foo;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">will<sp/>not<sp/>generate<sp/>a<sp/>compiler<sp/>error,<sp/>as<sp/>`Foo&lt;bool&gt;::Bar()`<sp/>is<sp/>never<sp/>actually</highlight></codeline>
<codeline><highlight class="normal">instantiated.<sp/>Instead,<sp/>you<sp/>need:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Test2()<sp/>{<sp/>Foo&lt;bool&gt;<sp/>foo;<sp/>foo.Bar();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">to<sp/>cause<sp/>a<sp/>compiler<sp/>error.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Assertion<sp/>Placement</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>assertions<sp/>in<sp/>any<sp/>C++<sp/>function.<sp/>In<sp/>particular,<sp/>it<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="normal">a<sp/>method<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class.<sp/>The<sp/>one<sp/>constraint<sp/>is<sp/>that<sp/>assertions<sp/>that</highlight></codeline>
<codeline><highlight class="normal">generate<sp/>a<sp/>fatal<sp/>failure<sp/>(`FAIL*`<sp/>and<sp/>`ASSERT_*`)<sp/>can<sp/>only<sp/>be<sp/>used<sp/>in</highlight></codeline>
<codeline><highlight class="normal">void-returning<sp/>functions.<sp/>This<sp/>is<sp/>a<sp/>consequence<sp/>of<sp/>Google&apos;s<sp/>not<sp/>using</highlight></codeline>
<codeline><highlight class="normal">exceptions.<sp/>By<sp/>placing<sp/>it<sp/>in<sp/>a<sp/>non-void<sp/>function<sp/>you&apos;ll<sp/>get<sp/>a<sp/>confusing<sp/>compile</highlight></codeline>
<codeline><highlight class="normal">error<sp/>like<sp/>`&quot;error:<sp/>void<sp/>value<sp/>not<sp/>ignored<sp/>as<sp/>it<sp/>ought<sp/>to<sp/>be&quot;`<sp/>or<sp/>`&quot;cannot</highlight></codeline>
<codeline><highlight class="normal">initialize<sp/>return<sp/>object<sp/>of<sp/>type<sp/>&apos;bool&apos;<sp/>with<sp/>an<sp/>rvalue<sp/>of<sp/>type<sp/>&apos;void&apos;&quot;`<sp/>or</highlight></codeline>
<codeline><highlight class="normal">`&quot;error:<sp/>no<sp/>viable<sp/>conversion<sp/>from<sp/>&apos;void&apos;<sp/>to<sp/>&apos;string&apos;&quot;`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>need<sp/>to<sp/>use<sp/>fatal<sp/>assertions<sp/>in<sp/>a<sp/>function<sp/>that<sp/>returns<sp/>non-void,<sp/>one</highlight></codeline>
<codeline><highlight class="normal">option<sp/>is<sp/>to<sp/>make<sp/>the<sp/>function<sp/>return<sp/>the<sp/>value<sp/>in<sp/>an<sp/>out<sp/>parameter<sp/>instead.<sp/>For</highlight></codeline>
<codeline><highlight class="normal">example,<sp/>you<sp/>can<sp/>rewrite<sp/>`T2<sp/>Foo(T1<sp/>x)`<sp/>to<sp/>`void<sp/>Foo(T1<sp/>x,<sp/>T2*<sp/>result)`.<sp/>You</highlight></codeline>
<codeline><highlight class="normal">need<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>`*result`<sp/>contains<sp/>some<sp/>sensible<sp/>value<sp/>even<sp/>when<sp/>the</highlight></codeline>
<codeline><highlight class="normal">function<sp/>returns<sp/>prematurely.<sp/>As<sp/>the<sp/>function<sp/>now<sp/>returns<sp/>`void`,<sp/>you<sp/>can<sp/>use</highlight></codeline>
<codeline><highlight class="normal">any<sp/>assertion<sp/>inside<sp/>of<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>changing<sp/>the<sp/>function&apos;s<sp/>type<sp/>is<sp/>not<sp/>an<sp/>option,<sp/>you<sp/>should<sp/>just<sp/>use<sp/>assertions</highlight></codeline>
<codeline><highlight class="normal">that<sp/>generate<sp/>non-fatal<sp/>failures,<sp/>such<sp/>as<sp/>`ADD_FAILURE*`<sp/>and<sp/>`EXPECT_*`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">NOTE:<sp/>Constructors<sp/>and<sp/>destructors<sp/>are<sp/>not<sp/>considered<sp/>void-returning<sp/>functions,</highlight></codeline>
<codeline><highlight class="normal">according<sp/>to<sp/>the<sp/>C++<sp/>language<sp/>specification,<sp/>and<sp/>so<sp/>you<sp/>may<sp/>not<sp/>use<sp/>fatal</highlight></codeline>
<codeline><highlight class="normal">assertions<sp/>in<sp/>them;<sp/>you&apos;ll<sp/>get<sp/>a<sp/>compilation<sp/>error<sp/>if<sp/>you<sp/>try.<sp/>Instead,<sp/>either</highlight></codeline>
<codeline><highlight class="normal">call<sp/>`abort`<sp/>and<sp/>crash<sp/>the<sp/>entire<sp/>test<sp/>executable,<sp/>or<sp/>put<sp/>the<sp/>fatal<sp/>assertion<sp/>in</highlight></codeline>
<codeline><highlight class="normal">a<sp/>`SetUp`/`TearDown`<sp/>function;<sp/>see</highlight></codeline>
<codeline><highlight class="normal">[constructor/destructor<sp/>vs.<sp/>`SetUp`/`TearDown`](faq.md#CtorVsSetUp)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.warning}</highlight></codeline>
<codeline><highlight class="normal">WARNING:<sp/>A<sp/>fatal<sp/>assertion<sp/>in<sp/>a<sp/>helper<sp/>function<sp/>(private<sp/>void-returning<sp/>method)</highlight></codeline>
<codeline><highlight class="normal">called<sp/>from<sp/>a<sp/>constructor<sp/>or<sp/>destructor<sp/>does<sp/>not<sp/>terminate<sp/>the<sp/>current<sp/>test,<sp/>as</highlight></codeline>
<codeline><highlight class="normal">your<sp/>intuition<sp/>might<sp/>suggest:<sp/>it<sp/>merely<sp/>returns<sp/>from<sp/>the<sp/>constructor<sp/>or</highlight></codeline>
<codeline><highlight class="normal">destructor<sp/>early,<sp/>possibly<sp/>leaving<sp/>your<sp/>object<sp/>in<sp/>a<sp/>partially-constructed<sp/>or</highlight></codeline>
<codeline><highlight class="normal">partially-destructed<sp/>state!<sp/>You<sp/>almost<sp/>certainly<sp/>want<sp/>to<sp/>`abort`<sp/>or<sp/>use</highlight></codeline>
<codeline><highlight class="normal">`SetUp`/`TearDown`<sp/>instead.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Skipping<sp/>test<sp/>execution</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Related<sp/>to<sp/>the<sp/>assertions<sp/>`SUCCEED()`<sp/>and<sp/>`FAIL()`,<sp/>you<sp/>can<sp/>prevent<sp/>further<sp/>test</highlight></codeline>
<codeline><highlight class="normal">execution<sp/>at<sp/>runtime<sp/>with<sp/>the<sp/>`GTEST_SKIP()`<sp/>macro.<sp/>This<sp/>is<sp/>useful<sp/>when<sp/>you<sp/>need</highlight></codeline>
<codeline><highlight class="normal">to<sp/>check<sp/>for<sp/>preconditions<sp/>of<sp/>the<sp/>system<sp/>under<sp/>test<sp/>during<sp/>runtime<sp/>and<sp/>skip</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>in<sp/>a<sp/>meaningful<sp/>way.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`GTEST_SKIP()`<sp/>can<sp/>be<sp/>used<sp/>in<sp/>individual<sp/>test<sp/>cases<sp/>or<sp/>in<sp/>the<sp/>`SetUp()`<sp/>methods</highlight></codeline>
<codeline><highlight class="normal">of<sp/>classes<sp/>derived<sp/>from<sp/>either<sp/>`::testing::Environment`<sp/>or<sp/>`::testing::Test`.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TEST(SkipTest,<sp/>DoesSkip)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GTEST_SKIP()<sp/>&lt;&lt;<sp/>&quot;Skipping<sp/>single<sp/>test&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>1);<sp/><sp/>//<sp/>Won&apos;t<sp/>fail;<sp/>it<sp/>won&apos;t<sp/>be<sp/>executed</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>SkipFixture<sp/>:<sp/>public<sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_SKIP()<sp/>&lt;&lt;<sp/>&quot;Skipping<sp/>all<sp/>tests<sp/>for<sp/>this<sp/>fixture&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>for<sp/>SkipFixture<sp/>won&apos;t<sp/>be<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal">TEST_F(SkipFixture,<sp/>SkipsOneTest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>7);<sp/><sp/>//<sp/>Won&apos;t<sp/>fail</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>with<sp/>assertion<sp/>macros,<sp/>you<sp/>can<sp/>stream<sp/>a<sp/>custom<sp/>message<sp/>into<sp/>`GTEST_SKIP()`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Teaching<sp/>GoogleTest<sp/>How<sp/>to<sp/>Print<sp/>Your<sp/>Values</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>a<sp/>test<sp/>assertion<sp/>such<sp/>as<sp/>`EXPECT_EQ`<sp/>fails,<sp/>GoogleTest<sp/>prints<sp/>the<sp/>argument</highlight></codeline>
<codeline><highlight class="normal">values<sp/>to<sp/>help<sp/>you<sp/>debug.<sp/>It<sp/>does<sp/>this<sp/>using<sp/>a<sp/>user-extensible<sp/>value<sp/>printer.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>printer<sp/>knows<sp/>how<sp/>to<sp/>print<sp/>built-in<sp/>C++<sp/>types,<sp/>native<sp/>arrays,<sp/>STL</highlight></codeline>
<codeline><highlight class="normal">containers,<sp/>and<sp/>any<sp/>type<sp/>that<sp/>supports<sp/>the<sp/>`&lt;&lt;`<sp/>operator.<sp/>For<sp/>other<sp/>types,<sp/>it</highlight></codeline>
<codeline><highlight class="normal">prints<sp/>the<sp/>raw<sp/>bytes<sp/>in<sp/>the<sp/>value<sp/>and<sp/>hopes<sp/>that<sp/>you<sp/>the<sp/>user<sp/>can<sp/>figure<sp/>it<sp/>out.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>mentioned<sp/>earlier,<sp/>the<sp/>printer<sp/>is<sp/>*extensible*.<sp/>That<sp/>means<sp/>you<sp/>can<sp/>teach<sp/>it</highlight></codeline>
<codeline><highlight class="normal">to<sp/>do<sp/>a<sp/>better<sp/>job<sp/>at<sp/>printing<sp/>your<sp/>particular<sp/>type<sp/>than<sp/>to<sp/>dump<sp/>the<sp/>bytes.<sp/>To</highlight></codeline>
<codeline><highlight class="normal">do<sp/>that,<sp/>define<sp/>an<sp/>`AbslStringify()`<sp/>overload<sp/>as<sp/>a<sp/>`friend`<sp/>function<sp/>template</highlight></codeline>
<codeline><highlight class="normal">for<sp/>your<sp/>type:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>foo<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Point<sp/>{<sp/><sp/>//<sp/>We<sp/>want<sp/>GoogleTest<sp/>to<sp/>be<sp/>able<sp/>to<sp/>print<sp/>instances<sp/>of<sp/>this.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Provide<sp/>a<sp/>friend<sp/>overload.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>Sink&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>friend<sp/>void<sp/>AbslStringify(Sink&amp;<sp/>sink,<sp/>const<sp/>Point&amp;<sp/>point)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>absl::Format(&amp;sink,<sp/>&quot;(%d,<sp/>%d)&quot;,<sp/>point.x,<sp/>point.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>y;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>you<sp/>can&apos;t<sp/>declare<sp/>the<sp/>function<sp/>in<sp/>the<sp/>class<sp/>it&apos;s<sp/>important<sp/>that<sp/>the</highlight></codeline>
<codeline><highlight class="normal">//<sp/>AbslStringify<sp/>overload<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>SAME<sp/>namespace<sp/>that<sp/>defines<sp/>Point.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>C++&apos;s<sp/>look-up<sp/>rules<sp/>rely<sp/>on<sp/>that.</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>class<sp/>EnumWithStringify<sp/>{<sp/>kMany<sp/>=<sp/>0,<sp/>kChoices<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>Sink&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>AbslStringify(Sink&amp;<sp/>sink,<sp/>EnumWithStringify<sp/>e)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>absl::Format(&amp;sink,<sp/>&quot;%s&quot;,<sp/>e<sp/>==<sp/>EnumWithStringify::kMany<sp/>?<sp/>&quot;Many&quot;<sp/>:<sp/>&quot;Choices&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>foo</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">Note:<sp/>`AbslStringify()`<sp/>utilizes<sp/>a<sp/>generic<sp/>&quot;sink&quot;<sp/>buffer<sp/>to<sp/>construct<sp/>its</highlight></codeline>
<codeline><highlight class="normal">string.<sp/>For<sp/>more<sp/>information<sp/>about<sp/>supported<sp/>operations<sp/>on<sp/>`AbslStringify()`&apos;s</highlight></codeline>
<codeline><highlight class="normal">sink,<sp/>see<sp/>go/abslstringify.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`AbslStringify()`<sp/>can<sp/>also<sp/>use<sp/>`absl::StrFormat`&apos;s<sp/>catch-all<sp/>`%v`<sp/>type<sp/>specifier</highlight></codeline>
<codeline><highlight class="normal">within<sp/>its<sp/>own<sp/>format<sp/>strings<sp/>to<sp/>perform<sp/>type<sp/>deduction.<sp/>`Point`<sp/>above<sp/>could<sp/>be</highlight></codeline>
<codeline><highlight class="normal">formatted<sp/>as<sp/>`&quot;(%v,<sp/>%v)&quot;`<sp/>for<sp/>example,<sp/>and<sp/>deduce<sp/>the<sp/>`int`<sp/>values<sp/>as<sp/>`%d`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sometimes,<sp/>`AbslStringify()`<sp/>might<sp/>not<sp/>be<sp/>an<sp/>option:<sp/>your<sp/>team<sp/>may<sp/>wish<sp/>to<sp/>print</highlight></codeline>
<codeline><highlight class="normal">types<sp/>with<sp/>extra<sp/>debugging<sp/>information<sp/>for<sp/>testing<sp/>purposes<sp/>only.<sp/>If<sp/>so,<sp/>you<sp/>can</highlight></codeline>
<codeline><highlight class="normal">instead<sp/>define<sp/>a<sp/>`PrintTo()`<sp/>function<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ostream&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>foo<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Point<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>friend<sp/>void<sp/>PrintTo(const<sp/>Point&amp;<sp/>point,<sp/>std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>point.x<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>point.y<sp/>&lt;&lt;<sp/>&quot;)&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>y;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>you<sp/>can&apos;t<sp/>declare<sp/>the<sp/>function<sp/>in<sp/>the<sp/>class<sp/>it&apos;s<sp/>important<sp/>that<sp/>PrintTo()</highlight></codeline>
<codeline><highlight class="normal">//<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>SAME<sp/>namespace<sp/>that<sp/>defines<sp/>Point.<sp/><sp/>C++&apos;s<sp/>look-up<sp/>rules</highlight></codeline>
<codeline><highlight class="normal">//<sp/>rely<sp/>on<sp/>that.</highlight></codeline>
<codeline><highlight class="normal">void<sp/>PrintTo(const<sp/>Point&amp;<sp/>point,<sp/>std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>point.x<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>point.y<sp/>&lt;&lt;<sp/>&quot;)&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>foo</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>have<sp/>defined<sp/>both<sp/>`AbslStringify()`<sp/>and<sp/>`PrintTo()`,<sp/>the<sp/>latter<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">used<sp/>by<sp/>GoogleTest.<sp/>This<sp/>allows<sp/>you<sp/>to<sp/>customize<sp/>how<sp/>the<sp/>value<sp/>appears<sp/>in</highlight></codeline>
<codeline><highlight class="normal">GoogleTest&apos;s<sp/>output<sp/>without<sp/>affecting<sp/>code<sp/>that<sp/>relies<sp/>on<sp/>the<sp/>behavior<sp/>of</highlight></codeline>
<codeline><highlight class="normal">`AbslStringify()`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>have<sp/>an<sp/>existing<sp/>`&lt;&lt;`<sp/>operator<sp/>and<sp/>would<sp/>like<sp/>to<sp/>define<sp/>an</highlight></codeline>
<codeline><highlight class="normal">`AbslStringify()`,<sp/>the<sp/>latter<sp/>will<sp/>be<sp/>used<sp/>for<sp/>GoogleTest<sp/>printing.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>to<sp/>print<sp/>a<sp/>value<sp/>`x`<sp/>using<sp/>GoogleTest&apos;s<sp/>value<sp/>printer<sp/>yourself,<sp/>just</highlight></codeline>
<codeline><highlight class="normal">call<sp/>`::testing::PrintToString(x)`,<sp/>which<sp/>returns<sp/>an<sp/>`std::string`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">vector&lt;pair&lt;Point,<sp/>int&gt;<sp/>&gt;<sp/>point_ints<sp/>=<sp/>GetPointIntVector();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EXPECT_TRUE(IsCorrectPointIntVector(point_ints))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;point_ints<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>testing::PrintToString(point_ints);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>more<sp/>details<sp/>regarding<sp/>`AbslStringify()`<sp/>and<sp/>its<sp/>integration<sp/>with<sp/>other</highlight></codeline>
<codeline><highlight class="normal">libraries,<sp/>see<sp/>go/abslstringify.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Death<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>many<sp/>applications,<sp/>there<sp/>are<sp/>assertions<sp/>that<sp/>can<sp/>cause<sp/>application<sp/>failure<sp/>if</highlight></codeline>
<codeline><highlight class="normal">a<sp/>condition<sp/>is<sp/>not<sp/>met.<sp/>These<sp/>consistency<sp/>checks,<sp/>which<sp/>ensure<sp/>that<sp/>the<sp/>program</highlight></codeline>
<codeline><highlight class="normal">is<sp/>in<sp/>a<sp/>known<sp/>good<sp/>state,<sp/>are<sp/>there<sp/>to<sp/>fail<sp/>at<sp/>the<sp/>earliest<sp/>possible<sp/>time<sp/>after</highlight></codeline>
<codeline><highlight class="normal">some<sp/>program<sp/>state<sp/>is<sp/>corrupted.<sp/>If<sp/>the<sp/>assertion<sp/>checks<sp/>the<sp/>wrong<sp/>condition,</highlight></codeline>
<codeline><highlight class="normal">then<sp/>the<sp/>program<sp/>may<sp/>proceed<sp/>in<sp/>an<sp/>erroneous<sp/>state,<sp/>which<sp/>could<sp/>lead<sp/>to<sp/>memory</highlight></codeline>
<codeline><highlight class="normal">corruption,<sp/>security<sp/>holes,<sp/>or<sp/>worse.<sp/>Hence<sp/>it<sp/>is<sp/>vitally<sp/>important<sp/>to<sp/>test<sp/>that</highlight></codeline>
<codeline><highlight class="normal">such<sp/>assertion<sp/>statements<sp/>work<sp/>as<sp/>expected.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Since<sp/>these<sp/>precondition<sp/>checks<sp/>cause<sp/>the<sp/>processes<sp/>to<sp/>die,<sp/>we<sp/>call<sp/>such<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">_death<sp/>tests_.<sp/>More<sp/>generally,<sp/>any<sp/>test<sp/>that<sp/>checks<sp/>that<sp/>a<sp/>program<sp/>terminates</highlight></codeline>
<codeline><highlight class="normal">(except<sp/>by<sp/>throwing<sp/>an<sp/>exception)<sp/>in<sp/>an<sp/>expected<sp/>fashion<sp/>is<sp/>also<sp/>a<sp/>death<sp/>test.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>if<sp/>a<sp/>piece<sp/>of<sp/>code<sp/>throws<sp/>an<sp/>exception,<sp/>we<sp/>don&apos;t<sp/>consider<sp/>it<sp/>&quot;death&quot;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>the<sp/>purpose<sp/>of<sp/>death<sp/>tests,<sp/>as<sp/>the<sp/>caller<sp/>of<sp/>the<sp/>code<sp/>could<sp/>catch<sp/>the</highlight></codeline>
<codeline><highlight class="normal">exception<sp/>and<sp/>avoid<sp/>the<sp/>crash.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>verify<sp/>exceptions<sp/>thrown<sp/>by<sp/>your</highlight></codeline>
<codeline><highlight class="normal">code,<sp/>see<sp/>[Exception<sp/>Assertions](#ExceptionAssertions).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>to<sp/>test<sp/>`EXPECT_*()/ASSERT_*()`<sp/>failures<sp/>in<sp/>your<sp/>test<sp/>code,<sp/>see</highlight></codeline>
<codeline><highlight class="normal">[&quot;Catching&quot;<sp/>Failures](#catching-failures).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How<sp/>to<sp/>Write<sp/>a<sp/>Death<sp/>Test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>provides<sp/>assertion<sp/>macros<sp/>to<sp/>support<sp/>death<sp/>tests.<sp/>See</highlight></codeline>
<codeline><highlight class="normal">[Death<sp/>Assertions](reference/assertions.md#death)<sp/>in<sp/>the<sp/>Assertions<sp/>Reference</highlight></codeline>
<codeline><highlight class="normal">for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>write<sp/>a<sp/>death<sp/>test,<sp/>simply<sp/>use<sp/>one<sp/>of<sp/>the<sp/>macros<sp/>inside<sp/>your<sp/>test<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>Foo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>death<sp/>test<sp/>uses<sp/>a<sp/>compound<sp/>statement.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Foo(&amp;n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/>&quot;Error<sp/>on<sp/>line<sp/>.*<sp/>of<sp/>Foo()&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>NormalExit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EXIT(NormalExit(),<sp/>testing::ExitedWithCode(0),<sp/>&quot;Success&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>KillProcess)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EXIT(KillProcess(),<sp/>testing::KilledBySignal(SIGKILL),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Sending<sp/>myself<sp/>unblockable<sp/>signal&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">verifies<sp/>that:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>calling<sp/>`Foo(5)`<sp/>causes<sp/>the<sp/>process<sp/>to<sp/>die<sp/>with<sp/>the<sp/>given<sp/>error<sp/>message,</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>calling<sp/>`NormalExit()`<sp/>causes<sp/>the<sp/>process<sp/>to<sp/>print<sp/>`&quot;Success&quot;`<sp/>to<sp/>stderr<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>exit<sp/>with<sp/>exit<sp/>code<sp/>0,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>calling<sp/>`KillProcess()`<sp/>kills<sp/>the<sp/>process<sp/>with<sp/>signal<sp/>`SIGKILL`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>test<sp/>function<sp/>body<sp/>may<sp/>contain<sp/>other<sp/>assertions<sp/>and<sp/>statements<sp/>as<sp/>well,<sp/>if</highlight></codeline>
<codeline><highlight class="normal">necessary.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>a<sp/>death<sp/>test<sp/>only<sp/>cares<sp/>about<sp/>three<sp/>things:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>does<sp/>`statement`<sp/>abort<sp/>or<sp/>exit<sp/>the<sp/>process?</highlight></codeline>
<codeline><highlight class="normal">2.<sp/><sp/>(in<sp/>the<sp/>case<sp/>of<sp/>`ASSERT_EXIT`<sp/>and<sp/>`EXPECT_EXIT`)<sp/>does<sp/>the<sp/>exit<sp/>status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>satisfy<sp/>`predicate`?<sp/>Or<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>`ASSERT_DEATH`<sp/>and<sp/>`EXPECT_DEATH`)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>the<sp/>exit<sp/>status<sp/>non-zero?<sp/>And</highlight></codeline>
<codeline><highlight class="normal">3.<sp/><sp/>does<sp/>the<sp/>stderr<sp/>output<sp/>match<sp/>`matcher`?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>particular,<sp/>if<sp/>`statement`<sp/>generates<sp/>an<sp/>`ASSERT_*`<sp/>or<sp/>`EXPECT_*`<sp/>failure,<sp/>it</highlight></codeline>
<codeline><highlight class="normal">will<sp/>**not**<sp/>cause<sp/>the<sp/>death<sp/>test<sp/>to<sp/>fail,<sp/>as<sp/>GoogleTest<sp/>assertions<sp/>don&apos;t<sp/>abort</highlight></codeline>
<codeline><highlight class="normal">the<sp/>process.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Death<sp/>Test<sp/>Naming</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.important}</highlight></codeline>
<codeline><highlight class="normal">IMPORTANT:<sp/>We<sp/>strongly<sp/>recommend<sp/>you<sp/>to<sp/>follow<sp/>the<sp/>convention<sp/>of<sp/>naming<sp/>your</highlight></codeline>
<codeline><highlight class="normal">**test<sp/>suite**<sp/>(not<sp/>test)<sp/>`*DeathTest`<sp/>when<sp/>it<sp/>contains<sp/>a<sp/>death<sp/>test,<sp/>as</highlight></codeline>
<codeline><highlight class="normal">demonstrated<sp/>in<sp/>the<sp/>above<sp/>example.<sp/>The</highlight></codeline>
<codeline><highlight class="normal">[Death<sp/>Tests<sp/>And<sp/>Threads](#death-tests-and-threads)<sp/>section<sp/>below<sp/>explains<sp/>why.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>test<sp/>fixture<sp/>class<sp/>is<sp/>shared<sp/>by<sp/>normal<sp/>tests<sp/>and<sp/>death<sp/>tests,<sp/>you<sp/>can<sp/>use</highlight></codeline>
<codeline><highlight class="normal">`using`<sp/>or<sp/>`typedef`<sp/>to<sp/>introduce<sp/>an<sp/>alias<sp/>for<sp/>the<sp/>fixture<sp/>class<sp/>and<sp/>avoid</highlight></codeline>
<codeline><highlight class="normal">duplicating<sp/>its<sp/>code:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>FooDeathTest<sp/>=<sp/>FooTest;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>DoesThis)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>normal<sp/>test</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooDeathTest,<sp/>DoesThat)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>death<sp/>test</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Regular<sp/>Expression<sp/>Syntax</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>built<sp/>with<sp/>Bazel<sp/>and<sp/>using<sp/>Abseil,<sp/>GoogleTest<sp/>uses<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[RE2](https://github.com/google/re2/wiki/Syntax)<sp/>syntax.<sp/>Otherwise,<sp/>for<sp/>POSIX</highlight></codeline>
<codeline><highlight class="normal">systems<sp/>(Linux,<sp/>Cygwin,<sp/>Mac),<sp/>GoogleTest<sp/>uses<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[POSIX<sp/>extended<sp/>regular<sp/>expression](http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html#tag_09_04)</highlight></codeline>
<codeline><highlight class="normal">syntax.<sp/>To<sp/>learn<sp/>about<sp/>POSIX<sp/>syntax,<sp/>you<sp/>may<sp/>want<sp/>to<sp/>read<sp/>this</highlight></codeline>
<codeline><highlight class="normal">[Wikipedia<sp/>entry](http://en.wikipedia.org/wiki/Regular_expression#POSIX_extended).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">On<sp/>Windows,<sp/>GoogleTest<sp/>uses<sp/>its<sp/>own<sp/>simple<sp/>regular<sp/>expression<sp/>implementation.<sp/>It</highlight></codeline>
<codeline><highlight class="normal">lacks<sp/>many<sp/>features.<sp/>For<sp/>example,<sp/>we<sp/>don&apos;t<sp/>support<sp/>union<sp/>(`&quot;x|y&quot;`),<sp/>grouping</highlight></codeline>
<codeline><highlight class="normal">(`&quot;(xy)&quot;`),<sp/>brackets<sp/>(`&quot;[xy]&quot;`),<sp/>and<sp/>repetition<sp/>count<sp/>(`&quot;x{5,7}&quot;`),<sp/>among</highlight></codeline>
<codeline><highlight class="normal">others.<sp/>Below<sp/>is<sp/>what<sp/>we<sp/>do<sp/>support<sp/>(`A`<sp/>denotes<sp/>a<sp/>literal<sp/>character,<sp/>period</highlight></codeline>
<codeline><highlight class="normal">(`.`),<sp/>or<sp/>a<sp/>single<sp/>`\\<sp/>`<sp/>escape<sp/>sequence;<sp/>`x`<sp/>and<sp/>`y`<sp/>denote<sp/>regular</highlight></codeline>
<codeline><highlight class="normal">expressions.):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Expression<sp/>|<sp/>Meaning</highlight></codeline>
<codeline><highlight class="normal">----------<sp/>|<sp/>--------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">`c`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>literal<sp/>character<sp/>`c`</highlight></codeline>
<codeline><highlight class="normal">`\\d`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>decimal<sp/>digit</highlight></codeline>
<codeline><highlight class="normal">`\\D`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>character<sp/>that&apos;s<sp/>not<sp/>a<sp/>decimal<sp/>digit</highlight></codeline>
<codeline><highlight class="normal">`\\f`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>`\f`</highlight></codeline>
<codeline><highlight class="normal">`\\n`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>`\n`</highlight></codeline>
<codeline><highlight class="normal">`\\r`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>`\r`</highlight></codeline>
<codeline><highlight class="normal">`\\s`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>ASCII<sp/>whitespace,<sp/>including<sp/>`\n`</highlight></codeline>
<codeline><highlight class="normal">`\\S`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>character<sp/>that&apos;s<sp/>not<sp/>a<sp/>whitespace</highlight></codeline>
<codeline><highlight class="normal">`\\t`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>`\t`</highlight></codeline>
<codeline><highlight class="normal">`\\v`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>`\v`</highlight></codeline>
<codeline><highlight class="normal">`\\w`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>letter,<sp/>`_`,<sp/>or<sp/>decimal<sp/>digit</highlight></codeline>
<codeline><highlight class="normal">`\\W`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>character<sp/>that<sp/>`\\w`<sp/>doesn&apos;t<sp/>match</highlight></codeline>
<codeline><highlight class="normal">`\\c`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>literal<sp/>character<sp/>`c`,<sp/>which<sp/>must<sp/>be<sp/>a<sp/>punctuation</highlight></codeline>
<codeline><highlight class="normal">`.`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>any<sp/>single<sp/>character<sp/>except<sp/>`\n`</highlight></codeline>
<codeline><highlight class="normal">`A?`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>0<sp/>or<sp/>1<sp/>occurrences<sp/>of<sp/>`A`</highlight></codeline>
<codeline><highlight class="normal">`A*`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>0<sp/>or<sp/>many<sp/>occurrences<sp/>of<sp/>`A`</highlight></codeline>
<codeline><highlight class="normal">`A+`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>1<sp/>or<sp/>many<sp/>occurrences<sp/>of<sp/>`A`</highlight></codeline>
<codeline><highlight class="normal">`^`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>string<sp/>(not<sp/>that<sp/>of<sp/>each<sp/>line)</highlight></codeline>
<codeline><highlight class="normal">`$`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>the<sp/>end<sp/>of<sp/>a<sp/>string<sp/>(not<sp/>that<sp/>of<sp/>each<sp/>line)</highlight></codeline>
<codeline><highlight class="normal">`xy`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>matches<sp/>`x`<sp/>followed<sp/>by<sp/>`y`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>help<sp/>you<sp/>determine<sp/>which<sp/>capability<sp/>is<sp/>available<sp/>on<sp/>your<sp/>system,<sp/>GoogleTest</highlight></codeline>
<codeline><highlight class="normal">defines<sp/>macros<sp/>to<sp/>govern<sp/>which<sp/>regular<sp/>expression<sp/>it<sp/>is<sp/>using.<sp/>The<sp/>macros<sp/>are:</highlight></codeline>
<codeline><highlight class="normal">`GTEST_USES_SIMPLE_RE=1`<sp/>or<sp/>`GTEST_USES_POSIX_RE=1`.<sp/>If<sp/>you<sp/>want<sp/>your<sp/>death</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>to<sp/>work<sp/>in<sp/>all<sp/>cases,<sp/>you<sp/>can<sp/>either<sp/>`#if`<sp/>on<sp/>these<sp/>macros<sp/>or<sp/>use<sp/>the<sp/>more</highlight></codeline>
<codeline><highlight class="normal">limited<sp/>syntax<sp/>only.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How<sp/>It<sp/>Works</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See<sp/>[Death<sp/>Assertions](reference/assertions.md#death)<sp/>in<sp/>the<sp/>Assertions</highlight></codeline>
<codeline><highlight class="normal">Reference.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Death<sp/>Tests<sp/>And<sp/>Threads</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>reason<sp/>for<sp/>the<sp/>two<sp/>death<sp/>test<sp/>styles<sp/>has<sp/>to<sp/>do<sp/>with<sp/>thread<sp/>safety.<sp/>Due<sp/>to</highlight></codeline>
<codeline><highlight class="normal">well-known<sp/>problems<sp/>with<sp/>forking<sp/>in<sp/>the<sp/>presence<sp/>of<sp/>threads,<sp/>death<sp/>tests<sp/>should</highlight></codeline>
<codeline><highlight class="normal">be<sp/>run<sp/>in<sp/>a<sp/>single-threaded<sp/>context.<sp/>Sometimes,<sp/>however,<sp/>it<sp/>isn&apos;t<sp/>feasible<sp/>to</highlight></codeline>
<codeline><highlight class="normal">arrange<sp/>that<sp/>kind<sp/>of<sp/>environment.<sp/>For<sp/>example,<sp/>statically-initialized<sp/>modules</highlight></codeline>
<codeline><highlight class="normal">may<sp/>start<sp/>threads<sp/>before<sp/>main<sp/>is<sp/>ever<sp/>reached.<sp/>Once<sp/>threads<sp/>have<sp/>been<sp/>created,</highlight></codeline>
<codeline><highlight class="normal">it<sp/>may<sp/>be<sp/>difficult<sp/>or<sp/>impossible<sp/>to<sp/>clean<sp/>them<sp/>up.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>has<sp/>three<sp/>features<sp/>intended<sp/>to<sp/>raise<sp/>awareness<sp/>of<sp/>threading<sp/>issues.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>A<sp/>warning<sp/>is<sp/>emitted<sp/>if<sp/>multiple<sp/>threads<sp/>are<sp/>running<sp/>when<sp/>a<sp/>death<sp/>test<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>encountered.</highlight></codeline>
<codeline><highlight class="normal">2.<sp/><sp/>Test<sp/>suites<sp/>with<sp/>a<sp/>name<sp/>ending<sp/>in<sp/>&quot;DeathTest&quot;<sp/>are<sp/>run<sp/>before<sp/>all<sp/>other</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tests.</highlight></codeline>
<codeline><highlight class="normal">3.<sp/><sp/>It<sp/>uses<sp/>`clone()`<sp/>instead<sp/>of<sp/>`fork()`<sp/>to<sp/>spawn<sp/>the<sp/>child<sp/>process<sp/>on<sp/>Linux</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(`clone()`<sp/>is<sp/>not<sp/>available<sp/>on<sp/>Cygwin<sp/>and<sp/>Mac),<sp/>as<sp/>`fork()`<sp/>is<sp/>more<sp/>likely</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>to<sp/>cause<sp/>the<sp/>child<sp/>to<sp/>hang<sp/>when<sp/>the<sp/>parent<sp/>process<sp/>has<sp/>multiple<sp/>threads.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">It&apos;s<sp/>perfectly<sp/>fine<sp/>to<sp/>create<sp/>threads<sp/>inside<sp/>a<sp/>death<sp/>test<sp/>statement;<sp/>they<sp/>are</highlight></codeline>
<codeline><highlight class="normal">executed<sp/>in<sp/>a<sp/>separate<sp/>process<sp/>and<sp/>cannot<sp/>affect<sp/>the<sp/>parent.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Death<sp/>Test<sp/>Styles</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>&quot;threadsafe&quot;<sp/>death<sp/>test<sp/>style<sp/>was<sp/>introduced<sp/>in<sp/>order<sp/>to<sp/>help<sp/>mitigate<sp/>the</highlight></codeline>
<codeline><highlight class="normal">risks<sp/>of<sp/>testing<sp/>in<sp/>a<sp/>possibly<sp/>multithreaded<sp/>environment.<sp/>It<sp/>trades<sp/>increased</highlight></codeline>
<codeline><highlight class="normal">test<sp/>execution<sp/>time<sp/>(potentially<sp/>dramatically<sp/>so)<sp/>for<sp/>improved<sp/>thread<sp/>safety.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>automated<sp/>testing<sp/>framework<sp/>does<sp/>not<sp/>set<sp/>the<sp/>style<sp/>flag.<sp/>You<sp/>can<sp/>choose<sp/>a</highlight></codeline>
<codeline><highlight class="normal">particular<sp/>style<sp/>of<sp/>death<sp/>tests<sp/>by<sp/>setting<sp/>the<sp/>flag<sp/>programmatically:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">GTEST_FLAG_SET(death_test_style,<sp/>&quot;threadsafe&quot;);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>do<sp/>this<sp/>in<sp/>`main()`<sp/>to<sp/>set<sp/>the<sp/>style<sp/>for<sp/>all<sp/>death<sp/>tests<sp/>in<sp/>the<sp/>binary,</highlight></codeline>
<codeline><highlight class="normal">or<sp/>in<sp/>individual<sp/>tests.<sp/>Recall<sp/>that<sp/>flags<sp/>are<sp/>saved<sp/>before<sp/>running<sp/>each<sp/>test<sp/>and</highlight></codeline>
<codeline><highlight class="normal">restored<sp/>afterwards,<sp/>so<sp/>you<sp/>need<sp/>not<sp/>do<sp/>that<sp/>yourself.<sp/>For<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/>&quot;fast&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>TestOne)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/>&quot;threadsafe&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>test<sp/>is<sp/>run<sp/>in<sp/>the<sp/>&quot;threadsafe&quot;<sp/>style:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH(ThisShouldDie(),<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>TestTwo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>test<sp/>is<sp/>run<sp/>in<sp/>the<sp/>&quot;fast&quot;<sp/>style:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH(ThisShouldDie(),<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Caveats</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`statement`<sp/>argument<sp/>of<sp/>`ASSERT_EXIT()`<sp/>can<sp/>be<sp/>any<sp/>valid<sp/>C++<sp/>statement.<sp/>If</highlight></codeline>
<codeline><highlight class="normal">it<sp/>leaves<sp/>the<sp/>current<sp/>function<sp/>via<sp/>a<sp/>`return`<sp/>statement<sp/>or<sp/>by<sp/>throwing<sp/>an</highlight></codeline>
<codeline><highlight class="normal">exception,<sp/>the<sp/>death<sp/>test<sp/>is<sp/>considered<sp/>to<sp/>have<sp/>failed.<sp/>Some<sp/>GoogleTest<sp/>macros</highlight></codeline>
<codeline><highlight class="normal">may<sp/>return<sp/>from<sp/>the<sp/>current<sp/>function<sp/>(e.g.<sp/>`ASSERT_TRUE()`),<sp/>so<sp/>be<sp/>sure<sp/>to<sp/>avoid</highlight></codeline>
<codeline><highlight class="normal">them<sp/>in<sp/>`statement`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Since<sp/>`statement`<sp/>runs<sp/>in<sp/>the<sp/>child<sp/>process,<sp/>any<sp/>in-memory<sp/>side<sp/>effect<sp/>(e.g.</highlight></codeline>
<codeline><highlight class="normal">modifying<sp/>a<sp/>variable,<sp/>releasing<sp/>memory,<sp/>etc)<sp/>it<sp/>causes<sp/>will<sp/>*not*<sp/>be<sp/>observable</highlight></codeline>
<codeline><highlight class="normal">in<sp/>the<sp/>parent<sp/>process.<sp/>In<sp/>particular,<sp/>if<sp/>you<sp/>release<sp/>memory<sp/>in<sp/>a<sp/>death<sp/>test,</highlight></codeline>
<codeline><highlight class="normal">your<sp/>program<sp/>will<sp/>fail<sp/>the<sp/>heap<sp/>check<sp/>as<sp/>the<sp/>parent<sp/>process<sp/>will<sp/>never<sp/>see<sp/>the</highlight></codeline>
<codeline><highlight class="normal">memory<sp/>reclaimed.<sp/>To<sp/>solve<sp/>this<sp/>problem,<sp/>you<sp/>can</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>try<sp/>not<sp/>to<sp/>free<sp/>memory<sp/>in<sp/>a<sp/>death<sp/>test;</highlight></codeline>
<codeline><highlight class="normal">2.<sp/><sp/>free<sp/>the<sp/>memory<sp/>again<sp/>in<sp/>the<sp/>parent<sp/>process;<sp/>or</highlight></codeline>
<codeline><highlight class="normal">3.<sp/><sp/>do<sp/>not<sp/>use<sp/>the<sp/>heap<sp/>checker<sp/>in<sp/>your<sp/>program.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Due<sp/>to<sp/>an<sp/>implementation<sp/>detail,<sp/>you<sp/>cannot<sp/>place<sp/>multiple<sp/>death<sp/>test<sp/>assertions</highlight></codeline>
<codeline><highlight class="normal">on<sp/>the<sp/>same<sp/>line;<sp/>otherwise,<sp/>compilation<sp/>will<sp/>fail<sp/>with<sp/>an<sp/>unobvious<sp/>error</highlight></codeline>
<codeline><highlight class="normal">message.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Despite<sp/>the<sp/>improved<sp/>thread<sp/>safety<sp/>afforded<sp/>by<sp/>the<sp/>&quot;threadsafe&quot;<sp/>style<sp/>of<sp/>death</highlight></codeline>
<codeline><highlight class="normal">test,<sp/>thread<sp/>problems<sp/>such<sp/>as<sp/>deadlock<sp/>are<sp/>still<sp/>possible<sp/>in<sp/>the<sp/>presence<sp/>of</highlight></codeline>
<codeline><highlight class="normal">handlers<sp/>registered<sp/>with<sp/>`pthread_atfork(3)`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Using<sp/>Assertions<sp/>in<sp/>Sub-routines</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">Note:<sp/>If<sp/>you<sp/>want<sp/>to<sp/>put<sp/>a<sp/>series<sp/>of<sp/>test<sp/>assertions<sp/>in<sp/>a<sp/>subroutine<sp/>to<sp/>check</highlight></codeline>
<codeline><highlight class="normal">for<sp/>a<sp/>complex<sp/>condition,<sp/>consider<sp/>using</highlight></codeline>
<codeline><highlight class="normal">[a<sp/>custom<sp/>GMock<sp/>matcher](gmock_cook_book.md#NewMatchers)<sp/>instead.<sp/>This<sp/>lets<sp/>you</highlight></codeline>
<codeline><highlight class="normal">provide<sp/>a<sp/>more<sp/>readable<sp/>error<sp/>message<sp/>in<sp/>case<sp/>of<sp/>failure<sp/>and<sp/>avoid<sp/>all<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">issues<sp/>described<sp/>below.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Adding<sp/>Traces<sp/>to<sp/>Assertions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>test<sp/>sub-routine<sp/>is<sp/>called<sp/>from<sp/>several<sp/>places,<sp/>when<sp/>an<sp/>assertion<sp/>inside<sp/>it</highlight></codeline>
<codeline><highlight class="normal">fails,<sp/>it<sp/>can<sp/>be<sp/>hard<sp/>to<sp/>tell<sp/>which<sp/>invocation<sp/>of<sp/>the<sp/>sub-routine<sp/>the<sp/>failure<sp/>is</highlight></codeline>
<codeline><highlight class="normal">from.<sp/>You<sp/>can<sp/>alleviate<sp/>this<sp/>problem<sp/>using<sp/>extra<sp/>logging<sp/>or<sp/>custom<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">messages,<sp/>but<sp/>that<sp/>usually<sp/>clutters<sp/>up<sp/>your<sp/>tests.<sp/>A<sp/>better<sp/>solution<sp/>is<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal">the<sp/>`SCOPED_TRACE`<sp/>macro<sp/>or<sp/>the<sp/>`ScopedTrace`<sp/>utility:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">SCOPED_TRACE(message);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">ScopedTrace<sp/>trace(&quot;file_path&quot;,<sp/>line_number,<sp/>message);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">where<sp/>`message`<sp/>can<sp/>be<sp/>anything<sp/>streamable<sp/>to<sp/>`std::ostream`.<sp/>`SCOPED_TRACE`</highlight></codeline>
<codeline><highlight class="normal">macro<sp/>will<sp/>cause<sp/>the<sp/>current<sp/>file<sp/>name,<sp/>line<sp/>number,<sp/>and<sp/>the<sp/>given<sp/>message<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="normal">added<sp/>in<sp/>every<sp/>failure<sp/>message.<sp/>`ScopedTrace`<sp/>accepts<sp/>explicit<sp/>file<sp/>name<sp/>and</highlight></codeline>
<codeline><highlight class="normal">line<sp/>number<sp/>in<sp/>arguments,<sp/>which<sp/>is<sp/>useful<sp/>for<sp/>writing<sp/>test<sp/>helpers.<sp/>The<sp/>effect</highlight></codeline>
<codeline><highlight class="normal">will<sp/>be<sp/>undone<sp/>when<sp/>the<sp/>control<sp/>leaves<sp/>the<sp/>current<sp/>lexical<sp/>scope.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">10:<sp/>void<sp/>Sub1(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">11:<sp/><sp/><sp/>EXPECT_EQ(Bar(n),<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">12:<sp/><sp/><sp/>EXPECT_EQ(Bar(n<sp/>+<sp/>1),<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">13:<sp/>}</highlight></codeline>
<codeline><highlight class="normal">14:</highlight></codeline>
<codeline><highlight class="normal">15:<sp/>TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">16:<sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">17:<sp/><sp/><sp/><sp/><sp/>SCOPED_TRACE(&quot;A&quot;);<sp/><sp/>//<sp/>This<sp/>trace<sp/>point<sp/>will<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline><highlight class="normal">18:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>every<sp/>failure<sp/>in<sp/>this<sp/>scope.</highlight></codeline>
<codeline><highlight class="normal">19:<sp/><sp/><sp/><sp/><sp/>Sub1(1);</highlight></codeline>
<codeline><highlight class="normal">20:<sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">21:<sp/><sp/><sp/>//<sp/>Now<sp/>it<sp/>won&apos;t.</highlight></codeline>
<codeline><highlight class="normal">22:<sp/><sp/><sp/>Sub1(9);</highlight></codeline>
<codeline><highlight class="normal">23:<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">could<sp/>result<sp/>in<sp/>messages<sp/>like<sp/>these:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```none</highlight></codeline>
<codeline><highlight class="normal">path/to/foo_test.cc:11:<sp/>Failure</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>Bar(n)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>2</highlight></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>trace:</highlight></codeline>
<codeline><highlight class="normal">path/to/foo_test.cc:17:<sp/>A</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">path/to/foo_test.cc:12:<sp/>Failure</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>Bar(n<sp/>+<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>3</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Without<sp/>the<sp/>trace,<sp/>it<sp/>would&apos;ve<sp/>been<sp/>difficult<sp/>to<sp/>know<sp/>which<sp/>invocation<sp/>of</highlight></codeline>
<codeline><highlight class="normal">`Sub1()`<sp/>the<sp/>two<sp/>failures<sp/>come<sp/>from<sp/>respectively.<sp/>(You<sp/>could<sp/>add<sp/>an<sp/>extra</highlight></codeline>
<codeline><highlight class="normal">message<sp/>to<sp/>each<sp/>assertion<sp/>in<sp/>`Sub1()`<sp/>to<sp/>indicate<sp/>the<sp/>value<sp/>of<sp/>`n`,<sp/>but<sp/>that&apos;s</highlight></codeline>
<codeline><highlight class="normal">tedious.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Some<sp/>tips<sp/>on<sp/>using<sp/>`SCOPED_TRACE`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>With<sp/>a<sp/>suitable<sp/>message,<sp/>it&apos;s<sp/>often<sp/>enough<sp/>to<sp/>use<sp/>`SCOPED_TRACE`<sp/>at<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>beginning<sp/>of<sp/>a<sp/>sub-routine,<sp/>instead<sp/>of<sp/>at<sp/>each<sp/>call<sp/>site.</highlight></codeline>
<codeline><highlight class="normal">2.<sp/><sp/>When<sp/>calling<sp/>sub-routines<sp/>inside<sp/>a<sp/>loop,<sp/>make<sp/>the<sp/>loop<sp/>iterator<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>in<sp/>`SCOPED_TRACE`<sp/>such<sp/>that<sp/>you<sp/>can<sp/>know<sp/>which<sp/>iteration<sp/>the<sp/>failure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>from.</highlight></codeline>
<codeline><highlight class="normal">3.<sp/><sp/>Sometimes<sp/>the<sp/>line<sp/>number<sp/>of<sp/>the<sp/>trace<sp/>point<sp/>is<sp/>enough<sp/>for<sp/>identifying<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>particular<sp/>invocation<sp/>of<sp/>a<sp/>sub-routine.<sp/>In<sp/>this<sp/>case,<sp/>you<sp/>don&apos;t<sp/>have<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>choose<sp/>a<sp/>unique<sp/>message<sp/>for<sp/>`SCOPED_TRACE`.<sp/>You<sp/>can<sp/>simply<sp/>use<sp/>`&quot;&quot;`.</highlight></codeline>
<codeline><highlight class="normal">4.<sp/><sp/>You<sp/>can<sp/>use<sp/>`SCOPED_TRACE`<sp/>in<sp/>an<sp/>inner<sp/>scope<sp/>when<sp/>there<sp/>is<sp/>one<sp/>in<sp/>the<sp/>outer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scope.<sp/>In<sp/>this<sp/>case,<sp/>all<sp/>active<sp/>trace<sp/>points<sp/>will<sp/>be<sp/>included<sp/>in<sp/>the<sp/>failure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>messages,<sp/>in<sp/>reverse<sp/>order<sp/>they<sp/>are<sp/>encountered.</highlight></codeline>
<codeline><highlight class="normal">5.<sp/><sp/>The<sp/>trace<sp/>dump<sp/>is<sp/>clickable<sp/>in<sp/>Emacs<sp/>-<sp/>hit<sp/>`return`<sp/>on<sp/>a<sp/>line<sp/>number<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>you&apos;ll<sp/>be<sp/>taken<sp/>to<sp/>that<sp/>line<sp/>in<sp/>the<sp/>source<sp/>file!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Propagating<sp/>Fatal<sp/>Failures</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>common<sp/>pitfall<sp/>when<sp/>using<sp/>`ASSERT_*`<sp/>and<sp/>`FAIL*`<sp/>is<sp/>not<sp/>understanding<sp/>that</highlight></codeline>
<codeline><highlight class="normal">when<sp/>they<sp/>fail<sp/>they<sp/>only<sp/>abort<sp/>the<sp/>_current<sp/>function_,<sp/>not<sp/>the<sp/>entire<sp/>test.<sp/>For</highlight></codeline>
<codeline><highlight class="normal">example,<sp/>the<sp/>following<sp/>test<sp/>will<sp/>segfault:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Subroutine()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Generates<sp/>a<sp/>fatal<sp/>failure<sp/>and<sp/>aborts<sp/>the<sp/>current<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>following<sp/>won&apos;t<sp/>be<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Subroutine();<sp/><sp/>//<sp/>The<sp/>intended<sp/>behavior<sp/>is<sp/>for<sp/>the<sp/>fatal<sp/>failure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>in<sp/>Subroutine()<sp/>to<sp/>abort<sp/>the<sp/>entire<sp/>test.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>actual<sp/>behavior:<sp/>the<sp/>function<sp/>goes<sp/>on<sp/>after<sp/>Subroutine()<sp/>returns.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>p<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*p<sp/>=<sp/>3;<sp/><sp/>//<sp/>Segfault!</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>alleviate<sp/>this,<sp/>GoogleTest<sp/>provides<sp/>three<sp/>different<sp/>solutions.<sp/>You<sp/>could<sp/>use</highlight></codeline>
<codeline><highlight class="normal">either<sp/>exceptions,<sp/>the<sp/>`(ASSERT|EXPECT)_NO_FATAL_FAILURE`<sp/>assertions<sp/>or<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`HasFatalFailure()`<sp/>function.<sp/>They<sp/>are<sp/>described<sp/>in<sp/>the<sp/>following<sp/>two</highlight></codeline>
<codeline><highlight class="normal">subsections.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Asserting<sp/>on<sp/>Subroutines<sp/>with<sp/>an<sp/>exception</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>code<sp/>can<sp/>turn<sp/>ASSERT-failure<sp/>into<sp/>an<sp/>exception:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">class<sp/>ThrowListener<sp/>:<sp/>public<sp/>testing::EmptyTestEventListener<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>OnTestPartResult(const<sp/>testing::TestPartResult&amp;<sp/>result)<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(result.type()<sp/>==<sp/>testing::TestPartResult::kFatalFailure)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>testing::AssertionException(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::UnitTest::GetInstance()-&gt;listeners().Append(new<sp/>ThrowListener);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>listener<sp/>should<sp/>be<sp/>added<sp/>after<sp/>other<sp/>listeners<sp/>if<sp/>you<sp/>have<sp/>any,<sp/>otherwise</highlight></codeline>
<codeline><highlight class="normal">they<sp/>won&apos;t<sp/>see<sp/>failed<sp/>`OnTestPartResult`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Asserting<sp/>on<sp/>Subroutines</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>shown<sp/>above,<sp/>if<sp/>your<sp/>test<sp/>calls<sp/>a<sp/>subroutine<sp/>that<sp/>has<sp/>an<sp/>`ASSERT_*`<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">in<sp/>it,<sp/>the<sp/>test<sp/>will<sp/>continue<sp/>after<sp/>the<sp/>subroutine<sp/>returns.<sp/>This<sp/>may<sp/>not<sp/>be<sp/>what</highlight></codeline>
<codeline><highlight class="normal">you<sp/>want.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Often<sp/>people<sp/>want<sp/>fatal<sp/>failures<sp/>to<sp/>propagate<sp/>like<sp/>exceptions.<sp/>For<sp/>that</highlight></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>offers<sp/>the<sp/>following<sp/>macros:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Fatal<sp/>assertion<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Nonfatal<sp/>assertion<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Verifies</highlight></codeline>
<codeline><highlight class="normal">-------------------------------------<sp/>|<sp/>-------------------------------------<sp/>|<sp/>--------</highlight></codeline>
<codeline><highlight class="normal">`ASSERT_NO_FATAL_FAILURE(statement);`<sp/>|<sp/>`EXPECT_NO_FATAL_FAILURE(statement);`<sp/>|<sp/>`statement`<sp/>doesn&apos;t<sp/>generate<sp/>any<sp/>new<sp/>fatal<sp/>failures<sp/>in<sp/>the<sp/>current<sp/>thread.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Only<sp/>failures<sp/>in<sp/>the<sp/>thread<sp/>that<sp/>executes<sp/>the<sp/>assertion<sp/>are<sp/>checked<sp/>to<sp/>determine</highlight></codeline>
<codeline><highlight class="normal">the<sp/>result<sp/>of<sp/>this<sp/>type<sp/>of<sp/>assertions.<sp/>If<sp/>`statement`<sp/>creates<sp/>new<sp/>threads,</highlight></codeline>
<codeline><highlight class="normal">failures<sp/>in<sp/>these<sp/>threads<sp/>are<sp/>ignored.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Examples:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">ASSERT_NO_FATAL_FAILURE(Foo());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">EXPECT_NO_FATAL_FAILURE({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>Bar();</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Assertions<sp/>from<sp/>multiple<sp/>threads<sp/>are<sp/>currently<sp/>not<sp/>supported<sp/>on<sp/>Windows.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Checking<sp/>for<sp/>Failures<sp/>in<sp/>the<sp/>Current<sp/>Test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`HasFatalFailure()`<sp/>in<sp/>the<sp/>`::testing::Test`<sp/>class<sp/>returns<sp/>`true`<sp/>if<sp/>an</highlight></codeline>
<codeline><highlight class="normal">assertion<sp/>in<sp/>the<sp/>current<sp/>test<sp/>has<sp/>suffered<sp/>a<sp/>fatal<sp/>failure.<sp/>This<sp/>allows</highlight></codeline>
<codeline><highlight class="normal">functions<sp/>to<sp/>catch<sp/>fatal<sp/>failures<sp/>in<sp/>a<sp/>sub-routine<sp/>and<sp/>return<sp/>early.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>HasFatalFailure();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>typical<sp/>usage,<sp/>which<sp/>basically<sp/>simulates<sp/>the<sp/>behavior<sp/>of<sp/>a<sp/>thrown<sp/>exception,</highlight></codeline>
<codeline><highlight class="normal">is:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Subroutine();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Aborts<sp/>if<sp/>Subroutine()<sp/>had<sp/>a<sp/>fatal<sp/>failure.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(HasFatalFailure())<sp/>return;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>following<sp/>won&apos;t<sp/>be<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>`HasFatalFailure()`<sp/>is<sp/>used<sp/>outside<sp/>of<sp/>`TEST()`<sp/>,<sp/>`TEST_F()`<sp/>,<sp/>or<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">fixture,<sp/>you<sp/>must<sp/>add<sp/>the<sp/>`::testing::Test::`<sp/>prefix,<sp/>as<sp/>in:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(testing::Test::HasFatalFailure())<sp/>return;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Similarly,<sp/>`HasNonfatalFailure()`<sp/>returns<sp/>`true`<sp/>if<sp/>the<sp/>current<sp/>test<sp/>has<sp/>at</highlight></codeline>
<codeline><highlight class="normal">least<sp/>one<sp/>non-fatal<sp/>failure,<sp/>and<sp/>`HasFailure()`<sp/>returns<sp/>`true`<sp/>if<sp/>the<sp/>current</highlight></codeline>
<codeline><highlight class="normal">test<sp/>has<sp/>at<sp/>least<sp/>one<sp/>failure<sp/>of<sp/>either<sp/>kind.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Logging<sp/>Additional<sp/>Information</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>your<sp/>test<sp/>code,<sp/>you<sp/>can<sp/>call<sp/>`RecordProperty(&quot;key&quot;,<sp/>value)`<sp/>to<sp/>log<sp/>additional</highlight></codeline>
<codeline><highlight class="normal">information,<sp/>where<sp/>`value`<sp/>can<sp/>be<sp/>either<sp/>a<sp/>string<sp/>or<sp/>an<sp/>`int`.<sp/>The<sp/>*last*<sp/>value</highlight></codeline>
<codeline><highlight class="normal">recorded<sp/>for<sp/>a<sp/>key<sp/>will<sp/>be<sp/>emitted<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[XML<sp/>output](#generating-an-xml-report)<sp/>if<sp/>you<sp/>specify<sp/>one.<sp/>For<sp/>example,<sp/>the</highlight></codeline>
<codeline><highlight class="normal">test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TEST_F(WidgetUsageTest,<sp/>MinAndMaxWidgets)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RecordProperty(&quot;MaximumWidgets&quot;,<sp/>ComputeMaxUsage());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RecordProperty(&quot;MinimumWidgets&quot;,<sp/>ComputeMinUsage());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">will<sp/>output<sp/>XML<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```xml</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;MinAndMaxWidgets&quot;<sp/>file=&quot;test.cpp&quot;<sp/>line=&quot;1&quot;<sp/>status=&quot;run&quot;<sp/>time=&quot;0.006&quot;<sp/>classname=&quot;WidgetUsageTest&quot;<sp/>MaximumWidgets=&quot;12&quot;<sp/>MinimumWidgets=&quot;9&quot;<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>NOTE:</highlight></codeline>
<codeline><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>*<sp/><sp/><sp/>`RecordProperty()`<sp/>is<sp/>a<sp/>static<sp/>member<sp/>of<sp/>the<sp/>`Test`<sp/>class.<sp/>Therefore<sp/>it</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>needs<sp/>to<sp/>be<sp/>prefixed<sp/>with<sp/>`::testing::Test::`<sp/>if<sp/>used<sp/>outside<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>`TEST`<sp/>body<sp/>and<sp/>the<sp/>test<sp/>fixture<sp/>class.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>*<sp/><sp/><sp/>*`key`*<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>XML<sp/>attribute<sp/>name,<sp/>and<sp/>cannot<sp/>conflict<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>ones<sp/>already<sp/>used<sp/>by<sp/>GoogleTest<sp/>(`name`,<sp/>`status`,<sp/>`time`,<sp/>`classname`,</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>`type_param`,<sp/>and<sp/>`value_param`).</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>*<sp/><sp/><sp/>Calling<sp/>`RecordProperty()`<sp/>outside<sp/>of<sp/>the<sp/>lifespan<sp/>of<sp/>a<sp/>test<sp/>is<sp/>allowed.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>If<sp/>it&apos;s<sp/>called<sp/>outside<sp/>of<sp/>a<sp/>test<sp/>but<sp/>between<sp/>a<sp/>test<sp/>suite&apos;s</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>`SetUpTestSuite()`<sp/>and<sp/>`TearDownTestSuite()`<sp/>methods,<sp/>it<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>attributed<sp/>to<sp/>the<sp/>XML<sp/>element<sp/>for<sp/>the<sp/>test<sp/>suite.<sp/>If<sp/>it&apos;s<sp/>called<sp/>outside</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>of<sp/>all<sp/>test<sp/>suites<sp/>(e.g.<sp/>in<sp/>a<sp/>test<sp/>environment),<sp/>it<sp/>will<sp/>be<sp/>attributed<sp/>to</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/><sp/><sp/><sp/><sp/>the<sp/>top-level<sp/>XML<sp/>element.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Sharing<sp/>Resources<sp/>Between<sp/>Tests<sp/>in<sp/>the<sp/>Same<sp/>Test<sp/>Suite</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>creates<sp/>a<sp/>new<sp/>test<sp/>fixture<sp/>object<sp/>for<sp/>each<sp/>test<sp/>in<sp/>order<sp/>to<sp/>make</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>independent<sp/>and<sp/>easier<sp/>to<sp/>debug.<sp/>However,<sp/>sometimes<sp/>tests<sp/>use<sp/>resources</highlight></codeline>
<codeline><highlight class="normal">that<sp/>are<sp/>expensive<sp/>to<sp/>set<sp/>up,<sp/>making<sp/>the<sp/>one-copy-per-test<sp/>model<sp/>prohibitively</highlight></codeline>
<codeline><highlight class="normal">expensive.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>tests<sp/>don&apos;t<sp/>change<sp/>the<sp/>resource,<sp/>there&apos;s<sp/>no<sp/>harm<sp/>in<sp/>their<sp/>sharing<sp/>a</highlight></codeline>
<codeline><highlight class="normal">single<sp/>resource<sp/>copy.<sp/>So,<sp/>in<sp/>addition<sp/>to<sp/>per-test<sp/>set-up/tear-down,<sp/>GoogleTest</highlight></codeline>
<codeline><highlight class="normal">also<sp/>supports<sp/>per-test-suite<sp/>set-up/tear-down.<sp/>To<sp/>use<sp/>it:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>In<sp/>your<sp/>test<sp/>fixture<sp/>class<sp/>(say<sp/>`FooTest`<sp/>),<sp/>declare<sp/>as<sp/>`static`<sp/>some<sp/>member</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>variables<sp/>to<sp/>hold<sp/>the<sp/>shared<sp/>resources.</highlight></codeline>
<codeline><highlight class="normal">2.<sp/><sp/>Outside<sp/>your<sp/>test<sp/>fixture<sp/>class<sp/>(typically<sp/>just<sp/>below<sp/>it),<sp/>define<sp/>those</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>member<sp/>variables,<sp/>optionally<sp/>giving<sp/>them<sp/>initial<sp/>values.</highlight></codeline>
<codeline><highlight class="normal">3.<sp/><sp/>In<sp/>the<sp/>same<sp/>test<sp/>fixture<sp/>class,<sp/>define<sp/>a<sp/>`static<sp/>void<sp/>SetUpTestSuite()`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>(remember<sp/>not<sp/>to<sp/>spell<sp/>it<sp/>as<sp/>**`SetupTestSuite`**<sp/>with<sp/>a<sp/>small</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`u`!)<sp/>to<sp/>set<sp/>up<sp/>the<sp/>shared<sp/>resources<sp/>and<sp/>a<sp/>`static<sp/>void<sp/>TearDownTestSuite()`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>to<sp/>tear<sp/>them<sp/>down.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">That&apos;s<sp/>it!<sp/>GoogleTest<sp/>automatically<sp/>calls<sp/>`SetUpTestSuite()`<sp/>before<sp/>running<sp/>the</highlight></codeline>
<codeline><highlight class="normal">*first<sp/>test*<sp/>in<sp/>the<sp/>`FooTest`<sp/>test<sp/>suite<sp/>(i.e.<sp/>before<sp/>creating<sp/>the<sp/>first</highlight></codeline>
<codeline><highlight class="normal">`FooTest`<sp/>object),<sp/>and<sp/>calls<sp/>`TearDownTestSuite()`<sp/>after<sp/>running<sp/>the<sp/>*last<sp/>test*</highlight></codeline>
<codeline><highlight class="normal">in<sp/>it<sp/>(i.e.<sp/>after<sp/>deleting<sp/>the<sp/>last<sp/>`FooTest`<sp/>object).<sp/>In<sp/>between,<sp/>the<sp/>tests<sp/>can</highlight></codeline>
<codeline><highlight class="normal">use<sp/>the<sp/>shared<sp/>resources.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Remember<sp/>that<sp/>the<sp/>test<sp/>order<sp/>is<sp/>undefined,<sp/>so<sp/>your<sp/>code<sp/>can&apos;t<sp/>depend<sp/>on<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">preceding<sp/>or<sp/>following<sp/>another.<sp/>Also,<sp/>the<sp/>tests<sp/>must<sp/>either<sp/>not<sp/>modify<sp/>the<sp/>state</highlight></codeline>
<codeline><highlight class="normal">of<sp/>any<sp/>shared<sp/>resource,<sp/>or,<sp/>if<sp/>they<sp/>do<sp/>modify<sp/>the<sp/>state,<sp/>they<sp/>must<sp/>restore<sp/>the</highlight></codeline>
<codeline><highlight class="normal">state<sp/>to<sp/>its<sp/>original<sp/>value<sp/>before<sp/>passing<sp/>control<sp/>to<sp/>the<sp/>next<sp/>test.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>`SetUpTestSuite()`<sp/>may<sp/>be<sp/>called<sp/>multiple<sp/>times<sp/>for<sp/>a<sp/>test<sp/>fixture</highlight></codeline>
<codeline><highlight class="normal">class<sp/>that<sp/>has<sp/>derived<sp/>classes,<sp/>so<sp/>you<sp/>should<sp/>not<sp/>expect<sp/>code<sp/>in<sp/>the<sp/>function</highlight></codeline>
<codeline><highlight class="normal">body<sp/>to<sp/>be<sp/>run<sp/>only<sp/>once.<sp/>Also,<sp/>derived<sp/>classes<sp/>still<sp/>have<sp/>access<sp/>to<sp/>shared</highlight></codeline>
<codeline><highlight class="normal">resources<sp/>defined<sp/>as<sp/>static<sp/>members,<sp/>so<sp/>careful<sp/>consideration<sp/>is<sp/>needed<sp/>when</highlight></codeline>
<codeline><highlight class="normal">managing<sp/>shared<sp/>resources<sp/>to<sp/>avoid<sp/>memory<sp/>leaks<sp/>if<sp/>shared<sp/>resources<sp/>are<sp/>not</highlight></codeline>
<codeline><highlight class="normal">properly<sp/>cleaned<sp/>up<sp/>in<sp/>`TearDownTestSuite()`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here&apos;s<sp/>an<sp/>example<sp/>of<sp/>per-test-suite<sp/>set-up<sp/>and<sp/>tear-down:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Per-test-suite<sp/>set-up.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Called<sp/>before<sp/>the<sp/>first<sp/>test<sp/>in<sp/>this<sp/>test<sp/>suite.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Can<sp/>be<sp/>omitted<sp/>if<sp/>not<sp/>needed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/>new<sp/>...;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>`shared_resource_`<sp/>is<sp/>**not<sp/>deleted**<sp/>in<sp/>`TearDownTestSuite()`,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>reallocation<sp/>should<sp/>be<sp/>prevented<sp/>because<sp/>`SetUpTestSuite()`<sp/>may<sp/>be<sp/>called</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>in<sp/>subclasses<sp/>of<sp/>FooTest<sp/>and<sp/>lead<sp/>to<sp/>memory<sp/>leak.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(shared_resource_<sp/>==<sp/>nullptr)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>shared_resource_<sp/>=<sp/>new<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Per-test-suite<sp/>tear-down.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Called<sp/>after<sp/>the<sp/>last<sp/>test<sp/>in<sp/>this<sp/>test<sp/>suite.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Can<sp/>be<sp/>omitted<sp/>if<sp/>not<sp/>needed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>shared_resource_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>can<sp/>define<sp/>per-test<sp/>set-up<sp/>logic<sp/>as<sp/>usual.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>can<sp/>define<sp/>per-test<sp/>tear-down<sp/>logic<sp/>as<sp/>usual.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>TearDown()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Some<sp/>expensive<sp/>resource<sp/>shared<sp/>by<sp/>all<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>T*<sp/>shared_resource_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">T*<sp/>FooTest::shared_resource_<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>Test1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>shared_resource_<sp/>here<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>Test2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>shared_resource_<sp/>here<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">NOTE:<sp/>Though<sp/>the<sp/>above<sp/>code<sp/>declares<sp/>`SetUpTestSuite()`<sp/>protected,<sp/>it<sp/>may</highlight></codeline>
<codeline><highlight class="normal">sometimes<sp/>be<sp/>necessary<sp/>to<sp/>declare<sp/>it<sp/>public,<sp/>such<sp/>as<sp/>when<sp/>using<sp/>it<sp/>with</highlight></codeline>
<codeline><highlight class="normal">`TEST_P`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Global<sp/>Set-Up<sp/>and<sp/>Tear-Down</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Just<sp/>as<sp/>you<sp/>can<sp/>do<sp/>set-up<sp/>and<sp/>tear-down<sp/>at<sp/>the<sp/>test<sp/>level<sp/>and<sp/>the<sp/>test<sp/>suite</highlight></codeline>
<codeline><highlight class="normal">level,<sp/>you<sp/>can<sp/>also<sp/>do<sp/>it<sp/>at<sp/>the<sp/>test<sp/>program<sp/>level.<sp/>Here&apos;s<sp/>how.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">First,<sp/>you<sp/>subclass<sp/>the<sp/>`::testing::Environment`<sp/>class<sp/>to<sp/>define<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">environment,<sp/>which<sp/>knows<sp/>how<sp/>to<sp/>set-up<sp/>and<sp/>tear-down:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Environment<sp/>:<sp/>public<sp/>::testing::Environment<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>~Environment()<sp/>override<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>set<sp/>up<sp/>the<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>tear<sp/>down<sp/>the<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>TearDown()<sp/>override<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then,<sp/>you<sp/>register<sp/>an<sp/>instance<sp/>of<sp/>your<sp/>environment<sp/>class<sp/>with<sp/>GoogleTest<sp/>by</highlight></codeline>
<codeline><highlight class="normal">calling<sp/>the<sp/>`::testing::AddGlobalTestEnvironment()`<sp/>function:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">Environment*<sp/>AddGlobalTestEnvironment(Environment*<sp/>env);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now,<sp/>when<sp/>`RUN_ALL_TESTS()`<sp/>is<sp/>called,<sp/>it<sp/>first<sp/>calls<sp/>the<sp/>`SetUp()`<sp/>method<sp/>of</highlight></codeline>
<codeline><highlight class="normal">each<sp/>environment<sp/>object,<sp/>then<sp/>runs<sp/>the<sp/>tests<sp/>if<sp/>none<sp/>of<sp/>the<sp/>environments</highlight></codeline>
<codeline><highlight class="normal">reported<sp/>fatal<sp/>failures<sp/>and<sp/>`GTEST_SKIP()`<sp/>was<sp/>not<sp/>called.<sp/>`RUN_ALL_TESTS()`</highlight></codeline>
<codeline><highlight class="normal">always<sp/>calls<sp/>`TearDown()`<sp/>with<sp/>each<sp/>environment<sp/>object,<sp/>regardless<sp/>of<sp/>whether<sp/>or</highlight></codeline>
<codeline><highlight class="normal">not<sp/>the<sp/>tests<sp/>were<sp/>run.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">It&apos;s<sp/>OK<sp/>to<sp/>register<sp/>multiple<sp/>environment<sp/>objects.<sp/>In<sp/>this<sp/>suite,<sp/>their<sp/>`SetUp()`</highlight></codeline>
<codeline><highlight class="normal">will<sp/>be<sp/>called<sp/>in<sp/>the<sp/>order<sp/>they<sp/>are<sp/>registered,<sp/>and<sp/>their<sp/>`TearDown()`<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">called<sp/>in<sp/>the<sp/>reverse<sp/>order.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>GoogleTest<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>registered<sp/>environment<sp/>objects.</highlight></codeline>
<codeline><highlight class="normal">Therefore<sp/>**do<sp/>not<sp/>delete<sp/>them**<sp/>by<sp/>yourself.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>should<sp/>call<sp/>`AddGlobalTestEnvironment()`<sp/>before<sp/>`RUN_ALL_TESTS()`<sp/>is<sp/>called,</highlight></codeline>
<codeline><highlight class="normal">probably<sp/>in<sp/>`main()`.<sp/>If<sp/>you<sp/>use<sp/>`gtest_main`,<sp/>you<sp/>need<sp/>to<sp/>call<sp/>this<sp/>before</highlight></codeline>
<codeline><highlight class="normal">`main()`<sp/>starts<sp/>for<sp/>it<sp/>to<sp/>take<sp/>effect.<sp/>One<sp/>way<sp/>to<sp/>do<sp/>this<sp/>is<sp/>to<sp/>define<sp/>a<sp/>global</highlight></codeline>
<codeline><highlight class="normal">variable<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">testing::Environment*<sp/>const<sp/>foo_env<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testing::AddGlobalTestEnvironment(new<sp/>FooEnvironment);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">However,<sp/>we<sp/>strongly<sp/>recommend<sp/>you<sp/>to<sp/>write<sp/>your<sp/>own<sp/>`main()`<sp/>and<sp/>call</highlight></codeline>
<codeline><highlight class="normal">`AddGlobalTestEnvironment()`<sp/>there,<sp/>as<sp/>relying<sp/>on<sp/>initialization<sp/>of<sp/>global</highlight></codeline>
<codeline><highlight class="normal">variables<sp/>makes<sp/>the<sp/>code<sp/>harder<sp/>to<sp/>read<sp/>and<sp/>may<sp/>cause<sp/>problems<sp/>when<sp/>you<sp/>register</highlight></codeline>
<codeline><highlight class="normal">multiple<sp/>environments<sp/>from<sp/>different<sp/>translation<sp/>units<sp/>and<sp/>the<sp/>environments<sp/>have</highlight></codeline>
<codeline><highlight class="normal">dependencies<sp/>among<sp/>them<sp/>(remember<sp/>that<sp/>the<sp/>compiler<sp/>doesn&apos;t<sp/>guarantee<sp/>the<sp/>order</highlight></codeline>
<codeline><highlight class="normal">in<sp/>which<sp/>global<sp/>variables<sp/>from<sp/>different<sp/>translation<sp/>units<sp/>are<sp/>initialized).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Value-Parameterized<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Value-parameterized<sp/>tests*<sp/>allow<sp/>you<sp/>to<sp/>test<sp/>your<sp/>code<sp/>with<sp/>different</highlight></codeline>
<codeline><highlight class="normal">parameters<sp/>without<sp/>writing<sp/>multiple<sp/>copies<sp/>of<sp/>the<sp/>same<sp/>test.<sp/>This<sp/>is<sp/>useful<sp/>in<sp/>a</highlight></codeline>
<codeline><highlight class="normal">number<sp/>of<sp/>situations,<sp/>for<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>You<sp/>have<sp/>a<sp/>piece<sp/>of<sp/>code<sp/>whose<sp/>behavior<sp/>is<sp/>affected<sp/>by<sp/>one<sp/>or<sp/>more</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>command-line<sp/>flags.<sp/>You<sp/>want<sp/>to<sp/>make<sp/>sure<sp/>your<sp/>code<sp/>performs<sp/>correctly<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>various<sp/>values<sp/>of<sp/>those<sp/>flags.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>You<sp/>want<sp/>to<sp/>test<sp/>different<sp/>implementations<sp/>of<sp/>an<sp/>OO<sp/>interface.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>You<sp/>want<sp/>to<sp/>test<sp/>your<sp/>code<sp/>over<sp/>various<sp/>inputs<sp/>(a.k.a.<sp/>data-driven<sp/>testing).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>This<sp/>feature<sp/>is<sp/>easy<sp/>to<sp/>abuse,<sp/>so<sp/>please<sp/>exercise<sp/>your<sp/>good<sp/>sense<sp/>when<sp/>doing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>it!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>How<sp/>to<sp/>Write<sp/>Value-Parameterized<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>write<sp/>value-parameterized<sp/>tests,<sp/>first<sp/>you<sp/>should<sp/>define<sp/>a<sp/>fixture<sp/>class.<sp/>It</highlight></codeline>
<codeline><highlight class="normal">must<sp/>be<sp/>derived<sp/>from<sp/>both<sp/>`testing::Test`<sp/>and<sp/>`testing::WithParamInterface&lt;T&gt;`</highlight></codeline>
<codeline><highlight class="normal">(the<sp/>latter<sp/>is<sp/>a<sp/>pure<sp/>interface),<sp/>where<sp/>`T`<sp/>is<sp/>the<sp/>type<sp/>of<sp/>your<sp/>parameter</highlight></codeline>
<codeline><highlight class="normal">values.<sp/>For<sp/>convenience,<sp/>you<sp/>can<sp/>just<sp/>derive<sp/>the<sp/>fixture<sp/>class<sp/>from</highlight></codeline>
<codeline><highlight class="normal">`testing::TestWithParam&lt;T&gt;`,<sp/>which<sp/>itself<sp/>is<sp/>derived<sp/>from<sp/>both<sp/>`testing::Test`</highlight></codeline>
<codeline><highlight class="normal">and<sp/>`testing::WithParamInterface&lt;T&gt;`.<sp/>`T`<sp/>can<sp/>be<sp/>any<sp/>copyable<sp/>type.<sp/>If<sp/>it&apos;s<sp/>a</highlight></codeline>
<codeline><highlight class="normal">raw<sp/>pointer,<sp/>you<sp/>are<sp/>responsible<sp/>for<sp/>managing<sp/>the<sp/>lifespan<sp/>of<sp/>the<sp/>pointed</highlight></codeline>
<codeline><highlight class="normal">values.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">NOTE:<sp/>If<sp/>your<sp/>test<sp/>fixture<sp/>defines<sp/>`SetUpTestSuite()`<sp/>or<sp/>`TearDownTestSuite()`</highlight></codeline>
<codeline><highlight class="normal">they<sp/>must<sp/>be<sp/>declared<sp/>**public**<sp/>rather<sp/>than<sp/>**protected**<sp/>in<sp/>order<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal">`TEST_P`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>testing::TestWithParam&lt;absl::string_view&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>can<sp/>implement<sp/>all<sp/>the<sp/>usual<sp/>fixture<sp/>class<sp/>members<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>access<sp/>the<sp/>test<sp/>parameter,<sp/>call<sp/>GetParam()<sp/>from<sp/>class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>TestWithParam&lt;T&gt;.</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Or,<sp/>when<sp/>you<sp/>want<sp/>to<sp/>add<sp/>parameters<sp/>to<sp/>a<sp/>pre-existing<sp/>fixture<sp/>class:</highlight></codeline>
<codeline><highlight class="normal">class<sp/>BaseTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>BarTest<sp/>:<sp/>public<sp/>BaseTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public<sp/>testing::WithParamInterface&lt;absl::string_view&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then,<sp/>use<sp/>the<sp/>`TEST_P`<sp/>macro<sp/>to<sp/>define<sp/>as<sp/>many<sp/>test<sp/>patterns<sp/>using<sp/>this<sp/>fixture</highlight></codeline>
<codeline><highlight class="normal">as<sp/>you<sp/>want.<sp/>The<sp/>`_P`<sp/>suffix<sp/>is<sp/>for<sp/>&quot;parameterized&quot;<sp/>or<sp/>&quot;pattern&quot;,<sp/>whichever<sp/>you</highlight></codeline>
<codeline><highlight class="normal">prefer<sp/>to<sp/>think.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TEST_P(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>access<sp/>the<sp/>test<sp/>parameter<sp/>with<sp/>the<sp/>GetParam()<sp/>method</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>of<sp/>the<sp/>TestWithParam&lt;T&gt;<sp/>class:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_TRUE(foo.Blah(GetParam()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_P(FooTest,<sp/>HasBlahBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally,<sp/>you<sp/>can<sp/>use<sp/>the<sp/>`INSTANTIATE_TEST_SUITE_P`<sp/>macro<sp/>to<sp/>instantiate<sp/>the</highlight></codeline>
<codeline><highlight class="normal">test<sp/>suite<sp/>with<sp/>any<sp/>set<sp/>of<sp/>parameters<sp/>you<sp/>want.<sp/>GoogleTest<sp/>defines<sp/>a<sp/>number<sp/>of</highlight></codeline>
<codeline><highlight class="normal">functions<sp/>for<sp/>generating<sp/>test<sp/>parameters—see<sp/>details<sp/>at</highlight></codeline>
<codeline><highlight class="normal">[`INSTANTIATE_TEST_SUITE_P`](reference/testing.md#INSTANTIATE_TEST_SUITE_P)<sp/>in</highlight></codeline>
<codeline><highlight class="normal">the<sp/>Testing<sp/>Reference.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>following<sp/>statement<sp/>will<sp/>instantiate<sp/>tests<sp/>from<sp/>the<sp/>`FooTest`</highlight></codeline>
<codeline><highlight class="normal">test<sp/>suite<sp/>each<sp/>with<sp/>parameter<sp/>values<sp/>`&quot;meeny&quot;`,<sp/>`&quot;miny&quot;`,<sp/>and<sp/>`&quot;moe&quot;`<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[`Values`](reference/testing.md#param-generators)<sp/>parameter<sp/>generator:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_SUITE_P(MeenyMinyMoe,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FooTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(&quot;meeny&quot;,<sp/>&quot;miny&quot;,<sp/>&quot;moe&quot;));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">NOTE:<sp/>The<sp/>code<sp/>above<sp/>must<sp/>be<sp/>placed<sp/>at<sp/>global<sp/>or<sp/>namespace<sp/>scope,<sp/>not<sp/>at</highlight></codeline>
<codeline><highlight class="normal">function<sp/>scope.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>first<sp/>argument<sp/>to<sp/>`INSTANTIATE_TEST_SUITE_P`<sp/>is<sp/>a<sp/>unique<sp/>name<sp/>for<sp/>the</highlight></codeline>
<codeline><highlight class="normal">instantiation<sp/>of<sp/>the<sp/>test<sp/>suite.<sp/>The<sp/>next<sp/>argument<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test</highlight></codeline>
<codeline><highlight class="normal">pattern,<sp/>and<sp/>the<sp/>last<sp/>is<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[parameter<sp/>generator](reference/testing.md#param-generators).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>parameter<sp/>generator<sp/>expression<sp/>is<sp/>not<sp/>evaluated<sp/>until<sp/>GoogleTest<sp/>is</highlight></codeline>
<codeline><highlight class="normal">initialized<sp/>(via<sp/>`InitGoogleTest()`).<sp/>Any<sp/>prior<sp/>initialization<sp/>done<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`main`<sp/>function<sp/>will<sp/>be<sp/>accessible<sp/>from<sp/>the<sp/>parameter<sp/>generator,<sp/>for<sp/>example,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>results<sp/>of<sp/>flag<sp/>parsing.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>instantiate<sp/>a<sp/>test<sp/>pattern<sp/>more<sp/>than<sp/>once,<sp/>so<sp/>to<sp/>distinguish<sp/>different</highlight></codeline>
<codeline><highlight class="normal">instances<sp/>of<sp/>the<sp/>pattern,<sp/>the<sp/>instantiation<sp/>name<sp/>is<sp/>added<sp/>as<sp/>a<sp/>prefix<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">actual<sp/>test<sp/>suite<sp/>name.<sp/>Remember<sp/>to<sp/>pick<sp/>unique<sp/>prefixes<sp/>for<sp/>different</highlight></codeline>
<codeline><highlight class="normal">instantiations.<sp/>The<sp/>tests<sp/>from<sp/>the<sp/>instantiation<sp/>above<sp/>will<sp/>have<sp/>these<sp/>names:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`MeenyMinyMoe/FooTest.DoesBlah/0`<sp/>for<sp/>`&quot;meeny&quot;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`MeenyMinyMoe/FooTest.DoesBlah/1`<sp/>for<sp/>`&quot;miny&quot;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`MeenyMinyMoe/FooTest.DoesBlah/2`<sp/>for<sp/>`&quot;moe&quot;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`MeenyMinyMoe/FooTest.HasBlahBlah/0`<sp/>for<sp/>`&quot;meeny&quot;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`MeenyMinyMoe/FooTest.HasBlahBlah/1`<sp/>for<sp/>`&quot;miny&quot;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`MeenyMinyMoe/FooTest.HasBlahBlah/2`<sp/>for<sp/>`&quot;moe&quot;`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>these<sp/>names<sp/>in<sp/>[`--gtest_filter`](#running-a-subset-of-the-tests).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>statement<sp/>will<sp/>instantiate<sp/>all<sp/>tests<sp/>from<sp/>`FooTest`<sp/>again,<sp/>each</highlight></codeline>
<codeline><highlight class="normal">with<sp/>parameter<sp/>values<sp/>`&quot;cat&quot;`<sp/>and<sp/>`&quot;dog&quot;`<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[`ValuesIn`](reference/testing.md#param-generators)<sp/>parameter<sp/>generator:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">constexpr<sp/>absl::string_view<sp/>kPets[]<sp/>=<sp/>{&quot;cat&quot;,<sp/>&quot;dog&quot;};</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_SUITE_P(Pets,<sp/>FooTest,<sp/>testing::ValuesIn(kPets));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>tests<sp/>from<sp/>the<sp/>instantiation<sp/>above<sp/>will<sp/>have<sp/>these<sp/>names:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`Pets/FooTest.DoesBlah/0`<sp/>for<sp/>`&quot;cat&quot;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`Pets/FooTest.DoesBlah/1`<sp/>for<sp/>`&quot;dog&quot;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`Pets/FooTest.HasBlahBlah/0`<sp/>for<sp/>`&quot;cat&quot;`</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`Pets/FooTest.HasBlahBlah/1`<sp/>for<sp/>`&quot;dog&quot;`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Please<sp/>note<sp/>that<sp/>`INSTANTIATE_TEST_SUITE_P`<sp/>will<sp/>instantiate<sp/>*all*<sp/>tests<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">given<sp/>test<sp/>suite,<sp/>whether<sp/>their<sp/>definitions<sp/>come<sp/>before<sp/>or<sp/>*after*<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`INSTANTIATE_TEST_SUITE_P`<sp/>statement.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Additionally,<sp/>by<sp/>default,<sp/>every<sp/>`TEST_P`<sp/>without<sp/>a<sp/>corresponding</highlight></codeline>
<codeline><highlight class="normal">`INSTANTIATE_TEST_SUITE_P`<sp/>causes<sp/>a<sp/>failing<sp/>test<sp/>in<sp/>test<sp/>suite</highlight></codeline>
<codeline><highlight class="normal">`GoogleTestVerification`.<sp/>If<sp/>you<sp/>have<sp/>a<sp/>test<sp/>suite<sp/>where<sp/>that<sp/>omission<sp/>is<sp/>not<sp/>an</highlight></codeline>
<codeline><highlight class="normal">error,<sp/>for<sp/>example<sp/>it<sp/>is<sp/>in<sp/>a<sp/>library<sp/>that<sp/>may<sp/>be<sp/>linked<sp/>in<sp/>for<sp/>other<sp/>reasons<sp/>or</highlight></codeline>
<codeline><highlight class="normal">where<sp/>the<sp/>list<sp/>of<sp/>test<sp/>cases<sp/>is<sp/>dynamic<sp/>and<sp/>may<sp/>be<sp/>empty,<sp/>then<sp/>this<sp/>check<sp/>can<sp/>be</highlight></codeline>
<codeline><highlight class="normal">suppressed<sp/>by<sp/>tagging<sp/>the<sp/>test<sp/>suite:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(FooTest);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>see<sp/>[sample7_unittest.cc]<sp/>and<sp/>[sample8_unittest.cc]<sp/>for<sp/>more<sp/>examples.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[sample7_unittest.cc]:<sp/>https://github.com/google/googletest/blob/main/googletest/samples/sample7_unittest.cc<sp/>&quot;Parameterized<sp/>Test<sp/>example&quot;</highlight></codeline>
<codeline><highlight class="normal">[sample8_unittest.cc]:<sp/>https://github.com/google/googletest/blob/main/googletest/samples/sample8_unittest.cc<sp/>&quot;Parameterized<sp/>Test<sp/>example<sp/>with<sp/>multiple<sp/>parameters&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Creating<sp/>Value-Parameterized<sp/>Abstract<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>the<sp/>above,<sp/>we<sp/>define<sp/>and<sp/>instantiate<sp/>`FooTest`<sp/>in<sp/>the<sp/>*same*<sp/>source<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">Sometimes<sp/>you<sp/>may<sp/>want<sp/>to<sp/>define<sp/>value-parameterized<sp/>tests<sp/>in<sp/>a<sp/>library<sp/>and<sp/>let</highlight></codeline>
<codeline><highlight class="normal">other<sp/>people<sp/>instantiate<sp/>them<sp/>later.<sp/>This<sp/>pattern<sp/>is<sp/>known<sp/>as<sp/>*abstract<sp/>tests*.</highlight></codeline>
<codeline><highlight class="normal">As<sp/>an<sp/>example<sp/>of<sp/>its<sp/>application,<sp/>when<sp/>you<sp/>are<sp/>designing<sp/>an<sp/>interface<sp/>you<sp/>can</highlight></codeline>
<codeline><highlight class="normal">write<sp/>a<sp/>standard<sp/>suite<sp/>of<sp/>abstract<sp/>tests<sp/>(perhaps<sp/>using<sp/>a<sp/>factory<sp/>function<sp/>as</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>parameter)<sp/>that<sp/>all<sp/>implementations<sp/>of<sp/>the<sp/>interface<sp/>are<sp/>expected<sp/>to</highlight></codeline>
<codeline><highlight class="normal">pass.<sp/>When<sp/>someone<sp/>implements<sp/>the<sp/>interface,<sp/>they<sp/>can<sp/>instantiate<sp/>your<sp/>suite<sp/>to</highlight></codeline>
<codeline><highlight class="normal">get<sp/>all<sp/>the<sp/>interface-conformance<sp/>tests<sp/>for<sp/>free.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>define<sp/>abstract<sp/>tests,<sp/>you<sp/>should<sp/>organize<sp/>your<sp/>code<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>Put<sp/>the<sp/>definition<sp/>of<sp/>the<sp/>parameterized<sp/>test<sp/>fixture<sp/>class<sp/>(e.g.<sp/>`FooTest`)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>a<sp/>header<sp/>file,<sp/>say<sp/>`foo_param_test.h`.<sp/>Think<sp/>of<sp/>this<sp/>as<sp/>*declaring*<sp/>your</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>abstract<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal">2.<sp/><sp/>Put<sp/>the<sp/>`TEST_P`<sp/>definitions<sp/>in<sp/>`foo_param_test.cc`,<sp/>which<sp/>includes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`foo_param_test.h`.<sp/>Think<sp/>of<sp/>this<sp/>as<sp/>*implementing*<sp/>your<sp/>abstract<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>they<sp/>are<sp/>defined,<sp/>you<sp/>can<sp/>instantiate<sp/>them<sp/>by<sp/>including<sp/>`foo_param_test.h`,</highlight></codeline>
<codeline><highlight class="normal">invoking<sp/>`INSTANTIATE_TEST_SUITE_P()`,<sp/>and<sp/>depending<sp/>on<sp/>the<sp/>library<sp/>target<sp/>that</highlight></codeline>
<codeline><highlight class="normal">contains<sp/>`foo_param_test.cc`.<sp/>You<sp/>can<sp/>instantiate<sp/>the<sp/>same<sp/>abstract<sp/>test<sp/>suite</highlight></codeline>
<codeline><highlight class="normal">multiple<sp/>times,<sp/>possibly<sp/>in<sp/>different<sp/>source<sp/>files.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Specifying<sp/>Names<sp/>for<sp/>Value-Parameterized<sp/>Test<sp/>Parameters</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>optional<sp/>last<sp/>argument<sp/>to<sp/>`INSTANTIATE_TEST_SUITE_P()`<sp/>allows<sp/>the<sp/>user<sp/>to</highlight></codeline>
<codeline><highlight class="normal">specify<sp/>a<sp/>function<sp/>or<sp/>functor<sp/>that<sp/>generates<sp/>custom<sp/>test<sp/>name<sp/>suffixes<sp/>based<sp/>on</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>parameters.<sp/>The<sp/>function<sp/>should<sp/>accept<sp/>one<sp/>argument<sp/>of<sp/>type</highlight></codeline>
<codeline><highlight class="normal">`testing::TestParamInfo&lt;class<sp/>ParamType&gt;`,<sp/>and<sp/>return<sp/>`std::string`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`testing::PrintToStringParamName`<sp/>is<sp/>a<sp/>builtin<sp/>test<sp/>suffix<sp/>generator<sp/>that</highlight></codeline>
<codeline><highlight class="normal">returns<sp/>the<sp/>value<sp/>of<sp/>`testing::PrintToString(GetParam())`.<sp/>It<sp/>does<sp/>not<sp/>work<sp/>for</highlight></codeline>
<codeline><highlight class="normal">`std::string`<sp/>or<sp/>C<sp/>strings.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">NOTE:<sp/>test<sp/>names<sp/>must<sp/>be<sp/>non-empty,<sp/>unique,<sp/>and<sp/>may<sp/>only<sp/>contain<sp/>ASCII</highlight></codeline>
<codeline><highlight class="normal">alphanumeric<sp/>characters.<sp/>In<sp/>particular,<sp/>they</highlight></codeline>
<codeline><highlight class="normal">[should<sp/>not<sp/>contain<sp/>underscores](faq.md#why-should-test-suite-names-and-test-names-not-contain-underscore)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MyTestSuite<sp/>:<sp/>public<sp/>testing::TestWithParam&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_P(MyTestSuite,<sp/>MyTest)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Example<sp/>Test<sp/>Param:<sp/>&quot;<sp/>&lt;&lt;<sp/>GetParam()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_SUITE_P(MyGroup,<sp/>MyTestSuite,<sp/>testing::Range(0,<sp/>10),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::PrintToStringParamName());</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Providing<sp/>a<sp/>custom<sp/>functor<sp/>allows<sp/>for<sp/>more<sp/>control<sp/>over<sp/>test<sp/>parameter<sp/>name</highlight></codeline>
<codeline><highlight class="normal">generation,<sp/>especially<sp/>for<sp/>types<sp/>where<sp/>the<sp/>automatic<sp/>conversion<sp/>does<sp/>not</highlight></codeline>
<codeline><highlight class="normal">generate<sp/>helpful<sp/>parameter<sp/>names<sp/>(e.g.<sp/>strings<sp/>as<sp/>demonstrated<sp/>above).<sp/>The</highlight></codeline>
<codeline><highlight class="normal">following<sp/>example<sp/>illustrates<sp/>this<sp/>for<sp/>multiple<sp/>parameters,<sp/>an<sp/>enumeration<sp/>type</highlight></codeline>
<codeline><highlight class="normal">and<sp/>a<sp/>string,<sp/>and<sp/>also<sp/>demonstrates<sp/>how<sp/>to<sp/>combine<sp/>generators.<sp/>It<sp/>uses<sp/>a<sp/>lambda</highlight></codeline>
<codeline><highlight class="normal">for<sp/>conciseness:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>class<sp/>MyType<sp/>{<sp/>MY_FOO<sp/>=<sp/>0,<sp/>MY_BAR<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MyTestSuite<sp/>:<sp/>public<sp/>testing::TestWithParam&lt;std::tuple&lt;MyType,<sp/>std::string&gt;&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MyGroup,<sp/>MyTestSuite,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testing::Combine(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(MyType::MY_FOO,<sp/>MyType::MY_BAR),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(&quot;A&quot;,<sp/>&quot;B&quot;)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[](const<sp/>testing::TestParamInfo&lt;MyTestSuite::ParamType&gt;&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>absl::StrCat(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;0&gt;(info.param)<sp/>==<sp/>MyType::MY_FOO<sp/>?<sp/>&quot;Foo&quot;<sp/>:<sp/>&quot;Bar&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;1&gt;(info.param));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::c_replace_if(name,<sp/>[](char<sp/>c)<sp/>{<sp/>return<sp/>!std::isalnum(c);<sp/>},<sp/>&apos;_&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Typed<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Suppose<sp/>you<sp/>have<sp/>multiple<sp/>implementations<sp/>of<sp/>the<sp/>same<sp/>interface<sp/>and<sp/>want<sp/>to<sp/>make</highlight></codeline>
<codeline><highlight class="normal">sure<sp/>that<sp/>all<sp/>of<sp/>them<sp/>satisfy<sp/>some<sp/>common<sp/>requirements.<sp/>Or,<sp/>you<sp/>may<sp/>have<sp/>defined</highlight></codeline>
<codeline><highlight class="normal">several<sp/>types<sp/>that<sp/>are<sp/>supposed<sp/>to<sp/>conform<sp/>to<sp/>the<sp/>same<sp/>&quot;concept&quot;<sp/>and<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline><highlight class="normal">verify<sp/>it.<sp/>In<sp/>both<sp/>cases,<sp/>you<sp/>want<sp/>the<sp/>same<sp/>test<sp/>logic<sp/>repeated<sp/>for<sp/>different</highlight></codeline>
<codeline><highlight class="normal">types.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">While<sp/>you<sp/>can<sp/>write<sp/>one<sp/>`TEST`<sp/>or<sp/>`TEST_F`<sp/>for<sp/>each<sp/>type<sp/>you<sp/>want<sp/>to<sp/>test<sp/>(and</highlight></codeline>
<codeline><highlight class="normal">you<sp/>may<sp/>even<sp/>factor<sp/>the<sp/>test<sp/>logic<sp/>into<sp/>a<sp/>function<sp/>template<sp/>that<sp/>you<sp/>invoke<sp/>from</highlight></codeline>
<codeline><highlight class="normal">the<sp/>`TEST`),<sp/>it&apos;s<sp/>tedious<sp/>and<sp/>doesn&apos;t<sp/>scale:<sp/>if<sp/>you<sp/>want<sp/>`m`<sp/>tests<sp/>over<sp/>`n`</highlight></codeline>
<codeline><highlight class="normal">types,<sp/>you&apos;ll<sp/>end<sp/>up<sp/>writing<sp/>`m*n`<sp/>`TEST`s.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Typed<sp/>tests*<sp/>allow<sp/>you<sp/>to<sp/>repeat<sp/>the<sp/>same<sp/>test<sp/>logic<sp/>over<sp/>a<sp/>list<sp/>of<sp/>types.<sp/>You</highlight></codeline>
<codeline><highlight class="normal">only<sp/>need<sp/>to<sp/>write<sp/>the<sp/>test<sp/>logic<sp/>once,<sp/>although<sp/>you<sp/>must<sp/>know<sp/>the<sp/>type<sp/>list</highlight></codeline>
<codeline><highlight class="normal">when<sp/>writing<sp/>typed<sp/>tests.<sp/>Here&apos;s<sp/>how<sp/>you<sp/>do<sp/>it:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">First,<sp/>define<sp/>a<sp/>fixture<sp/>class<sp/>template.<sp/>It<sp/>should<sp/>be<sp/>parameterized<sp/>by<sp/>a<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">Remember<sp/>to<sp/>derive<sp/>it<sp/>from<sp/>`::testing::Test`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>List<sp/>=<sp/>std::list&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>T<sp/>shared_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Next,<sp/>associate<sp/>a<sp/>list<sp/>of<sp/>types<sp/>with<sp/>the<sp/>test<sp/>suite,<sp/>which<sp/>will<sp/>be<sp/>repeated<sp/>for</highlight></codeline>
<codeline><highlight class="normal">each<sp/>type<sp/>in<sp/>the<sp/>list:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">using<sp/>MyTypes<sp/>=<sp/>::testing::Types&lt;char,<sp/>int,<sp/>unsigned<sp/>int&gt;;</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_SUITE(FooTest,<sp/>MyTypes);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>type<sp/>alias<sp/>(`using`<sp/>or<sp/>`typedef`)<sp/>is<sp/>necessary<sp/>for<sp/>the<sp/>`TYPED_TEST_SUITE`</highlight></codeline>
<codeline><highlight class="normal">macro<sp/>to<sp/>parse<sp/>correctly.<sp/>Otherwise<sp/>the<sp/>compiler<sp/>will<sp/>think<sp/>that<sp/>each<sp/>comma<sp/>in</highlight></codeline>
<codeline><highlight class="normal">the<sp/>type<sp/>list<sp/>introduces<sp/>a<sp/>new<sp/>macro<sp/>argument.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then,<sp/>use<sp/>`TYPED_TEST()`<sp/>instead<sp/>of<sp/>`TEST_F()`<sp/>to<sp/>define<sp/>a<sp/>typed<sp/>test<sp/>for<sp/>this</highlight></codeline>
<codeline><highlight class="normal">test<sp/>suite.<sp/>You<sp/>can<sp/>repeat<sp/>this<sp/>as<sp/>many<sp/>times<sp/>as<sp/>you<sp/>want:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>refer<sp/>to<sp/>the<sp/>special<sp/>name<sp/>TypeParam<sp/>to<sp/>get<sp/>the<sp/>type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>parameter.<sp/><sp/>Since<sp/>we<sp/>are<sp/>inside<sp/>a<sp/>derived<sp/>class<sp/>template,<sp/>C++<sp/>requires</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>us<sp/>to<sp/>visit<sp/>the<sp/>members<sp/>of<sp/>FooTest<sp/>via<sp/>&apos;this&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TypeParam<sp/>n<sp/>=<sp/>this-&gt;value_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>visit<sp/>static<sp/>members<sp/>of<sp/>the<sp/>fixture,<sp/>add<sp/>the<sp/>&apos;TestFixture::&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>prefix.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>n<sp/>+=<sp/>TestFixture::shared_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>refer<sp/>to<sp/>typedefs<sp/>in<sp/>the<sp/>fixture,<sp/>add<sp/>the<sp/>&apos;typename<sp/>TestFixture::&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>prefix.<sp/><sp/>The<sp/>&apos;typename&apos;<sp/>is<sp/>required<sp/>to<sp/>satisfy<sp/>the<sp/>compiler.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>TestFixture::List<sp/>values;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>values.push_back(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TYPED_TEST(FooTest,<sp/>HasPropertyA)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>see<sp/>[sample6_unittest.cc]<sp/>for<sp/>a<sp/>complete<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[sample6_unittest.cc]:<sp/>https://github.com/google/googletest/blob/main/googletest/samples/sample6_unittest.cc<sp/>&quot;Typed<sp/>Test<sp/>example&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Type-Parameterized<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Type-parameterized<sp/>tests*<sp/>are<sp/>like<sp/>typed<sp/>tests,<sp/>except<sp/>that<sp/>they<sp/>don&apos;t<sp/>require</highlight></codeline>
<codeline><highlight class="normal">you<sp/>to<sp/>know<sp/>the<sp/>list<sp/>of<sp/>types<sp/>ahead<sp/>of<sp/>time.<sp/>Instead,<sp/>you<sp/>can<sp/>define<sp/>the<sp/>test</highlight></codeline>
<codeline><highlight class="normal">logic<sp/>first<sp/>and<sp/>instantiate<sp/>it<sp/>with<sp/>different<sp/>type<sp/>lists<sp/>later.<sp/>You<sp/>can<sp/>even</highlight></codeline>
<codeline><highlight class="normal">instantiate<sp/>it<sp/>more<sp/>than<sp/>once<sp/>in<sp/>the<sp/>same<sp/>program.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>are<sp/>designing<sp/>an<sp/>interface<sp/>or<sp/>concept,<sp/>you<sp/>can<sp/>define<sp/>a<sp/>suite<sp/>of</highlight></codeline>
<codeline><highlight class="normal">type-parameterized<sp/>tests<sp/>to<sp/>verify<sp/>properties<sp/>that<sp/>any<sp/>valid<sp/>implementation<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>interface/concept<sp/>should<sp/>have.<sp/>Then,<sp/>the<sp/>author<sp/>of<sp/>each<sp/>implementation<sp/>can</highlight></codeline>
<codeline><highlight class="normal">just<sp/>instantiate<sp/>the<sp/>test<sp/>suite<sp/>with<sp/>their<sp/>type<sp/>to<sp/>verify<sp/>that<sp/>it<sp/>conforms<sp/>to</highlight></codeline>
<codeline><highlight class="normal">the<sp/>requirements,<sp/>without<sp/>having<sp/>to<sp/>write<sp/>similar<sp/>tests<sp/>repeatedly.<sp/>Here&apos;s<sp/>an</highlight></codeline>
<codeline><highlight class="normal">example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">First,<sp/>define<sp/>a<sp/>fixture<sp/>class<sp/>template,<sp/>as<sp/>we<sp/>did<sp/>with<sp/>typed<sp/>tests:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>DoSomethingInteresting();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Next,<sp/>declare<sp/>that<sp/>you<sp/>will<sp/>define<sp/>a<sp/>type-parameterized<sp/>test<sp/>suite:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_SUITE_P(FooTest);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then,<sp/>use<sp/>`TYPED_TEST_P()`<sp/>to<sp/>define<sp/>a<sp/>type-parameterized<sp/>test.<sp/>You<sp/>can<sp/>repeat</highlight></codeline>
<codeline><highlight class="normal">this<sp/>as<sp/>many<sp/>times<sp/>as<sp/>you<sp/>want:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_P(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>refer<sp/>to<sp/>TypeParam<sp/>to<sp/>get<sp/>the<sp/>type<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TypeParam<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>will<sp/>need<sp/>to<sp/>use<sp/>`this`<sp/>explicitly<sp/>to<sp/>refer<sp/>to<sp/>fixture<sp/>members.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;DoSomethingInteresting()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TYPED_TEST_P(FooTest,<sp/>HasPropertyA)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>the<sp/>tricky<sp/>part:<sp/>you<sp/>need<sp/>to<sp/>register<sp/>all<sp/>test<sp/>patterns<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`REGISTER_TYPED_TEST_SUITE_P`<sp/>macro<sp/>before<sp/>you<sp/>can<sp/>instantiate<sp/>them.<sp/>The<sp/>first</highlight></codeline>
<codeline><highlight class="normal">argument<sp/>of<sp/>the<sp/>macro<sp/>is<sp/>the<sp/>test<sp/>suite<sp/>name;<sp/>the<sp/>rest<sp/>are<sp/>the<sp/>names<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>in<sp/>this<sp/>test<sp/>suite:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(FooTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DoesBlah,<sp/>HasPropertyA);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally,<sp/>you<sp/>are<sp/>free<sp/>to<sp/>instantiate<sp/>the<sp/>pattern<sp/>with<sp/>the<sp/>types<sp/>you<sp/>want.<sp/>If<sp/>you</highlight></codeline>
<codeline><highlight class="normal">put<sp/>the<sp/>above<sp/>code<sp/>in<sp/>a<sp/>header<sp/>file,<sp/>you<sp/>can<sp/>`#include`<sp/>it<sp/>in<sp/>multiple<sp/>C++</highlight></codeline>
<codeline><highlight class="normal">source<sp/>files<sp/>and<sp/>instantiate<sp/>it<sp/>multiple<sp/>times.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">using<sp/>MyTypes<sp/>=<sp/>::testing::Types&lt;char,<sp/>int,<sp/>unsigned<sp/>int&gt;;</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/>FooTest,<sp/>MyTypes);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>distinguish<sp/>different<sp/>instances<sp/>of<sp/>the<sp/>pattern,<sp/>the<sp/>first<sp/>argument<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`INSTANTIATE_TYPED_TEST_SUITE_P`<sp/>macro<sp/>is<sp/>a<sp/>prefix<sp/>that<sp/>will<sp/>be<sp/>added<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">actual<sp/>test<sp/>suite<sp/>name.<sp/>Remember<sp/>to<sp/>pick<sp/>unique<sp/>prefixes<sp/>for<sp/>different</highlight></codeline>
<codeline><highlight class="normal">instances.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>the<sp/>special<sp/>case<sp/>where<sp/>the<sp/>type<sp/>list<sp/>contains<sp/>only<sp/>one<sp/>type,<sp/>you<sp/>can<sp/>write</highlight></codeline>
<codeline><highlight class="normal">that<sp/>type<sp/>directly<sp/>without<sp/>`::testing::Types&lt;...&gt;`,<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/>FooTest,<sp/>int);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>see<sp/>[sample6_unittest.cc]<sp/>for<sp/>a<sp/>complete<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Testing<sp/>Private<sp/>Code</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>change<sp/>your<sp/>software&apos;s<sp/>internal<sp/>implementation,<sp/>your<sp/>tests<sp/>should<sp/>not</highlight></codeline>
<codeline><highlight class="normal">break<sp/>as<sp/>long<sp/>as<sp/>the<sp/>change<sp/>is<sp/>not<sp/>observable<sp/>by<sp/>users.<sp/>Therefore,<sp/>**per<sp/>the</highlight></codeline>
<codeline><highlight class="normal">black-box<sp/>testing<sp/>principle,<sp/>most<sp/>of<sp/>the<sp/>time<sp/>you<sp/>should<sp/>test<sp/>your<sp/>code<sp/>through</highlight></codeline>
<codeline><highlight class="normal">its<sp/>public<sp/>interfaces.**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**If<sp/>you<sp/>still<sp/>find<sp/>yourself<sp/>needing<sp/>to<sp/>test<sp/>internal<sp/>implementation<sp/>code,</highlight></codeline>
<codeline><highlight class="normal">consider<sp/>if<sp/>there&apos;s<sp/>a<sp/>better<sp/>design.**<sp/>The<sp/>desire<sp/>to<sp/>test<sp/>internal</highlight></codeline>
<codeline><highlight class="normal">implementation<sp/>is<sp/>often<sp/>a<sp/>sign<sp/>that<sp/>the<sp/>class<sp/>is<sp/>doing<sp/>too<sp/>much.<sp/>Consider</highlight></codeline>
<codeline><highlight class="normal">extracting<sp/>an<sp/>implementation<sp/>class,<sp/>and<sp/>testing<sp/>it.<sp/>Then<sp/>use<sp/>that<sp/>implementation</highlight></codeline>
<codeline><highlight class="normal">class<sp/>in<sp/>the<sp/>original<sp/>class.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>absolutely<sp/>have<sp/>to<sp/>test<sp/>non-public<sp/>interface<sp/>code<sp/>though,<sp/>you<sp/>can.<sp/>There</highlight></codeline>
<codeline><highlight class="normal">are<sp/>two<sp/>cases<sp/>to<sp/>consider:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>Static<sp/>functions<sp/>(<sp/>*not*<sp/>the<sp/>same<sp/>as<sp/>static<sp/>member<sp/>functions!)<sp/>or<sp/>unnamed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>namespaces,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>Private<sp/>or<sp/>protected<sp/>class<sp/>members</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>test<sp/>them,<sp/>we<sp/>use<sp/>the<sp/>following<sp/>special<sp/>techniques:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>Both<sp/>static<sp/>functions<sp/>and<sp/>definitions/declarations<sp/>in<sp/>an<sp/>unnamed<sp/>namespace</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>are<sp/>only<sp/>visible<sp/>within<sp/>the<sp/>same<sp/>translation<sp/>unit.<sp/>To<sp/>test<sp/>them,<sp/>you<sp/>can</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`#include`<sp/>the<sp/>entire<sp/>`.cc`<sp/>file<sp/>being<sp/>tested<sp/>in<sp/>your<sp/>`*_test.cc`<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(#including<sp/>`.cc`<sp/>files<sp/>is<sp/>not<sp/>a<sp/>good<sp/>way<sp/>to<sp/>reuse<sp/>code<sp/>-<sp/>you<sp/>should<sp/>not<sp/>do</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this<sp/>in<sp/>production<sp/>code!)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>However,<sp/>a<sp/>better<sp/>approach<sp/>is<sp/>to<sp/>move<sp/>the<sp/>private<sp/>code<sp/>into<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`foo::internal`<sp/>namespace,<sp/>where<sp/>`foo`<sp/>is<sp/>the<sp/>namespace<sp/>your<sp/>project</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>normally<sp/>uses,<sp/>and<sp/>put<sp/>the<sp/>private<sp/>declarations<sp/>in<sp/>a<sp/>`*-internal.h`<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Your<sp/>production<sp/>`.cc`<sp/>files<sp/>and<sp/>your<sp/>tests<sp/>are<sp/>allowed<sp/>to<sp/>include<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>internal<sp/>header,<sp/>but<sp/>your<sp/>clients<sp/>are<sp/>not.<sp/>This<sp/>way,<sp/>you<sp/>can<sp/>fully<sp/>test<sp/>your</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>internal<sp/>implementation<sp/>without<sp/>leaking<sp/>it<sp/>to<sp/>your<sp/>clients.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>Private<sp/>class<sp/>members<sp/>are<sp/>only<sp/>accessible<sp/>from<sp/>within<sp/>the<sp/>class<sp/>or<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>friends.<sp/>To<sp/>access<sp/>a<sp/>class&apos;<sp/>private<sp/>members,<sp/>you<sp/>can<sp/>declare<sp/>your<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fixture<sp/>as<sp/>a<sp/>friend<sp/>to<sp/>the<sp/>class<sp/>and<sp/>define<sp/>accessors<sp/>in<sp/>your<sp/>fixture.<sp/>Tests</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>the<sp/>fixture<sp/>can<sp/>then<sp/>access<sp/>the<sp/>private<sp/>members<sp/>of<sp/>your<sp/>production</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>via<sp/>the<sp/>accessors<sp/>in<sp/>the<sp/>fixture.<sp/>Note<sp/>that<sp/>even<sp/>though<sp/>your<sp/>fixture</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>a<sp/>friend<sp/>to<sp/>your<sp/>production<sp/>class,<sp/>your<sp/>tests<sp/>are<sp/>not<sp/>automatically</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>friends<sp/>to<sp/>it,<sp/>as<sp/>they<sp/>are<sp/>technically<sp/>defined<sp/>in<sp/>sub-classes<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fixture.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Another<sp/>way<sp/>to<sp/>test<sp/>private<sp/>members<sp/>is<sp/>to<sp/>refactor<sp/>them<sp/>into<sp/>an</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>implementation<sp/>class,<sp/>which<sp/>is<sp/>then<sp/>declared<sp/>in<sp/>a<sp/>`*-internal.h`<sp/>file.<sp/>Your</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>clients<sp/>aren&apos;t<sp/>allowed<sp/>to<sp/>include<sp/>this<sp/>header<sp/>but<sp/>your<sp/>tests<sp/>can.<sp/>Such<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>called<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[Pimpl](https://www.gamedev.net/articles/programming/general-and-gameplay-programming/the-c-pimpl-r1794/)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(Private<sp/>Implementation)<sp/>idiom.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Or,<sp/>you<sp/>can<sp/>declare<sp/>an<sp/>individual<sp/>test<sp/>as<sp/>a<sp/>friend<sp/>of<sp/>your<sp/>class<sp/>by<sp/>adding</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this<sp/>line<sp/>in<sp/>the<sp/>class<sp/>body:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FRIEND_TEST(TestSuiteName,<sp/>TestName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>For<sp/>example,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>foo.h</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FRIEND_TEST(FooTest,<sp/>BarReturnsZeroOnNull);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Bar(void*<sp/>x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>foo_test.cc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TEST(FooTest,<sp/>BarReturnsZeroOnNull)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(foo.Bar(NULL),<sp/>0);<sp/><sp/>//<sp/>Uses<sp/>Foo&apos;s<sp/>private<sp/>member<sp/>Bar().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Pay<sp/>special<sp/>attention<sp/>when<sp/>your<sp/>class<sp/>is<sp/>defined<sp/>in<sp/>a<sp/>namespace.<sp/>If<sp/>you<sp/>want</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>your<sp/>test<sp/>fixtures<sp/>and<sp/>tests<sp/>to<sp/>be<sp/>friends<sp/>of<sp/>your<sp/>class,<sp/>then<sp/>they<sp/>must<sp/>be</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>defined<sp/>in<sp/>the<sp/>exact<sp/>same<sp/>namespace<sp/>(no<sp/>anonymous<sp/>or<sp/>inline<sp/>namespaces).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>if<sp/>the<sp/>code<sp/>to<sp/>be<sp/>tested<sp/>looks<sp/>like:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>namespace<sp/>my_namespace<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>friend<sp/>class<sp/>FooTest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FRIEND_TEST(FooTest,<sp/>Bar);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FRIEND_TEST(FooTest,<sp/>Baz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>definition<sp/>of<sp/>the<sp/>class<sp/>Foo<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/>//<sp/>namespace<sp/>my_namespace</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Your<sp/>test<sp/>code<sp/>should<sp/>be<sp/>something<sp/>like:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>namespace<sp/>my_namespace<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_F(FooTest,<sp/>Bar)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_F(FooTest,<sp/>Baz)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/>//<sp/>namespace<sp/>my_namespace</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>&quot;Catching&quot;<sp/>Failures</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>are<sp/>building<sp/>a<sp/>testing<sp/>utility<sp/>on<sp/>top<sp/>of<sp/>GoogleTest,<sp/>you&apos;ll<sp/>want<sp/>to<sp/>test</highlight></codeline>
<codeline><highlight class="normal">your<sp/>utility.<sp/>What<sp/>framework<sp/>would<sp/>you<sp/>use<sp/>to<sp/>test<sp/>it?<sp/>GoogleTest,<sp/>of<sp/>course.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>challenge<sp/>is<sp/>to<sp/>verify<sp/>that<sp/>your<sp/>testing<sp/>utility<sp/>reports<sp/>failures<sp/>correctly.</highlight></codeline>
<codeline><highlight class="normal">In<sp/>frameworks<sp/>that<sp/>report<sp/>a<sp/>failure<sp/>by<sp/>throwing<sp/>an<sp/>exception,<sp/>you<sp/>could<sp/>catch</highlight></codeline>
<codeline><highlight class="normal">the<sp/>exception<sp/>and<sp/>assert<sp/>on<sp/>it.<sp/>But<sp/>GoogleTest<sp/>doesn&apos;t<sp/>use<sp/>exceptions,<sp/>so<sp/>how<sp/>do</highlight></codeline>
<codeline><highlight class="normal">we<sp/>test<sp/>that<sp/>a<sp/>piece<sp/>of<sp/>code<sp/>generates<sp/>an<sp/>expected<sp/>failure?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`&quot;gtest/gtest-spi.h&quot;`<sp/>contains<sp/>some<sp/>constructs<sp/>to<sp/>do<sp/>this.</highlight></codeline>
<codeline><highlight class="normal">After<sp/>#including<sp/>this<sp/>header,<sp/>you<sp/>can<sp/>use</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(statement,<sp/>substring);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">to<sp/>assert<sp/>that<sp/>`statement`<sp/>generates<sp/>a<sp/>fatal<sp/>(e.g.<sp/>`ASSERT_*`)<sp/>failure<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">current<sp/>thread<sp/>whose<sp/>message<sp/>contains<sp/>the<sp/>given<sp/>`substring`,<sp/>or<sp/>use</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(statement,<sp/>substring);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>you<sp/>are<sp/>expecting<sp/>a<sp/>non-fatal<sp/>(e.g.<sp/>`EXPECT_*`)<sp/>failure.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Only<sp/>failures<sp/>in<sp/>the<sp/>current<sp/>thread<sp/>are<sp/>checked<sp/>to<sp/>determine<sp/>the<sp/>result<sp/>of<sp/>this</highlight></codeline>
<codeline><highlight class="normal">type<sp/>of<sp/>expectations.<sp/>If<sp/>`statement`<sp/>creates<sp/>new<sp/>threads,<sp/>failures<sp/>in<sp/>these</highlight></codeline>
<codeline><highlight class="normal">threads<sp/>are<sp/>also<sp/>ignored.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>catch<sp/>failures<sp/>in<sp/>other<sp/>threads<sp/>as</highlight></codeline>
<codeline><highlight class="normal">well,<sp/>use<sp/>one<sp/>of<sp/>the<sp/>following<sp/>macros<sp/>instead:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement,<sp/>substring);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement,<sp/>substring);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">NOTE:<sp/>Assertions<sp/>from<sp/>multiple<sp/>threads<sp/>are<sp/>currently<sp/>not<sp/>supported<sp/>on<sp/>Windows.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>technical<sp/>reasons,<sp/>there<sp/>are<sp/>some<sp/>caveats:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>You<sp/>cannot<sp/>stream<sp/>a<sp/>failure<sp/>message<sp/>to<sp/>either<sp/>macro.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/><sp/>`statement`<sp/>in<sp/>`EXPECT_FATAL_FAILURE{_ON_ALL_THREADS}()`<sp/>cannot<sp/>reference</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>local<sp/>non-static<sp/>variables<sp/>or<sp/>non-static<sp/>members<sp/>of<sp/>`this`<sp/>object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/><sp/>`statement`<sp/>in<sp/>`EXPECT_FATAL_FAILURE{_ON_ALL_THREADS}()`<sp/>cannot<sp/>return<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Registering<sp/>tests<sp/>programmatically</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`TEST`<sp/>macros<sp/>handle<sp/>the<sp/>vast<sp/>majority<sp/>of<sp/>all<sp/>use<sp/>cases,<sp/>but<sp/>there<sp/>are<sp/>few</highlight></codeline>
<codeline><highlight class="normal">where<sp/>runtime<sp/>registration<sp/>logic<sp/>is<sp/>required.<sp/>For<sp/>those<sp/>cases,<sp/>the<sp/>framework</highlight></codeline>
<codeline><highlight class="normal">provides<sp/>the<sp/>`::testing::RegisterTest`<sp/>that<sp/>allows<sp/>callers<sp/>to<sp/>register<sp/>arbitrary</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>dynamically.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>an<sp/>advanced<sp/>API<sp/>only<sp/>to<sp/>be<sp/>used<sp/>when<sp/>the<sp/>`TEST`<sp/>macros<sp/>are<sp/>insufficient.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>macros<sp/>should<sp/>be<sp/>preferred<sp/>when<sp/>possible,<sp/>as<sp/>they<sp/>avoid<sp/>most<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">complexity<sp/>of<sp/>calling<sp/>this<sp/>function.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">It<sp/>provides<sp/>the<sp/>following<sp/>signature:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>Factory&gt;</highlight></codeline>
<codeline><highlight class="normal">TestInfo*<sp/>RegisterTest(const<sp/>char*<sp/>test_suite_name,<sp/>const<sp/>char*<sp/>test_name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>type_param,<sp/>const<sp/>char*<sp/>value_param,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>file,<sp/>int<sp/>line,<sp/>Factory<sp/>factory);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`factory`<sp/>argument<sp/>is<sp/>a<sp/>factory<sp/>callable<sp/>(move-constructible)<sp/>object<sp/>or</highlight></codeline>
<codeline><highlight class="normal">function<sp/>pointer<sp/>that<sp/>creates<sp/>a<sp/>new<sp/>instance<sp/>of<sp/>the<sp/>Test<sp/>object.<sp/>It<sp/>handles</highlight></codeline>
<codeline><highlight class="normal">ownership<sp/>to<sp/>the<sp/>caller.<sp/>The<sp/>signature<sp/>of<sp/>the<sp/>callable<sp/>is<sp/>`Fixture*()`,<sp/>where</highlight></codeline>
<codeline><highlight class="normal">`Fixture`<sp/>is<sp/>the<sp/>test<sp/>fixture<sp/>class<sp/>for<sp/>the<sp/>test.<sp/>All<sp/>tests<sp/>registered<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">same<sp/>`test_suite_name`<sp/>must<sp/>return<sp/>the<sp/>same<sp/>fixture<sp/>type.<sp/>This<sp/>is<sp/>checked<sp/>at</highlight></codeline>
<codeline><highlight class="normal">runtime.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>framework<sp/>will<sp/>infer<sp/>the<sp/>fixture<sp/>class<sp/>from<sp/>the<sp/>factory<sp/>and<sp/>will<sp/>call<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`SetUpTestSuite`<sp/>and<sp/>`TearDownTestSuite`<sp/>for<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Must<sp/>be<sp/>called<sp/>before<sp/>`RUN_ALL_TESTS()`<sp/>is<sp/>invoked,<sp/>otherwise<sp/>behavior<sp/>is</highlight></codeline>
<codeline><highlight class="normal">undefined.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Use<sp/>case<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MyFixture<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>of<sp/>these<sp/>optional,<sp/>just<sp/>like<sp/>in<sp/>regular<sp/>macro<sp/>usage.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>SetUpTestSuite()<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>TearDownTestSuite()<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>TearDown()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MyTest<sp/>:<sp/>public<sp/>MyFixture<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>explicit<sp/>MyTest(int<sp/>data)<sp/>:<sp/>data_(data)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>TestBody()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>data_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>RegisterMyTests(const<sp/>std::vector&lt;int&gt;&amp;<sp/>values)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int<sp/>v<sp/>:<sp/>values)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;MyFixture&quot;,<sp/>(&quot;Test&quot;<sp/>+<sp/>std::to_string(v)).c_str(),<sp/>nullptr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(v).c_str(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Important<sp/>to<sp/>use<sp/>the<sp/>fixture<sp/>type<sp/>as<sp/>the<sp/>return<sp/>type<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]()<sp/>-&gt;<sp/>MyFixture*<sp/>{<sp/>return<sp/>new<sp/>MyTest(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>values_to_test<sp/>=<sp/>LoadValuesFromConfig();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RegisterMyTests(values_to_test);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Getting<sp/>the<sp/>Current<sp/>Test&apos;s<sp/>Name</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sometimes<sp/>a<sp/>function<sp/>may<sp/>need<sp/>to<sp/>know<sp/>the<sp/>name<sp/>of<sp/>the<sp/>currently<sp/>running<sp/>test.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>you<sp/>may<sp/>be<sp/>using<sp/>the<sp/>`SetUp()`<sp/>method<sp/>of<sp/>your<sp/>test<sp/>fixture<sp/>to<sp/>set</highlight></codeline>
<codeline><highlight class="normal">the<sp/>golden<sp/>file<sp/>name<sp/>based<sp/>on<sp/>which<sp/>test<sp/>is<sp/>running.<sp/>The</highlight></codeline>
<codeline><highlight class="normal">[`TestInfo`](reference/testing.md#TestInfo)<sp/>class<sp/>has<sp/>this<sp/>information.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>obtain<sp/>a<sp/>`TestInfo`<sp/>object<sp/>for<sp/>the<sp/>currently<sp/>running<sp/>test,<sp/>call</highlight></codeline>
<codeline><highlight class="normal">`current_test_info()`<sp/>on<sp/>the<sp/>[`UnitTest`](reference/testing.md#UnitTest)</highlight></codeline>
<codeline><highlight class="normal">singleton<sp/>object:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>information<sp/>about<sp/>the<sp/>currently<sp/>running<sp/>test.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>NOT<sp/>delete<sp/>the<sp/>returned<sp/>object<sp/>-<sp/>it&apos;s<sp/>managed<sp/>by<sp/>the<sp/>UnitTest<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>testing::TestInfo*<sp/>const<sp/>test_info<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;We<sp/>are<sp/>in<sp/>test<sp/>%s<sp/>of<sp/>test<sp/>suite<sp/>%s.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;name(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;test_suite_name());</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`current_test_info()`<sp/>returns<sp/>a<sp/>null<sp/>pointer<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.<sp/>In</highlight></codeline>
<codeline><highlight class="normal">particular,<sp/>you<sp/>cannot<sp/>find<sp/>the<sp/>test<sp/>suite<sp/>name<sp/>in<sp/>`SetUpTestSuite()`,</highlight></codeline>
<codeline><highlight class="normal">`TearDownTestSuite()`<sp/>(where<sp/>you<sp/>know<sp/>the<sp/>test<sp/>suite<sp/>name<sp/>implicitly),<sp/>or</highlight></codeline>
<codeline><highlight class="normal">functions<sp/>called<sp/>from<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Extending<sp/>GoogleTest<sp/>by<sp/>Handling<sp/>Test<sp/>Events</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>provides<sp/>an<sp/>**event<sp/>listener<sp/>API**<sp/>to<sp/>let<sp/>you<sp/>receive<sp/>notifications</highlight></codeline>
<codeline><highlight class="normal">about<sp/>the<sp/>progress<sp/>of<sp/>a<sp/>test<sp/>program<sp/>and<sp/>test<sp/>failures.<sp/>The<sp/>events<sp/>you<sp/>can</highlight></codeline>
<codeline><highlight class="normal">listen<sp/>to<sp/>include<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of<sp/>the<sp/>test<sp/>program,<sp/>a<sp/>test<sp/>suite,<sp/>or<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">method,<sp/>among<sp/>others.<sp/>You<sp/>may<sp/>use<sp/>this<sp/>API<sp/>to<sp/>augment<sp/>or<sp/>replace<sp/>the<sp/>standard</highlight></codeline>
<codeline><highlight class="normal">console<sp/>output,<sp/>replace<sp/>the<sp/>XML<sp/>output,<sp/>or<sp/>provide<sp/>a<sp/>completely<sp/>different<sp/>form</highlight></codeline>
<codeline><highlight class="normal">of<sp/>output,<sp/>such<sp/>as<sp/>a<sp/>GUI<sp/>or<sp/>a<sp/>database.<sp/>You<sp/>can<sp/>also<sp/>use<sp/>test<sp/>events<sp/>as</highlight></codeline>
<codeline><highlight class="normal">checkpoints<sp/>to<sp/>implement<sp/>a<sp/>resource<sp/>leak<sp/>checker,<sp/>for<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Defining<sp/>Event<sp/>Listeners</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>define<sp/>a<sp/>event<sp/>listener,<sp/>you<sp/>subclass<sp/>either</highlight></codeline>
<codeline><highlight class="normal">[`testing::TestEventListener`](reference/testing.md#TestEventListener)<sp/>or</highlight></codeline>
<codeline><highlight class="normal">[`testing::EmptyTestEventListener`](reference/testing.md#EmptyTestEventListener)</highlight></codeline>
<codeline><highlight class="normal">The<sp/>former<sp/>is<sp/>an<sp/>(abstract)<sp/>interface,<sp/>where<sp/>*each<sp/>pure<sp/>virtual<sp/>method<sp/>can<sp/>be</highlight></codeline>
<codeline><highlight class="normal">overridden<sp/>to<sp/>handle<sp/>a<sp/>test<sp/>event*<sp/>(For<sp/>example,<sp/>when<sp/>a<sp/>test<sp/>starts,<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`OnTestStart()`<sp/>method<sp/>will<sp/>be<sp/>called.).<sp/>The<sp/>latter<sp/>provides<sp/>an<sp/>empty</highlight></codeline>
<codeline><highlight class="normal">implementation<sp/>of<sp/>all<sp/>methods<sp/>in<sp/>the<sp/>interface,<sp/>such<sp/>that<sp/>a<sp/>subclass<sp/>only<sp/>needs</highlight></codeline>
<codeline><highlight class="normal">to<sp/>override<sp/>the<sp/>methods<sp/>it<sp/>cares<sp/>about.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>an<sp/>event<sp/>is<sp/>fired,<sp/>its<sp/>context<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>handler<sp/>function<sp/>as<sp/>an</highlight></codeline>
<codeline><highlight class="normal">argument.<sp/>The<sp/>following<sp/>argument<sp/>types<sp/>are<sp/>used:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>UnitTest<sp/>reflects<sp/>the<sp/>state<sp/>of<sp/>the<sp/>entire<sp/>test<sp/>program,</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>TestSuite<sp/>has<sp/>information<sp/>about<sp/>a<sp/>test<sp/>suite,<sp/>which<sp/>can<sp/>contain<sp/>one<sp/>or<sp/>more</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tests,</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>TestInfo<sp/>contains<sp/>the<sp/>state<sp/>of<sp/>a<sp/>test,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>TestPartResult<sp/>represents<sp/>the<sp/>result<sp/>of<sp/>a<sp/>test<sp/>assertion.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">An<sp/>event<sp/>handler<sp/>function<sp/>can<sp/>examine<sp/>the<sp/>argument<sp/>it<sp/>receives<sp/>to<sp/>find<sp/>out</highlight></codeline>
<codeline><highlight class="normal">interesting<sp/>information<sp/>about<sp/>the<sp/>event<sp/>and<sp/>the<sp/>test<sp/>program&apos;s<sp/>state.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here&apos;s<sp/>an<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>MinimalistPrinter<sp/>:<sp/>public<sp/>testing::EmptyTestEventListener<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Called<sp/>before<sp/>a<sp/>test<sp/>starts.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>OnTestStart(const<sp/>testing::TestInfo&amp;<sp/>test_info)<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;***<sp/>Test<sp/>%s.%s<sp/>starting.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.test_suite_name(),<sp/>test_info.name());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Called<sp/>after<sp/>a<sp/>failed<sp/>assertion<sp/>or<sp/>a<sp/>SUCCESS().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>OnTestPartResult(const<sp/>testing::TestPartResult&amp;<sp/>test_part_result)<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%s<sp/>in<sp/>%s:%d\n%s\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.failed()<sp/>?<sp/>&quot;***<sp/>Failure&quot;<sp/>:<sp/>&quot;Success&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.file_name(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.line_number(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.summary());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Called<sp/>after<sp/>a<sp/>test<sp/>ends.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>OnTestEnd(const<sp/>testing::TestInfo&amp;<sp/>test_info)<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;***<sp/>Test<sp/>%s.%s<sp/>ending.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.test_suite_name(),<sp/>test_info.name());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Using<sp/>Event<sp/>Listeners</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>use<sp/>the<sp/>event<sp/>listener<sp/>you<sp/>have<sp/>defined,<sp/>add<sp/>an<sp/>instance<sp/>of<sp/>it<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>event<sp/>listener<sp/>list<sp/>(represented<sp/>by<sp/>class</highlight></codeline>
<codeline><highlight class="normal">[`TestEventListeners`](reference/testing.md#TestEventListeners)<sp/>-<sp/>note<sp/>the<sp/>&quot;s&quot;</highlight></codeline>
<codeline><highlight class="normal">at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>name)<sp/>in<sp/>your<sp/>`main()`<sp/>function,<sp/>before<sp/>calling</highlight></codeline>
<codeline><highlight class="normal">`RUN_ALL_TESTS()`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>hold<sp/>of<sp/>the<sp/>event<sp/>listener<sp/>list.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::TestEventListeners&amp;<sp/>listeners<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing::UnitTest::GetInstance()-&gt;listeners();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Adds<sp/>a<sp/>listener<sp/>to<sp/>the<sp/>end.<sp/><sp/>GoogleTest<sp/>takes<sp/>the<sp/>ownership.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>listeners.Append(new<sp/>MinimalistPrinter);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There&apos;s<sp/>only<sp/>one<sp/>problem:<sp/>the<sp/>default<sp/>test<sp/>result<sp/>printer<sp/>is<sp/>still<sp/>in<sp/>effect,<sp/>so</highlight></codeline>
<codeline><highlight class="normal">its<sp/>output<sp/>will<sp/>mingle<sp/>with<sp/>the<sp/>output<sp/>from<sp/>your<sp/>minimalist<sp/>printer.<sp/>To<sp/>suppress</highlight></codeline>
<codeline><highlight class="normal">the<sp/>default<sp/>printer,<sp/>just<sp/>release<sp/>it<sp/>from<sp/>the<sp/>event<sp/>listener<sp/>list<sp/>and<sp/>delete<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>do<sp/>so<sp/>by<sp/>adding<sp/>one<sp/>line:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delete<sp/>listeners.Release(listeners.default_result_printer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>listeners.Append(new<sp/>MinimalistPrinter);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now,<sp/>sit<sp/>back<sp/>and<sp/>enjoy<sp/>a<sp/>completely<sp/>different<sp/>output<sp/>from<sp/>your<sp/>tests.<sp/>For<sp/>more</highlight></codeline>
<codeline><highlight class="normal">details,<sp/>see<sp/>[sample9_unittest.cc].</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[sample9_unittest.cc]:<sp/>https://github.com/google/googletest/blob/main/googletest/samples/sample9_unittest.cc<sp/>&quot;Event<sp/>listener<sp/>example&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>append<sp/>more<sp/>than<sp/>one<sp/>listener<sp/>to<sp/>the<sp/>list.<sp/>When<sp/>an<sp/>`On*Start()`<sp/>or</highlight></codeline>
<codeline><highlight class="normal">`OnTestPartResult()`<sp/>event<sp/>is<sp/>fired,<sp/>the<sp/>listeners<sp/>will<sp/>receive<sp/>it<sp/>in<sp/>the<sp/>order</highlight></codeline>
<codeline><highlight class="normal">they<sp/>appear<sp/>in<sp/>the<sp/>list<sp/>(since<sp/>new<sp/>listeners<sp/>are<sp/>added<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>default<sp/>text<sp/>printer<sp/>and<sp/>the<sp/>default<sp/>XML<sp/>generator<sp/>will<sp/>receive<sp/>the<sp/>event</highlight></codeline>
<codeline><highlight class="normal">first).<sp/>An<sp/>`On*End()`<sp/>event<sp/>will<sp/>be<sp/>received<sp/>by<sp/>the<sp/>listeners<sp/>in<sp/>the<sp/>*reverse*</highlight></codeline>
<codeline><highlight class="normal">order.<sp/>This<sp/>allows<sp/>output<sp/>by<sp/>listeners<sp/>added<sp/>later<sp/>to<sp/>be<sp/>framed<sp/>by<sp/>output<sp/>from</highlight></codeline>
<codeline><highlight class="normal">listeners<sp/>added<sp/>earlier.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Generating<sp/>Failures<sp/>in<sp/>Listeners</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>use<sp/>failure-raising<sp/>macros<sp/>(`EXPECT_*()`,<sp/>`ASSERT_*()`,<sp/>`FAIL()`,<sp/>etc)</highlight></codeline>
<codeline><highlight class="normal">when<sp/>processing<sp/>an<sp/>event.<sp/>There<sp/>are<sp/>some<sp/>restrictions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>You<sp/>cannot<sp/>generate<sp/>any<sp/>failure<sp/>in<sp/>`OnTestPartResult()`<sp/>(otherwise<sp/>it<sp/>will</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cause<sp/>`OnTestPartResult()`<sp/>to<sp/>be<sp/>called<sp/>recursively).</highlight></codeline>
<codeline><highlight class="normal">2.<sp/><sp/>A<sp/>listener<sp/>that<sp/>handles<sp/>`OnTestPartResult()`<sp/>is<sp/>not<sp/>allowed<sp/>to<sp/>generate<sp/>any</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>failure.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>you<sp/>add<sp/>listeners<sp/>to<sp/>the<sp/>listener<sp/>list,<sp/>you<sp/>should<sp/>put<sp/>listeners<sp/>that</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>`OnTestPartResult()`<sp/>*before*<sp/>listeners<sp/>that<sp/>can<sp/>generate<sp/>failures.<sp/>This</highlight></codeline>
<codeline><highlight class="normal">ensures<sp/>that<sp/>failures<sp/>generated<sp/>by<sp/>the<sp/>latter<sp/>are<sp/>attributed<sp/>to<sp/>the<sp/>right<sp/>test</highlight></codeline>
<codeline><highlight class="normal">by<sp/>the<sp/>former.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See<sp/>[sample10_unittest.cc]<sp/>for<sp/>an<sp/>example<sp/>of<sp/>a<sp/>failure-raising<sp/>listener.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[sample10_unittest.cc]:<sp/>https://github.com/google/googletest/blob/main/googletest/samples/sample10_unittest.cc<sp/>&quot;Failure-raising<sp/>listener<sp/>example&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Running<sp/>Test<sp/>Programs:<sp/>Advanced<sp/>Options</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>test<sp/>programs<sp/>are<sp/>ordinary<sp/>executables.<sp/>Once<sp/>built,<sp/>you<sp/>can<sp/>run<sp/>them</highlight></codeline>
<codeline><highlight class="normal">directly<sp/>and<sp/>affect<sp/>their<sp/>behavior<sp/>via<sp/>the<sp/>following<sp/>environment<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">and/or<sp/>command<sp/>line<sp/>flags.<sp/>For<sp/>the<sp/>flags<sp/>to<sp/>work,<sp/>your<sp/>programs<sp/>must<sp/>call</highlight></codeline>
<codeline><highlight class="normal">`::testing::InitGoogleTest()`<sp/>before<sp/>calling<sp/>`RUN_ALL_TESTS()`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>see<sp/>a<sp/>list<sp/>of<sp/>supported<sp/>flags<sp/>and<sp/>their<sp/>usage,<sp/>please<sp/>run<sp/>your<sp/>test<sp/>program</highlight></codeline>
<codeline><highlight class="normal">with<sp/>the<sp/>`--help`<sp/>flag.<sp/>You<sp/>can<sp/>also<sp/>use<sp/>`-h`,<sp/>`-?`,<sp/>or<sp/>`/?`<sp/>for<sp/>short.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>an<sp/>option<sp/>is<sp/>specified<sp/>both<sp/>by<sp/>an<sp/>environment<sp/>variable<sp/>and<sp/>by<sp/>a<sp/>flag,<sp/>the</highlight></codeline>
<codeline><highlight class="normal">latter<sp/>takes<sp/>precedence.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Selecting<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Listing<sp/>Test<sp/>Names</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sometimes<sp/>it<sp/>is<sp/>necessary<sp/>to<sp/>list<sp/>the<sp/>available<sp/>tests<sp/>in<sp/>a<sp/>program<sp/>before</highlight></codeline>
<codeline><highlight class="normal">running<sp/>them<sp/>so<sp/>that<sp/>a<sp/>filter<sp/>may<sp/>be<sp/>applied<sp/>if<sp/>needed.<sp/>Including<sp/>the<sp/>flag</highlight></codeline>
<codeline><highlight class="normal">`--gtest_list_tests`<sp/>overrides<sp/>all<sp/>other<sp/>flags<sp/>and<sp/>lists<sp/>tests<sp/>in<sp/>the<sp/>following</highlight></codeline>
<codeline><highlight class="normal">format:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```none</highlight></codeline>
<codeline><highlight class="normal">TestSuite1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName2</highlight></codeline>
<codeline><highlight class="normal">TestSuite2.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">None<sp/>of<sp/>the<sp/>tests<sp/>listed<sp/>are<sp/>actually<sp/>run<sp/>if<sp/>the<sp/>flag<sp/>is<sp/>provided.<sp/>There<sp/>is<sp/>no</highlight></codeline>
<codeline><highlight class="normal">corresponding<sp/>environment<sp/>variable<sp/>for<sp/>this<sp/>flag.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Running<sp/>a<sp/>Subset<sp/>of<sp/>the<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>a<sp/>GoogleTest<sp/>program<sp/>runs<sp/>all<sp/>tests<sp/>the<sp/>user<sp/>has<sp/>defined.<sp/>Sometimes,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>want<sp/>to<sp/>run<sp/>only<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>tests<sp/>(e.g.<sp/>for<sp/>debugging<sp/>or<sp/>quickly</highlight></codeline>
<codeline><highlight class="normal">verifying<sp/>a<sp/>change).<sp/>If<sp/>you<sp/>set<sp/>the<sp/>`GTEST_FILTER`<sp/>environment<sp/>variable<sp/>or<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`--gtest_filter`<sp/>flag<sp/>to<sp/>a<sp/>filter<sp/>string,<sp/>GoogleTest<sp/>will<sp/>only<sp/>run<sp/>the<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">whose<sp/>full<sp/>names<sp/>(in<sp/>the<sp/>form<sp/>of<sp/>`TestSuiteName.TestName`)<sp/>match<sp/>the<sp/>filter.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>format<sp/>of<sp/>a<sp/>filter<sp/>is<sp/>a<sp/>&apos;`:`&apos;-separated<sp/>list<sp/>of<sp/>wildcard<sp/>patterns<sp/>(called</highlight></codeline>
<codeline><highlight class="normal">the<sp/>*positive<sp/>patterns*)<sp/>optionally<sp/>followed<sp/>by<sp/>a<sp/>&apos;`-`&apos;<sp/>and<sp/>another</highlight></codeline>
<codeline><highlight class="normal">&apos;`:`&apos;-separated<sp/>pattern<sp/>list<sp/>(called<sp/>the<sp/>*negative<sp/>patterns*).<sp/>A<sp/>test<sp/>matches</highlight></codeline>
<codeline><highlight class="normal">the<sp/>filter<sp/>if<sp/>and<sp/>only<sp/>if<sp/>it<sp/>matches<sp/>any<sp/>of<sp/>the<sp/>positive<sp/>patterns<sp/>but<sp/>does<sp/>not</highlight></codeline>
<codeline><highlight class="normal">match<sp/>any<sp/>of<sp/>the<sp/>negative<sp/>patterns.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>pattern<sp/>may<sp/>contain<sp/>`&apos;*&apos;`<sp/>(matches<sp/>any<sp/>string)<sp/>or<sp/>`&apos;?&apos;`<sp/>(matches<sp/>any<sp/>single</highlight></codeline>
<codeline><highlight class="normal">character).<sp/>For<sp/>convenience,<sp/>the<sp/>filter<sp/>`&apos;*-NegativePatterns&apos;`<sp/>can<sp/>be<sp/>also</highlight></codeline>
<codeline><highlight class="normal">written<sp/>as<sp/>`&apos;-NegativePatterns&apos;`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`./foo_test`<sp/>Has<sp/>no<sp/>flag,<sp/>and<sp/>thus<sp/>runs<sp/>all<sp/>its<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`./foo_test<sp/>--gtest_filter=*`<sp/>Also<sp/>runs<sp/>everything,<sp/>due<sp/>to<sp/>the<sp/>single</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>match-everything<sp/>`*`<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`./foo_test<sp/>--gtest_filter=FooTest.*`<sp/>Runs<sp/>everything<sp/>in<sp/>test<sp/>suite</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`FooTest`<sp/>.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`./foo_test<sp/>--gtest_filter=*Null*:*Constructor*`<sp/>Runs<sp/>any<sp/>test<sp/>whose<sp/>full</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>contains<sp/>either<sp/>`&quot;Null&quot;`<sp/>or<sp/>`&quot;Constructor&quot;`<sp/>.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`./foo_test<sp/>--gtest_filter=-*DeathTest.*`<sp/>Runs<sp/>all<sp/>non-death<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`./foo_test<sp/>--gtest_filter=FooTest.*-FooTest.Bar`<sp/>Runs<sp/>everything<sp/>in<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>suite<sp/>`FooTest`<sp/>except<sp/>`FooTest.Bar`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`./foo_test<sp/>--gtest_filter=FooTest.*:BarTest.*-FooTest.Bar:BarTest.Foo`<sp/>Runs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>everything<sp/>in<sp/>test<sp/>suite<sp/>`FooTest`<sp/>except<sp/>`FooTest.Bar`<sp/>and<sp/>everything<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>suite<sp/>`BarTest`<sp/>except<sp/>`BarTest.Foo`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Stop<sp/>test<sp/>execution<sp/>upon<sp/>first<sp/>failure</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>a<sp/>GoogleTest<sp/>program<sp/>runs<sp/>all<sp/>tests<sp/>the<sp/>user<sp/>has<sp/>defined.<sp/>In<sp/>some</highlight></codeline>
<codeline><highlight class="normal">cases<sp/>(e.g.<sp/>iterative<sp/>test<sp/>development<sp/>&amp;<sp/>execution)<sp/>it<sp/>may<sp/>be<sp/>desirable<sp/>stop</highlight></codeline>
<codeline><highlight class="normal">test<sp/>execution<sp/>upon<sp/>first<sp/>failure<sp/>(trading<sp/>improved<sp/>latency<sp/>for<sp/>completeness).</highlight></codeline>
<codeline><highlight class="normal">If<sp/>`GTEST_FAIL_FAST`<sp/>environment<sp/>variable<sp/>or<sp/>`--gtest_fail_fast`<sp/>flag<sp/>is<sp/>set,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>runner<sp/>will<sp/>stop<sp/>execution<sp/>as<sp/>soon<sp/>as<sp/>the<sp/>first<sp/>test<sp/>failure<sp/>is<sp/>found.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Temporarily<sp/>Disabling<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>have<sp/>a<sp/>broken<sp/>test<sp/>that<sp/>you<sp/>cannot<sp/>fix<sp/>right<sp/>away,<sp/>you<sp/>can<sp/>add<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`DISABLED_`<sp/>prefix<sp/>to<sp/>its<sp/>name.<sp/>This<sp/>will<sp/>exclude<sp/>it<sp/>from<sp/>execution.<sp/>This<sp/>is</highlight></codeline>
<codeline><highlight class="normal">better<sp/>than<sp/>commenting<sp/>out<sp/>the<sp/>code<sp/>or<sp/>using<sp/>`#if<sp/>0`,<sp/>as<sp/>disabled<sp/>tests<sp/>are</highlight></codeline>
<codeline><highlight class="normal">still<sp/>compiled<sp/>(and<sp/>thus<sp/>won&apos;t<sp/>rot).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>need<sp/>to<sp/>disable<sp/>all<sp/>tests<sp/>in<sp/>a<sp/>test<sp/>suite,<sp/>you<sp/>can<sp/>either<sp/>add<sp/>`DISABLED_`</highlight></codeline>
<codeline><highlight class="normal">to<sp/>the<sp/>front<sp/>of<sp/>the<sp/>name<sp/>of<sp/>each<sp/>test,<sp/>or<sp/>alternatively<sp/>add<sp/>it<sp/>to<sp/>the<sp/>front<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>suite<sp/>name.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>following<sp/>tests<sp/>won&apos;t<sp/>be<sp/>run<sp/>by<sp/>GoogleTest,<sp/>even<sp/>though<sp/>they</highlight></codeline>
<codeline><highlight class="normal">will<sp/>still<sp/>be<sp/>compiled:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>that<sp/>Foo<sp/>does<sp/>Abc.</highlight></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>DISABLED_DoesAbc)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>DISABLED_BarTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>that<sp/>Bar<sp/>does<sp/>Xyz.</highlight></codeline>
<codeline><highlight class="normal">TEST_F(DISABLED_BarTest,<sp/>DoesXyz)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.note}</highlight></codeline>
<codeline><highlight class="normal">NOTE:<sp/>This<sp/>feature<sp/>should<sp/>only<sp/>be<sp/>used<sp/>for<sp/>temporary<sp/>pain-relief.<sp/>You<sp/>still<sp/>have</highlight></codeline>
<codeline><highlight class="normal">to<sp/>fix<sp/>the<sp/>disabled<sp/>tests<sp/>at<sp/>a<sp/>later<sp/>date.<sp/>As<sp/>a<sp/>reminder,<sp/>GoogleTest<sp/>will<sp/>print</highlight></codeline>
<codeline><highlight class="normal">a<sp/>banner<sp/>warning<sp/>you<sp/>if<sp/>a<sp/>test<sp/>program<sp/>contains<sp/>any<sp/>disabled<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.tip}</highlight></codeline>
<codeline><highlight class="normal">TIP:<sp/>You<sp/>can<sp/>easily<sp/>count<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>you<sp/>have<sp/>using</highlight></codeline>
<codeline><highlight class="normal">`grep`.<sp/>This<sp/>number<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>metric<sp/>for</highlight></codeline>
<codeline><highlight class="normal">improving<sp/>your<sp/>test<sp/>quality.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Temporarily<sp/>Enabling<sp/>Disabled<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>include<sp/>disabled<sp/>tests<sp/>in<sp/>test<sp/>execution,<sp/>just<sp/>invoke<sp/>the<sp/>test<sp/>program<sp/>with</highlight></codeline>
<codeline><highlight class="normal">the<sp/>`--gtest_also_run_disabled_tests`<sp/>flag<sp/>or<sp/>set<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`GTEST_ALSO_RUN_DISABLED_TESTS`<sp/>environment<sp/>variable<sp/>to<sp/>a<sp/>value<sp/>other<sp/>than<sp/>`0`.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>combine<sp/>this<sp/>with<sp/>the<sp/>`--gtest_filter`<sp/>flag<sp/>to<sp/>further<sp/>select<sp/>which</highlight></codeline>
<codeline><highlight class="normal">disabled<sp/>tests<sp/>to<sp/>run.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Repeating<sp/>the<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>in<sp/>a<sp/>while<sp/>you&apos;ll<sp/>run<sp/>into<sp/>a<sp/>test<sp/>whose<sp/>result<sp/>is<sp/>hit-or-miss.<sp/>Perhaps<sp/>it</highlight></codeline>
<codeline><highlight class="normal">will<sp/>fail<sp/>only<sp/>1%<sp/>of<sp/>the<sp/>time,<sp/>making<sp/>it<sp/>rather<sp/>hard<sp/>to<sp/>reproduce<sp/>the<sp/>bug<sp/>under</highlight></codeline>
<codeline><highlight class="normal">a<sp/>debugger.<sp/>This<sp/>can<sp/>be<sp/>a<sp/>major<sp/>source<sp/>of<sp/>frustration.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`--gtest_repeat`<sp/>flag<sp/>allows<sp/>you<sp/>to<sp/>repeat<sp/>all<sp/>(or<sp/>selected)<sp/>test<sp/>methods<sp/>in</highlight></codeline>
<codeline><highlight class="normal">a<sp/>program<sp/>many<sp/>times.<sp/>Hopefully,<sp/>a<sp/>flaky<sp/>test<sp/>will<sp/>eventually<sp/>fail<sp/>and<sp/>give<sp/>you</highlight></codeline>
<codeline><highlight class="normal">a<sp/>chance<sp/>to<sp/>debug.<sp/>Here&apos;s<sp/>how<sp/>to<sp/>use<sp/>it:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```none</highlight></codeline>
<codeline><highlight class="normal">$<sp/>foo_test<sp/>--gtest_repeat=1000</highlight></codeline>
<codeline><highlight class="normal">Repeat<sp/>foo_test<sp/>1000<sp/>times<sp/>and<sp/>don&apos;t<sp/>stop<sp/>at<sp/>failures.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>foo_test<sp/>--gtest_repeat=-1</highlight></codeline>
<codeline><highlight class="normal">A<sp/>negative<sp/>count<sp/>means<sp/>repeating<sp/>forever.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>foo_test<sp/>--gtest_repeat=1000<sp/>--gtest_break_on_failure</highlight></codeline>
<codeline><highlight class="normal">Repeat<sp/>foo_test<sp/>1000<sp/>times,<sp/>stopping<sp/>at<sp/>the<sp/>first<sp/>failure.<sp/><sp/>This</highlight></codeline>
<codeline><highlight class="normal">is<sp/>especially<sp/>useful<sp/>when<sp/>running<sp/>under<sp/>a<sp/>debugger:<sp/>when<sp/>the<sp/>test</highlight></codeline>
<codeline><highlight class="normal">fails,<sp/>it<sp/>will<sp/>drop<sp/>into<sp/>the<sp/>debugger<sp/>and<sp/>you<sp/>can<sp/>then<sp/>inspect</highlight></codeline>
<codeline><highlight class="normal">variables<sp/>and<sp/>stacks.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>foo_test<sp/>--gtest_repeat=1000<sp/>--gtest_filter=FooBar.*</highlight></codeline>
<codeline><highlight class="normal">Repeat<sp/>the<sp/>tests<sp/>whose<sp/>name<sp/>matches<sp/>the<sp/>filter<sp/>1000<sp/>times.</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>your<sp/>test<sp/>program<sp/>contains</highlight></codeline>
<codeline><highlight class="normal">[global<sp/>set-up/tear-down](#global-set-up-and-tear-down)<sp/>code,<sp/>it<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">repeated<sp/>in<sp/>each<sp/>iteration<sp/>as<sp/>well,<sp/>as<sp/>the<sp/>flakiness<sp/>may<sp/>be<sp/>in<sp/>it.<sp/>To<sp/>avoid</highlight></codeline>
<codeline><highlight class="normal">repeating<sp/>global<sp/>set-up/tear-down,<sp/>specify</highlight></codeline>
<codeline><highlight class="normal">`--gtest_recreate_environments_when_repeating=false`{.nowrap}.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>also<sp/>specify<sp/>the<sp/>repeat<sp/>count<sp/>by<sp/>setting<sp/>the<sp/>`GTEST_REPEAT`<sp/>environment</highlight></codeline>
<codeline><highlight class="normal">variable.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Shuffling<sp/>the<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>specify<sp/>the<sp/>`--gtest_shuffle`<sp/>flag<sp/>(or<sp/>set<sp/>the<sp/>`GTEST_SHUFFLE`</highlight></codeline>
<codeline><highlight class="normal">environment<sp/>variable<sp/>to<sp/>`1`)<sp/>to<sp/>run<sp/>the<sp/>tests<sp/>in<sp/>a<sp/>program<sp/>in<sp/>a<sp/>random<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>helps<sp/>to<sp/>reveal<sp/>bad<sp/>dependencies<sp/>between<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>GoogleTest<sp/>uses<sp/>a<sp/>random<sp/>seed<sp/>calculated<sp/>from<sp/>the<sp/>current<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">Therefore<sp/>you&apos;ll<sp/>get<sp/>a<sp/>different<sp/>order<sp/>every<sp/>time.<sp/>The<sp/>console<sp/>output<sp/>includes</highlight></codeline>
<codeline><highlight class="normal">the<sp/>random<sp/>seed<sp/>value,<sp/>such<sp/>that<sp/>you<sp/>can<sp/>reproduce<sp/>an<sp/>order-related<sp/>test<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">later.<sp/>To<sp/>specify<sp/>the<sp/>random<sp/>seed<sp/>explicitly,<sp/>use<sp/>the<sp/>`--gtest_random_seed=SEED`</highlight></codeline>
<codeline><highlight class="normal">flag<sp/>(or<sp/>set<sp/>the<sp/>`GTEST_RANDOM_SEED`<sp/>environment<sp/>variable),<sp/>where<sp/>`SEED`<sp/>is<sp/>an</highlight></codeline>
<codeline><highlight class="normal">integer<sp/>in<sp/>the<sp/>range<sp/>[0,<sp/>99999].<sp/>The<sp/>seed<sp/>value<sp/>0<sp/>is<sp/>special:<sp/>it<sp/>tells</highlight></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>to<sp/>do<sp/>the<sp/>default<sp/>behavior<sp/>of<sp/>calculating<sp/>the<sp/>seed<sp/>from<sp/>the<sp/>current</highlight></codeline>
<codeline><highlight class="normal">time.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>combine<sp/>this<sp/>with<sp/>`--gtest_repeat=N`,<sp/>GoogleTest<sp/>will<sp/>pick<sp/>a<sp/>different</highlight></codeline>
<codeline><highlight class="normal">random<sp/>seed<sp/>and<sp/>re-shuffle<sp/>the<sp/>tests<sp/>in<sp/>each<sp/>iteration.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Distributing<sp/>Test<sp/>Functions<sp/>to<sp/>Multiple<sp/>Machines</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>have<sp/>more<sp/>than<sp/>one<sp/>machine<sp/>you<sp/>can<sp/>use<sp/>to<sp/>run<sp/>a<sp/>test<sp/>program,<sp/>you<sp/>might</highlight></codeline>
<codeline><highlight class="normal">want<sp/>to<sp/>run<sp/>the<sp/>test<sp/>functions<sp/>in<sp/>parallel<sp/>and<sp/>get<sp/>the<sp/>result<sp/>faster.<sp/>We<sp/>call</highlight></codeline>
<codeline><highlight class="normal">this<sp/>technique<sp/>*sharding*,<sp/>where<sp/>each<sp/>machine<sp/>is<sp/>called<sp/>a<sp/>*shard*.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>is<sp/>compatible<sp/>with<sp/>test<sp/>sharding.<sp/>To<sp/>take<sp/>advantage<sp/>of<sp/>this<sp/>feature,</highlight></codeline>
<codeline><highlight class="normal">your<sp/>test<sp/>runner<sp/>(not<sp/>part<sp/>of<sp/>GoogleTest)<sp/>needs<sp/>to<sp/>do<sp/>the<sp/>following:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>Allocate<sp/>a<sp/>number<sp/>of<sp/>machines<sp/>(shards)<sp/>to<sp/>run<sp/>the<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>On<sp/>each<sp/>shard,<sp/>set<sp/>the<sp/>`GTEST_TOTAL_SHARDS`<sp/>environment<sp/>variable<sp/>to<sp/>the<sp/>total</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>number<sp/>of<sp/>shards.<sp/>It<sp/>must<sp/>be<sp/>the<sp/>same<sp/>for<sp/>all<sp/>shards.</highlight></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>On<sp/>each<sp/>shard,<sp/>set<sp/>the<sp/>`GTEST_SHARD_INDEX`<sp/>environment<sp/>variable<sp/>to<sp/>the<sp/>index</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>of<sp/>the<sp/>shard.<sp/>Different<sp/>shards<sp/>must<sp/>be<sp/>assigned<sp/>different<sp/>indices,<sp/>which</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>must<sp/>be<sp/>in<sp/>the<sp/>range<sp/>`[0,<sp/>GTEST_TOTAL_SHARDS<sp/>-<sp/>1]`.</highlight></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>Run<sp/>the<sp/>same<sp/>test<sp/>program<sp/>on<sp/>all<sp/>shards.<sp/>When<sp/>GoogleTest<sp/>sees<sp/>the<sp/>above<sp/>two</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>environment<sp/>variables,<sp/>it<sp/>will<sp/>select<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>test<sp/>functions<sp/>to<sp/>run.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Across<sp/>all<sp/>shards,<sp/>each<sp/>test<sp/>function<sp/>in<sp/>the<sp/>program<sp/>will<sp/>be<sp/>run<sp/>exactly</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>once.</highlight></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>Wait<sp/>for<sp/>all<sp/>shards<sp/>to<sp/>finish,<sp/>then<sp/>collect<sp/>and<sp/>report<sp/>the<sp/>results.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Your<sp/>project<sp/>may<sp/>have<sp/>tests<sp/>that<sp/>were<sp/>written<sp/>without<sp/>GoogleTest<sp/>and<sp/>thus<sp/>don&apos;t</highlight></codeline>
<codeline><highlight class="normal">understand<sp/>this<sp/>protocol.<sp/>In<sp/>order<sp/>for<sp/>your<sp/>test<sp/>runner<sp/>to<sp/>figure<sp/>out<sp/>which<sp/>test</highlight></codeline>
<codeline><highlight class="normal">supports<sp/>sharding,<sp/>it<sp/>can<sp/>set<sp/>the<sp/>environment<sp/>variable<sp/>`GTEST_SHARD_STATUS_FILE`</highlight></codeline>
<codeline><highlight class="normal">to<sp/>a<sp/>non-existent<sp/>file<sp/>path.<sp/>If<sp/>a<sp/>test<sp/>program<sp/>supports<sp/>sharding,<sp/>it<sp/>will<sp/>create</highlight></codeline>
<codeline><highlight class="normal">this<sp/>file<sp/>to<sp/>acknowledge<sp/>that<sp/>fact;<sp/>otherwise<sp/>it<sp/>will<sp/>not<sp/>create<sp/>it.<sp/>The<sp/>actual</highlight></codeline>
<codeline><highlight class="normal">contents<sp/>of<sp/>the<sp/>file<sp/>are<sp/>not<sp/>important<sp/>at<sp/>this<sp/>time,<sp/>although<sp/>we<sp/>may<sp/>put<sp/>some</highlight></codeline>
<codeline><highlight class="normal">useful<sp/>information<sp/>in<sp/>it<sp/>in<sp/>the<sp/>future.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here&apos;s<sp/>an<sp/>example<sp/>to<sp/>make<sp/>it<sp/>clear.<sp/>Suppose<sp/>you<sp/>have<sp/>a<sp/>test<sp/>program<sp/>`foo_test`</highlight></codeline>
<codeline><highlight class="normal">that<sp/>contains<sp/>the<sp/>following<sp/>5<sp/>test<sp/>functions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST(A,<sp/>V)</highlight></codeline>
<codeline><highlight class="normal">TEST(A,<sp/>W)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>X)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>Y)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>Z)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Suppose<sp/>you<sp/>have<sp/>3<sp/>machines<sp/>at<sp/>your<sp/>disposal.<sp/>To<sp/>run<sp/>the<sp/>test<sp/>functions<sp/>in</highlight></codeline>
<codeline><highlight class="normal">parallel,<sp/>you<sp/>would<sp/>set<sp/>`GTEST_TOTAL_SHARDS`<sp/>to<sp/>3<sp/>on<sp/>all<sp/>machines,<sp/>and<sp/>set</highlight></codeline>
<codeline><highlight class="normal">`GTEST_SHARD_INDEX`<sp/>to<sp/>0,<sp/>1,<sp/>and<sp/>2<sp/>on<sp/>the<sp/>machines<sp/>respectively.<sp/>Then<sp/>you<sp/>would</highlight></codeline>
<codeline><highlight class="normal">run<sp/>the<sp/>same<sp/>`foo_test`<sp/>on<sp/>each<sp/>machine.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>reserves<sp/>the<sp/>right<sp/>to<sp/>change<sp/>how<sp/>the<sp/>work<sp/>is<sp/>distributed<sp/>across<sp/>the</highlight></codeline>
<codeline><highlight class="normal">shards,<sp/>but<sp/>here&apos;s<sp/>one<sp/>possible<sp/>scenario:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>Machine<sp/>#0<sp/>runs<sp/>`A.V`<sp/>and<sp/>`B.X`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>Machine<sp/>#1<sp/>runs<sp/>`A.W`<sp/>and<sp/>`B.Y`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>Machine<sp/>#2<sp/>runs<sp/>`B.Z`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Controlling<sp/>Test<sp/>Output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Colored<sp/>Terminal<sp/>Output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>can<sp/>use<sp/>colors<sp/>in<sp/>its<sp/>terminal<sp/>output<sp/>to<sp/>make<sp/>it<sp/>easier<sp/>to<sp/>spot<sp/>the</highlight></codeline>
<codeline><highlight class="normal">important<sp/>information:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;pre&gt;...</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[----------]&lt;/font&gt;<sp/>1<sp/>test<sp/>from<sp/>FooTest</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[<sp/>RUN<sp/><sp/><sp/><sp/><sp/><sp/>]&lt;/font&gt;<sp/>FooTest.DoesAbc</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[<sp/><sp/><sp/><sp/><sp/><sp/><sp/>OK<sp/>]&lt;/font&gt;<sp/>FooTest.DoesAbc</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[----------]&lt;/font&gt;<sp/>2<sp/>tests<sp/>from<sp/>BarTest</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[<sp/>RUN<sp/><sp/><sp/><sp/><sp/><sp/>]&lt;/font&gt;<sp/>BarTest.HasXyzProperty</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[<sp/><sp/><sp/><sp/><sp/><sp/><sp/>OK<sp/>]&lt;/font&gt;<sp/>BarTest.HasXyzProperty</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[<sp/>RUN<sp/><sp/><sp/><sp/><sp/><sp/>]&lt;/font&gt;<sp/>BarTest.ReturnsTrueOnSuccess</highlight></codeline>
<codeline><highlight class="normal">...<sp/>some<sp/>error<sp/>messages<sp/>...</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;red&quot;&gt;[<sp/><sp/><sp/>FAILED<sp/>]&lt;/font&gt;<sp/>BarTest.ReturnsTrueOnSuccess</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[==========]&lt;/font&gt;<sp/>30<sp/>tests<sp/>from<sp/>14<sp/>test<sp/>suites<sp/>ran.</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;green&quot;&gt;[<sp/><sp/><sp/>PASSED<sp/>]&lt;/font&gt;<sp/>28<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;red&quot;&gt;[<sp/><sp/><sp/>FAILED<sp/>]&lt;/font&gt;<sp/>2<sp/>tests,<sp/>listed<sp/>below:</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;red&quot;&gt;[<sp/><sp/><sp/>FAILED<sp/>]&lt;/font&gt;<sp/>BarTest.ReturnsTrueOnSuccess</highlight></codeline>
<codeline><highlight class="normal">&lt;font<sp/>color=&quot;red&quot;&gt;[<sp/><sp/><sp/>FAILED<sp/>]&lt;/font&gt;<sp/>AnotherTest.DoesXyz</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>2<sp/>FAILED<sp/>TESTS</highlight></codeline>
<codeline><highlight class="normal">&lt;/pre&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>set<sp/>the<sp/>`GTEST_COLOR`<sp/>environment<sp/>variable<sp/>or<sp/>the<sp/>`--gtest_color`</highlight></codeline>
<codeline><highlight class="normal">command<sp/>line<sp/>flag<sp/>to<sp/>`yes`,<sp/>`no`,<sp/>or<sp/>`auto`<sp/>(the<sp/>default)<sp/>to<sp/>enable<sp/>colors,</highlight></codeline>
<codeline><highlight class="normal">disable<sp/>colors,<sp/>or<sp/>let<sp/>GoogleTest<sp/>decide.<sp/>When<sp/>the<sp/>value<sp/>is<sp/>`auto`,<sp/>GoogleTest</highlight></codeline>
<codeline><highlight class="normal">will<sp/>use<sp/>colors<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>output<sp/>goes<sp/>to<sp/>a<sp/>terminal<sp/>and<sp/>(on<sp/>non-Windows</highlight></codeline>
<codeline><highlight class="normal">platforms)<sp/>the<sp/>`TERM`<sp/>environment<sp/>variable<sp/>is<sp/>set<sp/>to<sp/>`xterm`<sp/>or<sp/>`xterm-color`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Suppressing<sp/>test<sp/>passes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>GoogleTest<sp/>prints<sp/>1<sp/>line<sp/>of<sp/>output<sp/>for<sp/>each<sp/>test,<sp/>indicating<sp/>if<sp/>it</highlight></codeline>
<codeline><highlight class="normal">passed<sp/>or<sp/>failed.<sp/>To<sp/>show<sp/>only<sp/>test<sp/>failures,<sp/>run<sp/>the<sp/>test<sp/>program<sp/>with</highlight></codeline>
<codeline><highlight class="normal">`--gtest_brief=1`,<sp/>or<sp/>set<sp/>the<sp/>GTEST_BRIEF<sp/>environment<sp/>variable<sp/>to<sp/>`1`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Suppressing<sp/>the<sp/>Elapsed<sp/>Time</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>GoogleTest<sp/>prints<sp/>the<sp/>time<sp/>it<sp/>takes<sp/>to<sp/>run<sp/>each<sp/>test.<sp/>To<sp/>disable</highlight></codeline>
<codeline><highlight class="normal">that,<sp/>run<sp/>the<sp/>test<sp/>program<sp/>with<sp/>the<sp/>`--gtest_print_time=0`<sp/>command<sp/>line<sp/>flag,<sp/>or</highlight></codeline>
<codeline><highlight class="normal">set<sp/>the<sp/>GTEST_PRINT_TIME<sp/>environment<sp/>variable<sp/>to<sp/>`0`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Suppressing<sp/>UTF-8<sp/>Text<sp/>Output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>case<sp/>of<sp/>assertion<sp/>failures,<sp/>GoogleTest<sp/>prints<sp/>expected<sp/>and<sp/>actual<sp/>values<sp/>of</highlight></codeline>
<codeline><highlight class="normal">type<sp/>`string`<sp/>both<sp/>as<sp/>hex-encoded<sp/>strings<sp/>as<sp/>well<sp/>as<sp/>in<sp/>readable<sp/>UTF-8<sp/>text<sp/>if</highlight></codeline>
<codeline><highlight class="normal">they<sp/>contain<sp/>valid<sp/>non-ASCII<sp/>UTF-8<sp/>characters.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>suppress<sp/>the<sp/>UTF-8</highlight></codeline>
<codeline><highlight class="normal">text<sp/>because,<sp/>for<sp/>example,<sp/>you<sp/>don&apos;t<sp/>have<sp/>an<sp/>UTF-8<sp/>compatible<sp/>output<sp/>medium,<sp/>run</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>program<sp/>with<sp/>`--gtest_print_utf8=0`<sp/>or<sp/>set<sp/>the<sp/>`GTEST_PRINT_UTF8`</highlight></codeline>
<codeline><highlight class="normal">environment<sp/>variable<sp/>to<sp/>`0`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Generating<sp/>an<sp/>XML<sp/>Report</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>can<sp/>emit<sp/>a<sp/>detailed<sp/>XML<sp/>report<sp/>to<sp/>a<sp/>file<sp/>in<sp/>addition<sp/>to<sp/>its<sp/>normal</highlight></codeline>
<codeline><highlight class="normal">textual<sp/>output.<sp/>The<sp/>report<sp/>contains<sp/>the<sp/>duration<sp/>of<sp/>each<sp/>test,<sp/>and<sp/>thus<sp/>can<sp/>help</highlight></codeline>
<codeline><highlight class="normal">you<sp/>identify<sp/>slow<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>generate<sp/>the<sp/>XML<sp/>report,<sp/>set<sp/>the<sp/>`GTEST_OUTPUT`<sp/>environment<sp/>variable<sp/>or<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`--gtest_output`<sp/>flag<sp/>to<sp/>the<sp/>string<sp/>`&quot;xml:path_to_output_file&quot;`,<sp/>which<sp/>will</highlight></codeline>
<codeline><highlight class="normal">create<sp/>the<sp/>file<sp/>at<sp/>the<sp/>given<sp/>location.<sp/>You<sp/>can<sp/>also<sp/>just<sp/>use<sp/>the<sp/>string<sp/>`&quot;xml&quot;`,</highlight></codeline>
<codeline><highlight class="normal">in<sp/>which<sp/>case<sp/>the<sp/>output<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>`test_detail.xml`<sp/>file<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">current<sp/>directory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>specify<sp/>a<sp/>directory<sp/>(for<sp/>example,<sp/>`&quot;xml:output/directory/&quot;`<sp/>on<sp/>Linux<sp/>or</highlight></codeline>
<codeline><highlight class="normal">`&quot;xml:output\directory\&quot;`<sp/>on<sp/>Windows),<sp/>GoogleTest<sp/>will<sp/>create<sp/>the<sp/>XML<sp/>file<sp/>in</highlight></codeline>
<codeline><highlight class="normal">that<sp/>directory,<sp/>named<sp/>after<sp/>the<sp/>test<sp/>executable<sp/>(e.g.<sp/>`foo_test.xml`<sp/>for<sp/>test</highlight></codeline>
<codeline><highlight class="normal">program<sp/>`foo_test`<sp/>or<sp/>`foo_test.exe`).<sp/>If<sp/>the<sp/>file<sp/>already<sp/>exists<sp/>(perhaps<sp/>left</highlight></codeline>
<codeline><highlight class="normal">over<sp/>from<sp/>a<sp/>previous<sp/>run),<sp/>GoogleTest<sp/>will<sp/>pick<sp/>a<sp/>different<sp/>name<sp/>(e.g.</highlight></codeline>
<codeline><highlight class="normal">`foo_test_1.xml`)<sp/>to<sp/>avoid<sp/>overwriting<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>report<sp/>is<sp/>based<sp/>on<sp/>the<sp/>`junitreport`<sp/>Ant<sp/>task.<sp/>Since<sp/>that<sp/>format<sp/>was</highlight></codeline>
<codeline><highlight class="normal">originally<sp/>intended<sp/>for<sp/>Java,<sp/>a<sp/>little<sp/>interpretation<sp/>is<sp/>required<sp/>to<sp/>make<sp/>it</highlight></codeline>
<codeline><highlight class="normal">apply<sp/>to<sp/>GoogleTest<sp/>tests,<sp/>as<sp/>shown<sp/>here:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```xml</highlight></codeline>
<codeline><highlight class="normal">&lt;testsuites<sp/>name=&quot;AllTests&quot;<sp/>...&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;testsuite<sp/>name=&quot;test_case_name&quot;<sp/>...&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/><sp/><sp/><sp/>name=&quot;test_name&quot;<sp/>...&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/testsuite&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/testsuites&gt;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>The<sp/>root<sp/>`&lt;testsuites&gt;`<sp/>element<sp/>corresponds<sp/>to<sp/>the<sp/>entire<sp/>test<sp/>program.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`&lt;testsuite&gt;`<sp/>elements<sp/>correspond<sp/>to<sp/>GoogleTest<sp/>test<sp/>suites.</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>`&lt;testcase&gt;`<sp/>elements<sp/>correspond<sp/>to<sp/>GoogleTest<sp/>test<sp/>functions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>instance,<sp/>the<sp/>following<sp/>program</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TEST(MathTest,<sp/>Addition)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">TEST(MathTest,<sp/>Subtraction)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">TEST(LogicTest,<sp/>NonContradiction)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">could<sp/>generate<sp/>this<sp/>report:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```xml</highlight></codeline>
<codeline><highlight class="normal">&lt;?xml<sp/>version=&quot;1.0&quot;<sp/>encoding=&quot;UTF-8&quot;?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;testsuites<sp/>tests=&quot;3&quot;<sp/>failures=&quot;1&quot;<sp/>errors=&quot;0&quot;<sp/>time=&quot;0.035&quot;<sp/>timestamp=&quot;2011-10-31T18:52:42&quot;<sp/>name=&quot;AllTests&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;testsuite<sp/>name=&quot;MathTest&quot;<sp/>tests=&quot;2&quot;<sp/>failures=&quot;1&quot;<sp/>errors=&quot;0&quot;<sp/>time=&quot;0.015&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;Addition&quot;<sp/>file=&quot;test.cpp&quot;<sp/>line=&quot;1&quot;<sp/>status=&quot;run&quot;<sp/>time=&quot;0.007&quot;<sp/>classname=&quot;&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;Value<sp/>of:<sp/>add(1,<sp/>1)&amp;#x0A;<sp/><sp/>Actual:<sp/>3&amp;#x0A;Expected:<sp/>2&quot;<sp/>type=&quot;&quot;&gt;...&lt;/failure&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;Value<sp/>of:<sp/>add(1,<sp/>-1)&amp;#x0A;<sp/><sp/>Actual:<sp/>1&amp;#x0A;Expected:<sp/>0&quot;<sp/>type=&quot;&quot;&gt;...&lt;/failure&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;Subtraction&quot;<sp/>file=&quot;test.cpp&quot;<sp/>line=&quot;2&quot;<sp/>status=&quot;run&quot;<sp/>time=&quot;0.005&quot;<sp/>classname=&quot;&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/testsuite&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;testsuite<sp/>name=&quot;LogicTest&quot;<sp/>tests=&quot;1&quot;<sp/>failures=&quot;0&quot;<sp/>errors=&quot;0&quot;<sp/>time=&quot;0.005&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;NonContradiction&quot;<sp/>file=&quot;test.cpp&quot;<sp/>line=&quot;3&quot;<sp/>status=&quot;run&quot;<sp/>time=&quot;0.005&quot;<sp/>classname=&quot;&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/testsuite&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/testsuites&gt;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Things<sp/>to<sp/>note:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>The<sp/>`tests`<sp/>attribute<sp/>of<sp/>a<sp/>`&lt;testsuites&gt;`<sp/>or<sp/>`&lt;testsuite&gt;`<sp/>element<sp/>tells<sp/>how</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>many<sp/>test<sp/>functions<sp/>the<sp/>GoogleTest<sp/>program<sp/>or<sp/>test<sp/>suite<sp/>contains,<sp/>while<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`failures`<sp/>attribute<sp/>tells<sp/>how<sp/>many<sp/>of<sp/>them<sp/>failed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>The<sp/>`time`<sp/>attribute<sp/>expresses<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>test,<sp/>test<sp/>suite,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>entire<sp/>test<sp/>program<sp/>in<sp/>seconds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>The<sp/>`timestamp`<sp/>attribute<sp/>records<sp/>the<sp/>local<sp/>date<sp/>and<sp/>time<sp/>of<sp/>the<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>execution.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>The<sp/>`file`<sp/>and<sp/>`line`<sp/>attributes<sp/>record<sp/>the<sp/>source<sp/>file<sp/>location,<sp/>where<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>was<sp/>defined.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/>Each<sp/>`&lt;failure&gt;`<sp/>element<sp/>corresponds<sp/>to<sp/>a<sp/>single<sp/>failed<sp/>GoogleTest</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assertion.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Generating<sp/>a<sp/>JSON<sp/>Report</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>can<sp/>also<sp/>emit<sp/>a<sp/>JSON<sp/>report<sp/>as<sp/>an<sp/>alternative<sp/>format<sp/>to<sp/>XML.<sp/>To</highlight></codeline>
<codeline><highlight class="normal">generate<sp/>the<sp/>JSON<sp/>report,<sp/>set<sp/>the<sp/>`GTEST_OUTPUT`<sp/>environment<sp/>variable<sp/>or<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`--gtest_output`<sp/>flag<sp/>to<sp/>the<sp/>string<sp/>`&quot;json:path_to_output_file&quot;`,<sp/>which<sp/>will</highlight></codeline>
<codeline><highlight class="normal">create<sp/>the<sp/>file<sp/>at<sp/>the<sp/>given<sp/>location.<sp/>You<sp/>can<sp/>also<sp/>just<sp/>use<sp/>the<sp/>string</highlight></codeline>
<codeline><highlight class="normal">`&quot;json&quot;`,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>output<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>`test_detail.json`<sp/>file</highlight></codeline>
<codeline><highlight class="normal">in<sp/>the<sp/>current<sp/>directory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>report<sp/>format<sp/>conforms<sp/>to<sp/>the<sp/>following<sp/>JSON<sp/>Schema:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```json</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;$schema&quot;:<sp/>&quot;http://json-schema.org/schema#&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;type&quot;:<sp/>&quot;object&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;definitions&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;TestCase&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;object&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;properties&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;tests&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;integer&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failures&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;integer&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;disabled&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;integer&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;testsuite&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;$ref&quot;:<sp/>&quot;#/definitions/TestInfo&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;TestInfo&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;object&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;properties&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;file&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;line&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;integer&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;status&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;string&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;enum&quot;:<sp/>[&quot;RUN&quot;,<sp/>&quot;NOTRUN&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;classname&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failures&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;$ref&quot;:<sp/>&quot;#/definitions/Failure&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;Failure&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;object&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;properties&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failures&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;properties&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;tests&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;integer&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;failures&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;integer&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;disabled&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;integer&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;errors&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;integer&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;timestamp&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;string&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;format&quot;:<sp/>&quot;date-time&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>{<sp/>&quot;type&quot;:<sp/>&quot;string&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;testsuites&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;$ref&quot;:<sp/>&quot;#/definitions/TestCase&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>report<sp/>uses<sp/>the<sp/>format<sp/>that<sp/>conforms<sp/>to<sp/>the<sp/>following<sp/>Proto3<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[JSON<sp/>encoding](https://developers.google.com/protocol-buffers/docs/proto3#json):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```proto</highlight></codeline>
<codeline><highlight class="normal">syntax<sp/>=<sp/>&quot;proto3&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>googletest;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">import<sp/>&quot;google/protobuf/timestamp.proto&quot;;</highlight></codeline>
<codeline><highlight class="normal">import<sp/>&quot;google/protobuf/duration.proto&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">message<sp/>UnitTest<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>tests<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>failures<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>disabled<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>errors<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>google.protobuf.Timestamp<sp/>timestamp<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>google.protobuf.Duration<sp/>time<sp/>=<sp/>6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>name<sp/>=<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>repeated<sp/>TestCase<sp/>testsuites<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">message<sp/>TestCase<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>name<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>tests<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>failures<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>disabled<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>errors<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>google.protobuf.Duration<sp/>time<sp/>=<sp/>6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>repeated<sp/>TestInfo<sp/>testsuite<sp/>=<sp/>7;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">message<sp/>TestInfo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>name<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>file<sp/>=<sp/>6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int32<sp/>line<sp/>=<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>enum<sp/>Status<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RUN<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>NOTRUN<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Status<sp/>status<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>google.protobuf.Duration<sp/>time<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>classname<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>message<sp/>Failure<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>failures<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>type<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>repeated<sp/>Failure<sp/>failures<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>instance,<sp/>the<sp/>following<sp/>program</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">TEST(MathTest,<sp/>Addition)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">TEST(MathTest,<sp/>Subtraction)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">TEST(LogicTest,<sp/>NonContradiction)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">could<sp/>generate<sp/>this<sp/>report:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```json</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;tests&quot;:<sp/>3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;failures&quot;:<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;errors&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;time&quot;:<sp/>&quot;0.035s&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;timestamp&quot;:<sp/>&quot;2011-10-31T18:52:42Z&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;name&quot;:<sp/>&quot;AllTests&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;testsuites&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;MathTest&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;tests&quot;:<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failures&quot;:<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;errors&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>&quot;0.015s&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;testsuite&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;Addition&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;file&quot;:<sp/>&quot;test.cpp&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;line&quot;:<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;status&quot;:<sp/>&quot;RUN&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>&quot;0.007s&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;classname&quot;:<sp/>&quot;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failures&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;message&quot;:<sp/>&quot;Value<sp/>of:<sp/>add(1,<sp/>1)\n<sp/><sp/>Actual:<sp/>3\nExpected:<sp/>2&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;message&quot;:<sp/>&quot;Value<sp/>of:<sp/>add(1,<sp/>-1)\n<sp/><sp/>Actual:<sp/>1\nExpected:<sp/>0&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;Subtraction&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;file&quot;:<sp/>&quot;test.cpp&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;line&quot;:<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;status&quot;:<sp/>&quot;RUN&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>&quot;0.005s&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;classname&quot;:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;LogicTest&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;tests&quot;:<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failures&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;errors&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>&quot;0.005s&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;testsuite&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;NonContradiction&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;file&quot;:<sp/>&quot;test.cpp&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;line&quot;:<sp/>3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;status&quot;:<sp/>&quot;RUN&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>&quot;0.005s&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;classname&quot;:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{:<sp/>.callout<sp/>.important}</highlight></codeline>
<codeline><highlight class="normal">IMPORTANT:<sp/>The<sp/>exact<sp/>format<sp/>of<sp/>the<sp/>JSON<sp/>document<sp/>is<sp/>subject<sp/>to<sp/>change.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Controlling<sp/>How<sp/>Failures<sp/>Are<sp/>Reported</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Detecting<sp/>Test<sp/>Premature<sp/>Exit</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>implements<sp/>the<sp/>_premature-exit-file_<sp/>protocol<sp/>for<sp/>test<sp/>runners<sp/>to</highlight></codeline>
<codeline><highlight class="normal">catch<sp/>any<sp/>kind<sp/>of<sp/>unexpected<sp/>exits<sp/>of<sp/>test<sp/>programs.<sp/>Upon<sp/>start,<sp/>Google<sp/>Test</highlight></codeline>
<codeline><highlight class="normal">creates<sp/>the<sp/>file<sp/>which<sp/>will<sp/>be<sp/>automatically<sp/>deleted<sp/>after<sp/>all<sp/>work<sp/>has<sp/>been</highlight></codeline>
<codeline><highlight class="normal">finished.<sp/>Then,<sp/>the<sp/>test<sp/>runner<sp/>can<sp/>check<sp/>if<sp/>this<sp/>file<sp/>exists.<sp/>In<sp/>case<sp/>the<sp/>file</highlight></codeline>
<codeline><highlight class="normal">remains<sp/>undeleted,<sp/>the<sp/>inspected<sp/>test<sp/>has<sp/>exited<sp/>prematurely.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>feature<sp/>is<sp/>enabled<sp/>only<sp/>if<sp/>the<sp/>`TEST_PREMATURE_EXIT_FILE`<sp/>environment</highlight></codeline>
<codeline><highlight class="normal">variable<sp/>has<sp/>been<sp/>set.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Turning<sp/>Assertion<sp/>Failures<sp/>into<sp/>Break-Points</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>running<sp/>test<sp/>programs<sp/>under<sp/>a<sp/>debugger,<sp/>it&apos;s<sp/>very<sp/>convenient<sp/>if<sp/>the</highlight></codeline>
<codeline><highlight class="normal">debugger<sp/>can<sp/>catch<sp/>an<sp/>assertion<sp/>failure<sp/>and<sp/>automatically<sp/>drop<sp/>into<sp/>interactive</highlight></codeline>
<codeline><highlight class="normal">mode.<sp/>GoogleTest&apos;s<sp/>*break-on-failure*<sp/>mode<sp/>supports<sp/>this<sp/>behavior.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>enable<sp/>it,<sp/>set<sp/>the<sp/>`GTEST_BREAK_ON_FAILURE`<sp/>environment<sp/>variable<sp/>to<sp/>a<sp/>value</highlight></codeline>
<codeline><highlight class="normal">other<sp/>than<sp/>`0`.<sp/>Alternatively,<sp/>you<sp/>can<sp/>use<sp/>the<sp/>`--gtest_break_on_failure`</highlight></codeline>
<codeline><highlight class="normal">command<sp/>line<sp/>flag.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Disabling<sp/>Catching<sp/>Test-Thrown<sp/>Exceptions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>can<sp/>be<sp/>used<sp/>either<sp/>with<sp/>or<sp/>without<sp/>exceptions<sp/>enabled.<sp/>If<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">throws<sp/>a<sp/>C++<sp/>exception<sp/>or<sp/>(on<sp/>Windows)<sp/>a<sp/>structured<sp/>exception<sp/>(SEH),<sp/>by<sp/>default</highlight></codeline>
<codeline><highlight class="normal">GoogleTest<sp/>catches<sp/>it,<sp/>reports<sp/>it<sp/>as<sp/>a<sp/>test<sp/>failure,<sp/>and<sp/>continues<sp/>with<sp/>the<sp/>next</highlight></codeline>
<codeline><highlight class="normal">test<sp/>method.<sp/>This<sp/>maximizes<sp/>the<sp/>coverage<sp/>of<sp/>a<sp/>test<sp/>run.<sp/>Also,<sp/>on<sp/>Windows<sp/>an</highlight></codeline>
<codeline><highlight class="normal">uncaught<sp/>exception<sp/>will<sp/>cause<sp/>a<sp/>pop-up<sp/>window,<sp/>so<sp/>catching<sp/>the<sp/>exceptions<sp/>allows</highlight></codeline>
<codeline><highlight class="normal">you<sp/>to<sp/>run<sp/>the<sp/>tests<sp/>automatically.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>debugging<sp/>the<sp/>test<sp/>failures,<sp/>however,<sp/>you<sp/>may<sp/>instead<sp/>want<sp/>the<sp/>exceptions</highlight></codeline>
<codeline><highlight class="normal">to<sp/>be<sp/>handled<sp/>by<sp/>the<sp/>debugger,<sp/>such<sp/>that<sp/>you<sp/>can<sp/>examine<sp/>the<sp/>call<sp/>stack<sp/>when<sp/>an</highlight></codeline>
<codeline><highlight class="normal">exception<sp/>is<sp/>thrown.<sp/>To<sp/>achieve<sp/>that,<sp/>set<sp/>the<sp/>`GTEST_CATCH_EXCEPTIONS`</highlight></codeline>
<codeline><highlight class="normal">environment<sp/>variable<sp/>to<sp/>`0`,<sp/>or<sp/>use<sp/>the<sp/>`--gtest_catch_exceptions=0`<sp/>flag<sp/>when</highlight></codeline>
<codeline><highlight class="normal">running<sp/>the<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Sanitizer<sp/>Integration</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The</highlight></codeline>
<codeline><highlight class="normal">[Undefined<sp/>Behavior<sp/>Sanitizer](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html),</highlight></codeline>
<codeline><highlight class="normal">[Address<sp/>Sanitizer](https://github.com/google/sanitizers/wiki/AddressSanitizer),</highlight></codeline>
<codeline><highlight class="normal">and</highlight></codeline>
<codeline><highlight class="normal">[Thread<sp/>Sanitizer](https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual)</highlight></codeline>
<codeline><highlight class="normal">all<sp/>provide<sp/>weak<sp/>functions<sp/>that<sp/>you<sp/>can<sp/>override<sp/>to<sp/>trigger<sp/>explicit<sp/>failures</highlight></codeline>
<codeline><highlight class="normal">when<sp/>they<sp/>detect<sp/>sanitizer<sp/>errors,<sp/>such<sp/>as<sp/>creating<sp/>a<sp/>reference<sp/>from<sp/>`nullptr`.</highlight></codeline>
<codeline><highlight class="normal">To<sp/>override<sp/>these<sp/>functions,<sp/>place<sp/>definitions<sp/>for<sp/>them<sp/>in<sp/>a<sp/>source<sp/>file<sp/>that</highlight></codeline>
<codeline><highlight class="normal">you<sp/>compile<sp/>as<sp/>part<sp/>of<sp/>your<sp/>main<sp/>binary:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>&quot;C&quot;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">void<sp/>__ubsan_on_report()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/>&quot;Encountered<sp/>an<sp/>undefined<sp/>behavior<sp/>sanitizer<sp/>error&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>__asan_on_error()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/>&quot;Encountered<sp/>an<sp/>address<sp/>sanitizer<sp/>error&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>__tsan_on_report()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/>&quot;Encountered<sp/>a<sp/>thread<sp/>sanitizer<sp/>error&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>extern<sp/>&quot;C&quot;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">After<sp/>compiling<sp/>your<sp/>project<sp/>with<sp/>one<sp/>of<sp/>the<sp/>sanitizers<sp/>enabled,<sp/>if<sp/>a<sp/>particular</highlight></codeline>
<codeline><highlight class="normal">test<sp/>triggers<sp/>a<sp/>sanitizer<sp/>error,<sp/>GoogleTest<sp/>will<sp/>report<sp/>that<sp/>it<sp/>failed.</highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/docs/advanced.md"/>
  </compounddef>
</doxygen>
