<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="googletest-printers-test_8cc" kind="file" language="C++">
    <compoundname>googletest-printers-test.cc</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cctype</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">cstring</includes>
    <includes local="no">deque</includes>
    <includes local="no">forward_list</includes>
    <includes local="no">functional</includes>
    <includes local="no">limits</includes>
    <includes local="no">list</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includes local="no">set</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest-printers_8h" local="yes">gtest/gtest-printers.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="51">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="37">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="48">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="53">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="26">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/googletest-printers-test.cc</label>
        <link refid="googletest-printers-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="55">
        <label>atomic</label>
      </node>
      <node id="59">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>cctype</label>
      </node>
      <node id="32">
        <label>cerrno</label>
      </node>
      <node id="50">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>cstring</label>
      </node>
      <node id="27">
        <label>ctype.h</label>
      </node>
      <node id="6">
        <label>deque</label>
      </node>
      <node id="42">
        <label>float.h</label>
      </node>
      <node id="7">
        <label>forward_list</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="43">
        <label>iomanip</label>
      </node>
      <node id="61">
        <label>iosfwd</label>
      </node>
      <node id="33">
        <label>iostream</label>
      </node>
      <node id="57">
        <label>iterator</label>
      </node>
      <node id="9">
        <label>limits</label>
      </node>
      <node id="10">
        <label>list</label>
      </node>
      <node id="34">
        <label>locale</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="13">
        <label>ostream</label>
      </node>
      <node id="41">
        <label>regex.h</label>
      </node>
      <node id="14">
        <label>set</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="28">
        <label>stddef.h</label>
      </node>
      <node id="29">
        <label>stdio.h</label>
      </node>
      <node id="30">
        <label>stdlib.h</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="31">
        <label>string.h</label>
      </node>
      <node id="39">
        <label>strings.h</label>
      </node>
      <node id="35">
        <label>sys/stat.h</label>
      </node>
      <node id="36">
        <label>sys/types.h</label>
      </node>
      <node id="17">
        <label>tuple</label>
      </node>
      <node id="23">
        <label>type_traits</label>
      </node>
      <node id="24">
        <label>typeinfo</label>
      </node>
      <node id="40">
        <label>unistd.h</label>
      </node>
      <node id="18">
        <label>unordered_map</label>
      </node>
      <node id="19">
        <label>unordered_set</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classBiggestIntConvertible" prot="public">BiggestIntConvertible</innerclass>
    <innerclass refid="classParentClass" prot="public">ParentClass</innerclass>
    <innerclass refid="classChildClassWithStreamOperator" prot="public">ChildClassWithStreamOperator</innerclass>
    <innerclass refid="classChildClassWithoutStreamOperator" prot="public">ChildClassWithoutStreamOperator</innerclass>
    <innerclass refid="classUnprintableTemplateInGlobal" prot="public">UnprintableTemplateInGlobal</innerclass>
    <innerclass refid="classStreamableInGlobal" prot="public">StreamableInGlobal</innerclass>
    <innerclass refid="classfoo_1_1UnprintableInFoo" prot="public">foo::UnprintableInFoo</innerclass>
    <innerclass refid="structfoo_1_1PrintableViaPrintTo" prot="public">foo::PrintableViaPrintTo</innerclass>
    <innerclass refid="structfoo_1_1PointerPrintable" prot="public">foo::PointerPrintable</innerclass>
    <innerclass refid="classfoo_1_1PrintableViaPrintToTemplate" prot="public">foo::PrintableViaPrintToTemplate</innerclass>
    <innerclass refid="classfoo_1_1StreamableTemplateInFoo" prot="public">foo::StreamableTemplateInFoo</innerclass>
    <innerclass refid="structfoo_1_1TemplatedStreamableInFoo" prot="public">foo::TemplatedStreamableInFoo</innerclass>
    <innerclass refid="structfoo_1_1StreamableInLocal" prot="public">foo::StreamableInLocal</innerclass>
    <innerclass refid="classfoo_1_1PathLike" prot="public">foo::PathLike</innerclass>
    <innerclass refid="structfoo_1_1PathLike_1_1iterator" prot="public">foo::PathLike::iterator</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalPrinter_3_01Wrapper_3_01T_01_4_01_4" prot="public">testing::internal::UniversalPrinter&lt; Wrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1gtest__printers__test_1_1Foo" prot="public">testing::gtest_printers_test::Foo</innerclass>
    <innerclass refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreaming" prot="public">testing::gtest_printers_test::AllowsGenericStreaming</innerclass>
    <innerclass refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreamingTemplate" prot="public">testing::gtest_printers_test::AllowsGenericStreamingTemplate</innerclass>
    <innerclass refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreamingAndImplicitConversionTemplate" prot="public">testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate</innerclass>
    <innerclass refid="structtesting_1_1gtest__printers__test_1_1iterator" prot="public">testing::gtest_printers_test::iterator</innerclass>
    <innerclass refid="structtesting_1_1gtest__printers__test_1_1const__iterator" prot="public">testing::gtest_printers_test::const_iterator</innerclass>
    <innerclass refid="structtesting_1_1gtest__printers__test_1_1Big" prot="public">testing::gtest_printers_test::Big</innerclass>
    <innernamespace refid="namespacefoo">foo</innernamespace>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="namespacetesting_1_1gtest__printers__test">testing::gtest_printers_test</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="googletest-printers-test_8cc_1aa0ed482a6777cce04eecd24c530c78ec" prot="public" static="no">
        <name>EXPECT_PRINT_TO_STRING_</name>
        <param><defname>value</defname></param>
        <param><defname>expected_string</defname></param>
        <initializer>  EXPECT_TRUE(PrintToString(value) == (expected_string)) \
      &lt;&lt; &quot; where &quot; #value &quot; prints as &quot; &lt;&lt; (PrintToString(value))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="1586" column="9" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="1586" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="googletest-printers-test_8cc_1a7a5ee9fe858568a85d80af1312aefb8b" prot="public" static="no" strong="no">
        <type></type>
        <name>AnonymousEnum</name>
        <enumvalue id="googletest-printers-test_8cc_1a7a5ee9fe858568a85d80af1312aefb8ba1a36d0a263e18ed9a4e3562b4cd6e8e6" prot="public">
          <name>kAE1</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="googletest-printers-test_8cc_1a7a5ee9fe858568a85d80af1312aefb8ba67ee14379c1b9fd5ae5616a1b3f0d5d5" prot="public">
          <name>kAE2</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="65" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="googletest-printers-test_8cc_1a404f735da62338180a19ae16f80e09c8" prot="public" static="no" strong="no">
        <type></type>
        <name>EnumWithoutPrinter</name>
        <enumvalue id="googletest-printers-test_8cc_1a404f735da62338180a19ae16f80e09c8ad65f74b95d76a8a471a823fa69139393" prot="public">
          <name>kEWP1</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="googletest-printers-test_8cc_1a404f735da62338180a19ae16f80e09c8ae3b0361263e2ff24730ff9f2e2177a11" prot="public">
          <name>kEWP2</name>
          <initializer>= 42</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="68" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="enum" id="googletest-printers-test_8cc_1a52d9f846ca7a081ba3acf88dd6cd46dc" prot="public" static="no" strong="no">
        <type></type>
        <name>EnumWithStreaming</name>
        <enumvalue id="googletest-printers-test_8cc_1a52d9f846ca7a081ba3acf88dd6cd46dca8d4bcf477f5a23ce8569a2a404327839" prot="public">
          <name>kEWS1</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="71" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="enum" id="googletest-printers-test_8cc_1a904d619d593201ed509be794aed041ec" prot="public" static="no" strong="no">
        <type></type>
        <name>EnumWithPrintTo</name>
        <enumvalue id="googletest-printers-test_8cc_1a904d619d593201ed509be794aed041eca72ccaf1f38be3cad8d1d6b0811467125" prot="public">
          <name>kEWPT1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="78" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="78" bodyend="78"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="googletest-printers-test_8cc_1ae496c0f6edafccdab7ef2e2b9d0c7e03" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="258" column="5" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googletest-printers-test_8cc_1a87cb119678e603084928af555fe13e36" prot="private" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="1975" column="14" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="1975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googletest-printers-test_8cc_1a5f31775800bbb46b35b5791def1f3acc" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="1976" column="10" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="1976" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="googletest-printers-test_8cc_1a73b9778fdddae7a6a312022b9f393419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, EnumWithStreaming e)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>EnumWithStreaming</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="73" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="googletest-printers-test_8cc_1aad8245a4b48cd65607b86153d0f9dbe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintTo</definition>
        <argsstring>(EnumWithPrintTo e, std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>EnumWithPrintTo</type>
          <declname>e</declname>
        </param>
        <param>
          <type>std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="80" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="googletest-printers-test_8cc_1ac5c21eb5eebef474fdbb4e272b51ec6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ParentClass &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classParentClass" kindref="compound">ParentClass</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="95" column="8" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="googletest-printers-test_8cc_1a84811d6a04e80e8a624a5911ff4090b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ChildClassWithStreamOperator &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classChildClassWithStreamOperator" kindref="compound">ChildClassWithStreamOperator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="98" column="8" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="googletest-printers-test_8cc_1a7b9d893679e433b9a70f15a9c9d6446c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator&lt;&lt;</definition>
        <argsstring>(::std::ostream &amp;os, const StreamableInGlobal &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>::std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classStreamableInGlobal" kindref="compound">StreamableInGlobal</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="118" column="8" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="googletest-printers-test_8cc_1a0794c66a458fe922bfb717080d047311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operator&lt;&lt;</definition>
        <argsstring>(::std::ostream &amp;os, const StreamableInGlobal *)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>::std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classStreamableInGlobal" kindref="compound">StreamableInGlobal</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" line="122" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc" bodystart="122" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>-<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>and<sp/>Mocking<sp/>Framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>universal<sp/>value<sp/>printer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;forward_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-printers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;absl/strings/str_format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>user-defined<sp/>types<sp/>for<sp/>testing<sp/>the<sp/>universal<sp/>value<sp/>printer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>anonymous<sp/>enum<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>AnonymousEnum<sp/>{<sp/>kAE1<sp/>=<sp/>-1,<sp/>kAE2<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>enum<sp/>without<sp/>a<sp/>user-defined<sp/>printer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>EnumWithoutPrinter<sp/>{<sp/>kEWP1<sp/>=<sp/>-2,<sp/>kEWP2<sp/>=<sp/>42<sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>enum<sp/>with<sp/>a<sp/>&lt;&lt;<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>EnumWithStreaming<sp/>{<sp/>kEWS1<sp/>=<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/>EnumWithStreaming<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>(e<sp/>==<sp/>kEWS1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;kEWS1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>enum<sp/>with<sp/>a<sp/>PrintTo()<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>EnumWithPrintTo<sp/>{<sp/>kEWPT1<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(EnumWithPrintTo<sp/>e,<sp/>std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>(e<sp/>==<sp/>kEWPT1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;kEWPT1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>implicitly<sp/>convertible<sp/>to<sp/>BiggestInt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classBiggestIntConvertible" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBiggestIntConvertible" kindref="compound">BiggestIntConvertible</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>operator<sp/>::testing::internal::BiggestInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>42;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>parent<sp/>class<sp/>with<sp/>two<sp/>child<sp/>classes.<sp/>The<sp/>parent<sp/>and<sp/>one<sp/>of<sp/>the<sp/>kids<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stream<sp/>operators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classParentClass" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classParentClass" kindref="compound">ParentClass</ref><sp/>{};</highlight></codeline>
<codeline lineno="93" refid="classChildClassWithStreamOperator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classChildClassWithStreamOperator" kindref="compound">ChildClassWithStreamOperator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classParentClass" kindref="compound">ParentClass</ref><sp/>{};</highlight></codeline>
<codeline lineno="94" refid="classChildClassWithoutStreamOperator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classChildClassWithoutStreamOperator" kindref="compound">ChildClassWithoutStreamOperator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classParentClass" kindref="compound">ParentClass</ref><sp/>{};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classParentClass" kindref="compound">ParentClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ParentClass&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classChildClassWithStreamOperator" kindref="compound">ChildClassWithStreamOperator</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ChildClassWithStreamOperator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>unprintable<sp/>class<sp/>template<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="104" refid="classUnprintableTemplateInGlobal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classUnprintableTemplateInGlobal" kindref="compound">UnprintableTemplateInGlobal</ref><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="classUnprintableTemplateInGlobal" kindref="compound">UnprintableTemplateInGlobal</ref>()<sp/>:<sp/>value_()<sp/>{}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>streamable<sp/>type<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classStreamableInGlobal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classStreamableInGlobal" kindref="compound">StreamableInGlobal</ref><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classStreamableInGlobal" kindref="compound">~StreamableInGlobal</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classStreamableInGlobal" kindref="compound">StreamableInGlobal</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>x<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StreamableInGlobal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classStreamableInGlobal" kindref="compound">StreamableInGlobal</ref>*<sp/></highlight><highlight class="comment">/*<sp/>x<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StreamableInGlobal*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>type<sp/>with<sp/>AbslStringify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Point<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sink&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AbslStringify(Sink&amp;<sp/>sink,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>absl::Format(&amp;sink,<sp/></highlight><highlight class="stringliteral">&quot;(%d,<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>p.x,<sp/>p.y);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">foo<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>unprintable<sp/>type<sp/>in<sp/>a<sp/>user<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classfoo_1_1UnprintableInFoo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfoo_1_1UnprintableInFoo" kindref="compound">UnprintableInFoo</ref><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="classfoo_1_1UnprintableInFoo" kindref="compound">UnprintableInFoo</ref>()<sp/>:<sp/>z_(0)<sp/>{<sp/>memcpy(xy_,<sp/></highlight><highlight class="stringliteral">&quot;\xEF\x12\x0\x0\x34\xAB\x0\x0&quot;</highlight><highlight class="normal">,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_;<sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>xy_[8];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z_;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>printable<sp/>type<sp/>in<sp/>a<sp/>user-chosen<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structfoo_1_1PrintableViaPrintTo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo_1_1PrintableViaPrintTo" kindref="compound">PrintableViaPrintTo</ref><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="structfoo_1_1PrintableViaPrintTo" kindref="compound">PrintableViaPrintTo</ref>()<sp/>:<sp/>value()<sp/>{}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfoo_1_1PrintableViaPrintTo" kindref="compound">PrintableViaPrintTo</ref>&amp;<sp/>x,<sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PrintableViaPrintTo:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.value;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type<sp/>with<sp/>a<sp/>user-defined<sp/>&lt;&lt;<sp/>for<sp/>printing<sp/>its<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structfoo_1_1PointerPrintable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo_1_1PointerPrintable" kindref="compound">PointerPrintable</ref><sp/>{};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">::std::ostream&amp;<sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfoo_1_1PointerPrintable" kindref="compound">PointerPrintable</ref>*<sp/></highlight><highlight class="comment">/*<sp/>x<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PointerPrintable*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>printable<sp/>class<sp/>template<sp/>in<sp/>a<sp/>user-chosen<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="172" refid="classfoo_1_1PrintableViaPrintToTemplate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfoo_1_1PrintableViaPrintToTemplate" kindref="compound">PrintableViaPrintToTemplate</ref><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfoo_1_1PrintableViaPrintToTemplate" kindref="compound">PrintableViaPrintToTemplate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfoo_1_1PrintableViaPrintToTemplate" kindref="compound">PrintableViaPrintToTemplate&lt;T&gt;</ref>&amp;<sp/>x,<sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PrintableViaPrintToTemplate:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.value();</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>streamable<sp/>class<sp/>template<sp/>in<sp/>a<sp/>user<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="189" refid="classfoo_1_1StreamableTemplateInFoo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfoo_1_1StreamableTemplateInFoo" kindref="compound">StreamableTemplateInFoo</ref><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="classfoo_1_1StreamableTemplateInFoo" kindref="compound">StreamableTemplateInFoo</ref>()<sp/>:<sp/>value_()<sp/>{}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">inline<sp/>::std::ostream&amp;<sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfoo_1_1StreamableTemplateInFoo" kindref="compound">StreamableTemplateInFoo&lt;T&gt;</ref>&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StreamableTemplateInFoo:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.value();</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>streamable<sp/>type<sp/>in<sp/>a<sp/>user<sp/>namespace<sp/>whose<sp/>operator&lt;&lt;<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>templated<sp/>on<sp/>the<sp/>type<sp/>of<sp/>the<sp/>output<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="structfoo_1_1TemplatedStreamableInFoo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo_1_1TemplatedStreamableInFoo" kindref="compound">TemplatedStreamableInFoo</ref><sp/>{};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputStream&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">OutputStream&amp;<sp/>operator&lt;&lt;(OutputStream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfoo_1_1TemplatedStreamableInFoo" kindref="compound">TemplatedStreamableInFoo</ref>&amp;<sp/></highlight><highlight class="comment">/*ts*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TemplatedStreamableInFoo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="structfoo_1_1StreamableInLocal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo_1_1StreamableInLocal" kindref="compound">StreamableInLocal</ref><sp/>{};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfoo_1_1StreamableInLocal" kindref="compound">StreamableInLocal</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>x<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StreamableInLocal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>streamable<sp/>but<sp/>recursively-defined<sp/>container<sp/>type<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>user<sp/>namespace,<sp/>it<sp/>mimics<sp/>therefore<sp/>std::filesystem::path<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>boost::filesystem::path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="classfoo_1_1PathLike" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfoo_1_1PathLike" kindref="compound">PathLike</ref><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="226" refid="structfoo_1_1PathLike_1_1iterator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo_1_1PathLike_1_1iterator" kindref="compound">iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfoo_1_1PathLike" kindref="compound">PathLike</ref><sp/><ref refid="classfoo_1_1PathLike" kindref="compound">value_type</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfoo_1_1PathLike_1_1iterator" kindref="compound">iterator</ref>&amp;<sp/>operator++();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfoo_1_1PathLike" kindref="compound">PathLike</ref>&amp;<sp/>operator*();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>char;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structfoo_1_1PathLike_1_1iterator" kindref="compound">const_iterator</ref><sp/>=<sp/><ref refid="structfoo_1_1PathLike_1_1iterator" kindref="compound">iterator</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="classfoo_1_1PathLike" kindref="compound">PathLike</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="structfoo_1_1PathLike_1_1iterator" kindref="compound">iterator</ref><sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfoo_1_1PathLike_1_1iterator" kindref="compound">iterator</ref>();<sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator();<sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>friend<sp/>::std::ostream&amp;<sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathLike&amp;)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Streamable-PathLike&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal">};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>foo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Wrapper<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Wrapper(T&amp;&amp;<sp/>value)<sp/>:<sp/>value_(std::forward&lt;T&gt;(value))<sp/>{}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="265" refid="classtesting_1_1internal_1_1UniversalPrinter_3_01Wrapper_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalPrinter" kindref="compound">UniversalPrinter</ref>&lt;Wrapper&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrapper&lt;T&gt;&amp;<sp/>w,<sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Wrapper(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(w.value(),<sp/>os);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal">};</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gtest_printers_test<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">using<sp/>::std::deque;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">using<sp/>::std::list;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">using<sp/>::std::make_pair;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">using<sp/>::std::map;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">using<sp/>::std::multimap;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">using<sp/>::std::multiset;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">using<sp/>::std::pair;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">using<sp/>::std::set;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">using<sp/>::std::vector;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">using<sp/>::testing::PrintToString;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">using<sp/>::testing::internal::FormatForComparisonFailureMessage;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">using<sp/>::testing::internal::NativeArray;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">using<sp/>::testing::internal::RelationToSourceReference;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">using<sp/>::testing::internal::Strings;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">using<sp/>::testing::internal::UniversalPrint;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">using<sp/>::testing::internal::UniversalPrinter;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">using<sp/>::testing::internal::UniversalTersePrint;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">using<sp/>::testing::internal::UniversalTersePrintTupleFieldsToStrings;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>value<sp/>to<sp/>a<sp/>string<sp/>using<sp/>the<sp/>universal<sp/>value<sp/>printer.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>helper<sp/>for<sp/>testing<sp/>UniversalPrinter&lt;T&gt;::Print()<sp/>for<sp/>various<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">std::string<sp/>Print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>UniversalPrinter&lt;T&gt;::Print(value,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>value<sp/>passed<sp/>by<sp/>reference<sp/>to<sp/>a<sp/>string,<sp/>using<sp/>the<sp/>universal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>printer.<sp/><sp/>This<sp/>is<sp/>a<sp/>helper<sp/>for<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UniversalPrinter&lt;T&amp;&gt;::Print()<sp/>for<sp/>various<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">std::string<sp/>PrintByRef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>UniversalPrinter&lt;T&amp;&gt;::Print(value,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>various<sp/>enum<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">TEST(PrintEnumTest,<sp/>AnonymousEnum)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">,<sp/>Print(kAE1));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>Print(kAE2));</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">TEST(PrintEnumTest,<sp/>EnumWithoutPrinter)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-2&quot;</highlight><highlight class="normal">,<sp/>Print(kEWP1));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">,<sp/>Print(kEWP2));</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">TEST(PrintEnumTest,<sp/>EnumWithStreaming)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;kEWS1&quot;</highlight><highlight class="normal">,<sp/>Print(kEWS1));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">EnumWithStreaming</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0)));</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">TEST(PrintEnumTest,<sp/>EnumWithPrintTo)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;kEWPT1&quot;</highlight><highlight class="normal">,<sp/>Print(kEWPT1));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">EnumWithPrintTo</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0)));</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>a<sp/>class<sp/>that<sp/>defines<sp/>AbslStringify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">TEST(PrintClassTest,<sp/>AbslStringify)<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(10,<sp/>20)&quot;</highlight><highlight class="normal">,<sp/>Print(Point()));<sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>a<sp/>class<sp/>implicitly<sp/>convertible<sp/>to<sp/>BiggestInt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">TEST(PrintClassTest,<sp/><ref refid="classBiggestIntConvertible" kindref="compound">BiggestIntConvertible</ref>)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">,<sp/>Print(<ref refid="classBiggestIntConvertible" kindref="compound">BiggestIntConvertible</ref>()));</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>various<sp/>char<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">TEST(PrintCharTest,<sp/>PlainChar)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\0&apos;&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\&apos;&apos;<sp/>(39,<sp/>0x27)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\&quot;&apos;<sp/>(34,<sp/>0x22)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;?&apos;<sp/>(63,<sp/>0x3F)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\\\&apos;<sp/>(92,<sp/>0x5C)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\a&apos;<sp/>(7)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\b&apos;<sp/>(8)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\f&apos;<sp/>(12,<sp/>0xC)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\n&apos;<sp/>(10,<sp/>0xA)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\r&apos;<sp/>(13,<sp/>0xD)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\t&apos;<sp/>(9)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\v&apos;<sp/>(11,<sp/>0xB)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\x7F&apos;<sp/>(127)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="stringliteral">&apos;\x7F&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\xFF&apos;<sp/>(255)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="stringliteral">&apos;\xFF&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;<sp/>&apos;<sp/>(32,<sp/>0x20)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;a&apos;<sp/>(97,<sp/>0x61)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signed<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">TEST(PrintCharTest,<sp/>SignedChar)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\0&apos;&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\xCE&apos;<sp/>(-50)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-50)));</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unsigned<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">TEST(PrintCharTest,<sp/>UnsignedChar)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\0&apos;&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;b&apos;<sp/>(98,<sp/>0x62)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">TEST(PrintCharTest,<sp/>Char16)<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+0041&quot;</highlight><highlight class="normal">,<sp/>Print(u</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">TEST(PrintCharTest,<sp/>Char32)<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+0041&quot;</highlight><highlight class="normal">,<sp/>Print(U</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_lib_char8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">TEST(PrintCharTest,<sp/>Char8)<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+0041&quot;</highlight><highlight class="normal">,<sp/>Print(u8</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>other<sp/>simple,<sp/>built-in<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">TEST(PrintBuiltInTypeTest,<sp/><ref refid="structBool" kindref="compound">Bool</ref>)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">TEST(PrintBuiltInTypeTest,<sp/>Wchar_t)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\0&apos;&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\&apos;&apos;<sp/>(39,<sp/>0x27)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\&quot;&apos;<sp/>(34,<sp/>0x22)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;?&apos;<sp/>(63,<sp/>0x3F)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\\\&apos;<sp/>(92,<sp/>0x5C)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\a&apos;<sp/>(7)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\b&apos;<sp/>(8)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\f&apos;<sp/>(12,<sp/>0xC)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\n&apos;<sp/>(10,<sp/>0xA)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\r&apos;<sp/>(13,<sp/>0xD)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\t&apos;<sp/>(9)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\v&apos;<sp/>(11,<sp/>0xB)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\x7F&apos;<sp/>(127)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="stringliteral">&apos;\x7F&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\xFF&apos;<sp/>(255)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="stringliteral">&apos;\xFF&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;<sp/>&apos;<sp/>(32,<sp/>0x20)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;a&apos;<sp/>(97,<sp/>0x61)&quot;</highlight><highlight class="normal">,<sp/>Print(L</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\x576&apos;<sp/>(1398)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x576)));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L&apos;\\xC74D&apos;<sp/>(51021)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xC74D)));</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>int64_t<sp/>provides<sp/>more<sp/>storage<sp/>than<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">TEST(PrintTypeSizeTest,<sp/>Wchar_t)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>EXPECT_LT(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t));</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Various<sp/>integer<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">TEST(PrintBuiltInTypeTest,<sp/>Integer)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\xFF&apos;<sp/>(255)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(255)));<sp/><sp/></highlight><highlight class="comment">//<sp/>uint8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;\\x80&apos;<sp/>(-128)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-128)));<sp/><sp/></highlight><highlight class="comment">//<sp/>int8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;65535&quot;</highlight><highlight class="normal">,<sp/>Print(std::numeric_limits&lt;uint16_t&gt;::max()));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uint16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-32768&quot;</highlight><highlight class="normal">,<sp/>Print(std::numeric_limits&lt;int16_t&gt;::min()));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;4294967295&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;uint32_t&gt;::max()));<sp/><sp/></highlight><highlight class="comment">//<sp/>uint32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-2147483648&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;int32_t&gt;::min()));<sp/><sp/></highlight><highlight class="comment">//<sp/>int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;18446744073709551615&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;uint64_t&gt;::max()));<sp/><sp/></highlight><highlight class="comment">//<sp/>uint64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-9223372036854775808&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;int64_t&gt;::min()));<sp/><sp/></highlight><highlight class="comment">//<sp/>int64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_lib_char8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+0000&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;char8_t&gt;::min()));<sp/><sp/></highlight><highlight class="comment">//<sp/>char8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+00FF&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;char8_t&gt;::max()));<sp/><sp/></highlight><highlight class="comment">//<sp/>char8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+0000&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;char16_t&gt;::min()));<sp/><sp/></highlight><highlight class="comment">//<sp/>char16_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+FFFF&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;char16_t&gt;::max()));<sp/><sp/></highlight><highlight class="comment">//<sp/>char16_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+0000&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;char32_t&gt;::min()));<sp/><sp/></highlight><highlight class="comment">//<sp/>char32_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U+FFFFFFFF&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::numeric_limits&lt;char32_t&gt;::max()));<sp/><sp/></highlight><highlight class="comment">//<sp/>char32_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Size<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">TEST(PrintBuiltInTypeTest,<sp/>Size_t)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)));<sp/><sp/></highlight><highlight class="comment">//<sp/>size_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>has<sp/>no<sp/>ssize_t<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-2&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ssize_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-2)));<sp/><sp/></highlight><highlight class="comment">//<sp/>ssize_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gcc/clang<sp/>__{u,}int128_t<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__SIZEOF_INT128__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">TEST(PrintBuiltInTypeTest,<sp/>Int128)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>Print(__int128_t{0}));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>Print(__uint128_t{0}));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;12345&quot;</highlight><highlight class="normal">,<sp/>Print(__int128_t{12345}));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;12345&quot;</highlight><highlight class="normal">,<sp/>Print(__uint128_t{12345}));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-12345&quot;</highlight><highlight class="normal">,<sp/>Print(__int128_t{-12345}));</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Large<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;340282366920938463463374607431768211455&quot;</highlight><highlight class="normal">,<sp/>Print(~__uint128_t{}));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>__int128_t<sp/>max_128<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">__int128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~__uint128_t{}<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-170141183460469231731687303715884105728&quot;</highlight><highlight class="normal">,<sp/>Print(~max_128));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;170141183460469231731687303715884105727&quot;</highlight><highlight class="normal">,<sp/>Print(max_128));</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__SIZEOF_INT128__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Floating-points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">TEST(PrintBuiltInTypeTest,<sp/>FloatingPoints)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>(32-bit<sp/>precision)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1.5&quot;</highlight><highlight class="normal">,<sp/>Print(1.5f));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1.0999999&quot;</highlight><highlight class="normal">,<sp/>Print(1.09999990f));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1.1&quot;</highlight><highlight class="normal">,<sp/>Print(1.10000002f));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1.10000014&quot;</highlight><highlight class="normal">,<sp/>Print(1.10000014f));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;9e+09&quot;</highlight><highlight class="normal">,<sp/>Print(9e9f));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;-2.5&quot;</highlight><highlight class="normal">,<sp/>Print(-2.5));<sp/><sp/></highlight><highlight class="comment">//<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">TEST(PrintBuiltInTypeTest,<sp/>TypeInfo)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyStruct<sp/>{};</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>Print(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(MyStruct{}));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>guarantee<sp/>that<sp/>we<sp/>can<sp/>demangle<sp/>the<sp/>name,<sp/>but<sp/>either<sp/>name<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contain<sp/>the<sp/>substring<sp/>&quot;MyStruct&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>EXPECT_NE(res.find(</highlight><highlight class="stringliteral">&quot;MyStruct&quot;</highlight><highlight class="normal">),<sp/>res.npos)<sp/>&lt;&lt;<sp/>res;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>::std::stringstream::operator&lt;&lt;(const<sp/>void<sp/>*)<sp/>formats<sp/>the<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>differently<sp/>with<sp/>different<sp/>compilers,<sp/>we<sp/>have<sp/>to<sp/>create<sp/>the<sp/>expected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>first<sp/>and<sp/>use<sp/>it<sp/>as<sp/>our<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>PrintPointer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>expected_result_stream;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>expected_result_stream<sp/>&lt;&lt;<sp/>p;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expected_result_stream.str();</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>C<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">TEST(PrintCStringTest,<sp/>Const)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>\&quot;World\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">TEST(PrintCStringTest,<sp/>NonConst)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p)));</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>C<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">TEST(PrintCStringTest,<sp/>Null)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>C<sp/>strings<sp/>are<sp/>escaped<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">TEST(PrintCStringTest,<sp/>EscapesProperly)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&apos;\&quot;?\\\a\b\f\n\r\t\v\x7F\xFF<sp/>a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>\&quot;&apos;\\\&quot;?\\\\\\a\\b\\f&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\\n\\r\\t\\v\\x7F\\xFF<sp/>a\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(p));</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_lib_char8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>char8_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">TEST(PrintU8StringTest,<sp/>Const)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char8_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>u8</highlight><highlight class="stringliteral">&quot;界&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>u8\&quot;\\xE7\\x95\\x8C\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char8_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">TEST(PrintU8StringTest,<sp/>NonConst)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char8_t</highlight><highlight class="normal"><sp/>p[]<sp/>=<sp/>u8</highlight><highlight class="stringliteral">&quot;世&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>u8\&quot;\\xE4\\xB8\\x96\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char8_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p)));</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>u8<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">TEST(PrintU8StringTest,<sp/>Null)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char8_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>u8<sp/>strings<sp/>are<sp/>escaped<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">TEST(PrintU8StringTest,<sp/>EscapesProperly)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char8_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>u8</highlight><highlight class="stringliteral">&quot;&apos;\&quot;?\\\a\b\f\n\r\t\v\x7F\xFF<sp/>hello<sp/>世界&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>u8\&quot;&apos;\\\&quot;?\\\\\\a\\b\\f\\n\\r\\t\\v\\x7F\\xFF<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>\\xE4\\xB8\\x96\\xE7\\x95\\x8C\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(p));</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>char16_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">TEST(PrintU16StringTest,<sp/>Const)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;界&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>u\&quot;\\x754C\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char16_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">TEST(PrintU16StringTest,<sp/>NonConst)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal"><sp/>p[]<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;世&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>u\&quot;\\x4E16\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p)));</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>u16<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">TEST(PrintU16StringTest,<sp/>Null)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>u16<sp/>strings<sp/>are<sp/>escaped<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">TEST(PrintU16StringTest,<sp/>EscapesProperly)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;&apos;\&quot;?\\\a\b\f\n\r\t\v\x7F\xFF<sp/>hello<sp/>世界&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>u\&quot;&apos;\\\&quot;?\\\\\\a\\b\\f\\n\\r\\t\\v\\x7F\\xFF<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>\\x4E16\\x754C\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(p));</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>char32_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">TEST(PrintU32StringTest,<sp/>Const)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>U</highlight><highlight class="stringliteral">&quot;🗺️&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>U\&quot;\\x1F5FA\\xFE0F\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char32_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">TEST(PrintU32StringTest,<sp/>NonConst)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal"><sp/>p[]<sp/>=<sp/>U</highlight><highlight class="stringliteral">&quot;🌌&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>U\&quot;\\x1F30C\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p)));</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>u32<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">TEST(PrintU32StringTest,<sp/>Null)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>u32<sp/>strings<sp/>are<sp/>escaped<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">TEST(PrintU32StringTest,<sp/>EscapesProperly)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>U</highlight><highlight class="stringliteral">&quot;&apos;\&quot;?\\\a\b\f\n\r\t\v\x7F\xFF<sp/>hello<sp/>🗺️&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>U\&quot;&apos;\\\&quot;?\\\\\\a\\b\\f\\n\\r\\t\\v\\x7F\\xFF<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>\\x1F5FA\\xFE0F\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(p));</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>compiler<sp/>can<sp/>be<sp/>configured<sp/>to<sp/>define<sp/>whar_t<sp/>as<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>unsigned<sp/>short.<sp/>Defining<sp/>an<sp/>overload<sp/>for<sp/>const<sp/>wchar_t*<sp/>in<sp/>that<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>cause<sp/>pointers<sp/>to<sp/>unsigned<sp/>shorts<sp/>be<sp/>printed<sp/>as<sp/>wide<sp/>strings,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possibly<sp/>accessing<sp/>more<sp/>memory<sp/>than<sp/>intended<sp/>and<sp/>causing<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>accesses.<sp/>MSVC<sp/>defines<sp/>_NATIVE_WCHAR_T_DEFINED<sp/>symbol<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>native<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_MSC_VER)<sp/>||<sp/>defined(_NATIVE_WCHAR_T_DEFINED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal">TEST(PrintWideCStringTest,<sp/>Const)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>L\&quot;World\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal">TEST(PrintWideCStringTest,<sp/>NonConst)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>p[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p)));</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>wide<sp/>C<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">TEST(PrintWideCStringTest,<sp/>Null)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>wide<sp/>C<sp/>strings<sp/>are<sp/>escaped<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal">TEST(PrintWideCStringTest,<sp/>EscapesProperly)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">,<sp/>0xD3,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x576,<sp/>0x8D3,<sp/>0xC74D,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(s)<sp/>+</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>L\&quot;&apos;\\\&quot;?\\\\\\a\\b\\f&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\\n\\r\\t\\v\\xD3\\x576\\x8D3\\xC74D<sp/>a\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s)));</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>native<sp/>wchar_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>pointers<sp/>to<sp/>other<sp/>char<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signed<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">TEST(PrintCharPointerTest,<sp/>SignedChar)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x1234);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p),<sp/>Print(p));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>signed<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">TEST(PrintCharPointerTest,<sp/>ConstSignedChar)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x1234);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p),<sp/>Print(p));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unsigned<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">TEST(PrintCharPointerTest,<sp/>UnsignedChar)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x1234);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p),<sp/>Print(p));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>unsigned<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal">TEST(PrintCharPointerTest,<sp/>ConstUnsignedChar)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x1234);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p),<sp/>Print(p));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>pointers<sp/>to<sp/>simple,<sp/>built-in<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">TEST(PrintPointerToBuiltInTypeTest,<sp/><ref refid="structBool" kindref="compound">Bool</ref>)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xABCD);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p),<sp/>Print(p));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal">TEST(PrintPointerToBuiltInTypeTest,<sp/>Void)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xABCD);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p),<sp/>Print(p));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>void*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal">TEST(PrintPointerToBuiltInTypeTest,<sp/>ConstVoid)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xABCD);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p),<sp/>Print(p));</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>pointers<sp/>to<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal">TEST(PrintPointerToPointerTest,<sp/>IntPointerPointer)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xABCD);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(p),<sp/>Print(p));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>(non-member)<sp/>function<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>n<sp/>*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal">TEST(PrintPointerTest,<sp/>NonMemberFunctionPointer)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>directly<sp/>cast<sp/>&amp;MyFunction<sp/>to<sp/>const<sp/>void*<sp/>because<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>standard<sp/>disallows<sp/>casting<sp/>between<sp/>pointers<sp/>to<sp/>functions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointers<sp/>to<sp/>objects,<sp/>and<sp/>some<sp/>compilers<sp/>(e.g.<sp/>GCC<sp/>3.4)<sp/>enforce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>limitation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">internal::BiggestInt</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;MyFunction))),</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(&amp;MyFunction));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>int<sp/>(*p)(bool)<sp/>=<sp/>NULL;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>assertion<sp/>predicate<sp/>determining<sp/>whether<sp/>a<sp/>one<sp/>string<sp/>is<sp/>a<sp/>prefix<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>another.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">AssertionResult<sp/>HasPrefix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>prefix)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.find(prefix,<sp/>0)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_wide_string<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(prefix[0])<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>begin_string_quote<sp/>=<sp/>is_wide_string<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionFailure()</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>begin_string_quote<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>is<sp/>not<sp/>a<sp/>prefix<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>begin_string_quote<sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>member<sp/>variable<sp/>pointers.<sp/><sp/>Although<sp/>they<sp/>are<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointers,<sp/>they<sp/>don&apos;t<sp/>point<sp/>to<sp/>a<sp/>location<sp/>in<sp/>the<sp/>address<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Their<sp/>representation<sp/>is<sp/>implementation-defined.<sp/><sp/>Thus<sp/>they<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>printed<sp/>as<sp/>raw<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="structtesting_1_1gtest__printers__test_1_1Foo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gtest__printers__test_1_1Foo" kindref="compound">Foo</ref><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gtest__printers__test_1_1Foo" kindref="compound">~Foo</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MyMethod(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>MyVirtualMethod(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>n<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="779"><highlight class="normal">};</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal">TEST(PrintPointerTest,<sp/>MemberVariablePointer)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(HasPrefix(Print(&amp;Foo::value),</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(&amp;Foo::value))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gtest__printers__test_1_1Foo" kindref="compound">Foo</ref>::*p<sp/>=<sp/>NULL;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(HasPrefix(Print(p),<sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>member<sp/>function<sp/>pointers.<sp/><sp/>Although<sp/>they<sp/>are<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointers,<sp/>they<sp/>don&apos;t<sp/>point<sp/>to<sp/>a<sp/>location<sp/>in<sp/>the<sp/>address<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Their<sp/>representation<sp/>is<sp/>implementation-defined.<sp/><sp/>Thus<sp/>they<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>printed<sp/>as<sp/>raw<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">TEST(PrintPointerTest,<sp/>MemberFunctionPointer)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(HasPrefix(Print(&amp;Foo::MyMethod),</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(&amp;Foo::MyMethod))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HasPrefix(Print(&amp;Foo::MyVirtualMethod),</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">((&amp;Foo::MyVirtualMethod)))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>int<sp/>(Foo::*p)(char)<sp/>=<sp/>NULL;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(HasPrefix(Print(p),<sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>C<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>difference<sp/>between<sp/>this<sp/>and<sp/>Print()<sp/>is<sp/>that<sp/>it<sp/>ensures<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>is<sp/>a<sp/>reference<sp/>to<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="807"><highlight class="normal">std::string<sp/>PrintArrayHelper(T<sp/>(&amp;a)[N])<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Print(a);</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>One-dimensional<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">TEST(PrintArrayTest,<sp/>OneDimensionalArray)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>}&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Two-dimensional<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal">TEST(PrintArrayTest,<sp/>TwoDimensionalArray)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[2][5]<sp/>=<sp/>{{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5},<sp/>{6,<sp/>7,<sp/>8,<sp/>9,<sp/>0}};</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>},<sp/>{<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>0<sp/>}<sp/>}&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>const<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal">TEST(PrintArrayTest,<sp/>ConstArray)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a[1]<sp/>=<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>false<sp/>}&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>array<sp/>without<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal">TEST(PrintArrayTest,<sp/>CharArrayWithNoTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>a<sp/>contains<sp/>&apos;\0&apos;<sp/>in<sp/>the<sp/>middle<sp/>and<sp/>doesn&apos;t<sp/>end<sp/>with<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;H\\0i\&quot;<sp/>(no<sp/>terminating<sp/>NUL)&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>array<sp/>with<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">TEST(PrintArrayTest,<sp/>CharArrayWithTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\0Hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;\\0Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_lib_char8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char_t<sp/>array<sp/>without<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal">TEST(PrintArrayTest,<sp/>Char8ArrayWithNoTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>a<sp/>contains<sp/>&apos;\0&apos;<sp/>in<sp/>the<sp/>middle<sp/>and<sp/>doesn&apos;t<sp/>end<sp/>with<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char8_t</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{u8</highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">,<sp/>u8</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>u8</highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;u8\&quot;H\\0i\&quot;<sp/>(no<sp/>terminating<sp/>NUL)&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char8_t<sp/>array<sp/>with<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">TEST(PrintArrayTest,<sp/>Char8ArrayWithTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char8_t</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>u8</highlight><highlight class="stringliteral">&quot;\0世界&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;u8\&quot;\\0\\xE4\\xB8\\x96\\xE7\\x95\\x8C\&quot;&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>char16_t<sp/>array<sp/>without<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">TEST(PrintArrayTest,<sp/>Char16ArrayWithNoTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>a<sp/>contains<sp/>&apos;\0&apos;<sp/>in<sp/>the<sp/>middle<sp/>and<sp/>doesn&apos;t<sp/>end<sp/>with<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{u</highlight><highlight class="stringliteral">&apos;こ&apos;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&apos;ん&apos;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&apos;に&apos;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&apos;ち&apos;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&apos;は&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;u\&quot;\\x3053\\0\\x3093\\x306B\\x3061\\x306F\&quot;<sp/>(no<sp/>terminating<sp/>NUL)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char16_t<sp/>array<sp/>with<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">TEST(PrintArrayTest,<sp/>Char16ArrayWithTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;\0こんにちは&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;u\&quot;\\0\\x3053\\x3093\\x306B\\x3061\\x306F\&quot;&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char32_t<sp/>array<sp/>without<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal">TEST(PrintArrayTest,<sp/>Char32ArrayWithNoTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>a<sp/>contains<sp/>&apos;\0&apos;<sp/>in<sp/>the<sp/>middle<sp/>and<sp/>doesn&apos;t<sp/>end<sp/>with<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{U</highlight><highlight class="stringliteral">&apos;👋&apos;</highlight><highlight class="normal">,<sp/>U</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>U</highlight><highlight class="stringliteral">&apos;🌌&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U\&quot;\\x1F44B\\0\\x1F30C\&quot;<sp/>(no<sp/>terminating<sp/>NUL)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char32_t<sp/>array<sp/>with<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal">TEST(PrintArrayTest,<sp/>Char32ArrayWithTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>U</highlight><highlight class="stringliteral">&quot;\0👋🌌&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U\&quot;\\0\\x1F44B\\x1F30C\&quot;&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>array<sp/>without<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">TEST(PrintArrayTest,<sp/>WCharArrayWithNoTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>a<sp/>contains<sp/>&apos;\0&apos;<sp/>in<sp/>the<sp/>middle<sp/>and<sp/>doesn&apos;t<sp/>end<sp/>with<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{L</highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>L</highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L\&quot;H\\0i\&quot;<sp/>(no<sp/>terminating<sp/>NUL)&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>array<sp/>with<sp/>terminating<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal">TEST(PrintArrayTest,<sp/>WCharArrayWithTerminatingNul)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;\0Hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L\&quot;\\0Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">TEST(PrintArrayTest,<sp/>ObjectArray)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>std::string<sp/>a[3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Ni<sp/>hao&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>\&quot;Hi\&quot;,<sp/>\&quot;Hello\&quot;,<sp/>\&quot;Ni<sp/>hao\&quot;<sp/>}&quot;</highlight><highlight class="normal">,<sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Array<sp/>with<sp/>many<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal">TEST(PrintArrayTest,<sp/>BigArray)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[100]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>1,<sp/>2,<sp/>3,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>...,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintArrayHelper(a));</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>::string<sp/>and<sp/>::std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal">TEST(PrintStringTest,<sp/>StringInStdNamespace)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&apos;\&quot;?\\\a\b\f\n\0\r\t\v\x7F\xFF<sp/>a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>const<sp/>::std::string<sp/>str(s,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(s));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;&apos;\\\&quot;?\\\\\\a\\b\\f\\n\\0\\r\\t\\v\\x7F\\xFF<sp/>a\\0\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(str));</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal">TEST(PrintStringTest,<sp/>StringAmbiguousHex)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;\x6BANANA&quot;<sp/>is<sp/>ambiguous,<sp/>it<sp/>can<sp/>be<sp/>interpreted<sp/>as<sp/>starting<sp/>with<sp/>either<sp/>of:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;\x6&apos;,<sp/>&apos;\x6B&apos;,<sp/>or<sp/>&apos;\x6BA&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>hex<sp/>escaping<sp/>sequence<sp/>following<sp/>by<sp/>a<sp/>decimal<sp/>digit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;0\\x12\&quot;<sp/>\&quot;3\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(::std::string(</highlight><highlight class="stringliteral">&quot;0\x12&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>hex<sp/>escaping<sp/>sequence<sp/>following<sp/>by<sp/>a<sp/>hex<sp/>digit<sp/>(lower-case)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;mm\\x6\&quot;<sp/>\&quot;bananas\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(::std::string(</highlight><highlight class="stringliteral">&quot;mm\x6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bananas&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>hex<sp/>escaping<sp/>sequence<sp/>following<sp/>by<sp/>a<sp/>hex<sp/>digit<sp/>(upper-case)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;NOM\\x6\&quot;<sp/>\&quot;BANANA\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(::std::string(</highlight><highlight class="stringliteral">&quot;NOM\x6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BANANA&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>hex<sp/>escaping<sp/>sequence<sp/>following<sp/>by<sp/>a<sp/>non-xdigit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;!\\x5-!\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(::std::string(</highlight><highlight class="stringliteral">&quot;!\x5-!&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal">TEST(PrintWideStringTest,<sp/>StringInStdNamespace)<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;&apos;\&quot;?\\\a\b\f\n\0\r\t\v\xD3\x576\x8D3\xC74D<sp/>a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>const<sp/>::std::wstring<sp/>str(s,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(s)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;L\&quot;&apos;\\\&quot;?\\\\\\a\\b\\f\\n\\0\\r\\t\\v&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\\xD3\\x576\\x8D3\\xC74D<sp/>a\\0\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Print(str));</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal">TEST(PrintWideStringTest,<sp/>StringAmbiguousHex)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>for<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L\&quot;0\\x12\&quot;<sp/>L\&quot;3\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(::std::wstring(L</highlight><highlight class="stringliteral">&quot;0\x12&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L\&quot;mm\\x6\&quot;<sp/>L\&quot;bananas\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(::std::wstring(L</highlight><highlight class="stringliteral">&quot;mm\x6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight><highlight class="stringliteral">&quot;bananas&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L\&quot;NOM\\x6\&quot;<sp/>L\&quot;BANANA\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(::std::wstring(L</highlight><highlight class="stringliteral">&quot;NOM\x6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight><highlight class="stringliteral">&quot;BANANA&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;L\&quot;!\\x5-!\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(::std::wstring(L</highlight><highlight class="stringliteral">&quot;!\x5-!&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_lib_char8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal">TEST(PrintStringTest,<sp/>U8String)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>std::u8string<sp/>str<sp/>=<sp/>u8</highlight><highlight class="stringliteral">&quot;Hello,<sp/>世界&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str,<sp/>str);<sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>EXPECT_EQ<sp/>compiles<sp/>with<sp/>this<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;u8\&quot;Hello,<sp/>\\xE4\\xB8\\x96\\xE7\\x95\\x8C\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(str));</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal">TEST(PrintStringTest,<sp/>U16String)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>std::u16string<sp/>str<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;Hello,<sp/>世界&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str,<sp/>str);<sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>EXPECT_EQ<sp/>compiles<sp/>with<sp/>this<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;u\&quot;Hello,<sp/>\\x4E16\\x754C\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(str));</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal">TEST(PrintStringTest,<sp/>U32String)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>std::u32string<sp/>str<sp/>=<sp/>U</highlight><highlight class="stringliteral">&quot;Hello,<sp/>🗺️&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str,<sp/>str);<sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>EXPECT_EQ<sp/>compiles<sp/>with<sp/>this<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;U\&quot;Hello,<sp/>\\x1F5FA\\xFE0F\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(str));</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>types<sp/>that<sp/>support<sp/>generic<sp/>streaming<sp/>(i.e.<sp/>streaming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>std::basic_ostream&lt;Char,<sp/>CharTraits&gt;<sp/>for<sp/>any<sp/>valid<sp/>Char<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CharTraits<sp/>types).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>a<sp/>non-template<sp/>type<sp/>that<sp/>supports<sp/>generic<sp/>streaming.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988" refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreaming" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreaming" kindref="compound">AllowsGenericStreaming</ref><sp/>{};</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharTraits&gt;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">std::basic_ostream&lt;Char,<sp/>CharTraits&gt;&amp;<sp/>operator&lt;&lt;(</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_ostream&lt;Char,<sp/>CharTraits&gt;&amp;<sp/>os,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreaming" kindref="compound">AllowsGenericStreaming</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AllowsGenericStreaming&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">TEST(PrintTypeWithGenericStreamingTest,<sp/>NonTemplateType)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>AllowsGenericStreaming<sp/>a;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;AllowsGenericStreaming&quot;</highlight><highlight class="normal">,<sp/>Print(a));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>a<sp/>template<sp/>type<sp/>that<sp/>supports<sp/>generic<sp/>streaming.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1005" refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreamingTemplate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreamingTemplate" kindref="compound">AllowsGenericStreamingTemplate</ref><sp/>{};</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharTraits,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">std::basic_ostream&lt;Char,<sp/>CharTraits&gt;&amp;<sp/>operator&lt;&lt;(</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_ostream&lt;Char,<sp/>CharTraits&gt;&amp;<sp/>os,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreamingTemplate" kindref="compound">AllowsGenericStreamingTemplate&lt;T&gt;</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AllowsGenericStreamingTemplate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">TEST(PrintTypeWithGenericStreamingTest,<sp/>TemplateType)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>AllowsGenericStreamingTemplate&lt;int&gt;<sp/>a;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;AllowsGenericStreamingTemplate&quot;</highlight><highlight class="normal">,<sp/>Print(a));</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>a<sp/>type<sp/>that<sp/>supports<sp/>generic<sp/>streaming<sp/>and<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implicitly<sp/>converted<sp/>to<sp/>another<sp/>printable<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1023" refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreamingAndImplicitConversionTemplate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreamingAndImplicitConversionTemplate" kindref="compound">AllowsGenericStreamingAndImplicitConversionTemplate</ref><sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharTraits,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">std::basic_ostream&lt;Char,<sp/>CharTraits&gt;&amp;<sp/>operator&lt;&lt;(</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_ostream&lt;Char,<sp/>CharTraits&gt;&amp;<sp/>os,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gtest__printers__test_1_1AllowsGenericStreamingAndImplicitConversionTemplate" kindref="compound">AllowsGenericStreamingAndImplicitConversionTemplate&lt;T&gt;</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AllowsGenericStreamingAndImplicitConversionTemplate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal">TEST(PrintTypeWithGenericStreamingTest,<sp/>TypeImplicitlyConvertible)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>AllowsGenericStreamingAndImplicitConversionTemplate&lt;int&gt;<sp/>a;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;AllowsGenericStreamingAndImplicitConversionTemplate&quot;</highlight><highlight class="normal">,<sp/>Print(a));</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>internal::StringView.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal">TEST(PrintStringViewTest,<sp/>SimpleStringView)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringView<sp/>sp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;Hello\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(sp));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal">TEST(PrintStringViewTest,<sp/>UnprintableCharacters)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NUL<sp/>(\0)<sp/>and<sp/>\r\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::StringView<sp/>sp(str,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(str)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;NUL<sp/>(\\0)<sp/>and<sp/>\\r\\t\&quot;&quot;</highlight><highlight class="normal">,<sp/>Print(sp));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>STL<sp/>containers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>EmptyDeque)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>deque&lt;char&gt;<sp/>empty;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>Print(empty));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>NonEmptyDeque)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>deque&lt;int&gt;<sp/>non_empty;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>non_empty.push_back(1);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>non_empty.push_back(3);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>1,<sp/>3<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(non_empty));</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>OneElementHashMap)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>::std::unordered_map&lt;int,<sp/>char&gt;<sp/>map1;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>map1[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>(1,<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61))<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(map1));</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>HashMultiMap)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>::std::unordered_multimap&lt;int,<sp/>bool&gt;<sp/>map1;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>map1.insert(make_pair(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>map1.insert(make_pair(5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Elements<sp/>of<sp/>hash_multimap<sp/>can<sp/>be<sp/>printed<sp/>in<sp/>any<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>result<sp/>=<sp/>Print(map1);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(result<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>(5,<sp/>true),<sp/>(5,<sp/>false)<sp/>}&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>(5,<sp/>false),<sp/>(5,<sp/>true)<sp/>}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>where<sp/>Print(map1)<sp/>returns<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>HashSet)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>::std::unordered_set&lt;int&gt;<sp/>set1;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>set1.insert(1);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>1<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(set1));</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>HashMultiSet)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kSize<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[kSize]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>5,<sp/>1};</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>::std::unordered_multiset&lt;int&gt;<sp/>set1(a,<sp/>a<sp/>+<sp/>kSize);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Elements<sp/>of<sp/>hash_multiset<sp/>can<sp/>be<sp/>printed<sp/>in<sp/>any<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>result<sp/>=<sp/>Print(set1);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>expected_pattern<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>d,<sp/>d,<sp/>d,<sp/>d,<sp/>d<sp/>}&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>d<sp/>means<sp/>a<sp/>digit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>the<sp/>result<sp/>matches<sp/>the<sp/>expected<sp/>pattern;<sp/>also<sp/>extracts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>numbers<sp/>in<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>ASSERT_EQ(expected_pattern.length(),<sp/>result.length());</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>numbers;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>result.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_pattern[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_NE(isdigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result[i])),<sp/>0);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numbers.push_back(result[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(expected_pattern[i],<sp/>result[i])</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>where<sp/>result<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>the<sp/>result<sp/>contains<sp/>the<sp/>right<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>std::sort(numbers.begin(),<sp/>numbers.end());</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>std::sort(a,<sp/>a<sp/>+<sp/>kSize);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(std::equal(a,<sp/>a<sp/>+<sp/>kSize,<sp/>numbers.begin()));</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>List)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>a[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>list&lt;std::string&gt;<sp/>strings(a,<sp/>a<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>\&quot;hello\&quot;,<sp/>\&quot;world\&quot;<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(strings));</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>Map)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>map&lt;int,<sp/>bool&gt;<sp/>map1;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>map1[1]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>map1[5]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>map1[3]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>(1,<sp/>true),<sp/>(3,<sp/>true),<sp/>(5,<sp/>false)<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(map1));</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>MultiMap)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>multimap&lt;bool,<sp/>int&gt;<sp/>map1;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>make_pair<sp/>template<sp/>function<sp/>would<sp/>deduce<sp/>the<sp/>type<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pair&lt;bool,<sp/>int&gt;<sp/>here,<sp/>and<sp/>since<sp/>the<sp/>key<sp/>part<sp/>in<sp/>a<sp/>multimap<sp/>has<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>constant,<sp/>without<sp/>a<sp/>templated<sp/>ctor<sp/>in<sp/>the<sp/>pair<sp/>class<sp/>(as<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>libCstd<sp/>on<sp/>Solaris),<sp/>make_pair<sp/>call<sp/>would<sp/>fail<sp/>to<sp/>compile<sp/>as<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implicit<sp/>conversion<sp/>is<sp/>found.<sp/><sp/>Thus<sp/>explicit<sp/>typename<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>map1.insert(pair&lt;const<sp/>bool,<sp/>int&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>map1.insert(pair&lt;const<sp/>bool,<sp/>int&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>map1.insert(pair&lt;const<sp/>bool,<sp/>int&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>(false,<sp/>2),<sp/>(true,<sp/>0),<sp/>(true,<sp/>1)<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(map1));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>Set)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{3,<sp/>0,<sp/>5};</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>set&lt;unsigned<sp/>int&gt;<sp/>set1(a,<sp/>a<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>0,<sp/>3,<sp/>5<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(set1));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>MultiSet)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>5,<sp/>1};</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>multiset&lt;int&gt;<sp/>set1(a,<sp/>a<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>5<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(set1));</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>SinglyLinkedList)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{9,<sp/>2,<sp/>8};</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::forward_list&lt;int&gt;<sp/>ints(a,<sp/>a<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>9,<sp/>2,<sp/>8<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(ints));</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>Pair)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>pair&lt;const<sp/>bool,<sp/>int&gt;<sp/>p(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(true,<sp/>5)&quot;</highlight><highlight class="normal">,<sp/>Print(p));</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>Vector)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>v.push_back(1);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>v.push_back(2);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>1,<sp/>2<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(v));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>LongSequence)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[100]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>v(a,<sp/>a<sp/>+<sp/>100);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{<sp/>1,<sp/>2,<sp/>3,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>...<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Print(v));</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>NestedContainer)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1[]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2[]<sp/>=<sp/>{3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>list&lt;int&gt;<sp/>l1(a1,<sp/>a1<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>list&lt;int&gt;<sp/>l2(a2,<sp/>a2<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>vector&lt;list&lt;int&gt;&gt;<sp/>v;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>v.push_back(l1);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>v.push_back(l2);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>{<sp/>1,<sp/>2<sp/>},<sp/>{<sp/>3,<sp/>4,<sp/>5<sp/>}<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(v));</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>OneDimensionalNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>NativeArray&lt;int&gt;<sp/>b(a,<sp/>3,<sp/>RelationToSourceReference());</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>1,<sp/>2,<sp/>3<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(b));</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>TwoDimensionalNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[2][3]<sp/>=<sp/>{{1,<sp/>2,<sp/>3},<sp/>{4,<sp/>5,<sp/>6}};</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>NativeArray&lt;int[3]&gt;<sp/>b(a,<sp/>2,<sp/>RelationToSourceReference());</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;{<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>},<sp/>{<sp/>4,<sp/>5,<sp/>6<sp/>}<sp/>}&quot;</highlight><highlight class="normal">,<sp/>Print(b));</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>class<sp/>named<sp/>iterator<sp/>isn&apos;t<sp/>treated<sp/>as<sp/>a<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217" refid="structtesting_1_1gtest__printers__test_1_1iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gtest__printers__test_1_1iterator" kindref="compound">iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>Iterator)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gtest__printers__test_1_1iterator" kindref="compound">iterator</ref><sp/>it<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;00&gt;&quot;</highlight><highlight class="normal">,<sp/>Print(it));</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>class<sp/>named<sp/>const_iterator<sp/>isn&apos;t<sp/>treated<sp/>as<sp/>a<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228" refid="structtesting_1_1gtest__printers__test_1_1const__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gtest__printers__test_1_1const__iterator" kindref="compound">const_iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal">TEST(PrintStlContainerTest,<sp/>ConstIterator)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gtest__printers__test_1_1const__iterator" kindref="compound">const_iterator</ref><sp/>it<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;00&gt;&quot;</highlight><highlight class="normal">,<sp/>Print(it));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>::std::tuples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tuples<sp/>of<sp/>various<sp/>arities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal">TEST(PrintStdTupleTest,<sp/>VariousSizes)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>::std::tuple&lt;&gt;<sp/>t0;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">,<sp/>Print(t0));</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>::std::tuple&lt;int&gt;<sp/>t1(5);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(5)&quot;</highlight><highlight class="normal">,<sp/>Print(t1));</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>::std::tuple&lt;char,<sp/>bool&gt;<sp/>t2(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(&apos;a&apos;<sp/>(97,<sp/>0x61),<sp/>true)&quot;</highlight><highlight class="normal">,<sp/>Print(t2));</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>::std::tuple&lt;bool,<sp/>int,<sp/>int&gt;<sp/>t3(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(false,<sp/>2,<sp/>3)&quot;</highlight><highlight class="normal">,<sp/>Print(t3));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>::std::tuple&lt;bool,<sp/>int,<sp/>int,<sp/>int&gt;<sp/>t4(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(false,<sp/>2,<sp/>3,<sp/>4)&quot;</highlight><highlight class="normal">,<sp/>Print(t4));</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>::std::tuple&lt;bool,<sp/>char,<sp/>short,<sp/>int32_t,<sp/>int64_t,<sp/>float,<sp/>double,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t10(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">short</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3),<sp/>4,<sp/>5,<sp/>1.5F,<sp/>-2.5,<sp/>str,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(false,<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61),<sp/>3,<sp/>4,<sp/>5,<sp/>1.5,<sp/>-2.5,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(str)<sp/>+</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>\&quot;8\&quot;,<sp/>NULL,<sp/>\&quot;10\&quot;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(t10));</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Nested<sp/>tuples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal">TEST(PrintStdTupleTest,<sp/>NestedTuple)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>::std::tuple&lt;::std::tuple&lt;int,<sp/>bool&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;<sp/>nested(::std::make_tuple(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((5,<sp/>true),<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61))&quot;</highlight><highlight class="normal">,<sp/>Print(nested));</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal">TEST(PrintNullptrT,<sp/>Basic)<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>Print(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal">TEST(PrintReferenceWrapper,<sp/>Printable)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(&amp;x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Print(std::ref(x)));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(&amp;x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Print(std::cref(x)));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal">TEST(PrintReferenceWrapper,<sp/>Unprintable)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><ref refid="classfoo_1_1UnprintableInFoo" kindref="compound">::foo::UnprintableInFoo</ref><sp/>up;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(&amp;up)<sp/>+</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>16-byte<sp/>object<sp/>&lt;EF-12<sp/>00-00<sp/>34-AB<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::ref(up)));</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(&amp;up)<sp/>+</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>16-byte<sp/>object<sp/>&lt;EF-12<sp/>00-00<sp/>34-AB<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Print(std::cref(up)));</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>user-defined<sp/>unprintable<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unprintable<sp/>types<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal">TEST(PrintUnprintableTypeTest,<sp/>InGlobalNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;00&gt;&quot;</highlight><highlight class="normal">,<sp/>Print(<ref refid="classUnprintableTemplateInGlobal" kindref="compound">UnprintableTemplateInGlobal&lt;char&gt;</ref>()));</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unprintable<sp/>types<sp/>in<sp/>a<sp/>user<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal">TEST(PrintUnprintableTypeTest,<sp/>InUserNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;16-byte<sp/>object<sp/>&lt;EF-12<sp/>00-00<sp/>34-AB<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(<ref refid="classfoo_1_1UnprintableInFoo" kindref="compound">::foo::UnprintableInFoo</ref>()));</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unprintable<sp/>types<sp/>are<sp/>that<sp/>too<sp/>big<sp/>to<sp/>be<sp/>printed<sp/>completely.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308" refid="structtesting_1_1gtest__printers__test_1_1Big" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gtest__printers__test_1_1Big" kindref="compound">Big</ref><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gtest__printers__test_1_1Big" kindref="compound">Big</ref>()<sp/>{<sp/>memset(array,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(array));<sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>array[257];</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal">TEST(PrintUnpritableTypeTest,<sp/>BigObject)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;257-byte<sp/>object<sp/>&lt;00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>...<sp/>00-00<sp/>00-00<sp/>00-00<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Print(<ref refid="structtesting_1_1gtest__printers__test_1_1Big" kindref="compound">Big</ref>()));</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>user-defined<sp/>streamable<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Streamable<sp/>types<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal">TEST(PrintStreamableTypeTest,<sp/>InGlobalNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><ref refid="classStreamableInGlobal" kindref="compound">StreamableInGlobal</ref><sp/>x;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;StreamableInGlobal&quot;</highlight><highlight class="normal">,<sp/>Print(x));</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;StreamableInGlobal*&quot;</highlight><highlight class="normal">,<sp/>Print(&amp;x));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Printable<sp/>template<sp/>types<sp/>in<sp/>a<sp/>user<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal">TEST(PrintStreamableTypeTest,<sp/>TemplateTypeInUserNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;StreamableTemplateInFoo:<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(<ref refid="classfoo_1_1StreamableTemplateInFoo" kindref="compound">::foo::StreamableTemplateInFoo&lt;int&gt;</ref>()));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal">TEST(PrintStreamableTypeTest,<sp/>TypeInUserNamespaceWithTemplatedStreamOperator)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;TemplatedStreamableInFoo&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(<ref refid="structfoo_1_1TemplatedStreamableInFoo" kindref="compound">::foo::TemplatedStreamableInFoo</ref>()));</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal">TEST(PrintStreamableTypeTest,<sp/>SubclassUsesSuperclassStreamOperator)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><ref refid="classParentClass" kindref="compound">ParentClass</ref><sp/>parent;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><ref refid="classChildClassWithStreamOperator" kindref="compound">ChildClassWithStreamOperator</ref><sp/>child_stream;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><ref refid="classChildClassWithoutStreamOperator" kindref="compound">ChildClassWithoutStreamOperator</ref><sp/>child_no_stream;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;ParentClass&quot;</highlight><highlight class="normal">,<sp/>Print(parent));</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;ChildClassWithStreamOperator&quot;</highlight><highlight class="normal">,<sp/>Print(child_stream));</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;ParentClass&quot;</highlight><highlight class="normal">,<sp/>Print(child_no_stream));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>a<sp/>user-defined<sp/>recursive<sp/>container<sp/>type<sp/>that<sp/>has<sp/>a<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">TEST(PrintStreamableTypeTest,<sp/>PathLikeInUserNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><ref refid="classfoo_1_1PathLike" kindref="compound">::foo::PathLike</ref><sp/>x;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Streamable-PathLike&quot;</highlight><highlight class="normal">,<sp/>Print(x));</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>const<sp/>::foo::PathLike<sp/>cx;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Streamable-PathLike&quot;</highlight><highlight class="normal">,<sp/>Print(cx));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>user-defined<sp/>types<sp/>that<sp/>have<sp/>a<sp/>PrintTo()<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal">TEST(PrintPrintableTypeTest,<sp/>InUserNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;PrintableViaPrintTo:<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Print(<ref refid="structfoo_1_1PrintableViaPrintTo" kindref="compound">::foo::PrintableViaPrintTo</ref>()));</highlight></codeline>
<codeline lineno="1366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>user-defined<sp/>type<sp/>that<sp/>has<sp/>a<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator<sp/>for<sp/>its<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal">TEST(PrintPrintableTypeTest,<sp/>PointerInUserNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><ref refid="structfoo_1_1PointerPrintable" kindref="compound">::foo::PointerPrintable</ref><sp/>x;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;PointerPrintable*&quot;</highlight><highlight class="normal">,<sp/>Print(&amp;x));</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>printing<sp/>user-defined<sp/>class<sp/>template<sp/>that<sp/>have<sp/>a<sp/>PrintTo()<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal">TEST(PrintPrintableTypeTest,<sp/>TemplateInUserNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;PrintableViaPrintToTemplate:<sp/>5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(<ref refid="classfoo_1_1PrintableViaPrintToTemplate" kindref="compound">::foo::PrintableViaPrintToTemplate&lt;int&gt;</ref>(5)));</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>universal<sp/>printer<sp/>prints<sp/>both<sp/>the<sp/>address<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>a<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal">TEST(PrintReferenceTest,<sp/>PrintsAddressAndValue)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(&amp;n)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>5&quot;</highlight><highlight class="normal">,<sp/>PrintByRef(n));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[2][3]<sp/>=<sp/>{{0,<sp/>1,<sp/>2},<sp/>{3,<sp/>4,<sp/>5}};</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(a)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>{<sp/>{<sp/>0,<sp/>1,<sp/>2<sp/>},<sp/>{<sp/>3,<sp/>4,<sp/>5<sp/>}<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintByRef(a));</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>const<sp/>::foo::UnprintableInFoo<sp/>x;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(&amp;x)<sp/>+</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>16-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;EF-12<sp/>00-00<sp/>34-AB<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00<sp/>00-00&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintByRef(x));</highlight></codeline>
<codeline lineno="1396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>universal<sp/>printer<sp/>prints<sp/>a<sp/>function<sp/>pointer<sp/>passed<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal">TEST(PrintReferenceTest,<sp/>HandlesFunctionPointer)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>void<sp/>(*fp)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>&amp;MyFunction;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fp_pointer_string<sp/>=</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintPointer(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;fp));</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>directly<sp/>cast<sp/>&amp;MyFunction<sp/>to<sp/>const<sp/>void*<sp/>because<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>standard<sp/>disallows<sp/>casting<sp/>between<sp/>pointers<sp/>to<sp/>functions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointers<sp/>to<sp/>objects,<sp/>and<sp/>some<sp/>compilers<sp/>(e.g.<sp/>GCC<sp/>3.4)<sp/>enforce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>limitation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fp_string<sp/>=<sp/>PrintPointer(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">internal::BiggestInt</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fp)));</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>fp_pointer_string<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>fp_string,<sp/>PrintByRef(fp));</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>universal<sp/>printer<sp/>prints<sp/>a<sp/>member<sp/>function<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>passed<sp/>by<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal">TEST(PrintReferenceTest,<sp/>HandlesMemberFunctionPointer)<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>int<sp/>(Foo::*p)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>=<sp/>&amp;Foo::MyMethod;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(HasPrefix(PrintByRef(p),</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;p))<sp/>+</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>char<sp/>(Foo::*p2)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>&amp;Foo::MyVirtualMethod;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(HasPrefix(PrintByRef(p2),</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;p2))<sp/>+</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p2))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>universal<sp/>printer<sp/>prints<sp/>a<sp/>member<sp/>variable<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>passed<sp/>by<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal">TEST(PrintReferenceTest,<sp/>HandlesMemberVariablePointer)<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Foo::*p<sp/>=<sp/>&amp;Foo::value;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(HasPrefix(PrintByRef(p),<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(&amp;p)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>FormatForComparisonFailureMessage(),<sp/>which<sp/>is<sp/>used<sp/>to<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>operand<sp/>in<sp/>a<sp/>comparison<sp/>assertion<sp/>(e.g.<sp/>ASSERT_EQ)<sp/>when<sp/>the<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fails,<sp/>formats<sp/>the<sp/>operand<sp/>in<sp/>the<sp/>desired<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForScalar)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>FormatForComparisonFailureMessage(123,<sp/>124).c_str());</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-char<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForNonCharPointer)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(&amp;n),</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(&amp;n,<sp/>&amp;n).c_str());</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-char<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>FormatsNonCharArrayAsPointer)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>expression<sp/>&apos;array<sp/>==<sp/>x&apos;,<sp/>&apos;array&apos;<sp/>is<sp/>compared<sp/>by<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore<sp/>we<sp/>want<sp/>to<sp/>print<sp/>an<sp/>array<sp/>operand<sp/>as<sp/>a<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(n),<sp/>FormatForComparisonFailureMessage(n,<sp/>n).c_str());</highlight></codeline>
<codeline lineno="1457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>formatting<sp/>a<sp/>char<sp/>pointer<sp/>when<sp/>it&apos;s<sp/>compared<sp/>with<sp/>another<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>want<sp/>to<sp/>print<sp/>it<sp/>as<sp/>a<sp/>raw<sp/>pointer,<sp/>as<sp/>the<sp/>comparison<sp/>is<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>pointer<sp/>vs<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForCharPointerVsPointer)<sp/>{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>expression<sp/>&apos;p<sp/>==<sp/>x&apos;,<sp/>where<sp/>&apos;p&apos;<sp/>and<sp/>&apos;x&apos;<sp/>are<sp/>(const<sp/>or<sp/>not)<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointers,<sp/>the<sp/>operands<sp/>are<sp/>compared<sp/>by<sp/>pointer.<sp/><sp/>Therefore<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>to<sp/>print<sp/>&apos;p&apos;<sp/>as<sp/>a<sp/>pointer<sp/>instead<sp/>of<sp/>a<sp/>C<sp/>string<sp/>(we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>know<sp/>if<sp/>it&apos;s<sp/>supposed<sp/>to<sp/>point<sp/>to<sp/>a<sp/>valid<sp/>C<sp/>string).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(s),<sp/>FormatForComparisonFailureMessage(s,<sp/>s).c_str());</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(&amp;ch),</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(&amp;ch,<sp/>&amp;ch).c_str());</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>pointer<sp/>vs<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForWCharPointerVsPointer)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>expression<sp/>&apos;p<sp/>==<sp/>x&apos;,<sp/>where<sp/>&apos;p&apos;<sp/>and<sp/>&apos;x&apos;<sp/>are<sp/>(const<sp/>or<sp/>not)<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointers,<sp/>the<sp/>operands<sp/>are<sp/>compared<sp/>by<sp/>pointer.<sp/><sp/>Therefore<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>to<sp/>print<sp/>&apos;p&apos;<sp/>as<sp/>a<sp/>pointer<sp/>instead<sp/>of<sp/>a<sp/>wide<sp/>C<sp/>string<sp/>(we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>know<sp/>if<sp/>it&apos;s<sp/>supposed<sp/>to<sp/>point<sp/>to<sp/>a<sp/>valid<sp/>wide<sp/>C<sp/>string).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(s),<sp/>FormatForComparisonFailureMessage(s,<sp/>s).c_str());</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(&amp;ch),</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(&amp;ch,<sp/>&amp;ch).c_str());</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>formatting<sp/>a<sp/>char<sp/>pointer<sp/>when<sp/>it&apos;s<sp/>compared<sp/>to<sp/>a<sp/>string<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>want<sp/>to<sp/>print<sp/>the<sp/>char<sp/>pointer<sp/>as<sp/>a<sp/>C<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>pointer<sp/>vs<sp/>std::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForCharPointerVsStdString)<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>\&quot;world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\&quot;hello<sp/>\\\&quot;world\&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>content<sp/>should<sp/>be<sp/>escaped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(s,<sp/>::std::string()).c_str());</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi\1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\&quot;hi\\x1\&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>content<sp/>should<sp/>be<sp/>escaped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(p,<sp/>::std::string()).c_str());</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>pointer<sp/>vs<sp/>std::wstring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForWCharPointerVsStdWString)<sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;hi<sp/>\&quot;world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;L\&quot;hi<sp/>\\\&quot;world\&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>content<sp/>should<sp/>be<sp/>escaped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(s,<sp/>::std::wstring()).c_str());</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wchar_t*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;hi\1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;L\&quot;hi\\x1\&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>content<sp/>should<sp/>be<sp/>escaped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(p,<sp/>::std::wstring()).c_str());</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>formatting<sp/>a<sp/>char<sp/>array<sp/>when<sp/>it&apos;s<sp/>compared<sp/>with<sp/>a<sp/>pointer<sp/>or<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>want<sp/>to<sp/>print<sp/>the<sp/>array<sp/>as<sp/>a<sp/>row<sp/>pointer,<sp/>as<sp/>the<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>by<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>array<sp/>vs<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForCharArrayVsPointer)<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi<sp/>\&quot;world\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(str),</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(str,<sp/>p).c_str());</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>array<sp/>vs<sp/>char<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForCharArrayVsCharArray)<sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi<sp/>\&quot;world\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(str),</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(str,<sp/>str).c_str());</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>array<sp/>vs<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForWCharArrayVsPointer)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;hi<sp/>\&quot;world\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(str),</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(str,<sp/>p).c_str());</highlight></codeline>
<codeline lineno="1553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>array<sp/>vs<sp/>wchar_t<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForWCharArrayVsWCharArray)<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;hi<sp/>\&quot;world\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(str),</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(str,<sp/>str).c_str());</highlight></codeline>
<codeline lineno="1560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>formatting<sp/>a<sp/>char<sp/>array<sp/>when<sp/>it&apos;s<sp/>compared<sp/>with<sp/>a<sp/>string<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>want<sp/>to<sp/>print<sp/>the<sp/>array<sp/>as<sp/>a<sp/>C<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>array<sp/>vs<sp/>std::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForCharArrayVsStdString)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi<sp/>\&quot;world\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\&quot;hi<sp/>\\\&quot;world\\\&quot;\&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>content<sp/>should<sp/>be<sp/>escaped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(str,<sp/>::std::string()).c_str());</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>array<sp/>vs<sp/>std::wstring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal">TEST(FormatForComparisonFailureMessageTest,<sp/>WorksForWCharArrayVsStdWString)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;hi<sp/>\&quot;w\0rld\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;L\&quot;hi<sp/>\\\&quot;w\&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>content<sp/>should<sp/>be<sp/>escaped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Embedded<sp/>NUL<sp/>terminates<sp/>the<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FormatForComparisonFailureMessage(str,<sp/>::std::wstring()).c_str());</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Useful<sp/>for<sp/>testing<sp/>PrintToString().<sp/><sp/>We<sp/>cannot<sp/>use<sp/>EXPECT_EQ()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>there<sp/>as<sp/>its<sp/>implementation<sp/>uses<sp/>PrintToString().<sp/><sp/>The<sp/>caller<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>&apos;value&apos;<sp/>has<sp/>no<sp/>side<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_PRINT_TO_STRING_(value,<sp/>expected_string)<sp/><sp/>\</highlight></codeline>
<codeline lineno="1587"><highlight class="preprocessor"><sp/><sp/>EXPECT_TRUE(PrintToString(value)<sp/>==<sp/>(expected_string))<sp/>\</highlight></codeline>
<codeline lineno="1588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>where<sp/>&quot;</highlight><highlight class="normal"><sp/>#value<sp/>&quot;<sp/>prints<sp/>as<sp/>&quot;<sp/>&lt;&lt;<sp/>(PrintToString(value))</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal">TEST(PrintToStringTest,<sp/>WorksForScalar)<sp/>{<sp/>EXPECT_PRINT_TO_STRING_(123,<sp/></highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal">TEST(PrintToStringTest,<sp/>WorksForPointerToConstChar)<sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(p,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;hello\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal">TEST(PrintToStringTest,<sp/>WorksForPointerToNonConstChar)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(p,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;hello\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal">TEST(PrintToStringTest,<sp/>EscapesForPointerToConstChar)<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(p,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;hello\\n\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal">TEST(PrintToStringTest,<sp/>EscapesForPointerToNonConstChar)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello\1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(p,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;hello\\x1\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal">TEST(PrintToStringTest,<sp/>WorksForArray)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(n,<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>1,<sp/>2,<sp/>3<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal">TEST(PrintToStringTest,<sp/>WorksForCharArray)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(s,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;hello\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal">TEST(PrintToStringTest,<sp/>WorksForCharArrayWithEmbeddedNul)<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str_with_nul[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello\0<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(str_with_nul,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;hello\\0<sp/>world\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mutable_str_with_nul[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello\0<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(mutable_str_with_nul,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;hello\\0<sp/>world\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal">TEST(PrintToStringTest,<sp/>ContainsNonLatin)<sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>valid<sp/>UTF-8.<sp/>Prints<sp/>both<sp/>in<sp/>hex<sp/>and<sp/>as<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>std::string<sp/>non_ascii_str<sp/>=<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;오전<sp/>4:30&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(non_ascii_str,</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xEC\\x98\\xA4\\xEC\\xA0\\x84<sp/>4:30\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>As<sp/>Text:<sp/>\&quot;오전<sp/>4:30\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>non_ascii_str<sp/>=<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;From<sp/>ä<sp/>—<sp/>ẑ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(non_ascii_str,</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;From<sp/>\\xC3\\xA4<sp/>\\xE2\\x80\\x94<sp/>\\xE1\\xBA\\x91\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>As<sp/>Text:<sp/>\&quot;From<sp/>ä<sp/>—<sp/>ẑ\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal">TEST(PrintToStringTest,<sp/>PrintStreamableInLocal)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;StreamableInLocal&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(<ref refid="structfoo_1_1StreamableInLocal" kindref="compound">foo::StreamableInLocal</ref>()).c_str());</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal">TEST(PrintToStringTest,<sp/>PrintReferenceToStreamableInLocal)<sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><ref refid="structfoo_1_1StreamableInLocal" kindref="compound">foo::StreamableInLocal</ref><sp/>s;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>std::reference_wrapper&lt;foo::StreamableInLocal&gt;<sp/>r(s);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;StreamableInLocal&quot;</highlight><highlight class="normal">,<sp/>PrintToString(r).c_str());</highlight></codeline>
<codeline lineno="1653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal">TEST(PrintToStringTest,<sp/>PrintReferenceToStreamableInGlobal)<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><ref refid="classStreamableInGlobal" kindref="compound">StreamableInGlobal</ref><sp/>s;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>std::reference_wrapper&lt;StreamableInGlobal&gt;<sp/>r(s);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;StreamableInGlobal&quot;</highlight><highlight class="normal">,<sp/>PrintToString(r).c_str());</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_ABSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal">TEST(PrintToStringTest,<sp/>AbslStringify)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>EXPECT_PRINT_TO_STRING_(Point(),<sp/></highlight><highlight class="stringliteral">&quot;(10,<sp/>20)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal">TEST(IsValidUTF8Test,<sp/>IllFormedUTF8)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>test<sp/>strings<sp/>are<sp/>ill-formed<sp/>UTF-8<sp/>and<sp/>are<sp/>printed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>hex<sp/>only<sp/>(or<sp/>ASCII,<sp/>in<sp/>case<sp/>of<sp/>ASCII<sp/>bytes)<sp/>because<sp/>IsValidUTF8()<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expected<sp/>to<sp/>fail,<sp/>thus<sp/>output<sp/>does<sp/>not<sp/>contain<sp/>&quot;As<sp/>Text:&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kTestdata[][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-byte<sp/>lead<sp/>byte<sp/>followed<sp/>by<sp/>a<sp/>single-byte<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xC3\x74&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xC3t\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>2-byte<sp/>character<sp/>followed<sp/>by<sp/>an<sp/>orphan<sp/>trail<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xC3\x84\xA4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xC3\\x84\\xA4\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lead<sp/>byte<sp/>without<sp/>trail<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;abc\xC3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;abc\\xC3\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3-byte<sp/>lead<sp/>byte,<sp/>single-byte<sp/>character,<sp/>orphan<sp/>trail<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;x\xE2\x70\x94&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;x\\xE2p\\x94\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Truncated<sp/>3-byte<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xE2\x80&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xE2\\x80\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Truncated<sp/>3-byte<sp/>character<sp/>followed<sp/>by<sp/>valid<sp/>2-byte<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xE2\x80\xC3\x84&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xE2\\x80\\xC3\\x84\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Truncated<sp/>3-byte<sp/>character<sp/>followed<sp/>by<sp/>a<sp/>single-byte<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xE2\x80\x7A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xE2\\x80z\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3-byte<sp/>lead<sp/>byte<sp/>followed<sp/>by<sp/>valid<sp/>3-byte<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xE2\xE2\x80\x94&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xE2\\xE2\\x80\\x94\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4-byte<sp/>lead<sp/>byte<sp/>followed<sp/>by<sp/>valid<sp/>3-byte<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xF0\xE2\x80\x94&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xF0\\xE2\\x80\\x94\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Truncated<sp/>4-byte<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xF0\xE2\x80&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xF0\\xE2\\x80\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>UTF-8<sp/>byte<sp/>sequences<sp/>embedded<sp/>in<sp/>other<sp/>chars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;abc\xE2\x80\x94\xC3\x74xyc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;abc\\xE2\\x80\\x94\\xC3txyc\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;abc\xC3\x84\xE2\x80\xC3\x84xyz&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;abc\\xC3\\x84\\xE2\\x80\\xC3\\x84xyz\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-shortest<sp/>UTF-8<sp/>byte<sp/>sequences<sp/>are<sp/>also<sp/>ill-formed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>classics:<sp/>xC0,<sp/>xC1<sp/>lead<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xC0\x80&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xC0\\x80\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xC1\x81&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xC1\\x81\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-shortest<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xE0\x80\x80&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xE0\\x80\\x80\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xf0\x80\x80\x80&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xF0\\x80\\x80\\x80\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>valid<sp/>code<sp/>point<sp/>before<sp/>surrogate<sp/>range,<sp/>should<sp/>be<sp/>printed<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xED\x9F\xBF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xED\\x9F\\xBF\&quot;\n<sp/><sp/><sp/><sp/>As<sp/>Text:<sp/>\&quot;퟿\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>of<sp/>surrogate<sp/>lead.<sp/>Surrogates<sp/>are<sp/>not<sp/>printed<sp/>as<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xED\xA0\x80&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xED\\xA0\\x80\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>non-private<sp/>surrogate<sp/>lead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xED\xAD\xBF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xED\\xAD\\xBF\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>private-use<sp/>surrogate<sp/>lead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xED\xAE\x80&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xED\\xAE\\x80\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>private-use<sp/>surrogate<sp/>lead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xED\xAF\xBF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xED\\xAF\\xBF\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mid-point<sp/>of<sp/>surrogate<sp/>trail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xED\xB3\xBF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xED\\xB3\\xBF\&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>valid<sp/>code<sp/>point<sp/>after<sp/>surrogate<sp/>range,<sp/>should<sp/>be<sp/>printed<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;\xEE\x80\x80&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\xEE\\x80\\x80\&quot;\n<sp/><sp/><sp/><sp/>As<sp/>Text:<sp/>\&quot;\&quot;&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>int(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTestdata)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTestdata[0]));<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_PRINT_TO_STRING_(kTestdata[i][0],<sp/>kTestdata[i][1]);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>EXPECT_PRINT_TO_STRING_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal">TEST(UniversalTersePrintTest,<sp/>WorksForNonReference)<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>UniversalTersePrint(123,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>ss.str());</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal">TEST(UniversalTersePrintTest,<sp/>WorksForReference)<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>UniversalTersePrint(n,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>ss.str());</highlight></codeline>
<codeline lineno="1741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal">TEST(UniversalTersePrintTest,<sp/>WorksForCString)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss1;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>UniversalTersePrint(s1,<sp/>&amp;ss1);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;abc\&quot;&quot;</highlight><highlight class="normal">,<sp/>ss1.str());</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s1);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss2;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>UniversalTersePrint(s2,<sp/>&amp;ss2);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;abc\&quot;&quot;</highlight><highlight class="normal">,<sp/>ss2.str());</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss3;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>UniversalTersePrint(s3,<sp/>&amp;ss3);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>ss3.str());</highlight></codeline>
<codeline lineno="1758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal">TEST(UniversalPrintTest,<sp/>WorksForNonReference)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>UniversalPrint(123,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>ss.str());</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal">TEST(UniversalPrintTest,<sp/>WorksForReference)<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/>UniversalPrint(n,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>ss.str());</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal">TEST(UniversalPrintTest,<sp/>WorksForPairWithConst)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>std::pair&lt;const<sp/>Wrapper&lt;std::string&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>p(Wrapper&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>UniversalPrint(p,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(Wrapper(\&quot;abc\&quot;),<sp/>1)&quot;</highlight><highlight class="normal">,<sp/>ss.str());</highlight></codeline>
<codeline lineno="1778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal">TEST(UniversalPrintTest,<sp/>WorksForCString)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss1;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>UniversalPrint(s1,<sp/>&amp;ss1);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(s1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>\&quot;abc\&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string(ss1.str()));</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s1);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss2;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>UniversalPrint(s2,<sp/>&amp;ss2);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>EXPECT_EQ(PrintPointer(s2)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>\&quot;abc\&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string(ss2.str()));</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss3;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>UniversalPrint(s3,<sp/>&amp;ss3);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">,<sp/>ss3.str());</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal">TEST(UniversalPrintTest,<sp/>WorksForCharArray)<sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;Line\0<sp/>1\&quot;\nLine<sp/>2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss1;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>UniversalPrint(str,<sp/>&amp;ss1);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;\\\&quot;Line\\0<sp/>1\\\&quot;\\nLine<sp/>2\&quot;&quot;</highlight><highlight class="normal">,<sp/>ss1.str());</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mutable_str[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;Line\0<sp/>1\&quot;\nLine<sp/>2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>ss2;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>UniversalPrint(mutable_str,<sp/>&amp;ss2);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;\\\&quot;Line\\0<sp/>1\\\&quot;\\nLine<sp/>2\&quot;&quot;</highlight><highlight class="normal">,<sp/>ss2.str());</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal">TEST(UniversalPrintTest,<sp/>IncompleteType)<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Incomplete;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>some_object<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(incomplete<sp/>type)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">Incomplete&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(some_object)));</highlight></codeline>
<codeline lineno="1814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal">TEST(UniversalPrintTest,<sp/>SmartPointers)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;int&gt;()));</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(17));</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(ptr<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(p.get())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value<sp/>=<sp/>17)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(p));</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int[]&gt;<sp/>p2(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[2]);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(p2.get())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(p2));</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;int&gt;()));</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;int&gt;<sp/>p3(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(1979));</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(ptr<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(p3.get())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value<sp/>=<sp/>1979)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(p3));</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_shared_ptr_arrays)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1829"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(__cpp_lib_shared_ptr_arrays<sp/>&gt;=<sp/>201611L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;int[]&gt;<sp/>p4(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[2]);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(p4.get())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(p4));</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>modifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;int&gt;()));</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;const<sp/>int&gt;()));</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;volatile<sp/>int&gt;()));</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;volatile<sp/>const<sp/>int&gt;()));</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]&gt;()));</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]&gt;()));</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]&gt;()));</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(std::unique_ptr&lt;</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]&gt;()));</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;int&gt;()));</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;const<sp/>int&gt;()));</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;volatile<sp/>int&gt;()));</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;volatile<sp/>const<sp/>int&gt;()));</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_shared_ptr_arrays)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1849"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(__cpp_lib_shared_ptr_arrays<sp/>&gt;=<sp/>201611L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]&gt;()));</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]&gt;()));</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]&gt;()));</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(std::shared_ptr&lt;</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]&gt;()));</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::unique_ptr&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;(</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(p.get())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;(p.get(),<sp/>[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{})));</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullptr)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(std::shared_ptr&lt;void&gt;()));</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintPointer(p.get())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(std::shared_ptr&lt;void&gt;(p.get(),<sp/>[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{})));</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal">TEST(UniversalTersePrintTupleFieldsToStringsTestWithStd,<sp/>PrintsEmptyTuple)<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>Strings<sp/>result<sp/>=<sp/>UniversalTersePrintTupleFieldsToStrings(::std::make_tuple());</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0u,<sp/>result.size());</highlight></codeline>
<codeline lineno="1871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal">TEST(UniversalTersePrintTupleFieldsToStringsTestWithStd,<sp/>PrintsOneTuple)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>Strings<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UniversalTersePrintTupleFieldsToStrings(::std::make_tuple(1));</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1u,<sp/>result.size());</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>result[0]);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal">TEST(UniversalTersePrintTupleFieldsToStringsTestWithStd,<sp/>PrintsTwoTuple)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/>Strings<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UniversalTersePrintTupleFieldsToStrings(::std::make_tuple(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2u,<sp/>result.size());</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>result[0]);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&apos;a&apos;<sp/>(97,<sp/>0x61)&quot;</highlight><highlight class="normal">,<sp/>result[1]);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal">TEST(UniversalTersePrintTupleFieldsToStringsTestWithStd,<sp/>PrintsTersely)<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>Strings<sp/>result<sp/>=<sp/>UniversalTersePrintTupleFieldsToStrings(</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::tuple&lt;const<sp/>int&amp;,<sp/>const<sp/>char*&gt;(n,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2u,<sp/>result.size());</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>result[0]);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;\&quot;a\&quot;&quot;</highlight><highlight class="normal">,<sp/>result[1]);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_INTERNAL_HAS_ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PrintAnyTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>ExpectedTypeName()<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::GetTypeName&lt;T&gt;();</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown_type&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal">TEST_F(PrintAnyTest,<sp/>Empty)<sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>internal::Any<sp/>any;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;no<sp/>value&quot;</highlight><highlight class="normal">,<sp/>PrintToString(any));</highlight></codeline>
<codeline lineno="1913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal">TEST_F(PrintAnyTest,<sp/>NonEmpty)<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>internal::Any<sp/>any;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val1<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>val2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;content&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/>any<sp/>=<sp/>val1;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;value<sp/>of<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>ExpectedTypeName&lt;int&gt;(),<sp/>PrintToString(any));</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>any<sp/>=<sp/>val2;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;value<sp/>of<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>ExpectedTypeName&lt;std::string&gt;(),</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(any));</highlight></codeline>
<codeline lineno="1926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_HAS_ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_INTERNAL_HAS_OPTIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal">TEST(PrintOptionalTest,<sp/>Basic)<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullopt)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(internal::Nullopt()));</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/>internal::Optional&lt;int&gt;<sp/>value;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(nullopt)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(value));</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>value<sp/>=<sp/>{7};</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(7)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(value));</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(1.1)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(internal::Optional&lt;double&gt;{1.1}));</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(\&quot;A\&quot;)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(internal::Optional&lt;std::string&gt;{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="1938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_HAS_OPTIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_INTERNAL_HAS_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NonPrintable<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>contents<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal">TEST(PrintOneofTest,<sp/>Basic)<sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Type<sp/>=<sp/>internal::Variant&lt;int,<sp/>StreamableInGlobal,<sp/>NonPrintable&gt;;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(&apos;int(index<sp/>=<sp/>0)&apos;<sp/>with<sp/>value<sp/>7)&quot;</highlight><highlight class="normal">,<sp/>PrintToString(Type(7)));</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(&apos;StreamableInGlobal(index<sp/>=<sp/>1)&apos;<sp/>with<sp/>value<sp/>StreamableInGlobal)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(Type(<ref refid="classStreamableInGlobal" kindref="compound">StreamableInGlobal</ref>{})));</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(&apos;testing::gtest_printers_test::NonPrintable(index<sp/>=<sp/>2)&apos;<sp/>with<sp/>value<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1-byte<sp/>object<sp/>&lt;11&gt;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(Type(NonPrintable{})));</highlight></codeline>
<codeline lineno="1955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_HAS_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">string_ref;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">string_ptr<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/>string_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>:<sp/>data_(data),<sp/>size_(size)<sp/>{}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/>string_ptr&amp;<sp/>operator++()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>data_<sp/>+=<sp/>size_;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/>string_ref<sp/>operator*()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data_;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal">class<sp/>string_ref<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>string_ref(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>:<sp/>data_(data),<sp/>size_(size)<sp/>{}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/>string_ptr<sp/>operator&amp;()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{data_,<sp/>size_};<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size_<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>data_[size_<sp/>-<sp/>1]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(data_,<sp/>size_)<sp/>==<sp/>std::string(s);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(data_)<sp/>==<sp/>std::string(s);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data_;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal">string_ref<sp/>string_ptr::operator*()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{data_,<sp/>size_};<sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal">TEST(string_ref,<sp/>compare)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;alex\0davidjohn\0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>string_ptr<sp/>ptr(s,<sp/>5);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/>EXPECT_EQ(*ptr,<sp/></highlight><highlight class="stringliteral">&quot;alex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(*ptr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;alex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>++ptr;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>EXPECT_EQ(*ptr,<sp/></highlight><highlight class="stringliteral">&quot;david&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(*ptr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;david&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/>++ptr;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/>EXPECT_EQ(*ptr,<sp/></highlight><highlight class="stringliteral">&quot;john&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gtest_printers_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/googletest-printers-test.cc"/>
  </compounddef>
</doxygen>
