<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>testing::Action&lt; R(Args...)&gt;</compoundname>
    <innerclass refid="structtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1_1ActionAdapter" prot="private">testing::Action&lt; R(Args...)&gt;::ActionAdapter</innerclass>
    <innerclass refid="structtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1_1IgnoreArgs" prot="private">testing::Action&lt; R(Args...)&gt;::IgnoreArgs</innerclass>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a61af52051e8a9c7c6004c2f806940d9d" prot="private" static="no">
        <type>R(Args...)</type>
        <definition>using testing::Action&lt; R(Args...)&gt;::F =  R(Args...)</definition>
        <argsstring></argsstring>
        <name>F</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::F</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="728" column="3" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a2f24046afaec08951afb16d66b2d6553" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>std::is_constructible&lt; std::function&lt; F &gt;, G &gt;</type>
        <definition>using testing::Action&lt; R(Args...)&gt;::IsCompatibleFunctor =  std::is_constructible&lt;std::function&lt;F&gt;, G&gt;</definition>
        <argsstring></argsstring>
        <name>IsCompatibleFunctor</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::IsCompatibleFunctor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="744" column="3" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="744" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1aa6848fedb346ec3e57cc6055ca8a0a99" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1Function" kindref="compound">internal::Function</ref>&lt; F &gt;::Result</type>
        <definition>typedef internal::Function&lt;F&gt;::Result testing::Action&lt; R(Args...)&gt;::Result</definition>
        <argsstring></argsstring>
        <name>Result</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Result</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="747" column="48" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a977a25b13d80a869ae7aa738e3bba83e" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1Function" kindref="compound">internal::Function</ref>&lt; F &gt;::ArgumentTuple</type>
        <definition>typedef internal::Function&lt;F&gt;::ArgumentTuple testing::Action&lt; R(Args...)&gt;::ArgumentTuple</definition>
        <argsstring></argsstring>
        <name>ArgumentTuple</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::ArgumentTuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="748" column="55" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="748" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a62bc48ff11968b6e45d21c4b49f349fb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Action</definition>
        <argsstring></argsstring>
        <name>Action</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Action</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1Action" kindref="compound">Action</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="813" column="16" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="813" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a30482840e41a2998bf5432e87f5f7f97" prot="private" static="no" mutable="no">
        <type>::std::function&lt; F &gt;</type>
        <definition>::std::function&lt;F&gt; testing::Action&lt; R(Args...)&gt;::fun_</definition>
        <argsstring></argsstring>
        <name>fun_</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::fun_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="836" column="19" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="836" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a5a50e24dad09b17bb731fa0241b86dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::Action&lt; R(Args...)&gt;::Action</definition>
        <argsstring>()=default</argsstring>
        <name>Action</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Action</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="752" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1af914512c3ac196b70a1e838936d67694" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;<ref refid="structtesting_1_1internal_1_1disjunction" kindref="compound">internal::disjunction</ref>&lt;          IsCompatibleFunctor&lt;G&gt;, std::is_constructible&lt;std::function&lt;Result()&gt;,                                                        G&gt;&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>testing::Action&lt; R(Args...)&gt;::Action</definition>
        <argsstring>(G &amp;&amp;fun)</argsstring>
        <name>Action</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Action</qualifiedname>
        <param>
          <type>G &amp;&amp;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="762" column="3" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="762" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1ae93a407342a218c8453bd8c83c63cafc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::Action&lt; R(Args...)&gt;::Action</definition>
        <argsstring>(ActionInterface&lt; F &gt; *impl)</argsstring>
        <name>Action</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Action</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1ActionInterface" kindref="compound">ActionInterface</ref>&lt; F &gt; *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="767" column="12" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="767" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a78a303bc55021bdb106bf1c647c84f83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>testing::Action&lt; R(Args...)&gt;::Action</definition>
        <argsstring>(const Action&lt; Func &gt; &amp;action)</argsstring>
        <name>Action</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Action</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt; Func &gt; &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="774" column="3" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="774" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a5ef3b75cf7a5baf83885f10aef2950bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::Action&lt; R(Args...)&gt;::IsDoDefault</definition>
        <argsstring>() const</argsstring>
        <name>IsDoDefault</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::IsDoDefault</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="778" column="8" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="778" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a84c4919e5d1691584bbd37c5aaf48f30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Result</type>
        <definition>Result testing::Action&lt; R(Args...)&gt;::Perform</definition>
        <argsstring>(ArgumentTuple args) const</argsstring>
        <name>Perform</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Perform</qualifiedname>
        <param>
          <type>ArgumentTuple</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="786" column="10" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="786" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a26420b4b57d321235fb50bbf498e95a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::Action&lt; R(Args...)&gt;::operator OnceAction&lt; F &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator OnceAction&lt; F &gt;</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::operator OnceAction&lt; F &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="795" column="3" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="795" bodyend="809"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1ac5938da1b0208e8cdfca17bf388f4e7c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::Action&lt; R(Args...)&gt;::Init</definition>
        <argsstring>(G &amp;&amp;g, ::std::true_type)</argsstring>
        <name>Init</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Init</qualifiedname>
        <param>
          <type>G &amp;&amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>::std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="816" column="8" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="816" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1ae7ecd97f24df7e22e6df8cdfc70271f9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::Action&lt; R(Args...)&gt;::Init</definition>
        <argsstring>(G &amp;&amp;g, ::std::false_type)</argsstring>
        <name>Init</name>
        <qualifiedname>testing::Action&lt; R(Args...)&gt;::Init</qualifiedname>
        <param>
          <type>G &amp;&amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>::std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="821" column="8" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="821" bodyend="823"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="726" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="726" bodyend="837"/>
    <listofallmembers>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a62bc48ff11968b6e45d21c4b49f349fb" prot="private" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a5a50e24dad09b17bb731fa0241b86dd0" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1af914512c3ac196b70a1e838936d67694" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1ae93a407342a218c8453bd8c83c63cafc" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a78a303bc55021bdb106bf1c647c84f83" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a977a25b13d80a869ae7aa738e3bba83e" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>ArgumentTuple</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a61af52051e8a9c7c6004c2f806940d9d" prot="private" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>F</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a30482840e41a2998bf5432e87f5f7f97" prot="private" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>fun_</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1ac5938da1b0208e8cdfca17bf388f4e7c" prot="private" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Init</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1ae7ecd97f24df7e22e6df8cdfc70271f9" prot="private" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Init</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a2f24046afaec08951afb16d66b2d6553" prot="private" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>IsCompatibleFunctor</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a5ef3b75cf7a5baf83885f10aef2950bd" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>IsDoDefault</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a26420b4b57d321235fb50bbf498e95a9" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>operator OnceAction&lt; F &gt;</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1a84c4919e5d1691584bbd37c5aaf48f30" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Perform</name></member>
      <member refid="classtesting_1_1Action_3_01R_07Args_8_8_8_08_4_1aa6848fedb346ec3e57cc6055ca8a0a99" prot="public" virt="non-virtual"><scope>testing::Action&lt; R(Args...)&gt;</scope><name>Result</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
