<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classConstructFromT" kind="class" language="C++" prot="public">
    <compoundname>ConstructFromT</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classConstructFromT_1a4f5d2659c7f75b109341dc44ab39461f" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T ConstructFromT&lt; T &gt;::t_</definition>
        <argsstring></argsstring>
        <name>t_</name>
        <qualifiedname>ConstructFromT::t_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="541" column="5" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="541" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classConstructFromT_1ab51c4af9cd06643dc6c1406cea4e4a33" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ConstructFromT&lt; T &gt;::ConstructFromT</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>ConstructFromT</name>
        <qualifiedname>ConstructFromT::ConstructFromT</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="531" column="12" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="531" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classConstructFromT_1af12cf80ecbf28d8e4bd588b2b57b11b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename std::enable_if&lt; sizeof...(Args) !=1, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ConstructFromT&lt; T &gt;::ConstructFromT</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>ConstructFromT</name>
        <qualifiedname>ConstructFromT::ConstructFromT</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="534" column="3" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="534" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classConstructFromT_1ad3db2a9b424fc87e1f20a080af167419" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConstructFromT&lt; T &gt;::operator==</definition>
        <argsstring>(const ConstructFromT &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>ConstructFromT::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classConstructFromT" kindref="compound">ConstructFromT</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="536" column="8" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="536" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classConstructFromT_1acefe402acf50b4eccdb7344fdbfe48c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; ConstructFromT&lt; T &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <qualifiedname>ConstructFromT::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="538" column="11" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="538" bodyend="538"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" line="529" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc" bodystart="529" bodyend="542"/>
    <listofallmembers>
      <member refid="classConstructFromT_1ab51c4af9cd06643dc6c1406cea4e4a33" prot="public" virt="non-virtual"><scope>ConstructFromT</scope><name>ConstructFromT</name></member>
      <member refid="classConstructFromT_1af12cf80ecbf28d8e4bd588b2b57b11b9" prot="public" virt="non-virtual"><scope>ConstructFromT</scope><name>ConstructFromT</name></member>
      <member refid="classConstructFromT_1acefe402acf50b4eccdb7344fdbfe48c9" prot="public" virt="non-virtual"><scope>ConstructFromT</scope><name>get</name></member>
      <member refid="classConstructFromT_1ad3db2a9b424fc87e1f20a080af167419" prot="public" virt="non-virtual"><scope>ConstructFromT</scope><name>operator==</name></member>
      <member refid="classConstructFromT_1a4f5d2659c7f75b109341dc44ab39461f" prot="private" virt="non-virtual"><scope>ConstructFromT</scope><name>t_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
