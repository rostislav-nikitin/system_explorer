<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classtesting_1_1WithParamInterface" kind="class" language="C++" prot="public">
    <compoundname>testing::WithParamInterface</compoundname>
    <derivedcompoundref refid="classtesting_1_1TestWithParam" prot="public" virt="non-virtual">testing::TestWithParam&lt; int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1TestWithParam" prot="public" virt="non-virtual">testing::TestWithParam&lt; MyEnums &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1TestWithParam" prot="public" virt="non-virtual">testing::TestWithParam&lt; std::string &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1TestWithParam" prot="public" virt="non-virtual">testing::TestWithParam&lt; MyType &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1TestWithParam" prot="public" virt="non-virtual">testing::TestWithParam&lt; bool &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1TestWithParam" prot="public" virt="non-virtual">testing::TestWithParam&lt; T &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtesting_1_1WithParamInterface_1a343febaaebf1f025bda484f841d4fec1" prot="public" static="no">
        <type>T</type>
        <definition>typedef T testing::WithParamInterface&lt; T &gt;::ParamType</definition>
        <argsstring></argsstring>
        <name>ParamType</name>
        <qualifiedname>testing::WithParamInterface::ParamType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1676" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1676" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classtesting_1_1WithParamInterface_1ad809d968c4285b535c5c74718d40ccf0" prot="private" static="yes" mutable="no">
        <type>const ParamType *</type>
        <definition>const T * testing::WithParamInterface&lt; T &gt;::parameter_</definition>
        <argsstring></argsstring>
        <name>parameter_</name>
        <qualifiedname>testing::WithParamInterface::parameter_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1694" column="26" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1694" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtesting_1_1WithParamInterface_1a7543eb7df89f00fff517dba24bc11dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TestClass</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class internal::ParameterizedTestFactory</definition>
        <argsstring></argsstring>
        <name>internal::ParameterizedTestFactory</name>
        <qualifiedname>testing::WithParamInterface::ParameterizedTestFactory</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1ParameterizedTestFactory" kindref="compound">internal::ParameterizedTestFactory</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1698" column="16" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1698" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1WithParamInterface_1a8cd2cc736e557781561c40e9e851977e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual testing::WithParamInterface&lt; T &gt;::~WithParamInterface</definition>
        <argsstring>()=default</argsstring>
        <name>~WithParamInterface</name>
        <qualifiedname>testing::WithParamInterface::~WithParamInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1677" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtesting_1_1WithParamInterface_1a14a1882601b41bd53cdcb36e5e36de3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ParamType &amp;</type>
        <definition>static const ParamType &amp; testing::WithParamInterface&lt; T &gt;::GetParam</definition>
        <argsstring>()</argsstring>
        <name>GetParam</name>
        <qualifiedname>testing::WithParamInterface::GetParam</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1681" column="26" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1681" bodyend="1686"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtesting_1_1WithParamInterface_1a471e12a61e83347675b649465bc5aabc" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::WithParamInterface&lt; T &gt;::SetParam</definition>
        <argsstring>(const ParamType *parameter)</argsstring>
        <name>SetParam</name>
        <qualifiedname>testing::WithParamInterface::SetParam</qualifiedname>
        <param>
          <type>const ParamType *</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1691" column="15" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1691" bodyend="1691"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="26">
        <label>CustomFunctionNamingTest</label>
        <link refid="classCustomFunctionNamingTest"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>CustomFunctorNamingTest</label>
        <link refid="classCustomFunctorNamingTest"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>CustomIntegerNamingTest</label>
        <link refid="classCustomIntegerNamingTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>CustomLambdaNamingTest</label>
        <link refid="classCustomLambdaNamingTest"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>DetectNotInstantiatedTest</label>
        <link refid="classDetectNotInstantiatedTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>EmptyBasenameParamInst</label>
        <link refid="classEmptyBasenameParamInst"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>ExternalGeneratorTest</label>
        <link refid="classExternalGeneratorTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>ExternalInstantiationTest</label>
        <link refid="classExternalInstantiationTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>FailingParamTest</label>
        <link refid="classFailingParamTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>GeneratorEvaluationTest</label>
        <link refid="classGeneratorEvaluationTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>InstantiationInMultipleTranslationUnitsTest</label>
        <link refid="classInstantiationInMultipleTranslationUnitsTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>MacroNamingTest</label>
        <link refid="classMacroNamingTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>MultipleInstantiationTest</label>
        <link refid="classMultipleInstantiationTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>MyEnumTest</label>
        <link refid="classMyEnumTest"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>NamingTest</label>
        <link refid="classNamingTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ParamTest</label>
        <link refid="classParamTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>ParameterizedDeathTest</label>
        <link refid="classParameterizedDeathTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>SeparateInstanceTest</label>
        <link refid="classSeparateInstanceTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>StatefulNamingTest</label>
        <link refid="classStatefulNamingTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>TestGenerationTest</label>
        <link refid="classTestGenerationTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>testing::TestWithParam&lt; MyEnums &gt;</label>
        <link refid="classtesting_1_1TestWithParam"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>testing::TestWithParam&lt; MyType &gt;</label>
        <link refid="classtesting_1_1TestWithParam"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>testing::TestWithParam&lt; bool &gt;</label>
        <link refid="classtesting_1_1TestWithParam"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>testing::TestWithParam&lt; int &gt;</label>
        <link refid="classtesting_1_1TestWithParam"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>testing::TestWithParam&lt; std::string &gt;</label>
        <link refid="classtesting_1_1TestWithParam"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>ValueParamTest</label>
        <link refid="classValueParamTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>testing::CodeLocationForTESTP</label>
        <link refid="classtesting_1_1CodeLocationForTESTP"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>testing::TestWithParam&lt; T &gt;</label>
        <link refid="classtesting_1_1TestWithParam"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>testing::WithParamInterface&lt; T &gt;</label>
        <link refid="classtesting_1_1WithParamInterface"/>
      </node>
      <node id="31">
        <label>testing::gmock_matchers_test::GTestMatcherTestP</label>
        <link refid="classtesting_1_1gmock__matchers__test_1_1GTestMatcherTestP"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>works_here::NotInstantiatedTest</label>
        <link refid="classworks__here_1_1NotInstantiatedTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>works_here::NotUsedTest</label>
        <link refid="classworks__here_1_1NotUsedTest"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1674" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1674" bodyend="1699"/>
    <listofallmembers>
      <member refid="classtesting_1_1WithParamInterface_1a14a1882601b41bd53cdcb36e5e36de3d" prot="public" virt="non-virtual"><scope>testing::WithParamInterface</scope><name>GetParam</name></member>
      <member refid="classtesting_1_1WithParamInterface_1a7543eb7df89f00fff517dba24bc11dd5" prot="public" virt="non-virtual"><scope>testing::WithParamInterface</scope><name>internal::ParameterizedTestFactory</name></member>
      <member refid="classtesting_1_1WithParamInterface_1ad809d968c4285b535c5c74718d40ccf0" prot="private" virt="non-virtual"><scope>testing::WithParamInterface</scope><name>parameter_</name></member>
      <member refid="classtesting_1_1WithParamInterface_1a343febaaebf1f025bda484f841d4fec1" prot="public" virt="non-virtual"><scope>testing::WithParamInterface</scope><name>ParamType</name></member>
      <member refid="classtesting_1_1WithParamInterface_1a471e12a61e83347675b649465bc5aabc" prot="private" virt="non-virtual"><scope>testing::WithParamInterface</scope><name>SetParam</name></member>
      <member refid="classtesting_1_1WithParamInterface_1a8cd2cc736e557781561c40e9e851977e" prot="public" virt="virtual"><scope>testing::WithParamInterface</scope><name>~WithParamInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
