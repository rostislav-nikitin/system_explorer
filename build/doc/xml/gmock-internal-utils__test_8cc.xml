<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock-internal-utils__test_8cc" kind="file" language="C++">
    <compoundname>gmock-internal-utils_test.cc</compoundname>
    <includes refid="gmock-internal-utils_8h" local="yes">gmock/internal/gmock-internal-utils.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">vector</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gmock-port_8h" local="yes">gmock/internal/gmock-port.h</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-internal-inl_8h" local="yes">src/gtest-internal-inl.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="62">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
      </node>
      <node id="75">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="13">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="2">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/test/gmock-internal-utils_test.cc</label>
        <link refid="gmock-internal-utils__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="25">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="51">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="39">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="14">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>algorithm</label>
      </node>
      <node id="9">
        <label>assert.h</label>
      </node>
      <node id="41">
        <label>atomic</label>
      </node>
      <node id="55">
        <label>cassert</label>
      </node>
      <node id="18">
        <label>cerrno</label>
      </node>
      <node id="71">
        <label>cmath</label>
      </node>
      <node id="32">
        <label>cstddef</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="15">
        <label>ctype.h</label>
      </node>
      <node id="63">
        <label>errno.h</label>
      </node>
      <node id="72">
        <label>exception</label>
      </node>
      <node id="46">
        <label>float.h</label>
      </node>
      <node id="42">
        <label>functional</label>
      </node>
      <node id="73">
        <label>initializer_list</label>
      </node>
      <node id="33">
        <label>iomanip</label>
      </node>
      <node id="74">
        <label>ios</label>
      </node>
      <node id="57">
        <label>iosfwd</label>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="53">
        <label>iterator</label>
      </node>
      <node id="19">
        <label>limits</label>
      </node>
      <node id="67">
        <label>limits.h</label>
      </node>
      <node id="20">
        <label>locale</label>
      </node>
      <node id="47">
        <label>map</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="4">
        <label>ostream</label>
      </node>
      <node id="29">
        <label>regex.h</label>
      </node>
      <node id="34">
        <label>set</label>
      </node>
      <node id="35">
        <label>sstream</label>
      </node>
      <node id="16">
        <label>stddef.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="10">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="17">
        <label>string.h</label>
      </node>
      <node id="27">
        <label>strings.h</label>
      </node>
      <node id="23">
        <label>sys/stat.h</label>
      </node>
      <node id="24">
        <label>sys/types.h</label>
      </node>
      <node id="22">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="30">
        <label>typeinfo</label>
      </node>
      <node id="28">
        <label>unistd.h</label>
      </node>
      <node id="44">
        <label>utility</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceproto2">proto2</innernamespace>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gmock-internal-utils__test_8cc_1a83bd232fd1077579fada92c31bb7469f" prot="public" static="no">
        <name>GTEST_IMPLEMENTATION_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-internal-utils_test.cc" line="56" column="9" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-internal-utils_test.cc" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-internal-utils__test_8cc_1a4e0ed0476ea1655f30a90866e18ad04f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string original_verbose_</definition>
        <argsstring></argsstring>
        <name>original_verbose_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-internal-utils_test.cc" line="374" column="15" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-internal-utils_test.cc" bodystart="374" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>internal<sp/>utilities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-internal-utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indicates<sp/>that<sp/>this<sp/>translation<sp/>unit<sp/>is<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.<sp/><sp/>It<sp/>must<sp/>come<sp/>before<sp/>gtest-internal-inl.h<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included,<sp/>or<sp/>there<sp/>will<sp/>be<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>This<sp/>trick<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prevent<sp/>a<sp/>user<sp/>from<sp/>accidentally<sp/>including<sp/>gtest-internal-inl.h<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPLEMENTATION_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/gtest-internal-inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_CYGWIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>ssize_t.<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">proto2<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>proto2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">TEST(JoinAsKeyValueTupleTest,<sp/>JoinsEmptyTuple)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>JoinAsKeyValueTuple({},<sp/>Strings()));</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">TEST(JoinAsKeyValueTupleTest,<sp/>JoinsOneTuple)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(a:<sp/>1)&quot;</highlight><highlight class="normal">,<sp/>JoinAsKeyValueTuple({</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">TEST(JoinAsKeyValueTupleTest,<sp/>JoinsTwoTuple)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(a:<sp/>1,<sp/>b:<sp/>2)&quot;</highlight><highlight class="normal">,<sp/>JoinAsKeyValueTuple({</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">TEST(JoinAsKeyValueTupleTest,<sp/>JoinsTenTuple)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(a:<sp/>1,<sp/>b:<sp/>2,<sp/>c:<sp/>3,<sp/>d:<sp/>4,<sp/>e:<sp/>5,<sp/>f:<sp/>6,<sp/>g:<sp/>7,<sp/>h:<sp/>8,<sp/>i:<sp/>9,<sp/>j:<sp/>10)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>JoinAsKeyValueTuple({</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">TEST(ConvertIdentifierNameToWordsTest,<sp/>WorksWhenNameContainsNoWord)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;__&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">TEST(ConvertIdentifierNameToWordsTest,<sp/>WorksWhenNameContainsDigits)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;2_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;34&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_34_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;34<sp/>56&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_34_56&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">TEST(ConvertIdentifierNameToWordsTest,<sp/>WorksWhenNameContainsCamelCaseWords)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;a<sp/>big<sp/>word&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;ABigWord&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo<sp/>bar&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;FooBar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;Foo_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo<sp/>bar&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_Foo_Bar_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo<sp/>and<sp/>bar&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_Foo__And_Bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">TEST(ConvertIdentifierNameToWordsTest,<sp/>WorksWhenNameContains_SeparatedWords)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo<sp/>bar&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;foo_bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_foo_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo<sp/>bar&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_foo_bar_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo<sp/>and<sp/>bar&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_foo__and_bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">TEST(ConvertIdentifierNameToWordsTest,<sp/>WorksWhenNameIsMixture)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo<sp/>bar<sp/>123&quot;</highlight><highlight class="normal">,<sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;Foo_bar123&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;chapter<sp/>11<sp/>section<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConvertIdentifierNameToWords(</highlight><highlight class="stringliteral">&quot;_Chapter11Section_1_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">TEST(GetRawPointerTest,<sp/>WorksForSmartPointers)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>raw_p1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>char(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;const<sp/>char&gt;<sp/>p1(raw_p1);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>EXPECT_EQ(raw_p1,<sp/>GetRawPointer(p1));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>raw_p2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>double(2.5);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;double&gt;<sp/>p2(raw_p2);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>EXPECT_EQ(raw_p2,<sp/>GetRawPointer(p2));</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">TEST(GetRawPointerTest,<sp/>WorksForRawPointers)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>==<sp/>GetRawPointer(p));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>GetRawPointer(&amp;n));</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">TEST(GetRawPointerTest,<sp/>WorksForStdReferenceWrapper)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>GetRawPointer(std::ref(n)));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>GetRawPointer(std::cref(n)));</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>KindOf&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBase" kindref="compound">Base</ref><sp/>{};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Derived<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref><sp/>{};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">TEST(KindOfTest,<sp/><ref refid="structBool" kindref="compound">Bool</ref>)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kBool,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">TEST(KindOfTest,<sp/>Integer)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_LINUX)<sp/>||<sp/>defined(GTEST_OS_MAC)<sp/>||<sp/>defined(GTEST_OS_CYGWIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ssize_t<sp/>is<sp/>not<sp/>defined<sp/>on<sp/>Windows<sp/>and<sp/>possibly<sp/>some<sp/>other<sp/>OSes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kInteger,<sp/>GMOCK_KIND_OF_(ssize_t));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">TEST(KindOfTest,<sp/>FloatingPoint)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kFloatingPoint,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kFloatingPoint,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kFloatingPoint,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">TEST(KindOfTest,<sp/>Other)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kOther,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kOther,<sp/>GMOCK_KIND_OF_(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kOther,<sp/>GMOCK_KIND_OF_(<ref refid="classBase" kindref="compound">Base</ref>));<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>LosslessArithmeticConvertible&lt;T,<sp/>U&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>BoolToBool)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;bool,<sp/>bool&gt;::value));</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>BoolToInteger)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;bool,<sp/>char&gt;::value));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;bool,<sp/>int&gt;::value));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(LosslessArithmeticConvertible&lt;bool,<sp/>unsigned<sp/>long&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>BoolToFloatingPoint)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;bool,<sp/>float&gt;::value));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;bool,<sp/>double&gt;::value));</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>IntegerToBool)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;unsigned<sp/>char,<sp/>bool&gt;::value));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;int,<sp/>bool&gt;::value));</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>IntegerToInteger)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unsigned<sp/>=&gt;<sp/>larger<sp/>signed<sp/>is<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;unsigned<sp/>char,<sp/>int&gt;::value));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unsigned<sp/>=&gt;<sp/>larger<sp/>unsigned<sp/>is<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signed<sp/>=&gt;<sp/>unsigned<sp/>is<sp/>not<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(LosslessArithmeticConvertible&lt;short,<sp/>uint64_t&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>size<sp/>and<sp/>same<sp/>signedness:<sp/>fine<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(LosslessArithmeticConvertible&lt;unsigned<sp/>char,<sp/>unsigned<sp/>char&gt;::value));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;int,<sp/>int&gt;::value));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;wchar_t,<sp/>wchar_t&gt;::value));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>size,<sp/>different<sp/>signedness:<sp/>not<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(LosslessArithmeticConvertible&lt;unsigned<sp/>char,<sp/>signed<sp/>char&gt;::value));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;int,<sp/>unsigned<sp/>int&gt;::value));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;uint64_t,<sp/>int64_t&gt;::value));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Larger<sp/>size<sp/>=&gt;<sp/>smaller<sp/>size<sp/>is<sp/>not<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;long,<sp/>char&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;int,<sp/>signed<sp/>char&gt;::value));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;int64_t,<sp/>unsigned<sp/>int&gt;::value));</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>IntegerToFloatingPoint)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Integers<sp/>cannot<sp/>be<sp/>losslessly<sp/>converted<sp/>to<sp/>floating-points,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>format<sp/>of<sp/>the<sp/>latter<sp/>is<sp/>implementation-defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;char,<sp/>float&gt;::value));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;int,<sp/>double&gt;::value));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(LosslessArithmeticConvertible&lt;short,<sp/>long<sp/>double&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>FloatingPointToBool)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;float,<sp/>bool&gt;::value));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;double,<sp/>bool&gt;::value));</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>FloatingPointToInteger)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;float,<sp/>long&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;double,<sp/>int64_t&gt;::value));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;long<sp/>double,<sp/>int&gt;::value));</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">TEST(LosslessArithmeticConvertibleTest,<sp/>FloatingPointToFloatingPoint)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Smaller<sp/>size<sp/>=&gt;<sp/>larger<sp/>size<sp/>is<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;float,<sp/>double&gt;::value));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;float,<sp/>long<sp/>double&gt;::value));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;double,<sp/>long<sp/>double&gt;::value));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>size:<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;float,<sp/>float&gt;::value));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;double,<sp/>double&gt;::value));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Larger<sp/>size<sp/>=&gt;<sp/>smaller<sp/>size<sp/>is<sp/>not<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;double,<sp/>float&gt;::value));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>GTEST_INTENTIONAL_CONST_COND_PUSH_()</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>if<sp/>(sizeof(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>==<sp/>sizeof(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_INTENTIONAL_CONST_COND_POP_()</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>some<sp/>implementations<sp/>(e.g.<sp/>MSVC),<sp/>double<sp/>and<sp/>long<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>same<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE((LosslessArithmeticConvertible&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;::value));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE((LosslessArithmeticConvertible&lt;long<sp/>double,<sp/>double&gt;::value));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>TupleMatches()<sp/>template<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">TEST(TupleMatchesTest,<sp/>WorksForSize0)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>std::tuple&lt;&gt;<sp/>matchers;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>std::tuple&lt;&gt;<sp/>values;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(TupleMatches(matchers,<sp/>values));</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">TEST(TupleMatchesTest,<sp/>WorksForSize1)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>std::tuple&lt;Matcher&lt;int&gt;&gt;<sp/>matchers(Eq(1));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>std::tuple&lt;int&gt;<sp/>values1(1),<sp/>values2(2);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(TupleMatches(matchers,<sp/>values1));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(TupleMatches(matchers,<sp/>values2));</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">TEST(TupleMatchesTest,<sp/>WorksForSize2)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>std::tuple&lt;Matcher&lt;int&gt;,<sp/>Matcher&lt;char&gt;&gt;<sp/>matchers(Eq(1),<sp/>Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>std::tuple&lt;int,<sp/>char&gt;<sp/>values1(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),<sp/>values2(1,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),<sp/>values3(2,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values4(2,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(TupleMatches(matchers,<sp/>values1));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(TupleMatches(matchers,<sp/>values2));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(TupleMatches(matchers,<sp/>values3));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(TupleMatches(matchers,<sp/>values4));</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">TEST(TupleMatchesTest,<sp/>WorksForSize5)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>std::tuple&lt;Matcher&lt;int&gt;,<sp/>Matcher&lt;char&gt;,<sp/>Matcher&lt;bool&gt;,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matcher&lt;long&gt;,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matcher&lt;std::string&gt;&gt;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchers(Eq(1),<sp/>Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),<sp/>Eq(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>Eq(2L),<sp/>Eq(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>std::tuple&lt;int,<sp/>char,<sp/>bool,<sp/>long,<sp/>std::string&gt;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values1(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>2L,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">),<sp/>values2(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>2L,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values3(2,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>2L,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(TupleMatches(matchers,<sp/>values1));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(TupleMatches(matchers,<sp/>values2));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(TupleMatches(matchers,<sp/>values3));</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Assert(true,<sp/>...)<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">TEST(AssertTest,<sp/>SucceedsOnTrue)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>Assert(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>Assert(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>succeed<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Assert(false,<sp/>...)<sp/>generates<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">TEST(AssertTest,<sp/>FailsFatallyOnFalse)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>fail.&quot;</highlight><highlight class="normal">);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED({<sp/>Assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Expect(true,<sp/>...)<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">TEST(ExpectTest,<sp/>SucceedsOnTrue)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>Expect(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>Expect(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>succeed<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Expect(false,<sp/>...)<sp/>generates<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">TEST(ExpectTest,<sp/>FailsNonfatallyOnFalse)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expect(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>fail.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expect(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expectation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>LogIsVisible().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LogIsVisibleTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">::testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>original_verbose_<sp/>=<sp/>GMOCK_FLAG_GET(verbose);<sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>GMOCK_FLAG_SET(verbose,<sp/>original_verbose_);<sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>std::string<sp/>original_verbose_;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">};</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">TEST_F(LogIsVisibleTest,<sp/>AlwaysReturnsTrueIfVerbosityIsInfo)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kInfoVerbosity);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(LogIsVisible(kInfo));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(LogIsVisible(kWarning));</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">TEST_F(LogIsVisibleTest,<sp/>AlwaysReturnsFalseIfVerbosityIsError)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kErrorVerbosity);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(LogIsVisible(kInfo));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(LogIsVisible(kWarning));</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">TEST_F(LogIsVisibleTest,<sp/>WorksWhenVerbosityIsWarning)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kWarningVerbosity);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(LogIsVisible(kInfo));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(LogIsVisible(kWarning));</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>Log()<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>Log()<sp/>behaves<sp/>correctly<sp/>for<sp/>the<sp/>given<sp/>verbosity<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>log<sp/>severity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLogWithSeverity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>verbosity,<sp/>LogSeverity<sp/>severity,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>old_flag<sp/>=<sp/>GMOCK_FLAG_GET(verbose);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>verbosity);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>Log(severity,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>log.\n&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_print)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCapturedStdout().c_str(),</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainsRegex(severity<sp/>==<sp/>kWarning</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;^\nGMOCK<sp/>WARNING:\nTest<sp/>log\\.\nStack<sp/>trace:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;^\nTest<sp/>log\\.\nStack<sp/>trace:\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStdout().c_str());</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>old_flag);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>the<sp/>stack_frames_to_skip<sp/>parameter<sp/>is<sp/>negative,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Log()<sp/>doesn&apos;t<sp/>include<sp/>the<sp/>stack<sp/>trace<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">TEST(LogTest,<sp/>NoStackTraceWhenStackFramesToSkipIsNegative)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>saved_flag<sp/>=<sp/>GMOCK_FLAG_GET(verbose);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kInfoVerbosity);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>Log(kInfo,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>log.\n&quot;</highlight><highlight class="normal">,<sp/>-1);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\nTest<sp/>log.\n&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStdout().c_str());</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>saved_flag);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MockStackTraceGetter<sp/>:<sp/><ref refid="classtesting_1_1internal_1_1OsStackTraceGetterInterface" kindref="compound">testing::internal::OsStackTraceGetterInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>std::string<sp/>CurrentStackTrace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classtesting_1_1Message" kindref="compound">testing::Message</ref>()<sp/>&lt;&lt;<sp/>max_depth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>skip_count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetString();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UponLeavingGTest()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>in<sp/>opt<sp/>mode,<sp/>a<sp/>positive<sp/>stack_frames_to_skip<sp/>argument<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>treated<sp/>as<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">TEST(LogTest,<sp/>NoSkippingStackFrameInOptMode)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>MockStackTraceGetter*<sp/>mock_os_stack_trace_getter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockStackTraceGetter;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>GetUnitTestImpl()-&gt;set_os_stack_trace_getter(mock_os_stack_trace_getter);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>Log(kWarning,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>log.\n&quot;</highlight><highlight class="normal">,<sp/>100);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>log<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_trace<sp/>=</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classtesting_1_1Message" kindref="compound">testing::Message</ref>()<sp/>&lt;&lt;<sp/>GTEST_FLAG_GET(stack_trace_depth)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetString();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_message<sp/>=</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nGMOCK<sp/>WARNING:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>log.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>trace:\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_trace;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>EXPECT_THAT(log,<sp/>HasSubstr(expected_message));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count<sp/>=<sp/>atoi(log.substr(expected_message.size()).c_str());</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>opt<sp/>mode,<sp/>no<sp/>stack<sp/>frame<sp/>should<sp/>be<sp/>skipped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_skip_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>dbg<sp/>mode,<sp/>the<sp/>stack<sp/>frames<sp/>should<sp/>be<sp/>skipped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_skip_count<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>each<sp/>inner<sp/>implementation<sp/>layer<sp/>will<sp/>+1<sp/>the<sp/>number<sp/>to<sp/>remove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>itself<sp/>from<sp/>the<sp/>trace.<sp/>This<sp/>means<sp/>that<sp/>the<sp/>value<sp/>is<sp/>a<sp/>little<sp/>higher<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expected,<sp/>but<sp/>close<sp/>enough.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>EXPECT_THAT(skip_count,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllOf(Ge(expected_skip_count),<sp/>Le(expected_skip_count<sp/>+<sp/>10)));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>default<sp/>OS<sp/>stack<sp/>trace<sp/>getter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>GetUnitTestImpl()-&gt;set_os_stack_trace_getter(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>all<sp/>logs<sp/>are<sp/>printed<sp/>when<sp/>the<sp/>value<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>&quot;info&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">TEST(LogTest,<sp/>AllLogsArePrintedWhenVerbosityIsInfo)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>TestLogWithSeverity(kInfoVerbosity,<sp/>kInfo,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>TestLogWithSeverity(kInfoVerbosity,<sp/>kWarning,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>only<sp/>warnings<sp/>are<sp/>printed<sp/>when<sp/>the<sp/>value<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>&quot;warning&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">TEST(LogTest,<sp/>OnlyWarningsArePrintedWhenVerbosityIsWarning)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>TestLogWithSeverity(kWarningVerbosity,<sp/>kInfo,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>TestLogWithSeverity(kWarningVerbosity,<sp/>kWarning,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>no<sp/>logs<sp/>are<sp/>printed<sp/>when<sp/>the<sp/>value<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>&quot;error&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">TEST(LogTest,<sp/>NoLogsArePrintedWhenVerbosityIsError)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>TestLogWithSeverity(kErrorVerbosity,<sp/>kInfo,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>TestLogWithSeverity(kErrorVerbosity,<sp/>kWarning,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>only<sp/>warnings<sp/>are<sp/>printed<sp/>when<sp/>the<sp/>value<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal">TEST(LogTest,<sp/>OnlyWarningsArePrintedWhenVerbosityIsInvalid)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>TestLogWithSeverity(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">,<sp/>kInfo,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>TestLogWithSeverity(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">,<sp/>kWarning,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>Log()<sp/>behaves<sp/>correctly<sp/>for<sp/>the<sp/>given<sp/>verbosity<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>log<sp/>severity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">std::string<sp/>GrabOutput(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*logger)(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>verbosity)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>saved_flag<sp/>=<sp/>GMOCK_FLAG_GET(verbose);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>verbosity);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>logger();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>saved_flag);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DummyMock<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(TestMethod,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TestMethodArg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy));</highlight></codeline>
<codeline lineno="520"><highlight class="normal">};</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectCallLogger()<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>DummyMock<sp/>mock;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>TestMethod());</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>mock.TestMethod();</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>EXPECT_CALL<sp/>logs<sp/>if<sp/>the<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>&quot;info&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">TEST(ExpectCallTest,<sp/>LogsWhenVerbosityIsInfo)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::string(GrabOutput(ExpectCallLogger,<sp/>kInfoVerbosity)),</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;EXPECT_CALL(mock,<sp/>TestMethod())&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>EXPECT_CALL<sp/>doesn&apos;t<sp/>log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>&quot;warning&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">TEST(ExpectCallTest,<sp/>DoesNotLogWhenVerbosityIsWarning)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GrabOutput(ExpectCallLogger,<sp/>kWarningVerbosity).c_str());</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>EXPECT_CALL<sp/>doesn&apos;t<sp/>log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>&quot;error&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">TEST(ExpectCallTest,<sp/>DoesNotLogWhenVerbosityIsError)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GrabOutput(ExpectCallLogger,<sp/>kErrorVerbosity).c_str());</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnCallLogger()<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>DummyMock<sp/>mock;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>TestMethod());</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>ON_CALL<sp/>logs<sp/>if<sp/>the<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>&quot;info&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">TEST(OnCallTest,<sp/>LogsWhenVerbosityIsInfo)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::string(GrabOutput(OnCallLogger,<sp/>kInfoVerbosity)),</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;ON_CALL(mock,<sp/>TestMethod())&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>ON_CALL<sp/>doesn&apos;t<sp/>log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>&quot;warning&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">TEST(OnCallTest,<sp/>DoesNotLogWhenVerbosityIsWarning)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GrabOutput(OnCallLogger,<sp/>kWarningVerbosity).c_str());</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>ON_CALL<sp/>doesn&apos;t<sp/>log<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>--gmock_verbose<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>&quot;error&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">TEST(OnCallTest,<sp/>DoesNotLogWhenVerbosityIsError)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GrabOutput(OnCallLogger,<sp/>kErrorVerbosity).c_str());</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnCallAnyArgumentLogger()<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>DummyMock<sp/>mock;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>TestMethodArg(_));</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>ON_CALL<sp/>prints<sp/>provided<sp/>_<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">TEST(OnCallTest,<sp/>LogsAnythingArgument)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>EXPECT_THAT(std::string(GrabOutput(OnCallAnyArgumentLogger,<sp/>kInfoVerbosity)),</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;ON_CALL(mock,<sp/>TestMethodArg(_)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>StlContainerView.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">TEST(StlContainerViewTest,<sp/>WorksForStlContainer)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;std::vector&lt;int&gt;,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;std::vector&lt;int&gt;&gt;::type&gt;();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;const<sp/>std::vector&lt;double&gt;&amp;,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;std::vector&lt;double&gt;&gt;::const_reference&gt;();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;char&gt;<sp/>Chars;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>Chars<sp/>v1;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Chars&amp;<sp/>v2(StlContainerView&lt;Chars&gt;::ConstReference(v1));</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;v1,<sp/>&amp;v2);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>v1.push_back(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>Chars<sp/>v3<sp/>=<sp/>StlContainerView&lt;Chars&gt;::Copy(v1);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>EXPECT_THAT(v3,<sp/>Eq(v3));</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">TEST(StlContainerViewTest,<sp/>WorksForStaticNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;NativeArray&lt;int&gt;,<sp/>StlContainerView&lt;int[3]&gt;::type&gt;();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;NativeArray&lt;double&gt;,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;const<sp/>double[4]&gt;::type&gt;();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;NativeArray&lt;char[3]&gt;,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;const<sp/>char[2][3]&gt;::type&gt;();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;const<sp/>NativeArray&lt;int&gt;,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;int[2]&gt;::const_reference&gt;();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1[3]<sp/>=<sp/>{0,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>NativeArray&lt;int&gt;<sp/>a2<sp/>=<sp/>StlContainerView&lt;int[3]&gt;::ConstReference(a1);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3U,<sp/>a2.size());</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a1,<sp/>a2.begin());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NativeArray&lt;int&gt;<sp/>a3<sp/>=<sp/>StlContainerView&lt;int[3]&gt;::Copy(a1);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>ASSERT_EQ(3U,<sp/>a3.size());</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a3.begin()[0]);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a3.begin()[1]);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>a3.begin()[2]);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>a1<sp/>and<sp/>a3<sp/>aren&apos;t<sp/>aliases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>a1[0]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a3.begin()[0]);</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">TEST(StlContainerViewTest,<sp/>WorksForDynamicNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;NativeArray&lt;int&gt;,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;std::tuple&lt;const<sp/>int*,<sp/>size_t&gt;&gt;::type&gt;();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NativeArray&lt;double&gt;,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;std::tuple&lt;std::shared_ptr&lt;double&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;&gt;::type&gt;();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NativeArray&lt;int&gt;,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;std::tuple&lt;const<sp/>int*,<sp/>int&gt;&gt;::const_reference&gt;();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1[3]<sp/>=<sp/>{0,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>NativeArray&lt;int&gt;<sp/>a2<sp/>=</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StlContainerView&lt;std::tuple&lt;const<sp/>int*,<sp/>int&gt;&gt;::ConstReference(</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(p1,<sp/>3));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3U,<sp/>a2.size());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a1,<sp/>a2.begin());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NativeArray&lt;int&gt;<sp/>a3<sp/>=<sp/>StlContainerView&lt;std::tuple&lt;int*,<sp/>size_t&gt;&gt;::Copy(</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a1),<sp/>3));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>ASSERT_EQ(3U,<sp/>a3.size());</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a3.begin()[0]);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a3.begin()[1]);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>a3.begin()[2]);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>a1<sp/>and<sp/>a3<sp/>aren&apos;t<sp/>aliases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>a1[0]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a3.begin()[0]);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>Function<sp/>template<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal">TEST(FunctionTest,<sp/>Nullary)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Function&lt;int()&gt;<sp/>F;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0u,<sp/>F::ArgumentCount);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;int,<sp/>F::Result&gt;::value));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;std::tuple&lt;&gt;,<sp/>F::ArgumentTuple&gt;::value));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;std::tuple&lt;&gt;,<sp/>F::ArgumentMatcherTuple&gt;::value));</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(),<sp/>F::MakeResultVoid&gt;::value));</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;IgnoredValue(),<sp/>F::MakeResultIgnoredValue&gt;::value));</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">TEST(FunctionTest,<sp/>Unary)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Function&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;<sp/>F;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1u,<sp/>F::ArgumentCount);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;int,<sp/>F::Result&gt;::value));</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>F::Arg&lt;0&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;std::tuple&lt;bool&gt;,<sp/>F::ArgumentTuple&gt;::value));</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;std::tuple&lt;Matcher&lt;bool&gt;&gt;,<sp/>F::ArgumentMatcherTuple&gt;::value));</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),<sp/>F::MakeResultVoid&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;IgnoredValue(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::MakeResultIgnoredValue&gt;::value));</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal">TEST(FunctionTest,<sp/>Binary)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Function&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;)&gt;<sp/>F;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2u,<sp/>F::ArgumentCount);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;int,<sp/>F::Result&gt;::value));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>F::Arg&lt;0&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;,<sp/>F::Arg&lt;1&gt;::type&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;std::tuple&lt;bool,<sp/>const<sp/>long&amp;&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::ArgumentTuple&gt;::value));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;std::tuple&lt;Matcher&lt;bool&gt;,<sp/>Matcher&lt;const<sp/>long&amp;&gt;&gt;,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::ArgumentMatcherTuple&gt;::value));</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::MakeResultVoid&gt;::value));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;IgnoredValue(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::MakeResultIgnoredValue&gt;::value));</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">TEST(FunctionTest,<sp/>LongArgumentList)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Function&lt;char(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;)&gt;<sp/>F;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5u,<sp/>F::ArgumentCount);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;char,<sp/>F::Result&gt;::value));</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>F::Arg&lt;0&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>F::Arg&lt;1&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>F::Arg&lt;2&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/>F::Arg&lt;3&gt;::type&gt;::value));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((std::is_same&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;,<sp/>F::Arg&lt;4&gt;::type&gt;::value));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;std::tuple&lt;bool,<sp/>int,<sp/>char*,<sp/>int&amp;,<sp/>const<sp/>long&amp;&gt;,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::ArgumentTuple&gt;::value));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;Matcher&lt;bool&gt;,<sp/>Matcher&lt;int&gt;,<sp/>Matcher&lt;char*&gt;,<sp/>Matcher&lt;int&amp;&gt;,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matcher&lt;const<sp/>long&amp;&gt;&gt;,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::ArgumentMatcherTuple&gt;::value));</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::MakeResultVoid&gt;::value));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;IgnoredValue(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F::MakeResultIgnoredValue&gt;::value));</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">TEST(Base64Unescape,<sp/>InvalidString)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>std::string<sp/>unescaped;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Base64Unescape(</highlight><highlight class="stringliteral">&quot;(invalid)&quot;</highlight><highlight class="normal">,<sp/>&amp;unescaped));</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">TEST(Base64Unescape,<sp/>ShortString)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>std::string<sp/>unescaped;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Base64Unescape(</highlight><highlight class="stringliteral">&quot;SGVsbG8gd29ybGQh&quot;</highlight><highlight class="normal">,<sp/>&amp;unescaped));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>unescaped);</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal">TEST(Base64Unescape,<sp/>ShortStringWithPadding)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>std::string<sp/>unescaped;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Base64Unescape(</highlight><highlight class="stringliteral">&quot;SGVsbG8gd29ybGQ=&quot;</highlight><highlight class="normal">,<sp/>&amp;unescaped));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello<sp/>world&quot;</highlight><highlight class="normal">,<sp/>unescaped);</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal">TEST(Base64Unescape,<sp/>ShortStringWithoutPadding)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>std::string<sp/>unescaped;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Base64Unescape(</highlight><highlight class="stringliteral">&quot;SGVsbG8gd29ybGQ&quot;</highlight><highlight class="normal">,<sp/>&amp;unescaped));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello<sp/>world&quot;</highlight><highlight class="normal">,<sp/>unescaped);</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">TEST(Base64Unescape,<sp/>LongStringWithWhiteSpaces)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>std::string<sp/>escaped<sp/>=</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz</highlight></codeline>
<codeline lineno="750"><highlight class="stringliteral"><sp/><sp/>IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg</highlight></codeline>
<codeline lineno="751"><highlight class="stringliteral"><sp/><sp/>dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu</highlight></codeline>
<codeline lineno="752"><highlight class="stringliteral"><sp/><sp/>dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo</highlight></codeline>
<codeline lineno="753"><highlight class="stringliteral"><sp/><sp/>ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=)&quot;;</highlight></codeline>
<codeline lineno="754"><highlight class="stringliteral"><sp/><sp/>std::string<sp/>expected<sp/>=</highlight></codeline>
<codeline lineno="755"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Man<sp/>is<sp/>distinguished,<sp/>not<sp/>only<sp/>by<sp/>his<sp/>reason,<sp/>but<sp/>by<sp/>this<sp/>singular<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;passion<sp/>from<sp/>other<sp/>animals,<sp/>which<sp/>is<sp/>a<sp/>lust<sp/>of<sp/>the<sp/>mind,<sp/>that<sp/>by<sp/>a<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;perseverance<sp/>of<sp/>delight<sp/>in<sp/>the<sp/>continued<sp/>and<sp/>indefatigable<sp/>generation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>knowledge,<sp/>exceeds<sp/>the<sp/>short<sp/>vehemence<sp/>of<sp/>any<sp/>carnal<sp/>pleasure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>std::string<sp/>unescaped;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Base64Unescape(escaped,<sp/>&amp;unescaped));</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected,<sp/>unescaped);</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-internal-utils_test.cc"/>
  </compounddef>
</doxygen>
