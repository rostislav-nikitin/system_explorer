<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="googletest-death-test-test_8cc" kind="file" language="C++">
    <compoundname>googletest-death-test-test.cc</compoundname>
    <includes refid="gtest-death-test_8h" local="yes">gtest/gtest-death-test.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-filepath_8h" local="yes">gtest/internal/gtest-filepath.h</includes>
    <incdepgraph>
      <node id="47">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="31">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="44">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="3">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="19">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/googletest-death-test-test.cc</label>
        <link refid="googletest-death-test-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>atomic</label>
      </node>
      <node id="51">
        <label>cassert</label>
      </node>
      <node id="24">
        <label>cerrno</label>
      </node>
      <node id="46">
        <label>cstddef</label>
      </node>
      <node id="25">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>ctype.h</label>
      </node>
      <node id="36">
        <label>float.h</label>
      </node>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="37">
        <label>iomanip</label>
      </node>
      <node id="53">
        <label>iosfwd</label>
      </node>
      <node id="26">
        <label>iostream</label>
      </node>
      <node id="49">
        <label>iterator</label>
      </node>
      <node id="27">
        <label>limits</label>
      </node>
      <node id="28">
        <label>locale</label>
      </node>
      <node id="38">
        <label>map</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="10">
        <label>ostream</label>
      </node>
      <node id="35">
        <label>regex.h</label>
      </node>
      <node id="39">
        <label>set</label>
      </node>
      <node id="13">
        <label>sstream</label>
      </node>
      <node id="21">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="22">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="23">
        <label>string.h</label>
      </node>
      <node id="33">
        <label>strings.h</label>
      </node>
      <node id="29">
        <label>sys/stat.h</label>
      </node>
      <node id="30">
        <label>sys/types.h</label>
      </node>
      <node id="14">
        <label>tuple</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>typeinfo</label>
      </node>
      <node id="34">
        <label>unistd.h</label>
      </node>
      <node id="16">
        <label>utility</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-death-test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-filepath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::AlwaysFalse;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::AlwaysTrue;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>chdir().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>O_BINARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>waitpid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/gtest-internal-inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">posix<sp/>=<sp/>::testing::internal::posix;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ContainsRegex;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Matcher" kindref="compound">testing::Matcher</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Message" kindref="compound">testing::Message</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::DeathTest;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::DeathTestFactory;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::FilePath;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetLastErrnoDescription;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetUnitTestImpl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::InDeathTestChild;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ParseNaturalNumber;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>class<sp/>whose<sp/>objects<sp/>replace<sp/>the<sp/>death<sp/>test<sp/>factory<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>single<sp/>UnitTest<sp/>object<sp/>during<sp/>their<sp/>lifetimes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReplaceDeathTestFactory<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ReplaceDeathTestFactory(DeathTestFactory*<sp/>new_factory)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>unit_test_impl_(GetUnitTestImpl())<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>old_factory_<sp/>=<sp/>unit_test_impl_-&gt;death_test_factory_.release();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>unit_test_impl_-&gt;death_test_factory_.reset(new_factory);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>~ReplaceDeathTestFactory()<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>unit_test_impl_-&gt;death_test_factory_.release();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>unit_test_impl_-&gt;death_test_factory_.reset(old_factory_);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevents<sp/>copying<sp/>ReplaceDeathTestFactory<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>ReplaceDeathTestFactory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReplaceDeathTestFactory&amp;);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReplaceDeathTestFactory&amp;);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>UnitTestImpl*<sp/>unit_test_impl_;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>DeathTestFactory*<sp/>old_factory_;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DieWithMessage(const<sp/>::std::string&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>fflush(stderr);<sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>text<sp/>is<sp/>printed<sp/>before<sp/>the<sp/>process<sp/>exits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>call<sp/>_exit()<sp/>instead<sp/>of<sp/>exit(),<sp/>as<sp/>the<sp/>former<sp/>is<sp/>a<sp/>direct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>call<sp/>and<sp/>thus<sp/>safer<sp/>in<sp/>the<sp/>presence<sp/>of<sp/>threads.<sp/><sp/>exit()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>invoke<sp/>user-defined<sp/>exit-hooks,<sp/>which<sp/>may<sp/>do<sp/>dangerous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>things<sp/>that<sp/>conflict<sp/>with<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>compilers<sp/>can<sp/>recognize<sp/>that<sp/>_exit()<sp/>never<sp/>returns<sp/>and<sp/>issue<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;unreachable<sp/>code&apos;<sp/>warning<sp/>for<sp/>code<sp/>following<sp/>this<sp/>function,<sp/>unless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fooled<sp/>by<sp/>a<sp/>fake<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())<sp/>_exit(1);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DieInside(const<sp/>::std::string&amp;<sp/>function)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>DieWithMessage(</highlight><highlight class="stringliteral">&quot;death<sp/>inside<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>function<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>death<sp/>tests<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestForDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>TestForDeathTest()<sp/>:<sp/>original_dir_(FilePath::GetCurrentDir())<sp/>{}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>~TestForDeathTest()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>posix::ChDir(original_dir_.c_str());<sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>static<sp/>member<sp/>function<sp/>that&apos;s<sp/>expected<sp/>to<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StaticMemberFunction()<sp/>{<sp/>DieInside(</highlight><highlight class="stringliteral">&quot;StaticMemberFunction&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>method<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>that<sp/>may<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberFunction()<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_die_)<sp/>DieInside(</highlight><highlight class="stringliteral">&quot;MemberFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>and<sp/>only<sp/>if<sp/>MemberFunction()<sp/>should<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_die_;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>original_dir_;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>with<sp/>a<sp/>member<sp/>function<sp/>that<sp/>may<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MayDie<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MayDie(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_die)<sp/>:<sp/>should_die_(should_die)<sp/>{}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>member<sp/>function<sp/>that<sp/>may<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberFunction()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_die_)<sp/>DieInside(</highlight><highlight class="stringliteral">&quot;MayDie::MemberFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>and<sp/>only<sp/>if<sp/>MemberFunction()<sp/>should<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_die_;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>global<sp/>function<sp/>that&apos;s<sp/>expected<sp/>to<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GlobalFunction()<sp/>{<sp/>DieInside(</highlight><highlight class="stringliteral">&quot;GlobalFunction&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>non-void<sp/>function<sp/>that&apos;s<sp/>expected<sp/>to<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NonVoidFunction()<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>DieInside(</highlight><highlight class="stringliteral">&quot;NonVoidFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>unary<sp/>function<sp/>that<sp/>may<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DieIf(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_die)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_die)<sp/>DieInside(</highlight><highlight class="stringliteral">&quot;DieIf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>binary<sp/>function<sp/>that<sp/>may<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DieIfLessThan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>DieInside(</highlight><highlight class="stringliteral">&quot;DieIfLessThan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_DEATH<sp/>can<sp/>be<sp/>used<sp/>outside<sp/>a<sp/>TEST,<sp/>TEST_F,<sp/>or<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeathTestSubroutine()<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(GlobalFunction(),<sp/></highlight><highlight class="stringliteral">&quot;death.*GlobalFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>ASSERT_DEATH(GlobalFunction(),<sp/></highlight><highlight class="stringliteral">&quot;death.*GlobalFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Death<sp/>in<sp/>dbg,<sp/>not<sp/>opt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DieInDebugElse12(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sideeffect)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sideeffect)<sp/>*sideeffect<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>DieInside(</highlight><highlight class="stringliteral">&quot;DieInDebugElse12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>12;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Death<sp/>in<sp/>dbg<sp/>due<sp/>to<sp/>Windows<sp/>CRT<sp/>assertion<sp/>failure,<sp/>not<sp/>opt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DieInCRTDebugElse12(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sideeffect)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sideeffect)<sp/>*sideeffect<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>invalid<sp/>fd<sp/>by<sp/>closing<sp/>a<sp/>valid<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdpipe[2];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>EXPECT_EQ(_pipe(fdpipe,<sp/>256,<sp/>O_BINARY),<sp/>0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>EXPECT_EQ(_close(fdpipe[0]),<sp/>0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>EXPECT_EQ(_close(fdpipe[1]),<sp/>0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_dup()<sp/>should<sp/>crash<sp/>in<sp/>debug<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>EXPECT_EQ(_dup(fdpipe[0]),<sp/>-1);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>12;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS)<sp/>||<sp/>defined(GTEST_OS_FUCHSIA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>ExitedWithCode<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">TEST(ExitStatusPredicateTest,<sp/>ExitedWithCode)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>the<sp/>process&apos;s<sp/>exit<sp/>code<sp/>is<sp/>the<sp/>same<sp/>as<sp/>its<sp/>exit<sp/>status,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>the<sp/>predicate<sp/>just<sp/>compares<sp/>the<sp/>its<sp/>input<sp/>with<sp/>its<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testing::ExitedWithCode(0)(0));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testing::ExitedWithCode(1)(1));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testing::ExitedWithCode(42)(42));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testing::ExitedWithCode(0)(1));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testing::ExitedWithCode(1)(0));</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>exit<sp/>status<sp/>of<sp/>a<sp/>process<sp/>that<sp/>calls<sp/>_exit(2)<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>exit<sp/>code.<sp/><sp/>This<sp/>is<sp/>a<sp/>helper<sp/>function<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ExitStatusPredicateTest<sp/>test<sp/>suite.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NormalExitStatus(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_code)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>pid_t<sp/>child_pid<sp/>=<sp/>fork();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child_pid<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>_exit(exit_code);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>waitpid(child_pid,<sp/>&amp;status,<sp/>0);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>exit<sp/>status<sp/>of<sp/>a<sp/>process<sp/>that<sp/>raises<sp/>a<sp/>given<sp/>signal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>signal<sp/>does<sp/>not<sp/>cause<sp/>the<sp/>process<sp/>to<sp/>die,<sp/>then<sp/>it<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>the<sp/>exit<sp/>status<sp/>of<sp/>a<sp/>process<sp/>that<sp/>exits<sp/>normally<sp/>with<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>1.<sp/><sp/>This<sp/>is<sp/>a<sp/>helper<sp/>function<sp/>for<sp/>the<sp/>ExitStatusPredicateTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>suite.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>KilledExitStatus(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>pid_t<sp/>child_pid<sp/>=<sp/>fork();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child_pid<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>raise(signum);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>waitpid(child_pid,<sp/>&amp;status,<sp/>0);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>ExitedWithCode<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">TEST(ExitStatusPredicateTest,<sp/>ExitedWithCode)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status0<sp/>=<sp/>NormalExitStatus(0);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status1<sp/>=<sp/>NormalExitStatus(1);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status42<sp/>=<sp/>NormalExitStatus(42);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>testing::ExitedWithCode<sp/>pred0(0);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>testing::ExitedWithCode<sp/>pred1(1);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>testing::ExitedWithCode<sp/>pred42(42);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(pred0,<sp/>status0);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(pred1,<sp/>status1);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(pred42,<sp/>status42);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(pred0(status1));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(pred42(status0));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(pred1(status42));</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>KilledBySignal<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">TEST(ExitStatusPredicateTest,<sp/>KilledBySignal)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_segv<sp/>=<sp/>KilledExitStatus(SIGSEGV);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_kill<sp/>=<sp/>KilledExitStatus(SIGKILL);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>testing::KilledBySignal<sp/>pred_segv(SIGSEGV);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>testing::KilledBySignal<sp/>pred_kill(SIGKILL);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(pred_segv,<sp/>status_segv);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>EXPECT_PRED1(pred_kill,<sp/>status_kill);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(pred_segv(status_kill));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(pred_kill(status_segv));</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS<sp/>||<sp/>GTEST_OS_FUCHSIA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>intentionally<sp/>tests<sp/>a<sp/>suboptimal<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdangling-else&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wempty-body&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpragmas&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>death<sp/>test<sp/>macros<sp/>expand<sp/>to<sp/>code<sp/>which<sp/>may<sp/>or<sp/>may<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>followed<sp/>by<sp/>operator&lt;&lt;,<sp/>and<sp/>that<sp/>in<sp/>either<sp/>case<sp/>the<sp/>complete<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comprises<sp/>only<sp/>a<sp/>single<sp/>C++<sp/>statement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>SingleStatement)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>would<sp/>fail<sp/>if<sp/>executed;<sp/>this<sp/>is<sp/>a<sp/>compilation<sp/>test<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_DEATH(</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>empty<sp/>&quot;else&quot;<sp/>branch<sp/>is<sp/>meant<sp/>to<sp/>ensure<sp/>that<sp/>EXPECT_DEATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>expand<sp/>into<sp/>an<sp/>&quot;if&quot;<sp/>statement<sp/>without<sp/>an<sp/>&quot;else&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())<sp/>ASSERT_DEATH(</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;did<sp/>not<sp/>die&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>death<sp/>test<sp/>macros<sp/>expand<sp/>to<sp/>code<sp/>which<sp/>interacts<sp/>well<sp/>with<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>SwitchStatement)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Microsoft<sp/>compiler<sp/>usually<sp/>complains<sp/>about<sp/>switch<sp/>statements<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>labels.<sp/>We<sp/>suppress<sp/>that<sp/>warning<sp/>for<sp/>this<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_PUSH_(4065)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>switch<sp/>(0)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>default:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_DEATH(_exit(1),<sp/>&quot;&quot;)<sp/>&lt;&lt;<sp/>&quot;exit<sp/>in<sp/>default<sp/>switch<sp/>handler&quot;;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>switch<sp/>(0)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>case<sp/>0:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/>&quot;&quot;)<sp/>&lt;&lt;<sp/>&quot;exit<sp/>in<sp/>switch<sp/>case&quot;;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>static<sp/>member<sp/>function<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>&quot;fast&quot;<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>StaticMemberFunctionFastStyle)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>ASSERT_DEATH(StaticMemberFunction(),<sp/></highlight><highlight class="stringliteral">&quot;death.*StaticMember&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>method<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>&quot;fast&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>style<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>MemberFunctionFastStyle)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>should_die_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(MemberFunction(),<sp/></highlight><highlight class="stringliteral">&quot;inside.*MemberFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChangeToRootDir()<sp/>{<sp/>posix::ChDir(GTEST_PATH_SEP_);<sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>death<sp/>tests<sp/>work<sp/>even<sp/>if<sp/>the<sp/>current<sp/>directory<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>FastDeathTestInChangedDir)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>ChangeToRootDir();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>EXPECT_EXIT(_exit(1),<sp/>testing::ExitedWithCode(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>ChangeToRootDir();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>ASSERT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SigprofAction(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>siginfo_t*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>op<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>SIGPROF<sp/>action<sp/>and<sp/>ITIMER_PROF<sp/>timer<sp/>(interval:<sp/>1ms).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetSigprofActionAndTimer()<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>signal_action;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>memset(&amp;signal_action,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(signal_action));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>sigemptyset(&amp;signal_action.sa_mask);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>signal_action.sa_sigaction<sp/>=<sp/>SigprofAction;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>signal_action.sa_flags<sp/>=<sp/>SA_RESTART<sp/>|<sp/>SA_SIGINFO;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>sigaction(SIGPROF,<sp/>&amp;signal_action,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>timer<sp/>comes<sp/>second,<sp/>to<sp/>avoid<sp/>SIGPROF<sp/>premature<sp/>delivery,<sp/>as<sp/>suggested<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://www.gnu.org/software/libc/manual/html_node/Setting-an-Alarm.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">itimerval<sp/>timer;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>timer.it_interval.tv_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>timer.it_interval.tv_usec<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>timer.it_value<sp/>=<sp/>timer.it_interval;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>setitimer(ITIMER_PROF,<sp/>&amp;timer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disables<sp/>ITIMER_PROF<sp/>timer<sp/>and<sp/>ignores<sp/>SIGPROF<sp/>signal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DisableSigprofActionAndTimer(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sigaction*<sp/>old_signal_action)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">itimerval<sp/>timer;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>timer.it_interval.tv_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>timer.it_interval.tv_usec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>timer.it_value<sp/>=<sp/>timer.it_interval;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>setitimer(ITIMER_PROF,<sp/>&amp;timer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>signal_action;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>memset(&amp;signal_action,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(signal_action));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>sigemptyset(&amp;signal_action.sa_mask);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>signal_action.sa_handler<sp/>=<sp/>SIG_IGN;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>ASSERT_EQ(0,<sp/>sigaction(SIGPROF,<sp/>&amp;signal_action,<sp/>old_signal_action));</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>death<sp/>tests<sp/>work<sp/>when<sp/>SIGPROF<sp/>handler<sp/>and<sp/>timer<sp/>are<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>FastSigprofActionSet)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>SetSigprofActionAndTimer();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>old_signal_action;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>DisableSigprofActionAndTimer(&amp;old_signal_action);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(old_signal_action.sa_sigaction<sp/>==<sp/>SigprofAction);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ThreadSafeSigprofActionSet)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>SetSigprofActionAndTimer();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>old_signal_action;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>DisableSigprofActionAndTimer(&amp;old_signal_action);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(old_signal_action.sa_sigaction<sp/>==<sp/>SigprofAction);</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Repeats<sp/>a<sp/>representative<sp/>sample<sp/>of<sp/>death<sp/>tests<sp/>in<sp/>the<sp/>&quot;threadsafe&quot;<sp/>style:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>StaticMemberFunctionThreadsafeStyle)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>ASSERT_DEATH(StaticMemberFunction(),<sp/></highlight><highlight class="stringliteral">&quot;death.*StaticMember&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>MemberFunctionThreadsafeStyle)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>should_die_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(MemberFunction(),<sp/></highlight><highlight class="stringliteral">&quot;inside.*MemberFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ThreadsafeDeathTestInLoop)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EXIT(_exit(i),<sp/>testing::ExitedWithCode(i),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>i<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ThreadsafeDeathTestInChangedDir)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>ChangeToRootDir();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>EXPECT_EXIT(_exit(1),<sp/>testing::ExitedWithCode(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>ChangeToRootDir();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>ASSERT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>MixedStyles)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_CLONE<sp/>&amp;&amp;<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pthread_flag;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetPthreadFlag()<sp/>{<sp/>pthread_flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>DoesNotExecuteAtforkHooks)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GTEST_FLAG_GET(death_test_use_fork))<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>pthread_atfork(&amp;SetPthreadFlag,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(pthread_flag);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_CLONE<sp/>&amp;&amp;<sp/>GTEST_HAS_PTHREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>method<sp/>of<sp/>another<sp/>class<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>MethodOfAnotherClass)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MayDie<sp/>x(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>ASSERT_DEATH(x.MemberFunction(),<sp/></highlight><highlight class="stringliteral">&quot;MayDie\\:\\:MemberFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>global<sp/>function<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>GlobalFunction)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(GlobalFunction(),<sp/></highlight><highlight class="stringliteral">&quot;GlobalFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>any<sp/>value<sp/>convertible<sp/>to<sp/>an<sp/>RE<sp/>works<sp/>as<sp/>a<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>to<sp/>EXPECT_DEATH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AcceptsAnythingConvertibleToRE)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>regex_c_str[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GlobalFunction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(GlobalFunction(),<sp/>regex_c_str);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>testing::internal::RE<sp/>regex(regex_c_str);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(GlobalFunction(),<sp/>regex);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>const<sp/>::std::string<sp/>regex_std_str(regex_c_str);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(GlobalFunction(),<sp/>regex_std_str);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>one<sp/>is<sp/>tricky;<sp/>a<sp/>temporary<sp/>pointer<sp/>into<sp/>another<sp/>temporary.<sp/><sp/>Reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lifetime<sp/>extension<sp/>of<sp/>the<sp/>pointer<sp/>is<sp/>not<sp/>sufficient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(GlobalFunction(),<sp/>::std::string(regex_c_str).c_str());</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>non-void<sp/>function<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>NonVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>ASSERT_DEATH(NonVoidFunction(),<sp/></highlight><highlight class="stringliteral">&quot;NonVoidFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>functions<sp/>that<sp/>take<sp/>parameter(s)<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>FunctionWithParameter)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieIf(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;DieIf\\(\\)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieIfLessThan(2,<sp/>3),<sp/></highlight><highlight class="stringliteral">&quot;DieIfLessThan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_DEATH<sp/>can<sp/>be<sp/>used<sp/>outside<sp/>a<sp/>TEST,<sp/>TEST_F,<sp/>or<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>OutsideFixture)<sp/>{<sp/>DeathTestSubroutine();<sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>death<sp/>tests<sp/>can<sp/>be<sp/>done<sp/>inside<sp/>a<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>InsideLoop)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH(DieIfLessThan(-1,<sp/>i),<sp/></highlight><highlight class="stringliteral">&quot;DieIfLessThan&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>i<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>compound<sp/>statement<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>CompoundStatement)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DieIfLessThan(x,<sp/>y);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DieIfLessThan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>code<sp/>that<sp/>doesn&apos;t<sp/>die<sp/>causes<sp/>a<sp/>death<sp/>test<sp/>to<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>DoesNotDie)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DEATH(DieIf(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;DieIf&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>die&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>death<sp/>test<sp/>fails<sp/>when<sp/>the<sp/>error<sp/>message<sp/>isn&apos;t<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ErrorMessageMismatch)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DEATH(DieIf(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;DieIfLessThan&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>death<sp/>test<sp/>message.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;died<sp/>but<sp/>not<sp/>with<sp/>expected<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>exit,<sp/>*aborted<sp/>will<sp/>be<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>EXPECT_DEATH()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement<sp/>aborted<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectDeathTestHelper(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>aborted)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieIf(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;DieIf&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>assertion<sp/>should<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_DEATH<sp/>doesn&apos;t<sp/>abort<sp/>the<sp/>test<sp/>on<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>EXPECT_DEATH)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ExpectDeathTestHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>die&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(aborted);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_DEATH<sp/>does<sp/>abort<sp/>the<sp/>test<sp/>on<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ASSERT_DEATH)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_DEATH(DieIf(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;DieIf&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>assertion<sp/>should<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>die&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_DEATH<sp/>evaluates<sp/>the<sp/>arguments<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>SingleEvaluation)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieIf((++x)<sp/>==<sp/>4),<sp/></highlight><highlight class="stringliteral">&quot;DieIf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DieIf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex_save<sp/>=<sp/>regex;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieIfLessThan(3,<sp/>4),<sp/>regex++);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>EXPECT_EQ(regex_save<sp/>+<sp/>1,<sp/>regex);</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>run-away<sp/>death<sp/>tests<sp/>are<sp/>reported<sp/>as<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>RunawayIsFailure)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DEATH(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0),<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>die.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>death<sp/>tests<sp/>report<sp/>executing<sp/>&apos;return&apos;<sp/>in<sp/>the<sp/>statement<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ReturnIsFailure)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_DEATH(</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bar&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>return<sp/>in<sp/>test<sp/>statement.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_DEBUG_DEATH<sp/>works<sp/>as<sp/>expected,<sp/>that<sp/>is,<sp/>you<sp/>can<sp/>stream<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>to<sp/>it,<sp/>and<sp/>in<sp/>debug<sp/>mode<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>Asserts<sp/>on<sp/>death.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>Has<sp/>no<sp/>side<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>And<sp/>in<sp/>opt<sp/>mode,<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/><sp/>Has<sp/>side<sp/>effects<sp/>but<sp/>does<sp/>not<sp/>assert.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>TestExpectDebugDeath)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sideeffect<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>the<sp/>regex<sp/>in<sp/>a<sp/>local<sp/>variable<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>don&apos;t<sp/>get<sp/>an<sp/>&quot;unused&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>warning<sp/>in<sp/>opt<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>regex<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;death.*DieInDebugElse12&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>EXPECT_DEBUG_DEATH(DieInDebugElse12(&amp;sideeffect),<sp/>regex)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>accept<sp/>a<sp/>streamed<sp/>message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>that<sp/>the<sp/>assignment<sp/>occurs<sp/>in<sp/>opt<sp/>mode<sp/>(sideeffect).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12,<sp/>sideeffect);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>that<sp/>the<sp/>assignment<sp/>does<sp/>not<sp/>occur<sp/>in<sp/>dbg<sp/>mode<sp/>(no<sp/>sideeffect).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>sideeffect);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/crtsetreportmode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>debug<sp/>mode,<sp/>the<sp/>calls<sp/>to<sp/>_CrtSetReportMode<sp/>and<sp/>_CrtSetReportFile<sp/>enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>dumping<sp/>of<sp/>assertions<sp/>to<sp/>stderr.<sp/>Tests<sp/>that<sp/>EXPECT_DEATH<sp/>works<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expected<sp/>when<sp/>in<sp/>CRT<sp/>debug<sp/>mode<sp/>(compiled<sp/>with<sp/>/MTd<sp/>or<sp/>/MDd,<sp/>which<sp/>defines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_DEBUG)<sp/>the<sp/>Windows<sp/>CRT<sp/>crashes<sp/>the<sp/>process<sp/>with<sp/>an<sp/>assertion<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>Asserts<sp/>on<sp/>death.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>Has<sp/>no<sp/>side<sp/>effect<sp/>(doesn&apos;t<sp/>pop<sp/>up<sp/>a<sp/>window<sp/>or<sp/>wait<sp/>for<sp/>user<sp/>input).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>CRTDebugDeath)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieInCRTDebugElse12(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;dup.*<sp/>:<sp/>Assertion<sp/>failed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>accept<sp/>a<sp/>streamed<sp/>message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_DEBUG_DEATH<sp/>works<sp/>as<sp/>expected,<sp/>that<sp/>is,<sp/>you<sp/>can<sp/>stream<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>to<sp/>it,<sp/>and<sp/>in<sp/>debug<sp/>mode<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>Asserts<sp/>on<sp/>death.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>Has<sp/>no<sp/>side<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>And<sp/>in<sp/>opt<sp/>mode,<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/><sp/>Has<sp/>side<sp/>effects<sp/>but<sp/>does<sp/>not<sp/>assert.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>TestAssertDebugDeath)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sideeffect<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>ASSERT_DEBUG_DEATH(DieInDebugElse12(&amp;sideeffect),<sp/></highlight><highlight class="stringliteral">&quot;death.*DieInDebugElse12&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>accept<sp/>a<sp/>streamed<sp/>message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>that<sp/>the<sp/>assignment<sp/>occurs<sp/>in<sp/>opt<sp/>mode<sp/>(sideeffect).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12,<sp/>sideeffect);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>that<sp/>the<sp/>assignment<sp/>does<sp/>not<sp/>occur<sp/>in<sp/>dbg<sp/>mode<sp/>(no<sp/>sideeffect).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>sideeffect);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectDebugDeathHelper(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>aborted)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>EXPECT_DEBUG_DEATH(</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>expected<sp/>to<sp/>fail.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">TEST(PopUpDeathTest,<sp/>DoesNotShowPopUpOnAbort)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>printf(</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>test<sp/>should<sp/>be<sp/>considered<sp/>failing<sp/>if<sp/>it<sp/>shows<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;any<sp/>pop-up<sp/>dialogs.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FLAG_SET(catch_exceptions,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_DEBUG_DEATH<sp/>in<sp/>debug<sp/>mode<sp/>does<sp/>not<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ExpectDebugDeathDoesNotAbort)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(ExpectDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(aborted);</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertDebugDeathHelper(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>aborted)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>GTEST_LOG_(INFO)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Before<sp/>ASSERT_DEBUG_DEATH&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>ASSERT_DEBUG_DEATH(GTEST_LOG_(INFO)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>ASSERT_DEBUG_DEATH&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>expected<sp/>to<sp/>fail.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>GTEST_LOG_(INFO)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;After<sp/>ASSERT_DEBUG_DEATH&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>*aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_DEBUG_DEATH<sp/>in<sp/>debug<sp/>mode<sp/>aborts<sp/>the<sp/>function<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts2)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts3)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts4)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts5)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts6)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts7)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts8)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts9)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>AssertDebugDeathAborts10)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborted;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>aborted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AssertDebugDeathHelper(&amp;aborted),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(aborted);</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>*_EXIT<sp/>family<sp/>of<sp/>macros,<sp/>using<sp/>a<sp/>variety<sp/>of<sp/>predicates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestExitMacros()<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>EXPECT_EXIT(_exit(1),<sp/>testing::ExitedWithCode(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>ASSERT_EXIT(_exit(42),<sp/>testing::ExitedWithCode(42),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Of<sp/>all<sp/>signals<sp/>effects<sp/>on<sp/>the<sp/>process<sp/>exit<sp/>code,<sp/>only<sp/>those<sp/>of<sp/>SIGABRT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>documented<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>https://msdn.microsoft.com/en-us/query-bi/m/dwwzkt4c.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>EXPECT_EXIT(raise(SIGABRT),<sp/>testing::ExitedWithCode(3),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;b_ar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(GTEST_OS_FUCHSIA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fuchsia<sp/>has<sp/>no<sp/>unix<sp/>signals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>EXPECT_EXIT(raise(SIGKILL),<sp/>testing::KilledBySignal(SIGKILL),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>ASSERT_EXIT(raise(SIGUSR2),<sp/>testing::KilledBySignal(SIGUSR2),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EXIT(_exit(0),<sp/>testing::KilledBySignal(SIGSEGV),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>too.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>too.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EXIT(raise(SIGSEGV),<sp/>testing::ExitedWithCode(0),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ExitMacros)<sp/>{<sp/>TestExitMacros();<sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>ExitMacrosUsingFork)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_use_fork,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>TestExitMacros();</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>InvalidStyle)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;rococo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DEATH(_exit(0),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>DeathTestFailedOutput)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DEATH(DieWithMessage(</highlight><highlight class="stringliteral">&quot;death\n&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>message&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>msg:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>DEATH<sp/><sp/><sp/>]<sp/>death\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>DeathTestUnexpectedReturnOutput)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DEATH(</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;returning\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>illegal<sp/>return<sp/>in<sp/>test<sp/>statement.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>msg:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>DEATH<sp/><sp/><sp/>]<sp/>returning\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>DeathTestBadExitCodeOutput)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EXIT(DieWithMessage(</highlight><highlight class="stringliteral">&quot;exiting<sp/>with<sp/>rc<sp/>1\n&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::ExitedWithCode(3),<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>message&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>died<sp/>but<sp/>not<sp/>with<sp/>expected<sp/>exit<sp/>code:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exited<sp/>with<sp/>exit<sp/>status<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>msg:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>DEATH<sp/><sp/><sp/>]<sp/>exiting<sp/>with<sp/>rc<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>DeathTestMultiLineMatchFail)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DEATH(DieWithMessage(</highlight><highlight class="stringliteral">&quot;line<sp/>1\nline<sp/>2\nline<sp/>3\n&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;line<sp/>1\nxyz\nline<sp/>3\n&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>msg:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>DEATH<sp/><sp/><sp/>]<sp/>line<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>DEATH<sp/><sp/><sp/>]<sp/>line<sp/>2\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>DEATH<sp/><sp/><sp/>]<sp/>line<sp/>3\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal">TEST_F(TestForDeathTest,<sp/>DeathTestMultiLineMatchPass)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieWithMessage(</highlight><highlight class="stringliteral">&quot;line<sp/>1\nline<sp/>2\nline<sp/>3\n&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;line<sp/>1\nline<sp/>2\nline<sp/>3\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>DeathTestFactory<sp/>that<sp/>returns<sp/>MockDeathTests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockDeathTestFactory<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DeathTestFactory<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>MockDeathTestFactory();</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">testing::Matcher&lt;const std::string&amp;&gt;</ref><sp/>matcher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>DeathTest**<sp/>test)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>parameters<sp/>for<sp/>subsequent<sp/>calls<sp/>to<sp/>Create.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetParameters(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>create,<sp/>DeathTest::TestRole<sp/>role,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status,</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passed);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AssumeRoleCalls()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assume_role_calls_;<sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WaitCalls()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wait_calls_;<sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PassedCalls()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>passed_args_.size();<sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PassedArgument(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>passed_args_[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n)];</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>AbortCalls()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abort_args_.size();<sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>DeathTest::AbortReason<sp/>AbortArgument(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abort_args_[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n)];</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestDeleted()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_deleted_;<sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockDeathTest;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>Create<sp/>will<sp/>return<sp/>a<sp/>MockDeathTest;<sp/>otherwise<sp/>it<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>create_;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>a<sp/>MockDeathTest<sp/>will<sp/>return<sp/>from<sp/>its<sp/>AssumeRole<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>DeathTest::TestRole<sp/>role_;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>a<sp/>MockDeathTest<sp/>will<sp/>return<sp/>from<sp/>its<sp/>Wait<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>a<sp/>MockDeathTest<sp/>will<sp/>return<sp/>from<sp/>its<sp/>Passed<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passed_;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>times<sp/>AssumeRole<sp/>was<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>assume_role_calls_;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>times<sp/>Wait<sp/>was<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wait_calls_;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>arguments<sp/>to<sp/>the<sp/>calls<sp/>to<sp/>Passed<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetParameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>passed_args_;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>arguments<sp/>to<sp/>the<sp/>calls<sp/>to<sp/>Abort<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetParameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>std::vector&lt;DeathTest::AbortReason&gt;<sp/>abort_args_;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>the<sp/>last<sp/>MockDeathTest<sp/>returned<sp/>by<sp/>Create<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test_deleted_;</highlight></codeline>
<codeline lineno="957"><highlight class="normal">};</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>DeathTest<sp/>implementation<sp/>useful<sp/>in<sp/>testing.<sp/><sp/>It<sp/>returns<sp/>values<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>its<sp/>creation<sp/>from<sp/>its<sp/>various<sp/>inherited<sp/>DeathTest<sp/>methods,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports<sp/>calls<sp/>to<sp/>those<sp/>methods<sp/>to<sp/>its<sp/>parent<sp/>MockDeathTestFactory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DeathTest<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>MockDeathTest(MockDeathTestFactory*<sp/>parent,<sp/>TestRole<sp/>role,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passed)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>parent_(parent),<sp/>role_(role),<sp/>status_(status),<sp/>passed_(passed)<sp/>{}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>~MockDeathTest()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>parent_-&gt;test_deleted_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>TestRole<sp/>AssumeRole()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>++parent_-&gt;assume_role_calls_;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>role_;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Wait()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>++parent_-&gt;wait_calls_;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Passed(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exit_status_ok)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>parent_-&gt;passed_args_.push_back(exit_status_ok);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>passed_;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Abort(AbortReason<sp/>reason)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>parent_-&gt;abort_args_.push_back(reason);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>MockDeathTestFactory*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent_;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestRole<sp/>role_;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passed_;</highlight></codeline>
<codeline lineno="990"><highlight class="normal">};</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MockDeathTestFactory<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal">MockDeathTestFactory::MockDeathTestFactory()</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>create_(true),</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>role_(DeathTest::OVERSEE_TEST),</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_(0),</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passed_(true),</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assume_role_calls_(0),</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wait_calls_(0),</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passed_args_(),</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abort_args_()<sp/>{}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>parameters<sp/>for<sp/>subsequent<sp/>calls<sp/>to<sp/>Create.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MockDeathTestFactory::SetParameters(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>create,<sp/>DeathTest::TestRole<sp/>role,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passed)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>create_<sp/>=<sp/>create;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>role_<sp/>=<sp/>role;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>status_<sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>passed_<sp/>=<sp/>passed;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>assume_role_calls_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>wait_calls_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>passed_args_.clear();</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>abort_args_.clear();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>test<sp/>to<sp/>NULL<sp/>(if<sp/>create_<sp/>is<sp/>false)<sp/>or<sp/>to<sp/>the<sp/>address<sp/>of<sp/>a<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MockDeathTest<sp/>object<sp/>with<sp/>parameters<sp/>taken<sp/>from<sp/>the<sp/>last<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>SetParameters<sp/>(if<sp/>create_<sp/>is<sp/>true).<sp/><sp/>Always<sp/>returns<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MockDeathTestFactory::Create(</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*statement*/</highlight><highlight class="normal">,<sp/><ref refid="classtesting_1_1Matcher" kindref="compound">testing::Matcher&lt;const std::string&amp;&gt;</ref><sp/></highlight><highlight class="comment">/*matcher*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*file*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*line*/</highlight><highlight class="normal">,<sp/>DeathTest**<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>test_deleted_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(create_)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>*test<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockDeathTest(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>role_,<sp/>status_,<sp/>passed_);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>*test<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>fixture<sp/>for<sp/>testing<sp/>the<sp/>logic<sp/>of<sp/>the<sp/>GTEST_DEATH_TEST_<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>installs<sp/>a<sp/>MockDeathTestFactory<sp/>that<sp/>is<sp/>used<sp/>for<sp/>the<sp/>duration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MacroLogicDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>testing::internal::ReplaceDeathTestFactory*<sp/>replacer_;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MockDeathTestFactory*<sp/>factory_;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>factory_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockDeathTestFactory;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>replacer_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>testing::internal::ReplaceDeathTestFactory(factory_);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>replacer_;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>replacer_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>factory_;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>factory_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>a<sp/>death<sp/>test<sp/>that<sp/>breaks<sp/>the<sp/>rules<sp/>by<sp/>returning.<sp/><sp/>Such<sp/>a<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>cannot<sp/>be<sp/>run<sp/>directly<sp/>from<sp/>a<sp/>test<sp/>routine<sp/>that<sp/>uses<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MockDeathTest,<sp/>or<sp/>the<sp/>remainder<sp/>of<sp/>the<sp/>routine<sp/>will<sp/>not<sp/>be<sp/>executed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunReturningDeathTest(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_DEATH(</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal">testing::internal::ReplaceDeathTestFactory*<sp/>MacroLogicDeathTest::replacer_<sp/>=</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">MockDeathTestFactory*<sp/>MacroLogicDeathTest::factory_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>nothing<sp/>happens<sp/>when<sp/>the<sp/>factory<sp/>doesn&apos;t<sp/>return<sp/>a<sp/>DeathTest:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal">TEST_F(MacroLogicDeathTest,<sp/>NothingHappens)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>factory_-&gt;SetParameters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>DeathTest::OVERSEE_TEST,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(flag);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>factory_-&gt;AssumeRoleCalls());</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>factory_-&gt;WaitCalls());</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>factory_-&gt;PassedCalls());</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>factory_-&gt;AbortCalls());</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(factory_-&gt;TestDeleted());</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>the<sp/>parent<sp/>process<sp/>doesn&apos;t<sp/>run<sp/>the<sp/>death<sp/>test<sp/>code,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>that<sp/>the<sp/>Passed<sp/>method<sp/>returns<sp/>false<sp/>when<sp/>the<sp/>(simulated)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/>child<sp/>process<sp/>exits<sp/>with<sp/>status<sp/>0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">TEST_F(MacroLogicDeathTest,<sp/>ChildExitsSuccessfully)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>factory_-&gt;SetParameters(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>DeathTest::OVERSEE_TEST,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(flag);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>factory_-&gt;AssumeRoleCalls());</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>factory_-&gt;WaitCalls());</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1U,<sp/>factory_-&gt;PassedCalls());</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(factory_-&gt;PassedArgument(0));</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>factory_-&gt;AbortCalls());</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(factory_-&gt;TestDeleted());</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>Passed<sp/>method<sp/>was<sp/>given<sp/>the<sp/>argument<sp/>&quot;true&quot;<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>(simulated)<sp/>child<sp/>process<sp/>exits<sp/>with<sp/>status<sp/>1:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal">TEST_F(MacroLogicDeathTest,<sp/>ChildExitsUnsuccessfully)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>factory_-&gt;SetParameters(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>DeathTest::OVERSEE_TEST,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(flag);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>factory_-&gt;AssumeRoleCalls());</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>factory_-&gt;WaitCalls());</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1U,<sp/>factory_-&gt;PassedCalls());</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(factory_-&gt;PassedArgument(0));</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>factory_-&gt;AbortCalls());</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(factory_-&gt;TestDeleted());</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>(simulated)<sp/>child<sp/>process<sp/>executes<sp/>the<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code,<sp/>and<sp/>is<sp/>aborted<sp/>with<sp/>the<sp/>correct<sp/>AbortReason<sp/>if<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>executes<sp/>a<sp/>return<sp/>statement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal">TEST_F(MacroLogicDeathTest,<sp/>ChildPerformsReturn)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>factory_-&gt;SetParameters(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>DeathTest::EXECUTE_TEST,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>RunReturningDeathTest(&amp;flag);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(flag);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>factory_-&gt;AssumeRoleCalls());</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>factory_-&gt;WaitCalls());</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>factory_-&gt;PassedCalls());</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1U,<sp/>factory_-&gt;AbortCalls());</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>EXPECT_EQ(DeathTest::TEST_ENCOUNTERED_RETURN_STATEMENT,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_-&gt;AbortArgument(0));</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(factory_-&gt;TestDeleted());</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>(simulated)<sp/>child<sp/>process<sp/>is<sp/>aborted<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>correct<sp/>AbortReason<sp/>if<sp/>it<sp/>does<sp/>not<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal">TEST_F(MacroLogicDeathTest,<sp/>ChildDoesNotDie)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>factory_-&gt;SetParameters(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>DeathTest::EXECUTE_TEST,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(flag);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>factory_-&gt;AssumeRoleCalls());</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>factory_-&gt;WaitCalls());</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>factory_-&gt;PassedCalls());</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>time<sp/>there<sp/>are<sp/>two<sp/>calls<sp/>to<sp/>Abort:<sp/>one<sp/>since<sp/>the<sp/>test<sp/>didn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>die,<sp/>and<sp/>another<sp/>from<sp/>the<sp/>ReturnSentinel<sp/>when<sp/>it&apos;s<sp/>destroyed.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sentinel<sp/>normally<sp/>isn&apos;t<sp/>destroyed<sp/>if<sp/>a<sp/>test<sp/>doesn&apos;t<sp/>die,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_exit(2)<sp/>is<sp/>called<sp/>in<sp/>that<sp/>case<sp/>by<sp/>ForkingDeathTest,<sp/>but<sp/>not<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>MockDeathTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2U,<sp/>factory_-&gt;AbortCalls());</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>EXPECT_EQ(DeathTest::TEST_DID_NOT_DIE,<sp/>factory_-&gt;AbortArgument(0));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>EXPECT_EQ(DeathTest::TEST_ENCOUNTERED_RETURN_STATEMENT,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_-&gt;AbortArgument(1));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(factory_-&gt;TestDeleted());</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>successful<sp/>death<sp/>test<sp/>does<sp/>not<sp/>register<sp/>a<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal">TEST(SuccessRegistrationDeathTest,<sp/>NoSuccessPart)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>GetUnitTestImpl()-&gt;current_test_result()-&gt;total_part_count());</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal">TEST(StreamingAssertionsDeathTest,<sp/>DeathTest)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>ASSERT_DEATH(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DEATH(_exit(0),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_DEATH(_exit(0),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>GetLastErrnoDescription<sp/>returns<sp/>an<sp/>empty<sp/>string<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>last<sp/>error<sp/>is<sp/>0<sp/>and<sp/>non-empty<sp/>string<sp/>when<sp/>it<sp/>is<sp/>non-zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal">TEST(GetLastErrnoDescription,<sp/>GetLastErrnoDescriptionWorks)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>ENOENT;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>EXPECT_STRNE(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetLastErrnoDescription().c_str());</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetLastErrnoDescription().c_str());</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">TEST(AutoHandleTest,<sp/>AutoHandleWorks)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>HANDLE<sp/>handle<sp/>=<sp/>::CreateEvent(NULL,<sp/>FALSE,<sp/>FALSE,<sp/>NULL);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>ASSERT_NE(INVALID_HANDLE_VALUE,<sp/>handle);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>AutoHandle<sp/>is<sp/>correctly<sp/>initialized<sp/>with<sp/>a<sp/>handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>testing::internal::AutoHandle<sp/>auto_handle(handle);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>EXPECT_EQ(handle,<sp/>auto_handle.Get());</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Reset<sp/>assigns<sp/>INVALID_HANDLE_VALUE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>cannot<sp/>verify<sp/>whether<sp/>the<sp/>original<sp/>handle<sp/>is<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>auto_handle.Reset();</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>EXPECT_EQ(INVALID_HANDLE_VALUE,<sp/>auto_handle.Get());</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Reset<sp/>assigns<sp/>the<sp/>new<sp/>handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>cannot<sp/>verify<sp/>whether<sp/>the<sp/>original<sp/>handle<sp/>is<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>handle<sp/>=<sp/>::CreateEvent(NULL,<sp/>FALSE,<sp/>FALSE,<sp/>NULL);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>ASSERT_NE(INVALID_HANDLE_VALUE,<sp/>handle);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>auto_handle.Reset(handle);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>EXPECT_EQ(handle,<sp/>auto_handle.Get());</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AutoHandle<sp/>contains<sp/>INVALID_HANDLE_VALUE<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>testing::internal::AutoHandle<sp/>auto_handle2;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>EXPECT_EQ(INVALID_HANDLE_VALUE,<sp/>auto_handle2.Get());</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>BiggestParsable;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>__int64<sp/>BiggestSignedParsable;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>BiggestParsable;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>BiggestSignedParsable;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>use<sp/>std::numeric_limits&lt;T&gt;::max()<sp/>as<sp/>it<sp/>clashes<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>max()<sp/>macro<sp/>defined<sp/>by<sp/>&lt;windows.h&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BiggestParsable<sp/>kBiggestParsableMax<sp/>=<sp/>ULLONG_MAX;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BiggestSignedParsable<sp/>kBiggestSignedParsableMax<sp/>=<sp/>LLONG_MAX;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal">TEST(ParseNaturalNumberTest,<sp/>RejectsInvalidFormat)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>BiggestParsable<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rejects<sp/>non-numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;non-number<sp/>string&quot;</highlight><highlight class="normal">,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rejects<sp/>numbers<sp/>with<sp/>whitespace<sp/>prefix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;<sp/>123&quot;</highlight><highlight class="normal">,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rejects<sp/>negative<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;-123&quot;</highlight><highlight class="normal">,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rejects<sp/>numbers<sp/>starting<sp/>with<sp/>a<sp/>plus<sp/>sign.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;+123&quot;</highlight><highlight class="normal">,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal">TEST(ParseNaturalNumberTest,<sp/>RejectsOverflownNumbers)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>BiggestParsable<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;99999999999999999999999&quot;</highlight><highlight class="normal">,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>char_result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;200&quot;</highlight><highlight class="normal">,<sp/>&amp;char_result));</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal">TEST(ParseNaturalNumberTest,<sp/>AcceptsValidNumbers)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>BiggestParsable<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123U,<sp/>result);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>0<sp/>as<sp/>an<sp/>edge<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>result);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;00000&quot;</highlight><highlight class="normal">,<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>result);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal">TEST(ParseNaturalNumberTest,<sp/>AcceptsTypeLimits)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>kBiggestParsableMax;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>BiggestParsable<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ParseNaturalNumber(msg.GetString(),<sp/>&amp;result));</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kBiggestParsableMax,<sp/>result);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>Message<sp/>msg2;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>msg2<sp/>&lt;&lt;<sp/>kBiggestSignedParsableMax;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>BiggestSignedParsable<sp/>signed_result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ParseNaturalNumber(msg2.GetString(),<sp/>&amp;signed_result));</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kBiggestSignedParsableMax,<sp/>signed_result);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>Message<sp/>msg3;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>msg3<sp/>&lt;&lt;<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ParseNaturalNumber(msg3.GetString(),<sp/>&amp;int_result));</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>EXPECT_EQ(INT_MAX,<sp/>int_result);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>Message<sp/>msg4;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>msg4<sp/>&lt;&lt;<sp/>UINT_MAX;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uint_result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ParseNaturalNumber(msg4.GetString(),<sp/>&amp;uint_result));</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>EXPECT_EQ(UINT_MAX,<sp/>uint_result);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal">TEST(ParseNaturalNumberTest,<sp/>WorksForShorterIntegers)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>short_result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>&amp;short_result));</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>short_result);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>char_result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(ParseNaturalNumber(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>&amp;char_result));</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>char_result);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal">TEST(EnvironmentTest,<sp/>HandleFitsIntoSizeT)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(HANDLE)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_DEATH_IF_SUPPORTED/ASSERT_DEATH_IF_SUPPORTED<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failures<sp/>when<sp/>death<sp/>tests<sp/>are<sp/>available<sp/>on<sp/>the<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal">TEST(ConditionalDeathMacrosDeathTest,<sp/>ExpectsDeathWhenDeathTestsAvailable)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(DieInside(</highlight><highlight class="stringliteral">&quot;CondDeathTestExpectMacro&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;death<sp/>inside<sp/>CondDeathTestExpectMacro&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>ASSERT_DEATH_IF_SUPPORTED(DieInside(</highlight><highlight class="stringliteral">&quot;CondDeathTestAssertMacro&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;death<sp/>inside<sp/>CondDeathTestAssertMacro&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>statement<sp/>will<sp/>not<sp/>crash,<sp/>which<sp/>must<sp/>trigger<sp/>a<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_DEATH_IF_SUPPORTED(;,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_DEATH_IF_SUPPORTED(;,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal">TEST(InDeathTestChildDeathTest,<sp/>ReportsDeathTestCorrectlyInFastStyle)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(InDeathTestChild());</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>InDeathTestChild()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Inside&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Outside&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Inside&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal">TEST(InDeathTestChildDeathTest,<sp/>ReportsDeathTestCorrectlyInThreadSafeStyle)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(InDeathTestChild());</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>InDeathTestChild()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Inside&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Outside&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Inside&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DieWithMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>fputs(message,<sp/>stderr);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>fflush(stderr);<sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>text<sp/>is<sp/>printed<sp/>before<sp/>the<sp/>process<sp/>exits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">TEST(MatcherDeathTest,<sp/>DoesNotBreakBareRegexMatching)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>googletest<sp/>tests<sp/>this,<sp/>of<sp/>course;<sp/>here<sp/>we<sp/>ensure<sp/>that<sp/>including<sp/>googlemock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>not<sp/>broken<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_USES_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieWithMessage(</highlight><highlight class="stringliteral">&quot;O,<sp/>I<sp/>die,<sp/>Horatio.&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>d[aeiou]e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieWithMessage(</highlight><highlight class="stringliteral">&quot;O,<sp/>I<sp/>die,<sp/>Horatio.&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>di?e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal">TEST(MatcherDeathTest,<sp/>MonomorphicMatcherMatches)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieWithMessage(</highlight><highlight class="stringliteral">&quot;Behind<sp/>O,<sp/>I<sp/>am<sp/>slain!&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matcher&lt;const<sp/>std::string&amp;&gt;(ContainsRegex(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>slain&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal">TEST(MatcherDeathTest,<sp/>MonomorphicMatcherDoesNotMatch)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DEATH(</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DieWithMessage(</highlight><highlight class="stringliteral">&quot;Behind<sp/>O,<sp/>I<sp/>am<sp/>slain!&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matcher&lt;const<sp/>std::string&amp;&gt;(ContainsRegex(</highlight><highlight class="stringliteral">&quot;Ow,<sp/>I<sp/>am<sp/>slain&quot;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>contains<sp/>regular<sp/>expression<sp/>\&quot;Ow,<sp/>I<sp/>am<sp/>slain\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal">TEST(MatcherDeathTest,<sp/>PolymorphicMatcherMatches)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>EXPECT_DEATH(DieWithMessage(</highlight><highlight class="stringliteral">&quot;The<sp/>rest<sp/>is<sp/>silence.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;rest<sp/>is<sp/>silence&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal">TEST(MatcherDeathTest,<sp/>PolymorphicMatcherDoesNotMatch)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DEATH(DieWithMessage(</highlight><highlight class="stringliteral">&quot;The<sp/>rest<sp/>is<sp/>silence.&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;rest<sp/>is<sp/>science&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>contains<sp/>regular<sp/>expression<sp/>\&quot;rest<sp/>is<sp/>science\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_HAS_DEATH_TEST<sp/>follows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::CaptureStderr;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::GetCapturedStderr;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_DEATH_IF_SUPPORTED/ASSERT_DEATH_IF_SUPPORTED<sp/>are<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined<sp/>but<sp/>do<sp/>not<sp/>trigger<sp/>failures<sp/>when<sp/>death<sp/>tests<sp/>are<sp/>not<sp/>available<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal">TEST(ConditionalDeathMacrosTest,<sp/>WarnsWhenDeathTestsNotAvailable)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>statement<sp/>will<sp/>not<sp/>crash,<sp/>but<sp/>that<sp/>should<sp/>not<sp/>trigger<sp/>a<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>death<sp/>tests<sp/>are<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(;,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>std::string<sp/>output<sp/>=<sp/>GetCapturedStderr();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(NULL<sp/>!=<sp/>strstr(output.c_str(),</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>tests<sp/>are<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>platform&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(NULL<sp/>!=<sp/>strstr(output.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>streamed<sp/>message<sp/>should<sp/>not<sp/>be<sp/>printed<sp/>as<sp/>there<sp/>is<sp/>no<sp/>test<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(;,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;streamed<sp/>message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>output<sp/>=<sp/>GetCapturedStderr();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(NULL<sp/>==<sp/>strstr(output.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;streamed<sp/>message&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>ASSERT_DEATH_IF_SUPPORTED(;,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>output<sp/>=<sp/>GetCapturedStderr();</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(NULL<sp/>!=<sp/>strstr(output.c_str(),</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>tests<sp/>are<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>platform&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(NULL<sp/>!=<sp/>strstr(output.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>CaptureStderr();</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>ASSERT_DEATH_IF_SUPPORTED(;,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;streamed<sp/>message&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>output<sp/>=<sp/>GetCapturedStderr();</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(NULL<sp/>==<sp/>strstr(output.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;streamed<sp/>message&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FuncWithAssert(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>ASSERT_DEATH_IF_SUPPORTED(</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>(*n)++;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_DEATH_IF_SUPPORTED<sp/>does<sp/>not<sp/>return<sp/>from<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>(as<sp/>ASSERT_DEATH<sp/>does)<sp/>if<sp/>death<sp/>tests<sp/>are<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal">TEST(ConditionalDeathMacrosTest,<sp/>AssertDeatDoesNotReturnhIfUnsupported)<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>FuncWithAssert(&amp;n);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>intentionally<sp/>tests<sp/>a<sp/>suboptimal<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdangling-else&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wempty-body&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpragmas&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>death<sp/>test<sp/>macros<sp/>expand<sp/>to<sp/>code<sp/>which<sp/>may<sp/>or<sp/>may<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>followed<sp/>by<sp/>operator&lt;&lt;,<sp/>and<sp/>that<sp/>in<sp/>either<sp/>case<sp/>the<sp/>complete<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comprises<sp/>only<sp/>a<sp/>single<sp/>C++<sp/>statement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>syntax<sp/>should<sp/>work<sp/>whether<sp/>death<sp/>tests<sp/>are<sp/>available<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal">TEST(ConditionalDeathMacrosSyntaxDeathTest,<sp/>SingleStatement)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>would<sp/>fail<sp/>if<sp/>executed;<sp/>this<sp/>is<sp/>a<sp/>compilation<sp/>test<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_DEATH_IF_SUPPORTED(</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysTrue())</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>empty<sp/>&quot;else&quot;<sp/>branch<sp/>is<sp/>meant<sp/>to<sp/>ensure<sp/>that<sp/>EXPECT_DEATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>expand<sp/>into<sp/>an<sp/>&quot;if&quot;<sp/>statement<sp/>without<sp/>an<sp/>&quot;else&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())<sp/>ASSERT_DEATH_IF_SUPPORTED(</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;did<sp/>not<sp/>die&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlwaysFalse())</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(_exit(1),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>conditional<sp/>death<sp/>test<sp/>macros<sp/>expand<sp/>to<sp/>code<sp/>which<sp/>interacts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>well<sp/>with<sp/>switch<sp/>statements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal">TEST(ConditionalDeathMacrosSyntaxDeathTest,<sp/>SwitchStatement)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Microsoft<sp/>compiler<sp/>usually<sp/>complains<sp/>about<sp/>switch<sp/>statements<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>labels.<sp/>We<sp/>suppress<sp/>that<sp/>warning<sp/>for<sp/>this<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_PUSH_(4065)</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>switch<sp/>(0)</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>default:</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_DEATH_IF_SUPPORTED(_exit(1),<sp/>&quot;&quot;)<sp/>&lt;&lt;<sp/>&quot;exit<sp/>in<sp/>default<sp/>switch<sp/>handler&quot;;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>switch<sp/>(0)</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>case<sp/>0:</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(_exit(1),<sp/>&quot;&quot;)<sp/>&lt;&lt;<sp/>&quot;exit<sp/>in<sp/>switch<sp/>case&quot;;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>test<sp/>case<sp/>whose<sp/>name<sp/>ends<sp/>with<sp/>&quot;DeathTest&quot;<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal">TEST(NotADeathTest,<sp/>Test)<sp/>{<sp/>SUCCEED();<sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/googletest-death-test-test.cc"/>
  </compounddef>
</doxygen>
