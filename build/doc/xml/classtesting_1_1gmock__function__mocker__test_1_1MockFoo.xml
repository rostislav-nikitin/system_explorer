<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kind="class" language="C++" prot="public">
    <compoundname>testing::gmock_function_mocker_test::MockFoo</compoundname>
    <basecompoundref refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface" prot="public" virt="non-virtual">testing::gmock_function_mocker_test::FooInterface</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a359f6530fe83f315f715b8bd7db8e656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MockFoo</definition>
        <argsstring>()=default</argsstring>
        <name>MockFoo</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MockFoo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="140" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1aa51bd02d682a33eeafaa297c1967455b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(void, VoidReturning,(int n))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <param>
          <type>VoidReturning</type>
        </param>
        <param>
          <type>(int n)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="143" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1aeed9392b4906326c2e5ec651ea9155ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, Nullary,())</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>Nullary</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="145" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a96c4dd29a859254e057513027a3315c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(bool, Unary,(int))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>Unary</type>
        </param>
        <param>
          <type>(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="148" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a9d6597b94797dfeb1061ad7a48bbc141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(long, Binary,(short, int))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>Binary</type>
        </param>
        <param>
          <type>(short, int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="149" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ab6783427c5fb99f8a9c25fba9210c748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, Decimal,(bool, char, short, int, long, float, double, unsigned, char *, const std::string &amp;str),(override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>Decimal</type>
        </param>
        <param>
          <type>(bool, char, short, int, long, float, double, unsigned, char *, const std::string &amp;str)</type>
        </param>
        <param>
          <type>(override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="150" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a50aeadd7e413ca2a8ba4507b21d4b345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(bool, TakesNonConstReference,(int &amp;))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>TakesNonConstReference</type>
        </param>
        <param>
          <type>(int &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="155" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a8449bdfea3eaf9fabb34fa694c17ab25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(std::string, TakesConstReference,(const int &amp;))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type>TakesConstReference</type>
        </param>
        <param>
          <type>(const int &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="156" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a68193fcc8b336763c92cb1c8fd7a97ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(bool, TakesConst,(const int))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>TakesConst</type>
        </param>
        <param>
          <type>(const int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="157" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a8fdcae66e6f4efa07a57580235ca3323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>((std::map&lt; int, std::string &gt;), ReturnTypeWithComma,(),())</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>(std::map&lt; int, std::string &gt;)</type>
        </param>
        <param>
          <type>ReturnTypeWithComma</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="160" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1adfb6a040264fc42059f0b47e3f21e2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>((std::map&lt; int, std::string &gt;), ReturnTypeWithComma,(int),(const))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>(std::map&lt; int, std::string &gt;)</type>
        </param>
        <param>
          <type>ReturnTypeWithComma</type>
        </param>
        <param>
          <type>(int)</type>
        </param>
        <param>
          <type>(const)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="161" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ae7564f6d942087d67512b521fb355f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, OverloadedOnArgumentNumber,())</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>OverloadedOnArgumentNumber</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="164" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ab859902d52f376112fa8c8d5ca402d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, OverloadedOnArgumentNumber,(int))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>OverloadedOnArgumentNumber</type>
        </param>
        <param>
          <type>(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="165" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a6c4bc14602957c662e9ace719cf0fd96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, OverloadedOnArgumentType,(int))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>OverloadedOnArgumentType</type>
        </param>
        <param>
          <type>(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="167" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ae7680c58ebcf5f91c5f190043528b313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(char, OverloadedOnArgumentType,(char))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>OverloadedOnArgumentType</type>
        </param>
        <param>
          <type>(char)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="168" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a57a7faaeec9d76031292fa532c35c0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, OverloadedOnConstness,(),(override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>OverloadedOnConstness</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="170" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a83b1f88fdda3669b8c600daee345bbbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(char, OverloadedOnConstness,(),(override, const))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>OverloadedOnConstness</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(override, const)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="171" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a0a0a46aa356c5f7314a37fc1a4d16720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, TypeWithHole,(int(*)()),())</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>TypeWithHole</type>
        </param>
        <param>
          <type>(int(*)())</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="173" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ab6c0fd6e1285132fb787053cd89ec5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, TypeWithComma,((const std::map&lt; int, std::string &gt; &amp;)))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>TypeWithComma</type>
        </param>
        <param>
          <type>((const std::map&lt; int, std::string &gt; &amp;))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="174" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a887e304dcf8658b35634a7a547fad991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, TypeWithTemplatedCopyCtor,(const TemplatedCopyable&lt; int &gt; &amp;))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>TypeWithTemplatedCopyCtor</type>
        </param>
        <param>
          <type>(const <ref refid="classtesting_1_1gmock__function__mocker__test_1_1TemplatedCopyable" kindref="compound">TemplatedCopyable</ref>&lt; int &gt; &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="175" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1af221e9f514688078a4a5ec383c853ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int(*)(bool), ReturnsFunctionPointer1,(int),())</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int(*)(bool)</type>
        </param>
        <param>
          <type>ReturnsFunctionPointer1</type>
        </param>
        <param>
          <type>(int)</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="178" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a89a925c04db716d77b10b5551e45f113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(fn_ptr, ReturnsFunctionPointer2,(int),())</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>fn_ptr</type>
        </param>
        <param>
          <type>ReturnsFunctionPointer2</type>
        </param>
        <param>
          <type>(int)</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="179" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ac34611f80378de2609230f345328d02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, RefQualifiedConstRef,(),(const, ref(&amp;), override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>RefQualifiedConstRef</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(const, ref(&amp;), override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="194" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a8c7fdef6410df4ea15921eb0c00388a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, RefQualifiedConstRefRef,(),(const, ref(&amp;&amp;), override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>RefQualifiedConstRefRef</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(const, ref(&amp;&amp;), override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="195" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a7a75db1ec6d3f305a431c1dc190c3d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, RefQualifiedRef,(),(ref(&amp;), override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>RefQualifiedRef</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(ref(&amp;), override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="196" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a769fef0826a5ec89bdf0b7348f9c140b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, RefQualifiedRefRef,(),(ref(&amp;&amp;), override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>RefQualifiedRefRef</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(ref(&amp;&amp;), override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="197" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a8e89bc16471d33aa0283e05a49968614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, RefQualifiedOverloaded,(),(const, ref(&amp;), override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>RefQualifiedOverloaded</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(const, ref(&amp;), override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="199" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ac2a0aa0e551730615ff592e0381ea410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, RefQualifiedOverloaded,(),(const, ref(&amp;&amp;), override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>RefQualifiedOverloaded</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(const, ref(&amp;&amp;), override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="200" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a6ce1d0cc10d3b052a3be6b4cc7bddffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, RefQualifiedOverloaded,(),(ref(&amp;), override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>RefQualifiedOverloaded</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(ref(&amp;), override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="201" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a0a7f6d2cfc6bc1abc6a362e723fbf9b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</definition>
        <argsstring>(int, RefQualifiedOverloaded,(),(ref(&amp;&amp;), override))</argsstring>
        <name>MOCK_METHOD</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MOCK_METHOD</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>RefQualifiedOverloaded</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>(ref(&amp;&amp;), override)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="202" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a216712da70c7dd18fa4b6f9208499f27" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_function_mocker_test::MockFoo::MockFoo</definition>
        <argsstring>(const MockFoo &amp;)=delete</argsstring>
        <name>MockFoo</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::MockFoo</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="205" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a5f4e3c4c07d990913b24b2c18be374d3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref> &amp;</type>
        <definition>MockFoo &amp; testing::gmock_function_mocker_test::MockFoo::operator=</definition>
        <argsstring>(const MockFoo &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>testing::gmock_function_mocker_test::MockFoo::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo" kindref="compound">MockFoo</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="206" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>testing::gmock_function_mocker_test::FooInterface</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface"/>
      </node>
      <node id="1">
        <label>testing::gmock_function_mocker_test::MockFoo</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>testing::gmock_function_mocker_test::FooInterface</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface"/>
      </node>
      <node id="1">
        <label>testing::gmock_function_mocker_test::MockFoo</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" line="138" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc" bodystart="138" bodyend="207"/>
    <listofallmembers>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a8d6e54401a3addca464903257529ace4" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>Binary</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a2a415a61b9a9c7a69bba9a4b5ef2a63e" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>Decimal</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a70abf7998b6302d9ea2f330ea3e01b8f" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>fn_ptr</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1aa51bd02d682a33eeafaa297c1967455b" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1aeed9392b4906326c2e5ec651ea9155ca" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a96c4dd29a859254e057513027a3315c8" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a9d6597b94797dfeb1061ad7a48bbc141" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ab6783427c5fb99f8a9c25fba9210c748" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a50aeadd7e413ca2a8ba4507b21d4b345" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a8449bdfea3eaf9fabb34fa694c17ab25" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a68193fcc8b336763c92cb1c8fd7a97ea" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a8fdcae66e6f4efa07a57580235ca3323" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1adfb6a040264fc42059f0b47e3f21e2df" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ae7564f6d942087d67512b521fb355f94" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ab859902d52f376112fa8c8d5ca402d8a" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a6c4bc14602957c662e9ace719cf0fd96" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ae7680c58ebcf5f91c5f190043528b313" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a57a7faaeec9d76031292fa532c35c0c6" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a83b1f88fdda3669b8c600daee345bbbc" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a0a0a46aa356c5f7314a37fc1a4d16720" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ab6c0fd6e1285132fb787053cd89ec5ab" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a887e304dcf8658b35634a7a547fad991" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1af221e9f514688078a4a5ec383c853ff4" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a89a925c04db716d77b10b5551e45f113" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ac34611f80378de2609230f345328d02a" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a8c7fdef6410df4ea15921eb0c00388a5" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a7a75db1ec6d3f305a431c1dc190c3d48" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a769fef0826a5ec89bdf0b7348f9c140b" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a8e89bc16471d33aa0283e05a49968614" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1ac2a0aa0e551730615ff592e0381ea410" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a6ce1d0cc10d3b052a3be6b4cc7bddffe" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a0a7f6d2cfc6bc1abc6a362e723fbf9b4" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MOCK_METHOD</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a359f6530fe83f315f715b8bd7db8e656" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MockFoo</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a216712da70c7dd18fa4b6f9208499f27" prot="private" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>MockFoo</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a9440f75381e8a44977c2caee7914098f" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>Nullary</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1MockFoo_1a5f4e3c4c07d990913b24b2c18be374d3" prot="private" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>operator=</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ae27d00da9698493b196d0913dd5b6c1a" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>OverloadedOnArgumentNumber</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1abc3dde10866e94084cdf5b3b412d2274" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>OverloadedOnArgumentNumber</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a78fc84ae56ba53a36047f0791d03fc58" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>OverloadedOnArgumentType</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ae45c3906c2196a0978720b91c521f91f" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>OverloadedOnArgumentType</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a94e43dbddc176d1702a7a7d7281f2642" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>OverloadedOnConstness</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a9014d2f6527f719b718b0915b27ff5c5" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>OverloadedOnConstness</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a97d8d9433b4c154e96f6523589ebf4da" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>RefQualifiedConstRef</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1aa51eb97c5a8fe915a6a5ef2a24c8b192" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>RefQualifiedConstRefRef</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1aa38bdef20c08e3e0afff67b86bb0effb" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>RefQualifiedOverloaded</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1adc4c965116f6ee2b1f57abfbe95aaa2f" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>RefQualifiedOverloaded</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a75ffd8cf08541392ae272de1580c48ca" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>RefQualifiedOverloaded</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a60ea15ae778c97867cecb71bdd4f750d" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>RefQualifiedOverloaded</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ab593a18ba3b8f905b7d1af553d0d2ea1" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>RefQualifiedRef</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a4029023fc8c82f8810b46dc87f6887e6" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>RefQualifiedRefRef</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a855bdcea5e7f0b17ee050da4969c8027" prot="public" virt="non-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>ReturnsFunctionPointer1</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ae1315a533d4f38afb178623ac7c2337d" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>ReturnsFunctionPointer2</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1abb43737fd2eeb7599b6f0af540890f50" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>TakesConst</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a4765c543c11b5d544a35f9fe8de758bd" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>TakesConstReference</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1aaf21cef138ffa4a8f2372c7fbed95b18" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>TakesNonConstReference</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1af1f1d96db798fadbf53fbd886e7c738e" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>TypeWithComma</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1aa14850645cd7a5462480f1717df5153c" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>TypeWithHole</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1af9e3190c69647229baed1dba41c2fdf8" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>TypeWithTemplatedCopyCtor</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a6f28f91c92b59da029ed0cb61c3d1da6" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>Unary</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1ab62327ee683b362d9e5579266b74a09c" prot="public" virt="pure-virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>VoidReturning</name></member>
      <member refid="classtesting_1_1gmock__function__mocker__test_1_1FooInterface_1a519fed9f1a8dceee37c8bb1fc990434d" prot="public" virt="virtual"><scope>testing::gmock_function_mocker_test::MockFoo</scope><name>~FooInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
