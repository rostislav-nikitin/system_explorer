<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock-more-actions__test_8cc" kind="file" language="C++">
    <compoundname>gmock-more-actions_test.cc</compoundname>
    <includes refid="gmock-more-actions_8h" local="yes">gmock/gmock-more-actions.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">functional</includes>
    <includes local="no">iterator</includes>
    <includes local="no">memory</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">vector</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="5">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
      </node>
      <node id="77">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="21">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="12">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/test/gmock-more-actions_test.cc</label>
        <link refid="gmock-more-actions__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="31">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="55">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="22">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="17">
        <label>assert.h</label>
      </node>
      <node id="47">
        <label>atomic</label>
      </node>
      <node id="59">
        <label>cassert</label>
      </node>
      <node id="26">
        <label>cerrno</label>
      </node>
      <node id="73">
        <label>cmath</label>
      </node>
      <node id="38">
        <label>cstddef</label>
      </node>
      <node id="19">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>ctype.h</label>
      </node>
      <node id="6">
        <label>errno.h</label>
      </node>
      <node id="74">
        <label>exception</label>
      </node>
      <node id="50">
        <label>float.h</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="75">
        <label>initializer_list</label>
      </node>
      <node id="39">
        <label>iomanip</label>
      </node>
      <node id="76">
        <label>ios</label>
      </node>
      <node id="61">
        <label>iosfwd</label>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="57">
        <label>iterator</label>
      </node>
      <node id="27">
        <label>limits</label>
      </node>
      <node id="69">
        <label>limits.h</label>
      </node>
      <node id="28">
        <label>locale</label>
      </node>
      <node id="51">
        <label>map</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="14">
        <label>ostream</label>
      </node>
      <node id="35">
        <label>regex.h</label>
      </node>
      <node id="40">
        <label>set</label>
      </node>
      <node id="41">
        <label>sstream</label>
      </node>
      <node id="24">
        <label>stddef.h</label>
      </node>
      <node id="13">
        <label>stdio.h</label>
      </node>
      <node id="18">
        <label>stdlib.h</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="25">
        <label>string.h</label>
      </node>
      <node id="33">
        <label>strings.h</label>
      </node>
      <node id="29">
        <label>sys/stat.h</label>
      </node>
      <node id="30">
        <label>sys/types.h</label>
      </node>
      <node id="10">
        <label>tuple</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="36">
        <label>typeinfo</label>
      </node>
      <node id="34">
        <label>unistd.h</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structtesting_1_1gmock__more__actions__test_1_1UnaryFunctor" prot="public">testing::gmock_more_actions_test::UnaryFunctor</innerclass>
    <innerclass refid="structtesting_1_1gmock__more__actions__test_1_1SumOf5Functor" prot="public">testing::gmock_more_actions_test::SumOf5Functor</innerclass>
    <innerclass refid="structtesting_1_1gmock__more__actions__test_1_1SumOf6Functor" prot="public">testing::gmock_more_actions_test::SumOf6Functor</innerclass>
    <innerclass refid="classtesting_1_1gmock__more__actions__test_1_1Foo" prot="public">testing::gmock_more_actions_test::Foo</innerclass>
    <innerclass refid="classtesting_1_1gmock__more__actions__test_1_1DeletionTester" prot="public">testing::gmock_more_actions_test::DeletionTester</innerclass>
    <innerclass refid="classtesting_1_1gmock__more__actions__test_1_1TenArgConstructorClass" prot="public">testing::gmock_more_actions_test::TenArgConstructorClass</innerclass>
    <innerclass refid="classtesting_1_1gmock__more__actions__test_1_1BoolResetter" prot="public">testing::gmock_more_actions_test::BoolResetter</innerclass>
    <innerclass refid="structtesting_1_1gmock__more__actions__test_1_1GiantTemplate" prot="public">testing::gmock_more_actions_test::GiantTemplate</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__more__actions__test">testing::gmock_more_actions_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__more__actions__test_1_1action__test">testing::gmock_more_actions_test::action_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>built-in<sp/>actions<sp/>in<sp/>gmock-actions.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-more-actions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4577)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">namespace<sp/>testing<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_more_actions_test<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">using<sp/>::std::plus;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">using<sp/>::std::string;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Action" kindref="compound">testing::Action</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::DeleteArg;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Invoke;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ReturnArg;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ReturnPointee;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::SaveArg;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::SaveArgPointee;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::SetArgReferee;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1IgnoredValue" kindref="compound">testing::Unused</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::WithArg;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::WithoutArgs;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>suppressing<sp/>compiler<sp/>warnings<sp/>on<sp/>conversion<sp/>possibly<sp/>losing<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Short(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions<sp/>and<sp/>functors<sp/>for<sp/>testing<sp/>Invoke()<sp/>and<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Unary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ByConstRef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g_double<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ReferencesGlobalDouble(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;x<sp/>==<sp/>&amp;g_double;<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="structtesting_1_1gmock__more__actions__test_1_1UnaryFunctor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__more__actions__test_1_1UnaryFunctor" kindref="compound">UnaryFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>?<sp/>1<sp/>:<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Binary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input<sp/>+<sp/>n;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ternary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y<sp/>+<sp/>z;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d;<sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOfFirst2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>Unused,<sp/>Unused)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf5(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structtesting_1_1gmock__more__actions__test_1_1SumOf5Functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__more__actions__test_1_1SumOf5Functor" kindref="compound">SumOf5Functor</ref><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf6(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structtesting_1_1gmock__more__actions__test_1_1SumOf6Functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__more__actions__test_1_1SumOf6Functor" kindref="compound">SumOf6Functor</ref><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">std::string<sp/>Concat7(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">std::string<sp/>Concat8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">std::string<sp/>Concat9(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">std::string<sp/>Concat10(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s10)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9<sp/>+<sp/>s10;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classtesting_1_1gmock__more__actions__test_1_1Foo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__more__actions__test_1_1Foo" kindref="compound">Foo</ref><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1Foo" kindref="compound">Foo</ref>()<sp/>:<sp/>value_(123)<sp/>{}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Unary(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">short</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_<sp/>+<sp/>x);<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>std::string<sp/>Binary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str<sp/>+<sp/>c;<sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ternary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>+<sp/>x<sp/>+<sp/>y<sp/>*<sp/>z;<sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>value_;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOfLast2(<ref refid="classtesting_1_1internal_1_1IgnoredValue" kindref="compound">Unused</ref>,<sp/><ref refid="classtesting_1_1internal_1_1IgnoredValue" kindref="compound">Unused</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf5(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf6(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>std::string<sp/>Concat7(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>std::string<sp/>Concat8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>std::string<sp/>Concat9(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::string<sp/>Concat10(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s10)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9<sp/>+<sp/>s10;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>nullary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">TEST(InvokeTest,<sp/>Nullary)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt;int()&gt;<sp/>a<sp/>=<sp/>Invoke(Nullary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>unary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">TEST(InvokeTest,<sp/>Unary)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt;bool(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(Unary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a.Perform(std::make_tuple(1)));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(std::make_tuple(-1)));</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>binary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">TEST(InvokeTest,<sp/>Binary)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>short)&gt;<sp/>a<sp/>=<sp/>Invoke(Binary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>EXPECT_EQ(p<sp/>+<sp/>2,<sp/>a.Perform(std::make_tuple(p,<sp/>Short(2))));</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>ternary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">TEST(InvokeTest,<sp/>Ternary)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(Ternary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a.Perform(std::make_tuple(1,<sp/></highlight><highlight class="charliteral">&apos;\2&apos;</highlight><highlight class="normal">,<sp/>Short(3))));</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>4-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes4Arguments)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(SumOf4);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1234,<sp/>a.Perform(std::make_tuple(1000,<sp/>200,<sp/>30,<sp/>4)));</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>5-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes5Arguments)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(SumOf5);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a.Perform(std::make_tuple(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5)));</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>6-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes6Arguments)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(SumOf6);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123456,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(100000,<sp/>20000,<sp/>3000,<sp/>400,<sp/>50,<sp/>6)));</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>that<sp/>turns<sp/>the<sp/>type<sp/>of<sp/>a<sp/>C-string<sp/>literal<sp/>from<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char[N]<sp/>to<sp/>const<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>CharPtr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>7-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes7Arguments)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>Invoke(Concat7);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>8-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes8Arguments)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>Invoke(Concat8);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;12345678&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>9-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes9Arguments)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>Invoke(Concat9);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>10-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes10Arguments)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>Invoke(Concat10);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567890&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>functions<sp/>with<sp/>parameters<sp/>declared<sp/>as<sp/>Unused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionWithUnusedParameters)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;)&gt;<sp/>a1<sp/>=<sp/>Invoke(SumOfFirst2);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>std::tuple&lt;int,<sp/>int,<sp/>double,<sp/>std::string&gt;<sp/>dummy<sp/>=</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(10,<sp/>2,<sp/>5.6,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12,<sp/>a1.Perform(dummy));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a2<sp/>=<sp/>Invoke(SumOfFirst2);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>23,<sp/>a2.Perform(std::make_tuple(20,<sp/>3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>methods<sp/>with<sp/>parameters<sp/>declared<sp/>as<sp/>Unused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">TEST(InvokeTest,<sp/>MethodWithUnusedParameters)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>Action&lt;int(std::string,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOfLast2);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12,<sp/>a1.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>10,<sp/>2)));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a2<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOfLast2);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>EXPECT_EQ(23,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>2.5,<sp/>20,<sp/>3)));</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">TEST(InvokeTest,<sp/>Functor)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>Action&lt;long(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(plus&lt;long&gt;());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3L,<sp/>a.Perform(std::make_tuple(1,<sp/>2)));</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke(f)<sp/>as<sp/>an<sp/>action<sp/>of<sp/>a<sp/>compatible<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionWithCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>Action&lt;long(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(SumOf4);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4321,<sp/>a.Perform(std::make_tuple(4000,<sp/>Short(300),<sp/>Char(20),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>an<sp/>object<sp/>pointer<sp/>and<sp/>a<sp/>method<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>nullary<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">TEST(InvokeMethodTest,<sp/>Nullary)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>Action&lt;int()&gt;<sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Nullary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>unary<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">TEST(InvokeMethodTest,<sp/>Unary)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>Action&lt;short(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Unary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4123,<sp/>a.Perform(std::make_tuple(4000)));</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>binary<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">TEST(InvokeMethodTest,<sp/>Binary)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Binary);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>std::string<sp/>s(</highlight><highlight class="stringliteral">&quot;Hell&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>std::tuple&lt;std::string,<sp/>char&gt;<sp/>dummy<sp/>=<sp/>std::make_tuple(s,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>a.Perform(dummy));</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>ternary<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">TEST(InvokeMethodTest,<sp/>Ternary)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Ternary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1124,<sp/>a.Perform(std::make_tuple(1000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>Char(1))));</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>4-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes4Arguments)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOf4);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1357,<sp/>a.Perform(std::make_tuple(1000,<sp/>200,<sp/>30,<sp/>4)));</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>5-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes5Arguments)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOf5);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a.Perform(std::make_tuple(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5)));</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>6-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes6Arguments)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOf6);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123456,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(100000,<sp/>20000,<sp/>3000,<sp/>400,<sp/>50,<sp/>6)));</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>7-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes7Arguments)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Concat7);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>8-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes8Arguments)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Concat8);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;12345678&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>9-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes9Arguments)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Concat9);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>10-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes10Arguments)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Concat10);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567890&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke(f)<sp/>as<sp/>an<sp/>action<sp/>of<sp/>a<sp/>compatible<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodWithCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>Action&lt;long(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOf4);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4444,<sp/>a.Perform(std::make_tuple(4000,<sp/>Short(300),<sp/>Char(20),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithoutArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>no<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">TEST(WithoutArgsTest,<sp/>NoArg)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)&gt;<sp/>a<sp/>=<sp/>WithoutArgs(Invoke(Nullary));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(std::make_tuple(2)));</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArg<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>1<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">TEST(WithArgTest,<sp/>OneArg)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>Action&lt;bool(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)&gt;<sp/>b<sp/>=<sp/>WithArg&lt;1&gt;(Invoke(Unary));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(b.Perform(std::make_tuple(1.5,<sp/>-1)));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(b.Perform(std::make_tuple(1.5,<sp/>1)));</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">TEST(ReturnArgActionTest,<sp/>WorksForOneArgIntArg0)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>ReturnArg&lt;0&gt;();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a.Perform(std::make_tuple(5)));</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">TEST(ReturnArgActionTest,<sp/>WorksForMultiArgBoolArg0)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;bool(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>ReturnArg&lt;0&gt;();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">TEST(ReturnArgActionTest,<sp/>WorksForMultiArgStringArg2)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;std::string(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::string,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>ReturnArg&lt;2&gt;();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;seven&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(5,<sp/>6,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;seven&quot;</highlight><highlight class="normal">),<sp/>8)));</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">TEST(ReturnArgActionTest,<sp/>WorksForNonConstRefArg0)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;std::string&amp;(std::string&amp;)&gt;<sp/>a<sp/>=<sp/>ReturnArg&lt;0&gt;();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>std::string<sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;12345&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;s,<sp/>&amp;a.Perform(std::forward_as_tuple(s)));</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">TEST(SaveArgActionTest,<sp/>WorksForSameType)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)&gt;<sp/>a1<sp/>=<sp/>SaveArg&lt;0&gt;(&amp;result);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>a1.Perform(std::make_tuple(5));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>result);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">TEST(SaveArgActionTest,<sp/>WorksForCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>SaveArg&lt;1&gt;(&amp;result);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">TEST(SaveArgPointeeActionTest,<sp/>WorksForSameType)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a1<sp/>=<sp/>SaveArgPointee&lt;0&gt;(&amp;result);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>a1.Perform(std::make_tuple(&amp;value));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>result);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">TEST(SaveArgPointeeActionTest,<sp/>WorksForCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a1<sp/>=<sp/>SaveArgPointee&lt;1&gt;(&amp;result);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">TEST(SetArgRefereeActionTest,<sp/>WorksForSameType)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)&gt;<sp/>a1<sp/>=<sp/>SetArgReferee&lt;0&gt;(1);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>a1.Perform(std::tuple&lt;int&amp;&gt;(value));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>value);</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">TEST(SetArgRefereeActionTest,<sp/>WorksForCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)&gt;<sp/>a1<sp/>=<sp/>SetArgReferee&lt;1&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>a1.Perform(std::tuple&lt;int,<sp/>int&amp;&gt;(0,<sp/>value));</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">TEST(SetArgRefereeActionTest,<sp/>WorksWithExtraArguments)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a1<sp/>=<sp/>SetArgReferee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>a1.Perform(std::tuple&lt;bool,<sp/>int,<sp/>int&amp;,<sp/>const<sp/>char*&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0,<sp/>value,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>verify<sp/>that<sp/>its<sp/>destructor<sp/>is<sp/>called:<sp/>it<sp/>will<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>bool<sp/>provided<sp/>to<sp/>the<sp/>constructor<sp/>to<sp/>true<sp/>when<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="classtesting_1_1gmock__more__actions__test_1_1DeletionTester" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__more__actions__test_1_1DeletionTester" kindref="compound">DeletionTester</ref><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1DeletionTester" kindref="compound">DeletionTester</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_deleted)<sp/>:<sp/>is_deleted_(is_deleted)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>bit<sp/>is<sp/>set<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>*is_deleted_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1DeletionTester" kindref="compound">~DeletionTester</ref>()<sp/>{<sp/>*is_deleted_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_deleted_;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">};</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">TEST(DeleteArgActionTest,<sp/>OneArg)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_deleted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1DeletionTester" kindref="compound">DeletionTester</ref>*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1DeletionTester" kindref="compound">DeletionTester</ref>(&amp;is_deleted);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt;void(<ref refid="classtesting_1_1gmock__more__actions__test_1_1DeletionTester" kindref="compound">DeletionTester</ref>*)&gt;<sp/>a1<sp/>=<sp/>DeleteArg&lt;0&gt;();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(is_deleted);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>a1.Perform(std::make_tuple(t));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(is_deleted);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal">TEST(DeleteArgActionTest,<sp/>TenArgs)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_deleted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>DeletionTester*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DeletionTester(&amp;is_deleted);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt;void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeletionTester*)&gt;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>DeleteArg&lt;9&gt;();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(is_deleted);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5,<sp/>6,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>t));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(is_deleted);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">TEST(ThrowActionTest,<sp/>ThrowsGivenExceptionInVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)&gt;<sp/>a<sp/>=<sp/>Throw(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>EXPECT_THROW(a.Perform(std::make_tuple(0)),<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyException<sp/>{};</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">TEST(ThrowActionTest,<sp/>ThrowsGivenExceptionInNonVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;double(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)&gt;<sp/>a<sp/>=<sp/>Throw(MyException());</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>EXPECT_THROW(a.Perform(std::make_tuple(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)),<sp/>MyException);</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">TEST(ThrowActionTest,<sp/>ThrowsGivenExceptionInNullaryFunction)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;double()&gt;<sp/>a<sp/>=<sp/>Throw(MyException());</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>EXPECT_THROW(a.Perform(std::make_tuple()),<sp/>MyException);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Object<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Object()<sp/>{}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Func()<sp/>{}</highlight></codeline>
<codeline lineno="580"><highlight class="normal">};</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockObject<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Object<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>~MockObject()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>MOCK_METHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Func,<sp/>(),<sp/>(</highlight><highlight class="keyword">override</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="586"><highlight class="normal">};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">TEST(ThrowActionTest,<sp/>Times0)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MockObject<sp/>m;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CALL(m,<sp/>Func()).WillByDefault([]<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;something&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(m,<sp/>Func()).Times(0);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.Func();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exception<sp/>is<sp/>caught<sp/>but<sp/>Times(0)<sp/>still<sp/>triggers<sp/>a<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}(),</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetArrayArgument&lt;N&gt;(first,<sp/>last)<sp/>sets<sp/>the<sp/>elements<sp/>of<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointed<sp/>to<sp/>by<sp/>the<sp/>N-th<sp/>(0-based)<sp/>argument<sp/>to<sp/>values<sp/>in<sp/>range<sp/>[first,<sp/>last).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">TEST(SetArrayArgumentTest,<sp/>SetsTheNthArray)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MyFunction<sp/>=<sp/>void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbers[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArrayArgument&lt;1&gt;(numbers,<sp/>numbers<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[4]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pn<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch[4]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pch<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pn,<sp/>pch));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n[0]);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n[1]);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>n[2]);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[3]);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[0]);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[1]);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[2]);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[3]);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>first<sp/>and<sp/>last<sp/>are<sp/>iterators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>std::string<sp/>letters<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>SetArrayArgument&lt;2&gt;(letters.begin(),<sp/>letters.end());</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>std::fill_n(n,<sp/>4,<sp/>0);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>std::fill_n(ch,<sp/>4,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pn,<sp/>pch));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[0]);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[1]);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[2]);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[3]);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>ch[0]);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>ch[1]);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>ch[2]);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[3]);</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>SetArrayArgument&lt;N&gt;(first,<sp/>last)<sp/>where<sp/>first<sp/>==<sp/>last.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">TEST(SetArrayArgumentTest,<sp/>SetsTheNthArrayWithEmptyRange)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MyFunction<sp/>=<sp/>void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbers[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArrayArgument&lt;1&gt;(numbers,<sp/>numbers);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[4]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pn<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pn));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[0]);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[1]);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[2]);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[3]);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>SetArrayArgument&lt;N&gt;(first,<sp/>last)<sp/>where<sp/>*first<sp/>is<sp/>convertible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(but<sp/>not<sp/>equal)<sp/>to<sp/>the<sp/>argument<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal">TEST(SetArrayArgumentTest,<sp/>SetsTheNthArrayWithConvertibleType)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MyFunction<sp/>=<sp/>void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>chars[]<sp/>=<sp/>{97,<sp/>98,<sp/>99};</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArrayArgument&lt;1&gt;(chars,<sp/>chars<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codes[4]<sp/>=<sp/>{111,<sp/>222,<sp/>333,<sp/>444};</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pcodes<sp/>=<sp/>codes;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pcodes));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>EXPECT_EQ(97,<sp/>codes[0]);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>EXPECT_EQ(98,<sp/>codes[1]);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>EXPECT_EQ(99,<sp/>codes[2]);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>EXPECT_EQ(444,<sp/>codes[3]);</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>SetArrayArgument&lt;N&gt;(first,<sp/>last)<sp/>with<sp/>iterator<sp/>as<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">TEST(SetArrayArgumentTest,<sp/>SetsTheNthArrayWithIteratorArgument)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MyFunction<sp/>=<sp/>void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>std::back_insert_iterator&lt;std::string&gt;);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>std::string<sp/>letters<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArrayArgument&lt;1&gt;(letters.begin(),<sp/>letters.end());</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>std::back_inserter(s)));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>EXPECT_EQ(letters,<sp/>s);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal">TEST(ReturnPointeeTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int()&gt;<sp/>a<sp/>=<sp/>ReturnPointee(&amp;n);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>43;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>EXPECT_EQ(43,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>InvokeArgument&lt;N&gt;(...).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>nullary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function0)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)())&gt;<sp/>a<sp/>=<sp/>InvokeArgument&lt;1&gt;();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(std::make_tuple(2,<sp/>&amp;Nullary)));</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>unary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Functor1)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>Action&lt;int(UnaryFunctor)&gt;<sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(std::make_tuple(UnaryFunctor())));</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>5-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function5)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a.Perform(std::make_tuple(&amp;SumOf5)));</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>5-ary<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Functor5)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>Action&lt;int(SumOf5Functor)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a.Perform(std::make_tuple(SumOf5Functor())));</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>6-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function6)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(100000,<sp/>20000,<sp/>3000,<sp/>400,<sp/>50,<sp/>6);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123456,<sp/>a.Perform(std::make_tuple(&amp;SumOf6)));</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>6-ary<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Functor6)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>Action&lt;int(SumOf6Functor)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(100000,<sp/>20000,<sp/>3000,<sp/>400,<sp/>50,<sp/>6);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123456,<sp/>a.Perform(std::make_tuple(SumOf6Functor())));</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>7-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function7)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>Action&lt;std::string(std::string(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))&gt;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(&amp;Concat7)));</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>8-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function8)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>Action&lt;std::string(std::string(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))&gt;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;12345678&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(&amp;Concat8)));</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>9-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function9)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>Action&lt;std::string(std::string(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))&gt;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(&amp;Concat9)));</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>10-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function10)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>Action&lt;std::string(std::string(*)(</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))&gt;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567890&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(&amp;Concat10)));</highlight></codeline>
<codeline lineno="769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>pointer<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>ByPointerFunction)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n))&gt;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">),<sp/>Short(1));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(&amp;Binary)));</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>passing<sp/>it<sp/>a<sp/>C-string<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>FunctionWithCStringLiteral)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n))&gt;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/>Short(1));</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>a.Perform(std::make_tuple(&amp;Binary)));</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>ByConstReferenceFunction)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>Action&lt;bool(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s))&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(std::string(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>action<sp/>&apos;a&apos;<sp/>is<sp/>constructed,<sp/>it<sp/>makes<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>object<sp/>passed<sp/>to<sp/>it,<sp/>so<sp/>it&apos;s<sp/>OK<sp/>to<sp/>use<sp/>&apos;a&apos;<sp/>later,<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>object<sp/>has<sp/>already<sp/>died.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(std::make_tuple(&amp;ByConstRef)));</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>ByRef()<sp/>and<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>ByExplicitConstReferenceFunction)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>Action&lt;bool(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x))&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(ByRef(g_double));</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>line<sp/>calls<sp/>ByRef()<sp/>on<sp/>a<sp/>const<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(std::make_tuple(&amp;ReferencesGlobalDouble)));</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(ByRef(x));<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>calls<sp/>ByRef()<sp/>on<sp/>a<sp/>non-const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a.Perform(std::make_tuple(&amp;ReferencesGlobalDouble)));</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">TEST(DoAllTest,<sp/>TwoActions)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=<sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(2));</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>a.Perform(std::make_tuple(&amp;n)));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>a3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">TEST(DoAllTest,<sp/>ThreeActions)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=<sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),<sp/>Return(3));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a.Perform(std::make_tuple(&amp;m,<sp/>&amp;n)));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>a3,<sp/>a4).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">TEST(DoAllTest,<sp/>FourActions)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/>SetArgPointee&lt;1&gt;(2),<sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a.Perform(std::make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;ch)));</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>ch);</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>a3,<sp/>a4,<sp/>a5).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal">TEST(DoAllTest,<sp/>FiveActions)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>action<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/>SetArgPointee&lt;1&gt;(2),<sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),<sp/>Return(3));</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(std::make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b)));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a6).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">TEST(DoAllTest,<sp/>SixActions)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>action<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/>SetArgPointee&lt;1&gt;(2),<sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),<sp/>Return(3));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(std::make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c)));</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a7).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">TEST(DoAllTest,<sp/>SevenActions)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>d<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>action<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/>SetArgPointee&lt;1&gt;(2),<sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;5&gt;(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(std::make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c,<sp/>&amp;d)));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a8).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal">TEST(DoAllTest,<sp/>EightActions)<sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>d<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>e<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>action<sp/>=</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/>SetArgPointee&lt;1&gt;(2),<sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;5&gt;(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;6&gt;(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">),<sp/>Return(3));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(std::make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c,<sp/>&amp;d,<sp/>&amp;e)));</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a9).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal">TEST(DoAllTest,<sp/>NineActions)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>d<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>e<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>f<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>action<sp/>=<sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;5&gt;(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;6&gt;(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;7&gt;(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">),<sp/>Return(3));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(std::make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c,<sp/>&amp;d,<sp/>&amp;e,<sp/>&amp;f)));</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a10).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal">TEST(DoAllTest,<sp/>TenActions)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>d<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>e<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>f<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>g<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>action<sp/>=</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/>SetArgPointee&lt;1&gt;(2),<sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;5&gt;(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;6&gt;(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;7&gt;(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">),<sp/>SetArgPointee&lt;8&gt;(</highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">),<sp/>Return(3));</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>action.Perform(std::make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c,<sp/>&amp;d,<sp/>&amp;e,<sp/>&amp;f,<sp/>&amp;g)));</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/>g);</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">TEST(DoAllTest,<sp/>NoArgs)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ran_first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>Action&lt;bool()&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll([&amp;]<sp/>{<sp/>ran_first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>},<sp/>[&amp;]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ran_first;<sp/>});</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform({}));</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal">TEST(DoAllTest,<sp/>MoveOnlyArgs)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ran_first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>Action&lt;int(std::unique_ptr&lt;int&gt;)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(InvokeWithoutArgs([&amp;]<sp/>{<sp/>ran_first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}),</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](std::unique_ptr&lt;int&gt;<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*p;<sp/>});</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>a.Perform(std::make_tuple(std::unique_ptr&lt;int&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(7)))));</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ran_first);</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal">TEST(DoAllTest,<sp/>ImplicitlyConvertsActionArguments)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ran_first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Action&lt;void(std::vector&lt;int&gt;)&gt;<sp/>isn&apos;t<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Action&lt;void(const<sp/>std::vector&lt;int&gt;&amp;)<sp/>but<sp/>can<sp/>be<sp/>converted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>Action&lt;void(std::vector&lt;int&gt;)&gt;<sp/>first<sp/>=<sp/>[&amp;]<sp/>{<sp/>ran_first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>Action&lt;int(std::vector&lt;int&gt;)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(first,<sp/>[](std::vector&lt;int&gt;<sp/>arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg.front();<sp/>});</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>a.Perform(std::make_tuple(std::vector&lt;int&gt;{7})));</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ran_first);</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ACTION*()<sp/>macros<sp/>trigger<sp/>warning<sp/>C4100<sp/>(unreferenced<sp/>formal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter)<sp/>in<sp/>MSVC<sp/>with<sp/>-W4.<sp/><sp/>Unfortunately<sp/>they<sp/>cannot<sp/>be<sp/>fixed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>macro<sp/>definition,<sp/>as<sp/>the<sp/>warnings<sp/>are<sp/>generated<sp/>when<sp/>the<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>expanded<sp/>and<sp/>macro<sp/>expansion<sp/>cannot<sp/>contain<sp/>#pragma.<sp/><sp/>Therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>suppress<sp/>them<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also<sp/>suppress<sp/>C4503<sp/>decorated<sp/>name<sp/>length<sp/>exceeded,<sp/>name<sp/>was<sp/>truncated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4100<sp/>4503)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>ACTION*()<sp/>macro<sp/>family.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>can<sp/>define<sp/>an<sp/>action<sp/>that<sp/>doesn&apos;t<sp/>reference<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mock<sp/>function<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal">ACTION(Return5)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;<sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksWhenNotReferencingArguments)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>Action&lt;double()&gt;<sp/>a1<sp/>=<sp/>Return5();</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(5,<sp/>a1.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;<sp/>a2<sp/>=<sp/>Return5();</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a2.Perform(std::make_tuple(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>can<sp/>define<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal">ACTION(IncrementArg1)<sp/>{<sp/>(*arg1)++;<sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksWhenReturningVoid)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a1<sp/>=<sp/>IncrementArg1();</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>a1.Perform(std::make_tuple(5,<sp/>&amp;n));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION()<sp/>can<sp/>reference<sp/>the<sp/>type<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal">ACTION(IncrementArg2)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int*,<sp/>arg2_type&gt;();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>arg2_type<sp/>temp<sp/>=<sp/>arg2;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>(*temp)++;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanReferenceArgumentType)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a1<sp/>=<sp/>IncrementArg2();</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>a1.Perform(std::make_tuple(5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>&amp;n));</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION()<sp/>can<sp/>reference<sp/>the<sp/>argument<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>via<sp/>args_type<sp/>and<sp/>args.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal">ACTION(Sum2)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;std::tuple&lt;int,<sp/>char,<sp/>int*&gt;,<sp/>args_type&gt;();</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>args_type<sp/>args_copy<sp/>=<sp/>args;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(args_copy)<sp/>+<sp/>std::get&lt;1&gt;(args_copy);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanReferenceArgumentTuple)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a1<sp/>=<sp/>Sum2();</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>EXPECT_EQ(11,<sp/>a1.Perform(std::make_tuple(5,<sp/>Char(6),<sp/>&amp;dummy)));</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION()<sp/>can<sp/>reference<sp/>the<sp/>mock<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Dummy(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flag<sp/>?<sp/>1<sp/>:<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal">ACTION(InvokeDummy)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int(bool),<sp/>function_type&gt;();</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>function_type*<sp/>fp<sp/>=<sp/>&amp;Dummy;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*fp)(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanReferenceMockFunctionType)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>InvokeDummy();</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION()<sp/>can<sp/>reference<sp/>the<sp/>mock<sp/>function&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">ACTION(InvokeDummy2)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int,<sp/>return_type&gt;();</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>return_type<sp/>result<sp/>=<sp/>Dummy(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanReferenceMockFunctionReturnType)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>InvokeDummy2();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>works<sp/>for<sp/>arguments<sp/>passed<sp/>by<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">ACTION(ReturnAddrOfConstBoolReferenceArg)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;const<sp/>bool&amp;,<sp/>arg1_type&gt;();</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg1;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksForConstReferenceArg)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*(int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;)&gt;<sp/>a<sp/>=<sp/>ReturnAddrOfConstBoolReferenceArg();</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;b,<sp/>a.Perform(std::tuple&lt;int,<sp/>const<sp/>bool&amp;&gt;(0,<sp/>b)));</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>works<sp/>for<sp/>arguments<sp/>passed<sp/>by<sp/>non-const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal">ACTION(ReturnAddrOfIntReferenceArg)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int&amp;,<sp/>arg0_type&gt;();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg0;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksForNonConstReferenceArg)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/>bool,<sp/>int)&gt;<sp/>a<sp/>=<sp/>ReturnAddrOfIntReferenceArg();</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>a.Perform(std::tuple&lt;int&amp;,<sp/>bool,<sp/>int&gt;(n,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">action_test<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">ACTION(Sum)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>arg1;<sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>action_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksInNamespace)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>action_test::Sum();</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a1.Perform(std::make_tuple(1,<sp/>2)));</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>same<sp/>ACTION<sp/>definition<sp/>works<sp/>for<sp/>mock<sp/>functions<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>argument<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal">ACTION(PlusTwo)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksForDifferentArgumentNumbers)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>PlusTwo();</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4,<sp/>a1.Perform(std::make_tuple(2)));</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>Action&lt;double(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>a2<sp/>=<sp/>PlusTwo();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(6,<sp/>a2.Perform(std::make_tuple(4.0f,<sp/>&amp;dummy)));</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_P<sp/>can<sp/>define<sp/>a<sp/>parameterized<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal">ACTION_P(Plus,<sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal">TEST(ActionPMacroTest,<sp/>DefinesParameterizedAction)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>t)&gt;<sp/>a1<sp/>=<sp/>Plus(9);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>a1.Perform(std::make_tuple(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION_P<sp/>can<sp/>reference<sp/>the<sp/>argument<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>parameter<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal">ACTION_P(TypedPlus,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>arg0_type<sp/>t1<sp/>=<sp/>arg0;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>n_type<sp/>t2<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t1<sp/>+<sp/>t2;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal">TEST(ActionPMacroTest,<sp/>CanReferenceArgumentAndParameterTypes)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>t)&gt;<sp/>a1<sp/>=<sp/>TypedPlus(9);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>a1.Perform(std::make_tuple(Char(1),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>parameterized<sp/>action<sp/>can<sp/>be<sp/>used<sp/>in<sp/>any<sp/>mock<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whose<sp/>type<sp/>is<sp/>compatible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal">TEST(ActionPMacroTest,<sp/>WorksInCompatibleMockFunction)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)&gt;<sp/>a1<sp/>=<sp/>Plus(</highlight><highlight class="stringliteral">&quot;tail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>re<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;re&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>std::tuple&lt;const<sp/>std::string&gt;<sp/>dummy<sp/>=<sp/>std::make_tuple(re);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;retail&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(dummy));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>use<sp/>ACTION*()<sp/>to<sp/>define<sp/>actions<sp/>overloaded<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal">ACTION(OverloadedAction)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>?<sp/>arg1<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal">ACTION_P(OverloadedAction,<sp/>default_value)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>?<sp/>arg1<sp/>:<sp/>default_value;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal">ACTION_P2(OverloadedAction,<sp/>true_value,<sp/>false_value)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>?<sp/>true_value<sp/>:<sp/>false_value;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanDefineOverloadedActions)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MyAction<sp/>=<sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(bool,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyAction<sp/>a1<sp/>=<sp/>OverloadedAction();</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyAction<sp/>a2<sp/>=<sp/>OverloadedAction(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyAction<sp/>a3<sp/>=<sp/>OverloadedAction(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;you&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>a3.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;you&quot;</highlight><highlight class="normal">,<sp/>a3.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ACTION_Pn<sp/>where<sp/>n<sp/>&gt;=<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal">ACTION_P3(Plus,<sp/>m,<sp/>n,<sp/>k)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>m<sp/>+<sp/>n<sp/>+<sp/>k;<sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor3Parameters)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>Action&lt;double(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>t)&gt;<sp/>a1<sp/>=<sp/>Plus(100,<sp/>20,<sp/>3.4);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(3123.4,<sp/>a1.Perform(std::make_tuple(3000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)&gt;<sp/>a2<sp/>=<sp/>Plus(</highlight><highlight class="stringliteral">&quot;tail&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>re<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;re&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>std::tuple&lt;const<sp/>std::string&gt;<sp/>dummy<sp/>=<sp/>std::make_tuple(re);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;retail-&gt;&quot;</highlight><highlight class="normal">,<sp/>a2.Perform(dummy));</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal">ACTION_P4(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3;<sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor4Parameters)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4,<sp/>a1.Perform(std::make_tuple(10)));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal">ACTION_P5(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4;<sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor5Parameters)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5,<sp/>a1.Perform(std::make_tuple(10)));</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal">ACTION_P6(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor6Parameters)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6,<sp/>a1.Perform(std::make_tuple(10)));</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal">ACTION_P7(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6)<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5<sp/>+<sp/>p6;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor7Parameters)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7,<sp/>a1.Perform(std::make_tuple(10)));</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal">ACTION_P8(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7)<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5<sp/>+<sp/>p6<sp/>+<sp/>p7;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor8Parameters)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8,</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a1.Perform(std::make_tuple(10)));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal">ACTION_P9(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>p8)<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5<sp/>+<sp/>p6<sp/>+<sp/>p7<sp/>+<sp/>p8;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor9Parameters)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8<sp/>+<sp/>9,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a1.Perform(std::make_tuple(10)));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal">ACTION_P10(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>p8,<sp/>last_param)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>arg0_type<sp/>t0<sp/>=<sp/>arg0;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>last_param_type<sp/>t9<sp/>=<sp/>last_param;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5<sp/>+<sp/>p6<sp/>+<sp/>p7<sp/>+<sp/>p8<sp/>+<sp/>t9;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor10Parameters)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8<sp/>+<sp/>9<sp/>+<sp/>10,</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a1.Perform(std::make_tuple(10)));</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>action<sp/>body<sp/>can<sp/>promote<sp/>the<sp/>parameter<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal">ACTION_P2(PadArgument,<sp/>prefix,<sp/>suffix)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>lines<sp/>promote<sp/>the<sp/>two<sp/>parameters<sp/>to<sp/>desired<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>std::string<sp/>prefix_str(prefix);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>suffix_char<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(suffix);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prefix_str<sp/>+<sp/>arg0<sp/>+<sp/>suffix_char;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>SimpleTypePromotion)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>no_promo<sp/>=</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PadArgument(std::string(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>promo<sp/>=</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PadArgument(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/>no_promo.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;ba&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/>promo.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;ba&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>partially<sp/>restrict<sp/>parameter<sp/>types<sp/>using<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>straight-forward<sp/>pattern.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>generic<sp/>action<sp/>that<sp/>doesn&apos;t<sp/>restrict<sp/>the<sp/>types<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal">ACTION_P3(ConcatImpl,<sp/>a,<sp/>b,<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Next,<sp/>we<sp/>try<sp/>to<sp/>restrict<sp/>that<sp/>either<sp/>the<sp/>first<sp/>parameter<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string,<sp/>or<sp/>the<sp/>second<sp/>parameter<sp/>is<sp/>an<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>partially<sp/>specialized<sp/>wrapper<sp/>that<sp/>restricts<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter<sp/>to<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ConcatImplActionP3<sp/>is<sp/>the<sp/>class<sp/>template<sp/>ACTION_P3<sp/>uses<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implement<sp/>ConcatImpl.<sp/><sp/>We<sp/>shouldn&apos;t<sp/>change<sp/>the<sp/>name<sp/>as<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pattern<sp/>requires<sp/>the<sp/>user<sp/>to<sp/>use<sp/>it<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal">ConcatImplActionP3&lt;std::string,<sp/>T1,<sp/>T2&gt;<sp/>Concat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>a,<sp/>T1<sp/>b,</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>GTEST_INTENTIONAL_CONST_COND_PUSH_()</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>if<sp/>(true)<sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_INTENTIONAL_CONST_COND_POP_()</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>branch<sp/>verifies<sp/>that<sp/>ConcatImpl()<sp/>can<sp/>be<sp/>invoked<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>template<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ConcatImpl(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>branch<sp/>verifies<sp/>that<sp/>ConcatImpl()<sp/>can<sp/>also<sp/>be<sp/>invoked<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>template<sp/>arguments.<sp/><sp/>It<sp/>doesn&apos;t<sp/>really<sp/>need<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>executed<sp/>as<sp/>this<sp/>is<sp/>a<sp/>compile-time<sp/>verification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConcatImpl&lt;std::string,<sp/>T1,<sp/>T2&gt;(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>another<sp/>partially<sp/>specialized<sp/>wrapper<sp/>that<sp/>restricts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>parameter<sp/>to<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">ConcatImplActionP3&lt;T1,<sp/>int,<sp/>T2&gt;<sp/>Concat(T1<sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>T2<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConcatImpl(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>CanPartiallyRestrictParameterTypes)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string()&gt;<sp/>a1<sp/>=<sp/>Concat(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello12&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>a1<sp/>=<sp/>Concat(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>the<sp/>type<sp/>of<sp/>an<sp/>ACTION*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal">ACTION(DoFoo)<sp/>{}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">ACTION_P(DoFoo,<sp/>p)<sp/>{}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal">ACTION_P2(DoFoo,<sp/>p0,<sp/>p1)<sp/>{}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>TypesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoFoo()<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>DoFooAction<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>DoFooAction<sp/>a0<sp/>=<sp/>DoFoo();</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoFoo(1)<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>DoFooActionP<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>DoFooActionP&lt;int&gt;<sp/>a1<sp/>=<sp/>DoFoo(1);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoFoo(p1,<sp/>...,<sp/>pk)<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>DoFooActionPk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>DoFooActionP2&lt;int,<sp/>char&gt;<sp/>a2<sp/>=<sp/>DoFoo(1,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>PlusActionP3&lt;int,<sp/>int,<sp/>char&gt;<sp/>a3<sp/>=<sp/>Plus(1,<sp/>2,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>PlusActionP4&lt;int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a4<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>PlusActionP5&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a5<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>PlusActionP6&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a6<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>PlusActionP7&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a7<sp/>=</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>PlusActionP8&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a8<sp/>=</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>PlusActionP9&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a9<sp/>=</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>PlusActionP10&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a10<sp/>=</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>&quot;unused<sp/>variable&quot;<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>(void)a0;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>(void)a1;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>(void)a2;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>(void)a3;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>(void)a4;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>(void)a5;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>(void)a6;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>(void)a7;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>(void)a8;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>(void)a9;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>(void)a10;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>ACTION_P*()<sp/>action<sp/>can<sp/>be<sp/>explicitly<sp/>instantiated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>reference-typed<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal">ACTION_P(Plus1,<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal">ACTION_P2(Plus2,<sp/>x,<sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y;<sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">ACTION_P3(Plus3,<sp/>x,<sp/>y,<sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y<sp/>+<sp/>z;<sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">ACTION_P10(Plus10,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>a4,<sp/>a5,<sp/>a6,<sp/>a7,<sp/>a8,<sp/>a9)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a0<sp/>+<sp/>a1<sp/>+<sp/>a2<sp/>+<sp/>a3<sp/>+<sp/>a4<sp/>+<sp/>a5<sp/>+<sp/>a6<sp/>+<sp/>a7<sp/>+<sp/>a8<sp/>+<sp/>a9;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>CanExplicitlyInstantiateWithReferenceTypes)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1,<sp/>y<sp/>=<sp/>2,<sp/>z<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;&gt;<sp/>empty<sp/>=<sp/>std::make_tuple();</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>Action&lt;int()&gt;<sp/>a<sp/>=<sp/>Plus1&lt;int&amp;&gt;(x);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(empty));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>Plus2&lt;const<sp/>int&amp;,<sp/>int&amp;&gt;(x,<sp/>y);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a.Perform(empty));</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>Plus3&lt;int&amp;,<sp/>const<sp/>int&amp;,<sp/>int&amp;&gt;(x,<sp/>y,<sp/>z);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a.Perform(empty));</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>Plus10&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;&gt;(n[0],<sp/>n[1],<sp/>n[2],<sp/>n[3],<sp/>n[4],<sp/>n[5],<sp/>n[6],</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n[7],<sp/>n[8],<sp/>n[9]);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>EXPECT_EQ(55,<sp/>a.Perform(empty));</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400" refid="classtesting_1_1gmock__more__actions__test_1_1TenArgConstructorClass" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__more__actions__test_1_1TenArgConstructorClass" kindref="compound">TenArgConstructorClass</ref><sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1TenArgConstructorClass" kindref="compound">TenArgConstructorClass</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a4,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a5,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a6,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a7,</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a8,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a9,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a10)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(a1<sp/>+<sp/>a2<sp/>+<sp/>a3<sp/>+<sp/>a4<sp/>+<sp/>a5<sp/>+<sp/>a6<sp/>+<sp/>a7<sp/>+<sp/>a8<sp/>+<sp/>a9<sp/>+<sp/>a10)<sp/>{}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>when<sp/>there<sp/>is<sp/>no<sp/>value<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal">ACTION_TEMPLATE(CreateNew,<sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T),</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_0_VALUE_PARAMS())<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksWithoutValueParam)<sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*()&gt;<sp/>a<sp/>=<sp/>CreateNew&lt;int&gt;();</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>when<sp/>there<sp/>are<sp/>value<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal">ACTION_TEMPLATE(CreateNew,<sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T),</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_1_VALUE_PARAMS(a0))<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(a0);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksWithValueParams)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*()&gt;<sp/>a<sp/>=<sp/>CreateNew&lt;int&gt;(42);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>*p);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>for<sp/>integral<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal">ACTION_TEMPLATE(MyDeleteArg,<sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>k),</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_0_VALUE_PARAMS())<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>std::get&lt;k&gt;(args);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Resets<sp/>a<sp/>bool<sp/>variable<sp/>in<sp/>the<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440" refid="classtesting_1_1gmock__more__actions__test_1_1BoolResetter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__more__actions__test_1_1BoolResetter" kindref="compound">BoolResetter</ref><sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1BoolResetter" kindref="compound">BoolResetter</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1BoolResetter" kindref="compound">~BoolResetter</ref>()<sp/>{<sp/>*value_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>value_;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksForIntegralTemplateParams)<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1BoolResetter" kindref="compound">BoolResetter</ref>*)&gt;<sp/>a<sp/>=<sp/>MyDeleteArg&lt;1&gt;();</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>resetter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1BoolResetter" kindref="compound">BoolResetter</ref>(&amp;b);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(&amp;n,<sp/>resetter));</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(b);<sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>resetter<sp/>is<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATES<sp/>works<sp/>for<sp/>template<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal">ACTION_TEMPLATE(ReturnSmartPointer,</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_1_TEMPLATE_PARAMS(template<sp/>&lt;typename<sp/>Pointee&gt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer),</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_1_VALUE_PARAMS(pointee))<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Pointer&lt;pointee_type&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pointee_type(pointee));</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksForTemplateTemplateParameters)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;std::shared_ptr&lt;int&gt;()&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReturnSmartPointer&lt;std::shared_ptr&gt;(42);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;int&gt;<sp/>p<sp/>=<sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>*p);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>for<sp/>10<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k4,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>k5,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T7,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T8,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T9&gt;</highlight></codeline>
<codeline lineno="1476" refid="structtesting_1_1gmock__more__actions__test_1_1GiantTemplate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__more__actions__test_1_1GiantTemplate" kindref="compound">GiantTemplate</ref><sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__more__actions__test_1_1GiantTemplate" kindref="compound">GiantTemplate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal">ACTION_TEMPLATE(ReturnGiant,</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_10_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T3,</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>k4,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>k5,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>k6,</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>T7,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>T8,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>T9,</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>T10),</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_1_VALUE_PARAMS(value))<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__more__actions__test_1_1GiantTemplate" kindref="compound">GiantTemplate&lt;T10&lt;T1&gt;</ref>,<sp/>T2,<sp/>T3,<sp/>k4,<sp/>k5,<sp/>k6,<sp/>T7,<sp/>T8,<sp/>T9&gt;(value);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksFor10TemplateParameters)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Giant<sp/>=<sp/>GiantTemplate&lt;std::shared_ptr&lt;int&gt;,<sp/>bool,<sp/>double,<sp/>5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>6,</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char,<sp/>unsigned,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt;Giant()&gt;<sp/>a<sp/>=<sp/>ReturnGiant&lt;int,<sp/>bool,<sp/>double,<sp/>5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>6,<sp/>char,</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned,<sp/>int,<sp/>std::shared_ptr&gt;(42);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>Giant<sp/>giant<sp/>=<sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>giant.value);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>for<sp/>10<sp/>value<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal">ACTION_TEMPLATE(ReturnSum,<sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>Number),</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_10_VALUE_PARAMS(v1,<sp/>v2,<sp/>v3,<sp/>v4,<sp/>v5,<sp/>v6,<sp/>v7,<sp/>v8,<sp/>v9,<sp/>v10))<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Number</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1)<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>v5<sp/>+<sp/>v6<sp/>+<sp/>v7<sp/>+<sp/>v8<sp/>+<sp/>v9<sp/>+<sp/>v10;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksFor10ValueParameters)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int()&gt;<sp/>a<sp/>=<sp/>ReturnSum&lt;int&gt;(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>EXPECT_EQ(55,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>and<sp/>ACTION/ACTION_P*<sp/>can<sp/>be<sp/>overloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>number<sp/>of<sp/>value<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal">ACTION(ReturnSum)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal">ACTION_P(ReturnSum,<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal">ACTION_TEMPLATE(ReturnSum,<sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>Number),</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_2_VALUE_PARAMS(v1,<sp/>v2))<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Number</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1)<sp/>+<sp/>v2;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal">ACTION_TEMPLATE(ReturnSum,<sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>Number),</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_3_VALUE_PARAMS(v1,<sp/>v2,<sp/>v3))<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Number</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1)<sp/>+<sp/>v2<sp/>+<sp/>v3;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal">ACTION_TEMPLATE(ReturnSum,<sp/>HAS_2_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>Number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>k),</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_4_VALUE_PARAMS(v1,<sp/>v2,<sp/>v3,<sp/>v4))<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Number</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1)<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal">TEST(ActionTemplateTest,<sp/>CanBeOverloadedOnNumberOfValueParameters)<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int()&gt;<sp/>a0<sp/>=<sp/>ReturnSum();</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int()&gt;<sp/>a1<sp/>=<sp/>ReturnSum(1);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int()&gt;<sp/>a2<sp/>=<sp/>ReturnSum&lt;int&gt;(1,<sp/>2);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int()&gt;<sp/>a3<sp/>=<sp/>ReturnSum&lt;int&gt;(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int()&gt;<sp/>a4<sp/>=<sp/>ReturnSum&lt;int,<sp/>10000&gt;(2000,<sp/>300,<sp/>40,<sp/>5);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a0.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a2.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a3.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a4.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_more_actions_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4100<sp/>4503</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4577</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-more-actions_test.cc"/>
  </compounddef>
</doxygen>
