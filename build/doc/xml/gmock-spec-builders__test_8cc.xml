<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock-spec-builders__test_8cc" kind="file" language="C++">
    <compoundname>gmock-spec-builders_test.cc</compoundname>
    <includes refid="gmock-spec-builders_8h" local="yes">gmock/gmock-spec-builders.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gmock-port_8h" local="yes">gmock/internal/gmock-port.h</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="14">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
      </node>
      <node id="73">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="24">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="18">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc</label>
        <link refid="gmock-spec-builders__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="34">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="55">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="25">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>assert.h</label>
      </node>
      <node id="48">
        <label>atomic</label>
      </node>
      <node id="59">
        <label>cassert</label>
      </node>
      <node id="29">
        <label>cerrno</label>
      </node>
      <node id="69">
        <label>cmath</label>
      </node>
      <node id="41">
        <label>cstddef</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="26">
        <label>ctype.h</label>
      </node>
      <node id="15">
        <label>errno.h</label>
      </node>
      <node id="70">
        <label>exception</label>
      </node>
      <node id="51">
        <label>float.h</label>
      </node>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="71">
        <label>initializer_list</label>
      </node>
      <node id="42">
        <label>iomanip</label>
      </node>
      <node id="72">
        <label>ios</label>
      </node>
      <node id="61">
        <label>iosfwd</label>
      </node>
      <node id="23">
        <label>iostream</label>
      </node>
      <node id="57">
        <label>iterator</label>
      </node>
      <node id="30">
        <label>limits</label>
      </node>
      <node id="67">
        <label>limits.h</label>
      </node>
      <node id="31">
        <label>locale</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="7">
        <label>ostream</label>
      </node>
      <node id="38">
        <label>regex.h</label>
      </node>
      <node id="8">
        <label>set</label>
      </node>
      <node id="9">
        <label>sstream</label>
      </node>
      <node id="27">
        <label>stddef.h</label>
      </node>
      <node id="19">
        <label>stdio.h</label>
      </node>
      <node id="22">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="28">
        <label>string.h</label>
      </node>
      <node id="36">
        <label>strings.h</label>
      </node>
      <node id="32">
        <label>sys/stat.h</label>
      </node>
      <node id="33">
        <label>sys/types.h</label>
      </node>
      <node id="17">
        <label>tuple</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="39">
        <label>typeinfo</label>
      </node>
      <node id="37">
        <label>unistd.h</label>
      </node>
      <node id="12">
        <label>utility</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesting">testing</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gmock-spec-builders__test_8cc_1a95606368148f3e5aab5db46c32466afd" prot="public" static="no">
        <name>Method</name>
        <initializer>MethodW</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" line="142" column="9" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-spec-builders__test_8cc_1aab83c63e96e715d4096c97348457fb14" prot="protected" static="no" mutable="no">
        <type>MockA</type>
        <definition>MockA a_</definition>
        <argsstring></argsstring>
        <name>a_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" line="1329" column="9" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" bodystart="1329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-spec-builders__test_8cc_1a7450f74c57def233a5a817abe4a16811" prot="protected" static="no" mutable="no">
        <type>MockB</type>
        <definition>MockB b_</definition>
        <argsstring></argsstring>
        <name>b_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" line="1330" column="9" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" bodystart="1330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-spec-builders__test_8cc_1ac4f474c82e82cbb89ca7c36dd52be0ed" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" line="1880" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" bodystart="1880" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-spec-builders__test_8cc_1a56607b084ac6bc242ad0b8db2d0f3c67" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string saved_verbose_flag_</definition>
        <argsstring></argsstring>
        <name>saved_verbose_flag_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" line="1906" column="21" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" bodystart="1906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-spec-builders__test_8cc_1aced75ce1fb905369b51aec91360f1096" prot="protected" static="no" mutable="no">
        <type>LogTestHelper</type>
        <definition>LogTestHelper helper_</definition>
        <argsstring></argsstring>
        <name>helper_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" line="2136" column="17" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" bodystart="2136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gmock-spec-builders__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" line="2592" column="5" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc" bodystart="2592" bodyend="2600"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>spec<sp/>builder<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-spec-builders.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">using<sp/>::testing::internal::FormatFileLocation;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">using<sp/>::testing::internal::kAllow;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">using<sp/>::testing::internal::kErrorVerbosity;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">using<sp/>::testing::internal::kFail;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">using<sp/>::testing::internal::kInfoVerbosity;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">using<sp/>::testing::internal::kWarn;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">using<sp/>::testing::internal::kWarningVerbosity;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">using<sp/>::testing::internal::CaptureStdout;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">using<sp/>::testing::internal::GetCapturedStdout;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Incomplete;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockIncomplete<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>verifies<sp/>that<sp/>a<sp/>mock<sp/>method<sp/>can<sp/>take<sp/>a<sp/>by-reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>argument<sp/>of<sp/>an<sp/>incomplete<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(ByRefFunc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Incomplete&amp;<sp/>x));</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tells<sp/>Google<sp/>Mock<sp/>how<sp/>to<sp/>print<sp/>a<sp/>value<sp/>of<sp/>type<sp/>Incomplete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Incomplete&amp;<sp/>x,<sp/>::std::ostream*<sp/>os);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">TEST(MockMethodTest,<sp/>CanInstantiateWithIncompleteArgType)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>though<sp/>this<sp/>mock<sp/>class<sp/>contains<sp/>a<sp/>mock<sp/>method<sp/>that<sp/>takes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by-reference<sp/>an<sp/>argument<sp/>whose<sp/>type<sp/>is<sp/>incomplete,<sp/>we<sp/>can<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>mock,<sp/>as<sp/>long<sp/>as<sp/>Google<sp/>Mock<sp/>knows<sp/>how<sp/>to<sp/>print<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>MockIncomplete<sp/>incomplete;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>EXPECT_CALL(incomplete,<sp/>ByRefFunc(_)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>definition<sp/>of<sp/>the<sp/>printer<sp/>for<sp/>the<sp/>argument<sp/>type<sp/>doesn&apos;t<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>visible<sp/>where<sp/>the<sp/>mock<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Incomplete&amp;<sp/></highlight><highlight class="comment">/*<sp/>x<sp/>*/</highlight><highlight class="normal">,<sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;incomplete&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Result<sp/>{};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type<sp/>that&apos;s<sp/>not<sp/>default<sp/>constructible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NonDefaultConstructible<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>NonDefaultConstructible(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockA<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>MockA()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoA,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(ReturnResult,<sp/>Result(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(ReturnNonDefaultConstructible,<sp/>NonDefaultConstructible());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Binary,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(ReturnInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>MockA(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockA&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>MockA&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockA&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockB<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>MockB()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0(DoB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>MockB(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockB&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>MockB&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockB&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReferenceHoldingMock<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>ReferenceHoldingMock()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(AcceptReference,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(std::shared_ptr&lt;MockA&gt;*));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>ReferenceHoldingMock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReferenceHoldingMock&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>ReferenceHoldingMock&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReferenceHoldingMock&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_CALL<sp/>and<sp/>ON_CALL<sp/>compile<sp/>in<sp/>a<sp/>presence<sp/>of<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>redefining<sp/>a<sp/>mock<sp/>method<sp/>name.<sp/>This<sp/>could<sp/>happen,<sp/>for<sp/>example,<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>tested<sp/>code<sp/>#includes<sp/>Win32<sp/>API<sp/>headers<sp/>which<sp/>define<sp/>many<sp/>APIs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>macros,<sp/>e.g.<sp/>#define<sp/>TextOut<sp/>TextOutW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Method<sp/>MethodW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CC<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~CC()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Method()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockCC<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CC<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>MockCC()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(Method,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>MockCC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockCC&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>MockCC&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockCC&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>method<sp/>with<sp/>expanded<sp/>name<sp/>compiles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">TEST(OnCallSyntaxTest,<sp/>CompilesWithMethodNameExpandedFromMacro)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>MockCC<sp/>cc;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>ON_CALL(cc,<sp/>Method());</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>method<sp/>with<sp/>expanded<sp/>name<sp/>not<sp/>only<sp/>compiles<sp/>but<sp/>runs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>returns<sp/>a<sp/>correct<sp/>value,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">TEST(OnCallSyntaxTest,<sp/>WorksWithMethodNameExpandedFromMacro)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>MockCC<sp/>cc;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>ON_CALL(cc,<sp/>Method()).WillByDefault(Return(42));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>cc.Method());</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>method<sp/>with<sp/>expanded<sp/>name<sp/>compiles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>CompilesWithMethodNameExpandedFromMacro)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>MockCC<sp/>cc;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>EXPECT_CALL(cc,<sp/>Method());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>cc.Method();</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>it<sp/>works,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WorksWithMethodNameExpandedFromMacro)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>MockCC<sp/>cc;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_CALL(cc,<sp/>Method()).WillOnce(Return(42));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>cc.Method());</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>Method<sp/><sp/></highlight><highlight class="comment">//<sp/>Done<sp/>with<sp/>macro<sp/>redefinition<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ON_CALL<sp/>evaluates<sp/>its<sp/>arguments<sp/>exactly<sp/>once<sp/>as<sp/>promised</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>Google<sp/>Mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">TEST(OnCallSyntaxTest,<sp/>EvaluatesFirstArgumentOnce)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>MockA*<sp/>pa<sp/>=<sp/>&amp;a;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>ON_CALL(*pa++,<sp/>DoA(_));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;a<sp/>+<sp/>1,<sp/>pa);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">TEST(OnCallSyntaxTest,<sp/>EvaluatesSecondArgumentOnce)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>DoA(n++));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>syntax<sp/>of<sp/>ON_CALL()<sp/>is<sp/>enforced<sp/>at<sp/>run<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">TEST(OnCallSyntaxTest,<sp/>WithIsOptional)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>DoA(5)).WillByDefault(Return());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>DoA(_)).With(_).WillByDefault(Return());</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">TEST(OnCallSyntaxTest,<sp/>WithCanAppearAtMostOnce)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CALL(a,<sp/>ReturnResult(_))</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.With(_)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.With(_)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(Result()));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.With()<sp/>cannot<sp/>appear<sp/>more<sp/>than<sp/>once<sp/>in<sp/>an<sp/>ON_CALL()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">TEST(OnCallSyntaxTest,<sp/>WillByDefaultIsMandatory)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CALL(a,<sp/>DoA(5));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(5);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">TEST(OnCallSyntaxTest,<sp/>WillByDefaultCanAppearAtMostOnce)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CALL(a,<sp/>DoA(5)).WillByDefault(Return()).WillByDefault(Return());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillByDefault()<sp/>must<sp/>appear<sp/>exactly<sp/>once<sp/>in<sp/>an<sp/>ON_CALL()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_CALL<sp/>evaluates<sp/>its<sp/>arguments<sp/>exactly<sp/>once<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>promised<sp/>by<sp/>Google<sp/>Mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>EvaluatesFirstArgumentOnce)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>MockA*<sp/>pa<sp/>=<sp/>&amp;a;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*pa++,<sp/>DoA(_));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>a.DoA(0);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;a<sp/>+<sp/>1,<sp/>pa);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>EvaluatesSecondArgumentOnce)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(n++));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>a.DoA(0);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>syntax<sp/>of<sp/>EXPECT_CALL()<sp/>is<sp/>enforced<sp/>at<sp/>run<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WithIsOptional)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(5)).Times(0);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(6)).With(_).Times(0);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WithCanAppearAtMostOnce)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(6)).With(_).With(_);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.With()<sp/>cannot<sp/>appear<sp/>more<sp/>than<sp/>once<sp/>in<sp/>an<sp/>EXPECT_CALL()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>a.DoA(6);</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WithMustBeFirstClause)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).Times(1).With(_);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.With()<sp/>must<sp/>be<sp/>the<sp/>first<sp/>clause<sp/>in<sp/>an<sp/>EXPECT_CALL()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).WillOnce(Return()).With(_);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.With()<sp/>must<sp/>be<sp/>the<sp/>first<sp/>clause<sp/>in<sp/>an<sp/>EXPECT_CALL()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>TimesCanBeInferred)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).WillOnce(Return());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).WillOnce(Return()).WillRepeatedly(Return());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>TimesCanAppearAtMostOnce)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).Times(1).Times(2);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.Times()<sp/>cannot<sp/>appear<sp/>more<sp/>than<sp/>once<sp/>in<sp/>an<sp/>EXPECT_CALL()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>TimesMustBeBeforeInSequence)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).InSequence(s).Times(1);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.Times()<sp/>may<sp/>only<sp/>appear<sp/>*before*<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>InSequenceIsOptional)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).InSequence(s);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>InSequenceCanAppearMultipleTimes)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>Sequence<sp/>s1,<sp/>s2;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).InSequence(s1,<sp/>s2).InSequence(s1);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>InSequenceMustBeBeforeAfter)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>Expectation<sp/>e<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).After(e).InSequence(s);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.InSequence()<sp/>cannot<sp/>appear<sp/>after<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>InSequenceMustBeBeforeWillOnce)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).WillOnce(Return()).InSequence(s);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.InSequence()<sp/>cannot<sp/>appear<sp/>after<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>AfterMustBeBeforeWillOnce)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>Expectation<sp/>e<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>EXPECT_CALL(a,<sp/>DoA(2)).WillOnce(Return()).After(e);<sp/>},</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.After()<sp/>cannot<sp/>appear<sp/>after<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WillIsOptional)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).WillOnce(Return());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WillCanAppearMultipleTimes)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1))</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(AnyNumber())</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return())</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return())</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return());</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WillMustBeBeforeWillRepeatedly)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).WillRepeatedly(Return()).WillOnce(Return());</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillOnce()<sp/>cannot<sp/>appear<sp/>after<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WillRepeatedlyIsOptional)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).WillOnce(Return());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).WillOnce(Return()).WillRepeatedly(Return());</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WillRepeatedlyCannotAppearMultipleTimes)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).WillRepeatedly(Return()).WillRepeatedly(</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillRepeatedly()<sp/>cannot<sp/>appear<sp/>more<sp/>than<sp/>once<sp/>in<sp/>an<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EXPECT_CALL()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WillRepeatedlyMustBeBeforeRetiresOnSaturation)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).RetiresOnSaturation().WillRepeatedly(Return());</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillRepeatedly()<sp/>cannot<sp/>appear<sp/>after<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>RetiresOnSaturationIsOptional)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).RetiresOnSaturation();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>RetiresOnSaturationCannotAppearMultipleTimes)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).RetiresOnSaturation().RetiresOnSaturation();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.RetiresOnSaturation()<sp/>cannot<sp/>appear<sp/>more<sp/>than<sp/>once&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>DefaultCardinalityIsOnce)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>be<sp/>called<sp/>once&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>be<sp/>called<sp/>once&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Mock<sp/>doesn&apos;t<sp/>print<sp/>a<sp/>warning<sp/>when<sp/>the<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WillOnce()<sp/>is<sp/>adequate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>DoesNotWarnOnAdequateActionCount)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>always<sp/>fine<sp/>to<sp/>omit<sp/>WillOnce()<sp/>entirely.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).Times(0);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(1)).Times(AtMost(1));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(2)).Times(1).WillRepeatedly(Return(1));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>fine<sp/>for<sp/>the<sp/>number<sp/>of<sp/>WillOnce()s<sp/>to<sp/>equal<sp/>the<sp/>upper<sp/>bound.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(3))</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Times(Between(1,<sp/>2))</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>fine<sp/>for<sp/>the<sp/>number<sp/>of<sp/>WillOnce()s<sp/>to<sp/>be<sp/>smaller<sp/>than<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>upper<sp/>bound<sp/>when<sp/>there<sp/>is<sp/>a<sp/>WillRepeatedly().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(4)).Times(AtMost(3)).WillOnce(Return(1)).WillRepeatedly(</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(2));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Satisfies<sp/>the<sp/>above<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB(2);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB(3);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStdout().c_str());</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Mock<sp/>warns<sp/>on<sp/>having<sp/>too<sp/>many<sp/>actions<sp/>in<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expectation<sp/>compared<sp/>to<sp/>its<sp/>cardinality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WarnsOnTooManyActions)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Warns<sp/>when<sp/>the<sp/>number<sp/>of<sp/>WillOnce()s<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>upper<sp/>bound.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).Times(0).WillOnce(Return(1));<sp/><sp/></highlight><highlight class="comment">//<sp/>#1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).Times(AtMost(1)).WillOnce(Return(1)).WillOnce(</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(2));<sp/><sp/></highlight><highlight class="comment">//<sp/>#2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(1))</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Times(1)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2))</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.RetiresOnSaturation();<sp/><sp/></highlight><highlight class="comment">//<sp/>#3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Warns<sp/>when<sp/>the<sp/>number<sp/>of<sp/>WillOnce()s<sp/>equals<sp/>the<sp/>upper<sp/>bound<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>a<sp/>WillRepeatedly().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).Times(0).WillRepeatedly(Return(1));<sp/><sp/></highlight><highlight class="comment">//<sp/>#4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(2)).Times(1).WillOnce(Return(1)).WillRepeatedly(</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(2));<sp/><sp/></highlight><highlight class="comment">//<sp/>#5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Satisfies<sp/>the<sp/>above<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB(2);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>actions<sp/>specified<sp/>in<sp/>EXPECT_CALL(b,<sp/>DoB())...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>to<sp/>be<sp/>never<sp/>called,<sp/>but<sp/>has<sp/>1<sp/>WillOnce().&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output);<sp/><sp/></highlight><highlight class="comment">//<sp/>#1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>actions<sp/>specified<sp/>in<sp/>EXPECT_CALL(b,<sp/>DoB())...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>to<sp/>be<sp/>called<sp/>at<sp/>most<sp/>once,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;but<sp/>has<sp/>2<sp/>WillOnce()s.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output);<sp/><sp/></highlight><highlight class="comment">//<sp/>#2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsSubstring,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>actions<sp/>specified<sp/>in<sp/>EXPECT_CALL(b,<sp/>DoB(1))...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>to<sp/>be<sp/>called<sp/>once,<sp/>but<sp/>has<sp/>2<sp/>WillOnce()s.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output);<sp/><sp/></highlight><highlight class="comment">//<sp/>#3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>actions<sp/>specified<sp/>in<sp/>EXPECT_CALL(b,<sp/>DoB())...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>to<sp/>be<sp/>never<sp/>called,<sp/>but<sp/>has<sp/>0<sp/>WillOnce()s<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>a<sp/>WillRepeatedly().&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output);<sp/><sp/></highlight><highlight class="comment">//<sp/>#4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsSubstring,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>actions<sp/>specified<sp/>in<sp/>EXPECT_CALL(b,<sp/>DoB(2))...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>to<sp/>be<sp/>called<sp/>once,<sp/>but<sp/>has<sp/>1<sp/>WillOnce()<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>a<sp/>WillRepeatedly().&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output);<sp/><sp/></highlight><highlight class="comment">//<sp/>#5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Mock<sp/>warns<sp/>on<sp/>having<sp/>too<sp/>few<sp/>actions<sp/>in<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expectation<sp/>compared<sp/>to<sp/>its<sp/>cardinality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WarnsOnTooFewActions)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).Times(Between(2,<sp/>3)).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>few<sp/>actions<sp/>specified<sp/>in<sp/>EXPECT_CALL(b,<sp/>DoB())...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>to<sp/>be<sp/>called<sp/>between<sp/>2<sp/>and<sp/>3<sp/>times,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;but<sp/>has<sp/>only<sp/>1<sp/>WillOnce().&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">TEST(ExpectCallSyntaxTest,<sp/>WarningIsErrorWithFlag)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>original_behavior<sp/>=<sp/>GMOCK_FLAG_GET(default_mock_behavior);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(default_mock_behavior,<sp/>kAllow);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(0);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>std::string<sp/>output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(output.empty())<sp/>&lt;&lt;<sp/>output;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(default_mock_behavior,<sp/>kWarn);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(0);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>std::string<sp/>warning_output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;GMOCK<sp/>WARNING&quot;</highlight><highlight class="normal">,<sp/>warning_output);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warning_output);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(default_mock_behavior,<sp/>kFail);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(0);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>bounds<sp/>values<sp/>are<sp/>converted<sp/>to<sp/>kWarn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(default_mock_behavior,<sp/>-1);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(0);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>warning_output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;GMOCK<sp/>WARNING&quot;</highlight><highlight class="normal">,<sp/>warning_output);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warning_output);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(default_mock_behavior,<sp/>3);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(0);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>warning_output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;GMOCK<sp/>WARNING&quot;</highlight><highlight class="normal">,<sp/>warning_output);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warning_output);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(default_mock_behavior,<sp/>original_behavior);</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>semantics<sp/>of<sp/>ON_CALL().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>built-in<sp/>default<sp/>action<sp/>is<sp/>taken<sp/>when<sp/>no<sp/>ON_CALL()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">TEST(OnCallTest,<sp/>TakesBuiltInDefaultActionWhenNoOnCall)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB());</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>built-in<sp/>default<sp/>action<sp/>is<sp/>taken<sp/>when<sp/>no<sp/>ON_CALL()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>the<sp/>invocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">TEST(OnCallTest,<sp/>TakesBuiltInDefaultActionWhenNoOnCallMatches)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(1)).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(2));</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>last<sp/>matching<sp/>ON_CALL()<sp/>action<sp/>is<sp/>taken.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">TEST(OnCallTest,<sp/>PicksLastMatchingOnCall)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(_)).WillByDefault(Return(3));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(2)).WillByDefault(Return(2));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(1)).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB(2));</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>semantics<sp/>of<sp/>EXPECT_CALL().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>any<sp/>call<sp/>is<sp/>allowed<sp/>when<sp/>no<sp/>EXPECT_CALL()<sp/>is<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">TEST(ExpectCallTest,<sp/>AllowsAnyCallWhenNoSpec)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB());</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>expectation<sp/>on<sp/>DoB(int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoB(int)<sp/>can<sp/>be<sp/>called<sp/>any<sp/>number<sp/>of<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>b.DoB(2);</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>last<sp/>matching<sp/>EXPECT_CALL()<sp/>fires.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">TEST(ExpectCallTest,<sp/>PicksLastMatchingExpectCall)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_)).WillRepeatedly(Return(2));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(1)).WillRepeatedly(Return(1));</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>lower-bound<sp/>violation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal">TEST(ExpectCallTest,<sp/>CatchesTooFewCalls)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(5)).Description(</highlight><highlight class="stringliteral">&quot;DoB<sp/>Method&quot;</highlight><highlight class="normal">).Times(AtLeast(2));</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.DoB(5);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>function<sp/>\&quot;DoB<sp/>Method\&quot;<sp/>call<sp/>count<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>match<sp/>EXPECT_CALL(b,<sp/>DoB(5))...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>to<sp/>be<sp/>called<sp/>at<sp/>least<sp/>twice\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>called<sp/>once<sp/>-<sp/>unsatisfied<sp/>and<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>cardinality<sp/>can<sp/>be<sp/>inferred<sp/>when<sp/>no<sp/>Times(...)<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">TEST(ExpectCallTest,<sp/>InfersCardinalityWhenThereIsNoWillRepeatedly)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>be<sp/>called<sp/>twice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NONFATAL_FAILURE(b.DoB(),<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>be<sp/>called<sp/>twice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">TEST(ExpectCallTest,<sp/>InfersCardinality1WhenThereIsWillRepeatedly)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1)).WillRepeatedly(Return(2));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1)).WillRepeatedly(Return(2));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1)).WillRepeatedly(Return(2));</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>be<sp/>called<sp/>at<sp/>least<sp/>once&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_INTERNAL_CPLUSPLUS_LANG)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>return<sp/>a<sp/>non-moveable<sp/>type<sp/>from<sp/>a<sp/>mock<sp/>action<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++17<sp/>and<sp/>above,<sp/>where<sp/>it&apos;s<sp/>guaranteed<sp/>that<sp/>such<sp/>a<sp/>type<sp/>can<sp/>be<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>a<sp/>prvalue<sp/>returned<sp/>from<sp/>a<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">TEST(ExpectCallTest,<sp/>NonMoveableType)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>non-moveable<sp/>result<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NonMoveableStruct<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>NonMoveableStruct(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x_in)<sp/>:<sp/>x(x_in)<sp/>{}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>NonMoveableStruct(NonMoveableStruct&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_move_constructible_v&lt;NonMoveableStruct&gt;);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_copy_constructible_v&lt;NonMoveableStruct&gt;);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_move_assignable_v&lt;NonMoveableStruct&gt;);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_copy_assignable_v&lt;NonMoveableStruct&gt;);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>be<sp/>able<sp/>to<sp/>use<sp/>a<sp/>callable<sp/>that<sp/>returns<sp/>that<sp/>result<sp/>as<sp/>both<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OnceAction<sp/>and<sp/>an<sp/>Action,<sp/>whether<sp/>the<sp/>callable<sp/>ignores<sp/>arguments<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>return_17<sp/>=<sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NonMoveableStruct(17);<sp/>};</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(OnceAction&lt;NonMoveableStruct()&gt;{return_17});</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Action&lt;NonMoveableStruct()&gt;{return_17});</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(OnceAction&lt;NonMoveableStruct(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;{return_17});</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Action&lt;NonMoveableStruct(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;{return_17});</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>return<sp/>the<sp/>result<sp/>end<sp/>to<sp/>end<sp/>through<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_CALL<sp/>statement,<sp/>with<sp/>both<sp/>WillOnce<sp/>and<sp/>WillRepeatedly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>MockFunction&lt;NonMoveableStruct()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)<sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(return_17)<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(return_17);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()().x);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()().x);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()().x);</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>C++17<sp/>and<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>n-th<sp/>action<sp/>is<sp/>taken<sp/>for<sp/>the<sp/>n-th<sp/>matching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>invocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal">TEST(ExpectCallTest,<sp/>NthMatchTakesNthAction)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1)).WillOnce(Return(2)).WillOnce(</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>WillRepeatedly()<sp/>action<sp/>is<sp/>taken<sp/>when<sp/>the<sp/>WillOnce(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>list<sp/>is<sp/>exhausted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">TEST(ExpectCallTest,<sp/>TakesRepeatedActionWhenWillListIsExhausted)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1)).WillRepeatedly(Return(2));</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>default<sp/>action<sp/>is<sp/>taken<sp/>when<sp/>the<sp/>WillOnce(...)<sp/>list<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exhausted<sp/>and<sp/>there<sp/>is<sp/>no<sp/>WillRepeatedly().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">TEST(ExpectCallTest,<sp/>TakesDefaultActionWhenWillListIsExhausted)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_)).Times(1);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB())</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(AnyNumber())</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));<sp/><sp/></highlight><highlight class="comment">//<sp/>Shouldn&apos;t<sp/>generate<sp/>a<sp/>warning<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation<sp/>has<sp/>no<sp/>action<sp/>clause<sp/>at<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output1<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>output1.c_str());</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output2<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>EXPECT_THAT(output2.c_str(),</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Actions<sp/>ran<sp/>out<sp/>in<sp/>EXPECT_CALL(b,<sp/>DoB())...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Called<sp/>3<sp/>times,<sp/>but<sp/>only<sp/>2<sp/>WillOnce()s<sp/>are<sp/>specified&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>returning<sp/>default<sp/>value.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>EXPECT_THAT(output2.c_str(),</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Actions<sp/>ran<sp/>out<sp/>in<sp/>EXPECT_CALL(b,<sp/>DoB())...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Called<sp/>4<sp/>times,<sp/>but<sp/>only<sp/>2<sp/>WillOnce()s<sp/>are<sp/>specified&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>returning<sp/>default<sp/>value.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal">TEST(FunctionMockerMessageTest,<sp/>ReportsExpectCallLocationForExhausedActions)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>std::string<sp/>expect_call_location<sp/>=<sp/>FormatFileLocation(__FILE__,<sp/>__LINE__<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).Times(AnyNumber()).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>warning<sp/>message<sp/>should<sp/>contain<sp/>the<sp/>call<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/>expect_call_location,<sp/>output);</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal">TEST(FunctionMockerMessageTest,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ReportsDefaultActionLocationOfUninterestingCallsForNaggyMock)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>std::string<sp/>on_call_location;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>NaggyMock&lt;MockB&gt;<sp/>b;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>on_call_location<sp/>=<sp/>FormatFileLocation(__FILE__,<sp/>__LINE__<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_CALL(b,<sp/>DoB(_)).WillByDefault(Return(0));</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB(0);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/>on_call_location,<sp/>GetCapturedStdout());</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>uninteresting<sp/>call<sp/>performs<sp/>the<sp/>default<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">TEST(UninterestingCallTest,<sp/>DoesDefaultAction)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>there<sp/>is<sp/>an<sp/>ON_CALL()<sp/>statement,<sp/>the<sp/>action<sp/>specified<sp/>by<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>taken.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>Binary(_,<sp/>_)).WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Binary(1,<sp/>2));</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>there<sp/>is<sp/>no<sp/>ON_CALL(),<sp/>the<sp/>default<sp/>value<sp/>for<sp/>the<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>unexpected<sp/>call<sp/>performs<sp/>the<sp/>default<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">TEST(UnexpectedCallTest,<sp/>DoesDefaultAction)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>there<sp/>is<sp/>an<sp/>ON_CALL()<sp/>statement,<sp/>the<sp/>action<sp/>specified<sp/>by<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>taken.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>Binary(_,<sp/>_)).WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>Binary(0,<sp/>0));</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>a.Binary(0,<sp/>0);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(result<sp/>=<sp/>a.Binary(1,<sp/>2),</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(result);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>there<sp/>is<sp/>no<sp/>ON_CALL(),<sp/>the<sp/>default<sp/>value<sp/>for<sp/>the<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(0)).Times(0);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(n<sp/>=<sp/>b.DoB(1),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n);</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>an<sp/>unexpected<sp/>void<sp/>function<sp/>generates<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal">TEST(UnexpectedCallTest,<sp/>GeneratesFailureForVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>tests<sp/>the<sp/>message<sp/>when<sp/>there<sp/>is<sp/>only<sp/>one<sp/>EXPECT_CALL().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>MockA<sp/>a1;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a1,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>a1.DoA(1);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ideally<sp/>we<sp/>should<sp/>match<sp/>the<sp/>failure<sp/>message<sp/>against<sp/>a<sp/>regex,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_NONFATAL_FAILURE<sp/>doesn&apos;t<sp/>support<sp/>that,<sp/>so<sp/>we<sp/>test<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>sub-strings<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a1.DoA(9),</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>returning<sp/>directly.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>DoA(9)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Google<sp/>Mock<sp/>tried<sp/>the<sp/>following<sp/>1<sp/>expectation,<sp/>but<sp/>it<sp/>didn&apos;t<sp/>match:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a1.DoA(9),</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>equal<sp/>to<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>9\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>to<sp/>be<sp/>called<sp/>once\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>called<sp/>once<sp/>-<sp/>saturated<sp/>and<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>tests<sp/>the<sp/>message<sp/>when<sp/>there<sp/>are<sp/>more<sp/>than<sp/>one<sp/>EXPECT_CALL().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>MockA<sp/>a2;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a2,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a2,<sp/>DoA(3));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>a2.DoA(1);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a2.DoA(2),</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>returning<sp/>directly.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>DoA(2)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Google<sp/>Mock<sp/>tried<sp/>the<sp/>following<sp/>2<sp/>expectations,<sp/>but<sp/>none<sp/>matched:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a2.DoA(2),</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tried<sp/>expectation<sp/>#0:<sp/>EXPECT_CALL(a2,<sp/>DoA(1))...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>equal<sp/>to<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>2\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>to<sp/>be<sp/>called<sp/>once\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>called<sp/>once<sp/>-<sp/>saturated<sp/>and<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a2.DoA(2),</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tried<sp/>expectation<sp/>#1:<sp/>EXPECT_CALL(a2,<sp/>DoA(3))...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>equal<sp/>to<sp/>3\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>2\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>to<sp/>be<sp/>called<sp/>once\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>never<sp/>called<sp/>-<sp/>unsatisfied<sp/>and<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>a2.DoA(3);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>unexpected<sp/>non-void<sp/>function<sp/>generates<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">TEST(UnexpectedCallTest,<sp/>GeneartesFailureForNonVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>MockB<sp/>b1;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b1,<sp/>DoB(1));</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>b1.DoB(1);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b1.DoB(2),</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>returning<sp/>default<sp/>value.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>DoB(2)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:<sp/>0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Google<sp/>Mock<sp/>tried<sp/>the<sp/>following<sp/>1<sp/>expectation,<sp/>but<sp/>it<sp/>didn&apos;t<sp/>match:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b1.DoB(2),</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>equal<sp/>to<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>2\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>to<sp/>be<sp/>called<sp/>once\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>called<sp/>once<sp/>-<sp/>saturated<sp/>and<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Mock<sp/>explains<sp/>that<sp/>an<sp/>retired<sp/>expectation<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>match<sp/>the<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">TEST(UnexpectedCallTest,<sp/>RetiredExpectation)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(1)).RetiresOnSaturation();</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(b.DoB(1),</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>the<sp/>expectation<sp/>is<sp/>active\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>it<sp/>is<sp/>retired&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Mock<sp/>explains<sp/>that<sp/>an<sp/>expectation<sp/>that<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>match<sp/>the<sp/>arguments<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">TEST(UnexpectedCallTest,<sp/>UnmatchedArguments)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(1));</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(b.DoB(2),</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>equal<sp/>to<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>2\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Mock<sp/>explains<sp/>that<sp/>an<sp/>expectation<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unsatisfied<sp/>pre-requisites<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">TEST(UnexpectedCallTest,<sp/>UnsatisfiedPrerequisites)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>Sequence<sp/>s1,<sp/>s2;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(1)).InSequence(s1);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(2)).Times(AnyNumber()).InSequence(s1);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(3)).InSequence(s2);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(4)).InSequence(s1,<sp/>s2);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>::testing::TestPartResultArray<sp/>failures;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::ScopedFakeTestPartResultReporter<sp/>reporter(&amp;failures);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB(4);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>&apos;failures&apos;<sp/>contains<sp/>the<sp/>Google<sp/>Test<sp/>failures<sp/>generated<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>above<sp/>statement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>one<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>failures.size());</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>const<sp/>::testing::TestPartResult&amp;<sp/>r<sp/>=<sp/>failures.GetTestPartResult(0);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>EXPECT_EQ(::testing::TestPartResult::kNonFatalFailure,<sp/>r.type());</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>failure<sp/>message<sp/>contains<sp/>the<sp/>two<sp/>unsatisfied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pre-requisites<sp/>but<sp/>not<sp/>the<sp/>satisfied<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_USES_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>EXPECT_THAT(r.message(),</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainsRegex(</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>POSIX<sp/>RE<sp/>doesn&apos;t<sp/>understand<sp/>the<sp/>(?s)<sp/>prefix,<sp/>but<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trouble<sp/>with<sp/>(.|\n).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>following<sp/>immediate<sp/>pre-requisites<sp/>are<sp/>not<sp/>satisfied:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(.|\n)*:<sp/>pre-requisite<sp/>#0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(.|\n)*:<sp/>pre-requisite<sp/>#1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>only<sp/>use<sp/>Google<sp/>Test&apos;s<sp/>own<sp/>simple<sp/>regex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>EXPECT_THAT(r.message(),</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainsRegex(</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>following<sp/>immediate<sp/>pre-requisites<sp/>are<sp/>not<sp/>satisfied:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>EXPECT_THAT(r.message(),<sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;:<sp/>pre-requisite<sp/>#0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>EXPECT_THAT(r.message(),<sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;:<sp/>pre-requisite<sp/>#1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USES_POSIX_RE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>b.DoB(3);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>b.DoB(4);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal">TEST(UndefinedReturnValueTest,</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ReturnValueIsMandatoryWhenNotDefaultConstructible)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>We<sp/>should<sp/>really<sp/>verify<sp/>the<sp/>output<sp/>message,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>cannot<sp/>yet<sp/>due<sp/>to<sp/>that<sp/>EXPECT_DEATH<sp/>only<sp/>captures<sp/>stderr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>Google<sp/>Mock<sp/>logs<sp/>to<sp/>stdout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>EXPECT_ANY_THROW(a.ReturnNonDefaultConstructible());</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(a.ReturnNonDefaultConstructible(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>excessive<sp/>call<sp/>(one<sp/>whose<sp/>arguments<sp/>match<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matchers<sp/>but<sp/>is<sp/>called<sp/>too<sp/>many<sp/>times)<sp/>performs<sp/>the<sp/>default<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal">TEST(ExcessiveCallTest,<sp/>DoesDefaultAction)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>there<sp/>is<sp/>an<sp/>ON_CALL()<sp/>statement,<sp/>the<sp/>action<sp/>specified<sp/>by<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>taken.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>Binary(_,<sp/>_)).WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>Binary(0,<sp/>0));</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>a.Binary(0,<sp/>0);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(result<sp/>=<sp/>a.Binary(0,<sp/>0),</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mock<sp/>function<sp/>called<sp/>more<sp/>times<sp/>than<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(result);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>there<sp/>is<sp/>no<sp/>ON_CALL(),<sp/>the<sp/>default<sp/>value<sp/>for<sp/>the<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(0)).Description(</highlight><highlight class="stringliteral">&quot;DoB<sp/>Method&quot;</highlight><highlight class="normal">).Times(0);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>b.DoB(0),</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mock<sp/>function<sp/>\&quot;DoB<sp/>Method\&quot;<sp/>called<sp/>more<sp/>times<sp/>than<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>a<sp/>void<sp/>function<sp/>is<sp/>called<sp/>too<sp/>many<sp/>times,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>failure<sp/>message<sp/>contains<sp/>the<sp/>argument<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal">TEST(ExcessiveCallTest,<sp/>GeneratesFailureForVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(_)).Description(</highlight><highlight class="stringliteral">&quot;DoA<sp/>Method&quot;</highlight><highlight class="normal">).Times(0);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(9),</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mock<sp/>function<sp/>\&quot;DoA<sp/>Method\&quot;<sp/>called<sp/>more<sp/>times<sp/>than<sp/>expected<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;returning<sp/>directly.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>DoA(9)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>to<sp/>be<sp/>never<sp/>called\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>called<sp/>once<sp/>-<sp/>over-saturated<sp/>and<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>a<sp/>non-void<sp/>function<sp/>is<sp/>called<sp/>too<sp/>many<sp/>times,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure<sp/>message<sp/>contains<sp/>the<sp/>argument<sp/>values<sp/>and<sp/>the<sp/>return<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal">TEST(ExcessiveCallTest,<sp/>GeneratesFailureForNonVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_));</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b.DoB(2),</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mock<sp/>function<sp/>called<sp/>more<sp/>times<sp/>than<sp/>expected<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;returning<sp/>default<sp/>value.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>DoB(2)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:<sp/>0\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>to<sp/>be<sp/>called<sp/>once\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>called<sp/>twice<sp/>-<sp/>over-saturated<sp/>and<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">TEST(InSequenceTest,<sp/>AllExpectationInScopeAreInSequence)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>dummy;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">TEST(InSequenceTest,<sp/>NestedInSequence)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>dummy;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InSequence<sp/>dummy2;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(3));</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal">TEST(InSequenceTest,<sp/>ExpectationsOutOfScopeAreNotAffected)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>dummy;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(3));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>any<sp/>order<sp/>is<sp/>allowed<sp/>when<sp/>no<sp/>sequence<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal">TEST(SequenceTest,<sp/>AnyOrderIsOkByDefault)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).Times(AnyNumber());</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).Times(AnyNumber());</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>calls<sp/>must<sp/>be<sp/>in<sp/>strict<sp/>order<sp/>when<sp/>a<sp/>complete<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal">TEST(SequenceTest,<sp/>CallsMustBeInStrictOrderWhenSaidSo1)<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>ReturnResult(_)).WillByDefault(Return(Result()));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>ReturnResult(1)).InSequence(s);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>ReturnResult(2)).InSequence(s);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>ReturnResult(3)).InSequence(s);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>a.ReturnResult(1);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>after<sp/>a.ReturnResult(2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a.ReturnResult(3),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>a.ReturnResult(2);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>a.ReturnResult(3);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>calls<sp/>must<sp/>be<sp/>in<sp/>strict<sp/>order<sp/>when<sp/>a<sp/>complete<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal">TEST(SequenceTest,<sp/>CallsMustBeInStrictOrderWhenSaidSo2)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>ReturnResult(_)).WillByDefault(Return(Result()));</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>ReturnResult(1)).InSequence(s);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>ReturnResult(2)).InSequence(s);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>after<sp/>a.ReturnResult(1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a.ReturnResult(2),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>a.ReturnResult(1);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>a.ReturnResult(2);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>specifying<sp/>a<sp/>DAG<sp/>using<sp/>multiple<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PartialOrderTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>PartialOrderTest()<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_CALL(a_,<sp/>ReturnResult(_)).WillByDefault(Return(Result()));</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Specifies<sp/>this<sp/>partial<sp/>ordering:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a.ReturnResult(1)<sp/>==&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.ReturnResult(2)<sp/>*<sp/>n<sp/><sp/>==&gt;<sp/><sp/>a.ReturnResult(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b.DoB()<sp/>*<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>==&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequence<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a_,<sp/>ReturnResult(1)).InSequence(x);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(b_,<sp/>DoB()).Times(2).InSequence(y);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a_,<sp/>ReturnResult(2)).Times(AnyNumber()).InSequence(x,<sp/>y);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a_,<sp/>ReturnResult(3)).InSequence(x);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>MockA<sp/>a_;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>MockB<sp/>b_;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal">TEST_F(PartialOrderTest,<sp/>CallsMustConformToSpecifiedDag1)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>a_.ReturnResult(1);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>b_.DoB();</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>after<sp/>the<sp/>second<sp/>DoB().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a_.ReturnResult(2),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>b_.DoB();</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>a_.ReturnResult(3);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal">TEST_F(PartialOrderTest,<sp/>CallsMustConformToSpecifiedDag2)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>after<sp/>ReturnResult(1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a_.ReturnResult(2),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>a_.ReturnResult(1);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>b_.DoB();</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>b_.DoB();</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>a_.ReturnResult(3);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal">TEST_F(PartialOrderTest,<sp/>CallsMustConformToSpecifiedDag3)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>last.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a_.ReturnResult(3),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>a_.ReturnResult(1);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>b_.DoB();</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>b_.DoB();</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>a_.ReturnResult(3);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal">TEST_F(PartialOrderTest,<sp/>CallsMustConformToSpecifiedDag4)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>a_.ReturnResult(1);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>b_.DoB();</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>b_.DoB();</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>a_.ReturnResult(3);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>before<sp/>ReturnResult(3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a_.ReturnResult(2),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal">TEST(SequenceTest,<sp/>Retirement)<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).InSequence(s);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(_)).InSequence(s).RetiresOnSaturation();</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1)).InSequence(s);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal">TEST(ExpectationTest,<sp/>ConstrutorsWork)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>ctor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ctor<sp/>from<sp/>various<sp/>forms<sp/>of<sp/>EXPECT_CALL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>Expectation<sp/>e3<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(3)).With(_);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>Expectation<sp/>e4<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(4)).Times(1);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>Expectation<sp/>e5<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(5)).InSequence(s);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>Expectation<sp/>e6<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(6)).After(e2);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>Expectation<sp/>e7<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(7)).WillOnce(Return());</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>Expectation<sp/>e8<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(8)).WillRepeatedly(Return());</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>Expectation<sp/>e9<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(9)).RetiresOnSaturation();</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>Expectation<sp/>e10<sp/>=<sp/>e2;<sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>ctor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>EXPECT_THAT(e1,<sp/>Ne(e2));</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>EXPECT_THAT(e2,<sp/>Eq(e10));</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>a.DoA(4);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>a.DoA(5);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>a.DoA(6);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>a.DoA(7);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>a.DoA(8);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>a.DoA(9);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal">TEST(ExpectationTest,<sp/>AssignmentWorks)<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>EXPECT_THAT(e1,<sp/>Ne(e2));</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>e1<sp/>=<sp/>e2;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>EXPECT_THAT(e1,<sp/>Eq(e2));</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ExpectationSet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal">TEST(ExpectationSetTest,<sp/>MemberTypesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>::testing::StaticAssertTypeEq&lt;Expectation,<sp/>ExpectationSet::value_type&gt;();</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal">TEST(ExpectationSetTest,<sp/>ConstructorsWork)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expectation<sp/>e2;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>ctor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));<sp/><sp/></highlight><highlight class="comment">//<sp/>Ctor<sp/>from<sp/>EXPECT_CALL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es3<sp/>=<sp/>e1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ctor<sp/>from<sp/>Expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es4(e1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ctor<sp/>from<sp/>Expectation;<sp/>alternative<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es5<sp/>=<sp/>e2;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ctor<sp/>from<sp/>const<sp/>Expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es6(e2);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ctor<sp/>from<sp/>const<sp/>Expectation;<sp/>alternative<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es7<sp/>=<sp/>es2;<sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>ctor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>es1.size());</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es2.size());</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es3.size());</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es4.size());</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es5.size());</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es6.size());</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es7.size());</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>EXPECT_THAT(es3,<sp/>Ne(es2));</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>EXPECT_THAT(es4,<sp/>Eq(es3));</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>EXPECT_THAT(es5,<sp/>Eq(es4));</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>EXPECT_THAT(es6,<sp/>Eq(es5));</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>EXPECT_THAT(es7,<sp/>Eq(es2));</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal">TEST(ExpectationSetTest,<sp/>AssignmentWorks)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es1;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es2<sp/>=<sp/>Expectation();</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>es1<sp/>=<sp/>es2;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es1.size());</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>EXPECT_THAT(*(es1.begin()),<sp/>Eq(Expectation()));</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>EXPECT_THAT(es1,<sp/>Eq(es2));</highlight></codeline>
<codeline lineno="1477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal">TEST(ExpectationSetTest,<sp/>InsertionWorks)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es1;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>es1<sp/>+=<sp/>e1;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es1.size());</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>EXPECT_THAT(*(es1.begin()),<sp/>Eq(e1));</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>es1<sp/>+=<sp/>e2;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>es1.size());</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>ExpectationSet::const_iterator<sp/>it1<sp/>=<sp/>es1.begin();</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>ExpectationSet::const_iterator<sp/>it2<sp/>=<sp/>it1;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>++it2;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(*it1<sp/>==<sp/>e1<sp/>||<sp/>*it2<sp/>==<sp/>e1);<sp/><sp/></highlight><highlight class="comment">//<sp/>e1<sp/>must<sp/>be<sp/>in<sp/>the<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(*it1<sp/>==<sp/>e2<sp/>||<sp/>*it2<sp/>==<sp/>e2);<sp/><sp/></highlight><highlight class="comment">//<sp/>e2<sp/>must<sp/>be<sp/>in<sp/>the<sp/>set<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal">TEST(ExpectationSetTest,<sp/>SizeWorks)<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>es.size());</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>es<sp/>+=<sp/>Expectation();</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>es.size());</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>es<sp/>+=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>es.size());</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal">TEST(ExpectationSetTest,<sp/>IsEnumerable)<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(es.begin()<sp/>==<sp/>es.end());</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>es<sp/>+=<sp/>Expectation();</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>ExpectationSet::const_iterator<sp/>it<sp/>=<sp/>es.begin();</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(it<sp/>!=<sp/>es.end());</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>EXPECT_THAT(*it,<sp/>Eq(Expectation()));</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(it<sp/>==<sp/>es.end());</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>.After()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal">TEST(AfterTest,<sp/>SucceedsWhenPartialOrderIsSatisfied)<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>es<sp/>+=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>es<sp/>+=<sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(3)).After(es);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal">TEST(AfterTest,<sp/>SucceedsWhenTotalOrderIsSatisfied)<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>also<sp/>verifies<sp/>that<sp/>const<sp/>Expectation<sp/>objects<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>too.<sp/><sp/>Do<sp/>not<sp/>remove<sp/>the<sp/>const<sp/>modifiers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expectation<sp/>e1<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(b,<sp/>DoB()).Times(2).After(e1);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).After(e2);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>must<sp/>be<sp/>in<sp/>strict<sp/>order<sp/>when<sp/>specified<sp/>so<sp/>using<sp/>.After().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal">TEST(AfterTest,<sp/>CallsMustBeInStrictOrderWhenSpecifiedSo1)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>ordering:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a.DoA(1)<sp/>==&gt;<sp/>b.DoB()<sp/>==&gt;<sp/>a.DoA(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(b,<sp/>DoB()).After(e1);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).After(e2);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>after<sp/>DoB().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a.DoA(2),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>must<sp/>be<sp/>in<sp/>strict<sp/>order<sp/>when<sp/>specified<sp/>so<sp/>using<sp/>.After().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal">TEST(AfterTest,<sp/>CallsMustBeInStrictOrderWhenSpecifiedSo2)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>ordering:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a.DoA(1)<sp/>==&gt;<sp/>b.DoB()<sp/>*<sp/>2<sp/>==&gt;<sp/>a.DoA(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(b,<sp/>DoB()).Times(2).After(e1);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).After(e2);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>after<sp/>the<sp/>second<sp/>DoB().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a.DoA(2),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>must<sp/>satisfy<sp/>the<sp/>partial<sp/>order<sp/>when<sp/>specified<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal">TEST(AfterTest,<sp/>CallsMustSatisfyPartialOrderWhenSpecifiedSo)<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>ReturnResult(_)).WillByDefault(Return(Result()));</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>ordering:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a.DoA(1)<sp/>==&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a.DoA(2)<sp/>==&gt;<sp/>a.ReturnResult(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/>Expectation<sp/>e<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ExpectationSet<sp/>es<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>ReturnResult(3)).After(e,<sp/>es);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>last.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a.ReturnResult(3),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>a.ReturnResult(3);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>must<sp/>satisfy<sp/>the<sp/>partial<sp/>order<sp/>when<sp/>specified<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal">TEST(AfterTest,<sp/>CallsMustSatisfyPartialOrderWhenSpecifiedSo2)<sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>ordering:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a.DoA(1)<sp/>==&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a.DoA(2)<sp/>==&gt;<sp/>a.DoA(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>Expectation<sp/>e<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ExpectationSet<sp/>es<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(3)).After(e,<sp/>es);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>called<sp/>last.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a.DoA(3),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>.After()<sp/>can<sp/>be<sp/>combined<sp/>with<sp/>.InSequence().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal">TEST(AfterTest,<sp/>CanBeUsedWithInSequence)<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>Expectation<sp/>e<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(2)).InSequence(s);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(3)).InSequence(s).After(e);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>after<sp/>DoA(2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a.DoA(3),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>.After()<sp/>can<sp/>be<sp/>called<sp/>multiple<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal">TEST(AfterTest,<sp/>CanBeCalledManyTimes)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>Expectation<sp/>e3<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(3));</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(4)).After(e1).After(e2).After(e3);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>a.DoA(4);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>.After()<sp/>accepts<sp/>up<sp/>to<sp/>5<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal">TEST(AfterTest,<sp/>AcceptsUpToFiveArguments)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>Expectation<sp/>e3<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(3));</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es1<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(4));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(5));</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(6)).After(e1,<sp/>e2,<sp/>e3,<sp/>es1,<sp/>es2);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/>a.DoA(5);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>a.DoA(4);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>a.DoA(6);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>.After()<sp/>allows<sp/>input<sp/>to<sp/>contain<sp/>duplicated<sp/>Expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal">TEST(AfterTest,<sp/>AcceptsDuplicatedInput)<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>ReturnResult(_)).WillByDefault(Return(Result()));</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>ordering:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>DoA(1)<sp/>==&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>DoA(2)<sp/>==&gt;<sp/>ReturnResult(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>Expectation<sp/>e1<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>es<sp/>+=<sp/>e1;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>es<sp/>+=<sp/>e2;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>ReturnResult(3)).After(e1,<sp/>e2,<sp/>es,<sp/>e1);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>only<sp/>be<sp/>after<sp/>DoA(2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a.ReturnResult(3),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>a.ReturnResult(3);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Expectation<sp/>added<sp/>to<sp/>an<sp/>ExpectationSet<sp/>after<sp/>it<sp/>has<sp/>been<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>.After()<sp/>has<sp/>no<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal">TEST(AfterTest,<sp/>ChangesToExpectationSetHaveNoEffectAfterwards)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>ExpectationSet<sp/>es1<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>Expectation<sp/>e2<sp/>=<sp/>EXPECT_CALL(a,<sp/>DoA(2));</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(3)).After(es1);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>es1<sp/>+=<sp/>e2;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/>a.DoA(3);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>a.DoA(2);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Mock<sp/>correctly<sp/>handles<sp/>calls<sp/>to<sp/>mock<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>after<sp/>a<sp/>mock<sp/>object<sp/>owning<sp/>one<sp/>of<sp/>their<sp/>pre-requisites<sp/>has<sp/>died.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>calls<sp/>that<sp/>satisfy<sp/>the<sp/>original<sp/>spec<sp/>are<sp/>successful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal">TEST(DeletingMockEarlyTest,<sp/>Success1)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/>MockB*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockB;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>MockA*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>MockB*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockB;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>dummy;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*b1,<sp/>DoB(_)).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*a,<sp/>Binary(_,<sp/>_))</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Times(AnyNumber())</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*b2,<sp/>DoB(_)).Times(AnyNumber()).WillRepeatedly(Return(2));</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b1-&gt;DoB(1));</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b1;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a&apos;s<sp/>pre-requisite<sp/>has<sp/>died.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a-&gt;Binary(0,<sp/>1));</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b2;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a&apos;s<sp/>successor<sp/>has<sp/>died.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a-&gt;Binary(1,<sp/>2));</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>calls<sp/>that<sp/>satisfy<sp/>the<sp/>original<sp/>spec<sp/>are<sp/>successful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal">TEST(DeletingMockEarlyTest,<sp/>Success2)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>MockB*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockB;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>MockA*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>MockB*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockB;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>dummy;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*b1,<sp/>DoB(_)).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*a,<sp/>Binary(_,<sp/>_)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*b2,<sp/>DoB(_)).Times(AnyNumber()).WillRepeatedly(Return(2));</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>a;<sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>is<sp/>trivially<sp/>satisfied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b1-&gt;DoB(1));</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>b2-&gt;DoB(2));</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b1;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b2;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>it&apos;s<sp/>OK<sp/>to<sp/>delete<sp/>a<sp/>mock<sp/>object<sp/>itself<sp/>in<sp/>its<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Suppresses<sp/>warning<sp/>on<sp/>unreferenced<sp/>formal<sp/>parameter<sp/>in<sp/>MSVC<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-W4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4100)</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal">ACTION_P(Delete,<sp/>ptr)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;<sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal">TEST(DeletingMockEarlyTest,<sp/>CanDeleteSelfInActionReturningVoid)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>MockA*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*a,<sp/>DoA(_)).WillOnce(Delete(a));</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>a-&gt;DoA(42);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>cause<sp/>a<sp/>to<sp/>be<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal">TEST(DeletingMockEarlyTest,<sp/>CanDeleteSelfInActionReturningValue)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>MockA*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*a,<sp/>ReturnResult(_)).WillOnce(DoAll(Delete(a),<sp/>Return(Result())));</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>a-&gt;ReturnResult(42);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>cause<sp/>a<sp/>to<sp/>be<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>calls<sp/>that<sp/>violate<sp/>the<sp/>original<sp/>spec<sp/>yield<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal">TEST(DeletingMockEarlyTest,<sp/>Failure1)<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>MockB*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockB;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>MockA*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>MockB*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockB;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>dummy;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*b1,<sp/>DoB(_)).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*a,<sp/>Binary(_,<sp/>_)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*b2,<sp/>DoB(_)).Times(AnyNumber()).WillRepeatedly(Return(2));</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>a;<sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>is<sp/>trivially<sp/>satisfied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/>b2-&gt;DoB(2);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b1-&gt;DoB(1));</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b1;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b2;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>calls<sp/>that<sp/>violate<sp/>the<sp/>original<sp/>spec<sp/>yield<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal">TEST(DeletingMockEarlyTest,<sp/>Failure2)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>MockB*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockB;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>MockA*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>MockB*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockB;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>dummy;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*b1,<sp/>DoB(_));</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*a,<sp/>Binary(_,<sp/>_)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(*b2,<sp/>DoB(_)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b1,<sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>never<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a-&gt;Binary(0,<sp/>1),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(b2-&gt;DoB(1),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b2;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EvenNumberCardinality<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CardinalityInterface<sp/>{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>call_count<sp/>calls<sp/>will<sp/>satisfy<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cardinality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSatisfiedByCallCount(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>call_count)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>call_count<sp/>%<sp/>2<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>call_count<sp/>calls<sp/>will<sp/>saturate<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cardinality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSaturatedByCallCount(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>call_count<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>self<sp/>to<sp/>an<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;called<sp/>even<sp/>number<sp/>of<sp/>times&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal">Cardinality<sp/>EvenNumber()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Cardinality(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EvenNumberCardinality);<sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal">TEST(ExpectationBaseTest,</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>AllPrerequisitesAreSatisfiedWorksForNonMonotonicCardinality)<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>MockA*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>Sequence<sp/>s;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*a,<sp/>DoA(1)).Times(EvenNumber()).InSequence(s);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*a,<sp/>DoA(2)).Times(AnyNumber()).InSequence(s);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*a,<sp/>DoA(3)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>a-&gt;DoA(3);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>a-&gt;DoA(1);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(a-&gt;DoA(2),<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>be<sp/>called<sp/>even<sp/>number<sp/>of<sp/>times&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>tests<sp/>verify<sp/>the<sp/>message<sp/>generated<sp/>when<sp/>a<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Printable<sp/>{};</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(::std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Printable&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Printable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Unprintable<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/>Unprintable()<sp/>:<sp/>value(0)<sp/>{}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockC<sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/>MockC()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>MOCK_METHOD6(VoidMethod,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>std::string<sp/>s,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p,</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Printable&amp;<sp/>x,<sp/>Unprintable<sp/>y));</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(NonVoidMethod,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>MockC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockC&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/>MockC&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockC&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VerboseFlagPreservingFixture<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/>VerboseFlagPreservingFixture()</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>saved_verbose_flag_(GMOCK_FLAG_GET(verbose))<sp/>{}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/>~VerboseFlagPreservingFixture()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>saved_verbose_flag_);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>saved_verbose_flag_;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/>VerboseFlagPreservingFixture(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VerboseFlagPreservingFixture&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/>VerboseFlagPreservingFixture&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VerboseFlagPreservingFixture&amp;)<sp/>=</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>uninteresting<sp/>mock<sp/>function<sp/>call<sp/>on<sp/>a<sp/>naggy<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>a<sp/>warning<sp/>without<sp/>the<sp/>stack<sp/>trace<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gmock_verbose=warning<sp/>is<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal">TEST(FunctionCallMessageTest,</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>UninterestingCallOnNaggyMockGeneratesNoStackTraceWhenVerboseWarning)<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kWarningVerbosity);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/>NaggyMock&lt;MockC&gt;<sp/>c;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>c.VoidMethod(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>Printable(),<sp/>Unprintable());</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;GMOCK<sp/>WARNING&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsNotSubstring,<sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>trace:&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>uninteresting<sp/>mock<sp/>function<sp/>call<sp/>on<sp/>a<sp/>naggy<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>a<sp/>warning<sp/>containing<sp/>the<sp/>stack<sp/>trace<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gmock_verbose=info<sp/>is<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal">TEST(FunctionCallMessageTest,</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>UninterestingCallOnNaggyMockGeneratesFyiWithStackTraceWhenVerboseInfo)<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kInfoVerbosity);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>NaggyMock&lt;MockC&gt;<sp/>c;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>c.VoidMethod(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>Printable(),<sp/>Unprintable());</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;GMOCK<sp/>WARNING&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>trace:&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>check<sp/>the<sp/>stack<sp/>trace<sp/>content<sp/>in<sp/>dbg-mode<sp/>only,<sp/>as<sp/>opt-mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>inline<sp/>the<sp/>call<sp/>we<sp/>are<sp/>interested<sp/>in<sp/>seeing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>a<sp/>void<sp/>mock<sp/>function&apos;s<sp/>name<sp/>appears<sp/>in<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;VoidMethod(&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>a<sp/>non-void<sp/>mock<sp/>function&apos;s<sp/>name<sp/>appears<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stack<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/>c.NonVoidMethod();</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output2<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(IsSubstring,<sp/></highlight><highlight class="stringliteral">&quot;NonVoidMethod(&quot;</highlight><highlight class="normal">,<sp/>output2);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>uninteresting<sp/>mock<sp/>function<sp/>call<sp/>on<sp/>a<sp/>naggy<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>causes<sp/>the<sp/>function<sp/>arguments<sp/>and<sp/>return<sp/>value<sp/>to<sp/>be<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal">TEST(FunctionCallMessageTest,</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>UninterestingCallOnNaggyMockPrintsArgumentsAndReturnValue)<sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>non-void<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>NaggyMock&lt;MockB&gt;<sp/>b;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output1<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/>EXPECT_PRED_FORMAT2(</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsSubstring,</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>returning<sp/>default<sp/>value.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>DoB()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:<sp/>0\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output1.c_str());</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>the<sp/>return<sp/>value<sp/>is<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>void<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/>NaggyMock&lt;MockC&gt;<sp/>c;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/>c.VoidMethod(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>Printable(),<sp/>Unprintable());</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>output2<sp/>=<sp/>GetCapturedStdout();</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output2.c_str(),</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>returning<sp/>directly\\.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>VoidMethod&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\\(false,<sp/>5,<sp/>\&quot;Hi\&quot;,<sp/>NULL,<sp/>@.+<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Printable,<sp/>4-byte<sp/>object<sp/>&lt;00-00<sp/>00-00&gt;\\)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>void<sp/>function<sp/>has<sp/>no<sp/>return<sp/>value<sp/>to<sp/>print.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>how<sp/>the<sp/>--gmock_verbose<sp/>flag<sp/>affects<sp/>Google<sp/>Mock&apos;s<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GMockVerboseFlagTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>VerboseFlagPreservingFixture<sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>given<sp/>Google<sp/>Mock<sp/>output<sp/>is<sp/>correct.<sp/><sp/>(When</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should_print<sp/>is<sp/>true,<sp/>the<sp/>output<sp/>should<sp/>match<sp/>the<sp/>given<sp/>regex<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contain<sp/>the<sp/>given<sp/>function<sp/>name<sp/>in<sp/>the<sp/>stack<sp/>trace.<sp/><sp/>When<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>false,<sp/>the<sp/>output<sp/>should<sp/>be<sp/>empty.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VerifyOutput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>output,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print,</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>expected_substring,</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>function_name)<sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_print)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THAT(output.c_str(),<sp/>HasSubstr(expected_substring));</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>check<sp/>the<sp/>stack<sp/>trace<sp/>content<sp/>in<sp/>dbg-mode<sp/>only,<sp/>as<sp/>opt-mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>inline<sp/>the<sp/>call<sp/>we<sp/>are<sp/>interested<sp/>in<sp/>seeing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THAT(output.c_str(),<sp/>HasSubstr(function_name));</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Suppresses<sp/>&apos;unused<sp/>function<sp/>parameter&apos;<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(function_name);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>output.c_str());</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>how<sp/>the<sp/>flag<sp/>affects<sp/>expected<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestExpectedCall(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(5));</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>Binary(_,<sp/>1)).WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>void-returning<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(5);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>VerifyOutput(GetCapturedStdout(),<sp/>should_print,</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mock<sp/>function<sp/>call<sp/>matches<sp/>EXPECT_CALL(a,<sp/>DoA(5))...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>DoA(5)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>trace:\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DoA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>non-void-returning<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>a.Binary(2,<sp/>1);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>VerifyOutput(GetCapturedStdout(),<sp/>should_print,</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mock<sp/>function<sp/>call<sp/>matches<sp/>EXPECT_CALL(a,<sp/>Binary(_,<sp/>1))...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>Binary(2,<sp/>1)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:<sp/>true\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>trace:\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Binary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>how<sp/>the<sp/>flag<sp/>affects<sp/>uninteresting<sp/>calls<sp/>on<sp/>a<sp/>naggy<sp/>mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestUninterestingCallOnNaggyMock(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print)<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>NaggyMock&lt;MockA&gt;<sp/>a;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>note<sp/>=</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NOTE:<sp/>You<sp/>can<sp/>safely<sp/>ignore<sp/>the<sp/>above<sp/>warning<sp/>unless<sp/>this<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;call<sp/>should<sp/>not<sp/>happen.<sp/><sp/>Do<sp/>not<sp/>suppress<sp/>it<sp/>by<sp/>blindly<sp/>adding<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;an<sp/>EXPECT_CALL()<sp/>if<sp/>you<sp/>don&apos;t<sp/>mean<sp/>to<sp/>enforce<sp/>the<sp/>call.<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;https://github.com/google/googletest/blob/main/docs/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gmock_cook_book.md#&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;knowing-when-to-expect-useoncall<sp/>for<sp/>details.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>void-returning<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>a.DoA(5);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>VerifyOutput(GetCapturedStdout(),<sp/>should_print,</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nGMOCK<sp/>WARNING:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>returning<sp/>directly.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>DoA(5)\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>note,</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DoA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>non-void-returning<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>a.Binary(2,<sp/>1);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>VerifyOutput(GetCapturedStdout(),<sp/>should_print,</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nGMOCK<sp/>WARNING:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>returning<sp/>default<sp/>value.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>Binary(2,<sp/>1)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:<sp/>false\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>note,</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Binary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>--gmock_verbose=info<sp/>causes<sp/>both<sp/>expected<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uninteresting<sp/>calls<sp/>to<sp/>be<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal">TEST_F(GMockVerboseFlagTest,<sp/>Info)<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kInfoVerbosity);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/>TestExpectedCall(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>TestUninterestingCallOnNaggyMock(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>--gmock_verbose=warning<sp/>causes<sp/>uninteresting<sp/>calls<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal">TEST_F(GMockVerboseFlagTest,<sp/>Warning)<sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kWarningVerbosity);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>TestExpectedCall(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/>TestUninterestingCallOnNaggyMock(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>--gmock_verbose=warning<sp/>causes<sp/>neither<sp/>expected<sp/>nor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uninteresting<sp/>calls<sp/>to<sp/>be<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal">TEST_F(GMockVerboseFlagTest,<sp/>Error)<sp/>{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kErrorVerbosity);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>TestExpectedCall(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/>TestUninterestingCallOnNaggyMock(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>--gmock_verbose=SOME_INVALID_VALUE<sp/>has<sp/>the<sp/>same<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>--gmock_verbose=warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal">TEST_F(GMockVerboseFlagTest,<sp/>InvalidFlagIsTreatedAsWarning)<sp/>{</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/></highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Treated<sp/>as<sp/>&quot;warning&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/>TestExpectedCall(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/>TestUninterestingCallOnNaggyMock(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>class<sp/>that<sp/>generates<sp/>a<sp/>failure<sp/>when<sp/>printed.<sp/><sp/>We<sp/>use<sp/>it<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>Google<sp/>Mock<sp/>doesn&apos;t<sp/>print<sp/>a<sp/>value<sp/>(even<sp/>to<sp/>an<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer)<sp/>when<sp/>it<sp/>is<sp/>not<sp/>supposed<sp/>to<sp/>do<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PrintMeNot<sp/>{};</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(PrintMeNot<sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>*/</highlight><highlight class="normal">,<sp/>::std::ostream*<sp/></highlight><highlight class="comment">/*<sp/>os<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Google<sp/>Mock<sp/>is<sp/>printing<sp/>a<sp/>value<sp/>that<sp/>shouldn&apos;t<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;printed<sp/>even<sp/>to<sp/>an<sp/>internal<sp/>buffer.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LogTestHelper<sp/>{</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>LogTestHelper()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Foo,<sp/>PrintMeNot(PrintMeNot));</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/>LogTestHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogTestHelper&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>LogTestHelper&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogTestHelper&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GMockLogTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>VerboseFlagPreservingFixture<sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>LogTestHelper<sp/>helper_;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal">TEST_F(GMockLogTest,<sp/>DoesNotPrintGoodCallInternallyIfVerbosityIsWarning)<sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kWarningVerbosity);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper_,<sp/>Foo(_)).WillOnce(Return(PrintMeNot()));</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/>helper_.Foo(PrintMeNot());<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>expected<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal">TEST_F(GMockLogTest,<sp/>DoesNotPrintGoodCallInternallyIfVerbosityIsError)<sp/>{</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kErrorVerbosity);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper_,<sp/>Foo(_)).WillOnce(Return(PrintMeNot()));</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/>helper_.Foo(PrintMeNot());<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>expected<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal">TEST_F(GMockLogTest,<sp/>DoesNotPrintWarningInternallyIfVerbosityIsError)<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>kErrorVerbosity);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/>ON_CALL(helper_,<sp/>Foo(_)).WillByDefault(Return(PrintMeNot()));</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>helper_.Foo(PrintMeNot());<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>generate<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Mock::AllowLeak().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal">TEST(AllowLeakTest,<sp/>AllowsLeakingUnusedMockObject)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/>MockA*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>Mock::AllowLeak(a);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal">TEST(AllowLeakTest,<sp/>CanBeCalledBeforeOnCall)<sp/>{</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/>MockA*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>Mock::AllowLeak(a);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>ON_CALL(*a,<sp/>DoA(_)).WillByDefault(Return());</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>a-&gt;DoA(0);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal">TEST(AllowLeakTest,<sp/>CanBeCalledAfterOnCall)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/>MockA*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/>ON_CALL(*a,<sp/>DoA(_)).WillByDefault(Return());</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/>Mock::AllowLeak(a);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal">TEST(AllowLeakTest,<sp/>CanBeCalledBeforeExpectCall)<sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/>MockA*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/>Mock::AllowLeak(a);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*a,<sp/>DoA(_));</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/>a-&gt;DoA(0);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal">TEST(AllowLeakTest,<sp/>CanBeCalledAfterExpectCall)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/>MockA*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*a,<sp/>DoA(_)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/>Mock::AllowLeak(a);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal">TEST(AllowLeakTest,<sp/>WorksWhenBothOnCallAndExpectCallArePresent)<sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/>MockA*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>ON_CALL(*a,<sp/>DoA(_)).WillByDefault(Return());</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*a,<sp/>DoA(_)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/>Mock::AllowLeak(a);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>verify<sp/>and<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>expectations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>none<sp/>of<sp/>its<sp/>methods<sp/>has<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal">TEST(VerifyAndClearExpectationsTest,<sp/>NoMethodHasExpectations)<sp/>{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Mock::VerifyAndClearExpectations(&amp;b));</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>verify<sp/>and<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>expectations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>some,<sp/>but<sp/>not<sp/>all,<sp/>of<sp/>its<sp/>methods<sp/>have<sp/>expectations<sp/>*and*<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>verification<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal">TEST(VerifyAndClearExpectationsTest,<sp/>SomeMethodsHaveExpectationsAndSucceed)<sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Mock::VerifyAndClearExpectations(&amp;b));</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>verify<sp/>and<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>expectations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>some,<sp/>but<sp/>not<sp/>all,<sp/>of<sp/>its<sp/>methods<sp/>have<sp/>expectations<sp/>*and*<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>verification<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal">TEST(VerifyAndClearExpectationsTest,<sp/>SomeMethodsHaveExpectationsAndFail)<sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(result<sp/>=<sp/>Mock::VerifyAndClearExpectations(&amp;b),</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>never<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(result);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>verify<sp/>and<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>expectations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>all<sp/>of<sp/>its<sp/>methods<sp/>have<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal">TEST(VerifyAndClearExpectationsTest,<sp/>AllMethodsHaveExpectations)<sp/>{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Mock::VerifyAndClearExpectations(&amp;b));</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>verify<sp/>and<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>expectations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>method<sp/>has<sp/>more<sp/>than<sp/>one<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal">TEST(VerifyAndClearExpectationsTest,<sp/>AMethodHasManyExpectations)<sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(0)).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(result<sp/>=<sp/>Mock::VerifyAndClearExpectations(&amp;b),</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>never<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(result);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>call<sp/>VerifyAndClearExpectations()<sp/>on<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mock<sp/>object<sp/>multiple<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal">TEST(VerifyAndClearExpectationsTest,<sp/>CanCallManyTimes)<sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB());</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClearExpectations(&amp;b);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_)).WillOnce(Return(1));</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClearExpectations(&amp;b);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClearExpectations(&amp;b);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>default<sp/>actions<sp/>when<sp/>none</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>its<sp/>methods<sp/>has<sp/>default<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>NoMethodHasDefaultActions)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>crashes<sp/>or<sp/>generates<sp/>a<sp/>failure,<sp/>the<sp/>test<sp/>will<sp/>catch<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>default<sp/>actions<sp/>when<sp/>some,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>all<sp/>of<sp/>its<sp/>methods<sp/>have<sp/>default<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>SomeMethodsHaveDefaultActions)<sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB()).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>default<sp/>action<sp/>of<sp/>int<sp/>DoB()<sp/>was<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>default<sp/>actions<sp/>when<sp/>all<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>its<sp/>methods<sp/>have<sp/>default<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>AllMethodsHaveDefaultActions)<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB()).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(_)).WillByDefault(Return(2));</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>default<sp/>action<sp/>of<sp/>int<sp/>DoB()<sp/>was<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>default<sp/>action<sp/>of<sp/>int<sp/>DoB(int)<sp/>was<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(0));</highlight></codeline>
<codeline lineno="2329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>clear<sp/>a<sp/>mock<sp/>object&apos;s<sp/>default<sp/>actions<sp/>when<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>has<sp/>more<sp/>than<sp/>one<sp/>ON_CALL()<sp/>set<sp/>on<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>AMethodHasManyDefaultActions)<sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(0)).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(_)).WillByDefault(Return(2));</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>default<sp/>actions<sp/>(there<sp/>are<sp/>two)<sp/>of<sp/>int<sp/>DoB(int)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>were<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(0));</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>call<sp/>VerifyAndClear()<sp/>on<sp/>a<sp/>mock<sp/>object<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>CanCallManyTimes)<sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB()).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(_)).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>VerifyAndClear()<sp/>works<sp/>when<sp/>the<sp/>verification<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>Success)<sp/>{</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB()).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Mock::VerifyAndClear(&amp;b));</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>VerifyAndClear()<sp/>works<sp/>when<sp/>the<sp/>verification<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>Failure)<sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(_)).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(result<sp/>=<sp/>Mock::VerifyAndClear(&amp;b),</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>never<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(result);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>VerifyAndClear()<sp/>works<sp/>when<sp/>the<sp/>default<sp/>actions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expectations<sp/>are<sp/>set<sp/>on<sp/>a<sp/>const<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>Const)<sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/>ON_CALL(Const(b),<sp/>DoB()).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/>EXPECT_CALL(Const(b),<sp/>DoB()).WillOnce(DoDefault()).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Mock::VerifyAndClear(&amp;b));</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>expectations<sp/>on<sp/>the<sp/>methods<sp/>now,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>freely<sp/>call<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>set<sp/>default<sp/>actions<sp/>and<sp/>expectations<sp/>on<sp/>a<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>after<sp/>VerifyAndClear()<sp/>has<sp/>been<sp/>called<sp/>on<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>CanSetDefaultActionsAndExpectationsAfterwards)<sp/>{</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB()).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB(_)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/>b.DoB(1);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b,<sp/>DoB()).WillOnce(Return(3));</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(_)).WillByDefault(Return(4));</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>b.DoB());</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4,<sp/>b.DoB(1));</highlight></codeline>
<codeline lineno="2428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>calling<sp/>VerifyAndClear()<sp/>on<sp/>one<sp/>mock<sp/>object<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>affect<sp/>other<sp/>mock<sp/>objects<sp/>(either<sp/>of<sp/>the<sp/>same<sp/>type<sp/>or<sp/>not).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal">TEST(VerifyAndClearTest,<sp/>DoesNotAffectOtherMockObjects)<sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>MockB<sp/>b1;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/>MockB<sp/>b2;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>Binary(_,<sp/>_)).WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>Binary(_,<sp/>_)).WillOnce(DoDefault()).WillOnce(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/>ON_CALL(b1,<sp/>DoB()).WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b1,<sp/>DoB(_)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/>ON_CALL(b2,<sp/>DoB()).WillByDefault(Return(3));</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/>EXPECT_CALL(b2,<sp/>DoB(_));</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/>b2.DoB(0);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>Mock::VerifyAndClear(&amp;b2);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>default<sp/>actions<sp/>and<sp/>expectations<sp/>of<sp/>a<sp/>and<sp/>b1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>still<sp/>in<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Binary(0,<sp/>0));</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a.Binary(0,<sp/>0));</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>b1.DoB());</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>b1.DoB(0));</highlight></codeline>
<codeline lineno="2456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal">TEST(VerifyAndClearTest,</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>DestroyingChainedMocksDoesNotDeadlockThroughExpectations)<sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;MockA&gt;<sp/>a(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>ReferenceHoldingMock<sp/>test_mock;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_CALL<sp/>stores<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>inside<sp/>test_mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/>EXPECT_CALL(test_mock,<sp/>AcceptReference(_))</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(SetArgPointee&lt;0&gt;(a));</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>away<sp/>the<sp/>reference<sp/>to<sp/>the<sp/>mock<sp/>that<sp/>we<sp/>have<sp/>in<sp/>a.<sp/>After<sp/>this,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>reference<sp/>to<sp/>it<sp/>is<sp/>stored<sp/>by<sp/>test_mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/>a.reset();</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>test_mock<sp/>goes<sp/>out<sp/>of<sp/>scope,<sp/>it<sp/>destroys<sp/>the<sp/>last<sp/>remaining<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>mock<sp/>object<sp/>originally<sp/>pointed<sp/>to<sp/>by<sp/>a.<sp/>This<sp/>will<sp/>cause<sp/>the<sp/>MockA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>destructor<sp/>to<sp/>be<sp/>called<sp/>from<sp/>inside<sp/>the<sp/>ReferenceHoldingMock<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>state<sp/>of<sp/>all<sp/>mocks<sp/>is<sp/>protected<sp/>by<sp/>a<sp/>single<sp/>global<sp/>lock,<sp/>but<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>no<sp/>deadlock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal">TEST(VerifyAndClearTest,</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>DestroyingChainedMocksDoesNotDeadlockThroughDefaultAction)<sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;MockA&gt;<sp/>a(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockA);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>ReferenceHoldingMock<sp/>test_mock;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ON_CALL<sp/>stores<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>inside<sp/>test_mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/>ON_CALL(test_mock,<sp/>AcceptReference(_)).WillByDefault(SetArgPointee&lt;0&gt;(a));</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>away<sp/>the<sp/>reference<sp/>to<sp/>the<sp/>mock<sp/>that<sp/>we<sp/>have<sp/>in<sp/>a.<sp/>After<sp/>this,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>reference<sp/>to<sp/>it<sp/>is<sp/>stored<sp/>by<sp/>test_mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/>a.reset();</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>test_mock<sp/>goes<sp/>out<sp/>of<sp/>scope,<sp/>it<sp/>destroys<sp/>the<sp/>last<sp/>remaining<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>mock<sp/>object<sp/>originally<sp/>pointed<sp/>to<sp/>by<sp/>a.<sp/>This<sp/>will<sp/>cause<sp/>the<sp/>MockA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>destructor<sp/>to<sp/>be<sp/>called<sp/>from<sp/>inside<sp/>the<sp/>ReferenceHoldingMock<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>state<sp/>of<sp/>all<sp/>mocks<sp/>is<sp/>protected<sp/>by<sp/>a<sp/>single<sp/>global<sp/>lock,<sp/>but<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>no<sp/>deadlock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>mock<sp/>function&apos;s<sp/>action<sp/>can<sp/>call<sp/>a<sp/>mock<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(either<sp/>the<sp/>same<sp/>function<sp/>or<sp/>a<sp/>different<sp/>one)<sp/>either<sp/>as<sp/>an<sp/>explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>action<sp/>or<sp/>as<sp/>a<sp/>default<sp/>action<sp/>without<sp/>causing<sp/>a<sp/>dead<sp/>lock.<sp/><sp/>It</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>verifies<sp/>that<sp/>the<sp/>action<sp/>is<sp/>not<sp/>performed<sp/>inside<sp/>the<sp/>critical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal">TEST(SynchronizationTest,<sp/>CanCallMockMethodInAction)<sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/>MockC<sp/>c;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>DoA(_)).WillByDefault(</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IgnoreResult(InvokeWithoutArgs(&amp;c,<sp/>&amp;MockC::NonVoidMethod)));</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1));</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>EXPECT_CALL(a,<sp/>DoA(1))</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(&amp;a,<sp/>&amp;MockA::DoA))</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.RetiresOnSaturation();</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/>EXPECT_CALL(c,<sp/>NonVoidMethod());</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/>a.DoA(1);</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>match<sp/>the<sp/>second<sp/>EXPECT_CALL()<sp/>and<sp/>trigger<sp/>another<sp/>a.DoA(1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>in<sp/>turn<sp/>match<sp/>the<sp/>first<sp/>EXPECT_CALL()<sp/>and<sp/>trigger<sp/>a<sp/>call<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>c.NonVoidMethod()<sp/>that<sp/>was<sp/>specified<sp/>by<sp/>the<sp/>ON_CALL()<sp/>since<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_CALL()<sp/>did<sp/>not<sp/>specify<sp/>an<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal">TEST(ParameterlessExpectationsTest,<sp/>CanSetExpectationsWithoutMatchers)<sp/>{</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/>MockA<sp/>a;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>do_a_arg0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>DoA).WillByDefault(SaveArg&lt;0&gt;(&amp;do_a_arg0));</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>do_a_47_arg0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>DoA(47)).WillByDefault(SaveArg&lt;0&gt;(&amp;do_a_47_arg0));</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/>a.DoA(17);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/>EXPECT_THAT(do_a_arg0,<sp/>17);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/>EXPECT_THAT(do_a_47_arg0,<sp/>0);</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>a.DoA(47);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/>EXPECT_THAT(do_a_arg0,<sp/>17);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/>EXPECT_THAT(do_a_47_arg0,<sp/>47);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>Binary).WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/>ON_CALL(a,<sp/>Binary(_,<sp/>14)).WillByDefault(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a.Binary(14,<sp/>17),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a.Binary(17,<sp/>14),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal">TEST(ParameterlessExpectationsTest,<sp/>CanSetExpectationsForOverloadedMethods)<sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/>MockB<sp/>b;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB()).WillByDefault(Return(9));</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/>ON_CALL(b,<sp/>DoB(5)).WillByDefault(Return(11));</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/>EXPECT_THAT(b.DoB(),<sp/>9);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/>EXPECT_THAT(b.DoB(1),<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/>EXPECT_THAT(b.DoB(5),<sp/>11);</highlight></codeline>
<codeline lineno="2548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MockWithConstMethods<sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1(Foo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD2(Bar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="2554"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal">TEST(ParameterlessExpectationsTest,<sp/>CanSetExpectationsForConstMethods)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/>MockWithConstMethods<sp/>mock;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>Foo).WillByDefault(Return(7));</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>Bar).WillByDefault(Return(33));</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/>EXPECT_THAT(mock.Foo(17),<sp/>7);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>EXPECT_THAT(mock.Bar(27,<sp/></highlight><highlight class="stringliteral">&quot;purple&quot;</highlight><highlight class="normal">),<sp/>33);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockConstOverload<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Overloaded,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1(Overloaded,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2569"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal">TEST(ParameterlessExpectationsTest,</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>CanSetExpectationsForConstOverloadedMethods)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/>MockConstOverload<sp/>mock;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>Overloaded(_)).WillByDefault(Return(7));</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>Overloaded(5)).WillByDefault(Return(9));</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/>ON_CALL(Const(mock),<sp/>Overloaded(5)).WillByDefault(Return(11));</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/>ON_CALL(Const(mock),<sp/>Overloaded(7)).WillByDefault(Return(13));</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/>EXPECT_THAT(mock.Overloaded(1),<sp/>7);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>EXPECT_THAT(mock.Overloaded(5),<sp/>9);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>EXPECT_THAT(mock.Overloaded(7),<sp/>7);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockConstOverload&amp;<sp/>const_mock<sp/>=<sp/>mock;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>EXPECT_THAT(const_mock.Overloaded(1),<sp/>0);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>EXPECT_THAT(const_mock.Overloaded(5),<sp/>11);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/>EXPECT_THAT(const_mock.Overloaded(7),<sp/>13);</highlight></codeline>
<codeline lineno="2587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/>testing::InitGoogleMock(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensures<sp/>that<sp/>the<sp/>tests<sp/>pass<sp/>no<sp/>matter<sp/>what<sp/>value<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--gmock_catch_leaked_mocks<sp/>and<sp/>--gmock_verbose<sp/>the<sp/>user<sp/>specifies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(catch_leaked_mocks,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>GMOCK_FLAG_SET(verbose,<sp/>testing::internal::kWarningVerbosity);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="2600"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc"/>
  </compounddef>
</doxygen>
