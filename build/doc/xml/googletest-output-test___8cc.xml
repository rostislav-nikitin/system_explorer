<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="googletest-output-test___8cc" kind="file" language="C++">
    <compoundname>googletest-output-test_.cc</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">string</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-internal-inl_8h" local="yes">src/gtest-internal-inl.h</includes>
    <incdepgraph>
      <node id="17">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="30">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="49">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="37">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="19">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/googletest-output-test_.cc</label>
        <link refid="googletest-output-test___8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="39">
        <label>atomic</label>
      </node>
      <node id="53">
        <label>cassert</label>
      </node>
      <node id="24">
        <label>cerrno</label>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>ctype.h</label>
      </node>
      <node id="60">
        <label>errno.h</label>
      </node>
      <node id="44">
        <label>float.h</label>
      </node>
      <node id="40">
        <label>functional</label>
      </node>
      <node id="9">
        <label>iomanip</label>
      </node>
      <node id="55">
        <label>iosfwd</label>
      </node>
      <node id="25">
        <label>iostream</label>
      </node>
      <node id="51">
        <label>iterator</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="26">
        <label>locale</label>
      </node>
      <node id="45">
        <label>map</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="12">
        <label>ostream</label>
      </node>
      <node id="34">
        <label>regex.h</label>
      </node>
      <node id="13">
        <label>set</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="21">
        <label>stddef.h</label>
      </node>
      <node id="22">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="23">
        <label>string.h</label>
      </node>
      <node id="32">
        <label>strings.h</label>
      </node>
      <node id="28">
        <label>sys/stat.h</label>
      </node>
      <node id="29">
        <label>sys/types.h</label>
      </node>
      <node id="27">
        <label>tuple</label>
      </node>
      <node id="15">
        <label>type_traits</label>
      </node>
      <node id="35">
        <label>typeinfo</label>
      </node>
      <node id="33">
        <label>unistd.h</label>
      </node>
      <node id="42">
        <label>utility</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classFailingParamTest" prot="public">FailingParamTest</innerclass>
    <innerclass refid="classEmptyBasenameParamInst" prot="public">EmptyBasenameParamInst</innerclass>
    <innerclass refid="classNonFatalFailureInFixtureConstructorTest" prot="public">NonFatalFailureInFixtureConstructorTest</innerclass>
    <innerclass refid="classFatalFailureInFixtureConstructorTest" prot="public">FatalFailureInFixtureConstructorTest</innerclass>
    <innerclass refid="classNonFatalFailureInSetUpTest" prot="public">NonFatalFailureInSetUpTest</innerclass>
    <innerclass refid="classFatalFailureInSetUpTest" prot="public">FatalFailureInSetUpTest</innerclass>
    <innerclass refid="classfoo_1_1MixedUpTestSuiteTest" prot="public">foo::MixedUpTestSuiteTest</innerclass>
    <innerclass refid="classfoo_1_1MixedUpTestSuiteWithSameTestNameTest" prot="public">foo::MixedUpTestSuiteWithSameTestNameTest</innerclass>
    <innerclass refid="classbar_1_1MixedUpTestSuiteTest" prot="public">bar::MixedUpTestSuiteTest</innerclass>
    <innerclass refid="classbar_1_1MixedUpTestSuiteWithSameTestNameTest" prot="public">bar::MixedUpTestSuiteWithSameTestNameTest</innerclass>
    <innerclass refid="classTEST__F__before__TEST__in__same__test__case" prot="public">TEST_F_before_TEST_in_same_test_case</innerclass>
    <innerclass refid="classTEST__before__TEST__F__in__same__test__case" prot="public">TEST_before_TEST_F_in_same_test_case</innerclass>
    <innerclass refid="classParamTest" prot="public">ParamTest</innerclass>
    <innerclass refid="classDetectNotInstantiatedTest" prot="public">DetectNotInstantiatedTest</innerclass>
    <innerclass refid="classTypedTest" prot="public">TypedTest</innerclass>
    <innerclass refid="classTypedTestWithNames" prot="public">TypedTestWithNames</innerclass>
    <innerclass refid="classTypedTestNames" prot="public">TypedTestNames</innerclass>
    <innerclass refid="classTypedTestP" prot="public">TypedTestP</innerclass>
    <innerclass refid="classTypedTestPNames" prot="public">TypedTestPNames</innerclass>
    <innerclass refid="classDetectNotInstantiatedTypesTest" prot="public">DetectNotInstantiatedTypesTest</innerclass>
    <innerclass refid="classExpectFailureTest" prot="public">ExpectFailureTest</innerclass>
    <innerclass refid="classDynamicFixture" prot="public">DynamicFixture</innerclass>
    <innerclass refid="classDynamicTest" prot="public">DynamicTest</innerclass>
    <innerclass refid="classFooEnvironment" prot="public">FooEnvironment</innerclass>
    <innerclass refid="classBarEnvironment" prot="public">BarEnvironment</innerclass>
    <innerclass refid="classTestSuiteThatFailsToSetUp" prot="public">TestSuiteThatFailsToSetUp</innerclass>
    <innerclass refid="classTestSuiteThatSkipsInSetUp" prot="public">TestSuiteThatSkipsInSetUp</innerclass>
    <innernamespace refid="namespacefoo">foo</innernamespace>
    <innernamespace refid="namespacebar">bar</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="googletest-output-test___8cc_1a7d0214993b29b66c5052c62d5f4824ec" prot="public" static="no">
        <type><ref refid="classParamTest" kindref="compound">ParamTest</ref></type>
        <definition>using NoTests =  ParamTest</definition>
        <argsstring></argsstring>
        <name>NoTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="689" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="googletest-output-test___8cc_1a54f4cdb662871468646c6b33c7921bf5" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types</ref>&lt; char, int &gt;</type>
        <definition>typedef testing::Types&lt;char, int&gt; TypesForTestWithNames</definition>
        <argsstring></argsstring>
        <name>TypesForTestWithNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="710" column="24" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="googletest-output-test___8cc_1a5887507e47123cf1395ce631001c6ce9" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types</ref>&lt; unsigned char, unsigned int &gt;</type>
        <definition>typedef testing::Types&lt;unsigned char, unsigned int&gt; UnsignedTypes</definition>
        <argsstring></argsstring>
        <name>UnsignedTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="745" column="24" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="745" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="googletest-output-test___8cc_1a6db44d0c97a2b93be43ba6c8104b7511" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kGoldenString[]</definition>
        <argsstring>[]</argsstring>
        <name>kGoldenString</name>
        <initializer>= &quot;\&quot;Line\0 1\&quot;\nLine 2&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="101" column="19" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googletest-output-test___8cc_1a81be7f35ea2573ecc7ca08b26b56bccf" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int global_integer</definition>
        <argsstring></argsstring>
        <name>global_integer</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="525" column="5" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googletest-output-test___8cc_1af938c5e98ea6bb8c43a7bd0d8d3007b5" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto dynamic_test</definition>
        <argsstring></argsstring>
        <name>dynamic_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="950" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="950" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="googletest-output-test___8cc_1a8f28d985b030c6dd2714d1e884c62c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestEq1</definition>
        <argsstring>(int x)</argsstring>
        <name>TestEq1</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="60" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a14e796981ca8d3c71dbd2b839c1ce784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TryTestSubroutine</definition>
        <argsstring>()</argsstring>
        <name>TryTestSubroutine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="64" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="64" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a62f1870b5f6ce5c731fe0606a944da39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PassingTest, PassingTest1)</argsstring>
        <name>TEST</name>
        <param>
          <type>PassingTest</type>
        </param>
        <param>
          <type>PassingTest1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="78" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aaf792b2d65c4aeb1e2f1804e2319afd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PassingTest, PassingTest2)</argsstring>
        <name>TEST</name>
        <param>
          <type>PassingTest</type>
        </param>
        <param>
          <type>PassingTest2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="80" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a680b45844b58c5367da52c5383aea03a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(FailingParamTest, Fails)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classFailingParamTest" kindref="compound">FailingParamTest</ref></type>
        </param>
        <param>
          <type>Fails</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="86" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a7917783e750c5d42b4d0b6907c340c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(PrintingFailingParams, FailingParamTest, testing::Values(2))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>PrintingFailingParams</type>
        </param>
        <param>
          <type><ref refid="classFailingParamTest" kindref="compound">FailingParamTest</ref></type>
        </param>
        <param>
          <type>testing::Values(2)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="90" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a26922df227a0c471b923929491e2b149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(EmptyBasenameParamInst, Passes)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classEmptyBasenameParamInst" kindref="compound">EmptyBasenameParamInst</ref></type>
        </param>
        <param>
          <type>Passes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="97" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1adc8de4f4bb8b20d3163b2feca1de457d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(, EmptyBasenameParamInst, testing::Values(1))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classEmptyBasenameParamInst" kindref="compound">EmptyBasenameParamInst</ref></type>
        </param>
        <param>
          <type>testing::Values(1)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="99" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="99" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a1ae5db2b27aea7d9f321f52002d4a501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NonfatalFailureTest, EscapesStringOperands)</argsstring>
        <name>TEST</name>
        <param>
          <type>NonfatalFailureTest</type>
        </param>
        <param>
          <type>EscapesStringOperands</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="103" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aaa6c1704a62b7412fd5e053614f47650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NonfatalFailureTest, DiffForLongStrings)</argsstring>
        <name>TEST</name>
        <param>
          <type>NonfatalFailureTest</type>
        </param>
        <param>
          <type>DiffForLongStrings</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="111" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a6076f79ee5f9e8982bba181cbbebb0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FatalFailureTest, FatalFailureInSubroutine)</argsstring>
        <name>TEST</name>
        <param>
          <type>FatalFailureTest</type>
        </param>
        <param>
          <type>FatalFailureInSubroutine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="117" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a8763e3844bd21de9bd7126658a4279c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FatalFailureTest, FatalFailureInNestedSubroutine)</argsstring>
        <name>TEST</name>
        <param>
          <type>FatalFailureTest</type>
        </param>
        <param>
          <type>FatalFailureInNestedSubroutine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="124" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="124" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1afe609aef34a68a2ab9809eb48112c5cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FatalFailureTest, NonfatalFailureInSubroutine)</argsstring>
        <name>TEST</name>
        <param>
          <type>FatalFailureTest</type>
        </param>
        <param>
          <type>NonfatalFailureInSubroutine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="141" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="141" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ad9bbf46060935b29c42d3116ddbc3566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LoggingTest, InterleavingLoggingAndAssertions)</argsstring>
        <name>TEST</name>
        <param>
          <type>LoggingTest</type>
        </param>
        <param>
          <type>InterleavingLoggingAndAssertions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="148" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="148" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a7e222b468bbde7215ce826f10993e746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SubWithoutTrace</definition>
        <argsstring>(int n)</argsstring>
        <name>SubWithoutTrace</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="161" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a543ee38e0824e47113bb12c3277e09ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SubWithTrace</definition>
        <argsstring>(int n)</argsstring>
        <name>SubWithTrace</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="167" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a81f7d012241339866fccb3c3750b553b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SCOPED_TRACETest, AcceptedValues)</argsstring>
        <name>TEST</name>
        <param>
          <type>SCOPED_TRACETest</type>
        </param>
        <param>
          <type>AcceptedValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="173" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="173" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a82f82f6a7caa426cccf8d20113f897c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SCOPED_TRACETest, ObeysScopes)</argsstring>
        <name>TEST</name>
        <param>
          <type>SCOPED_TRACETest</type>
        </param>
        <param>
          <type>ObeysScopes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="184" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="184" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a46dcedbe67765adaebc7740ee17a88de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SCOPED_TRACETest, WorksInLoop)</argsstring>
        <name>TEST</name>
        <param>
          <type>SCOPED_TRACETest</type>
        </param>
        <param>
          <type>WorksInLoop</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="203" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="203" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a492695898501cea9f99ccd690c2b3991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SCOPED_TRACETest, WorksInSubroutine)</argsstring>
        <name>TEST</name>
        <param>
          <type>SCOPED_TRACETest</type>
        </param>
        <param>
          <type>WorksInSubroutine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="214" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="214" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ae402e91f305e54f5f14a172a0fb0831b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SCOPED_TRACETest, CanBeNested)</argsstring>
        <name>TEST</name>
        <param>
          <type>SCOPED_TRACETest</type>
        </param>
        <param>
          <type>CanBeNested</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="222" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="222" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a49c4610eeb41adaa369f9dce003d5198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SCOPED_TRACETest, CanBeRepeated)</argsstring>
        <name>TEST</name>
        <param>
          <type>SCOPED_TRACETest</type>
        </param>
        <param>
          <type>CanBeRepeated</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="231" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="231" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aff587c2c7d3e81f4d94425987ca07bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ScopedTraceTest, WithExplicitFileAndLine)</argsstring>
        <name>TEST</name>
        <param>
          <type>ScopedTraceTest</type>
        </param>
        <param>
          <type>WithExplicitFileAndLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="327" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a2bdac0e0076d65fa77a967c0fdb46e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(DisabledTestsWarningTest, DISABLED_AlsoRunDisabledTestsFlagSuppressesWarning)</argsstring>
        <name>TEST</name>
        <param>
          <type>DisabledTestsWarningTest</type>
        </param>
        <param>
          <type>DISABLED_AlsoRunDisabledTestsFlagSuppressesWarning</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="332" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="332" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a36cd4d21174efaa3066237d716028d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AdHocTest</definition>
        <argsstring>()</argsstring>
        <name>AdHocTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="343" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="343" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ae0ca194f6b730e168850ce3179ad4f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RunAllTests</definition>
        <argsstring>()</argsstring>
        <name>RunAllTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="350" column="5" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ad122def39d78da61690433e185611737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(NonFatalFailureInFixtureConstructorTest, FailureInConstructor)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classNonFatalFailureInFixtureConstructorTest" kindref="compound">NonFatalFailureInFixtureConstructorTest</ref></type>
        </param>
        <param>
          <type>FailureInConstructor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="374" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="374" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a858b341fa0b2298c1534b1325fedf797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(FatalFailureInFixtureConstructorTest, FailureInConstructor)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classFatalFailureInFixtureConstructorTest" kindref="compound">FatalFailureInFixtureConstructorTest</ref></type>
        </param>
        <param>
          <type>FailureInConstructor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="406" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="406" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aaa9d6fcc5d9910aedb42ff3db3cc313c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(NonFatalFailureInSetUpTest, FailureInSetUp)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classNonFatalFailureInSetUpTest" kindref="compound">NonFatalFailureInSetUpTest</ref></type>
        </param>
        <param>
          <type>FailureInSetUp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="428" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="428" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a52057afc95d69adbae1fbe0ef92b29d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(FatalFailureInSetUpTest, FailureInSetUp)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classFatalFailureInSetUpTest" kindref="compound">FatalFailureInSetUpTest</ref></type>
        </param>
        <param>
          <type>FailureInSetUp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="448" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a62631ea26f8f98f3f19dc03f950dc197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AddFailureAtTest, MessageContainsSpecifiedFileAndLineNumber)</argsstring>
        <name>TEST</name>
        <param>
          <type>AddFailureAtTest</type>
        </param>
        <param>
          <type>MessageContainsSpecifiedFileAndLineNumber</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="453" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="453" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a55ed27923966fd2997638340ff07caa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GtestFailAtTest, MessageContainsSpecifiedFileAndLineNumber)</argsstring>
        <name>TEST</name>
        <param>
          <type>GtestFailAtTest</type>
        </param>
        <param>
          <type>MessageContainsSpecifiedFileAndLineNumber</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="457" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="457" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ae71a8d4934e768af615b9b09418f15c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TEST_F_before_TEST_in_same_test_case, DefinedUsingTEST_F)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTEST__F__before__TEST__in__same__test__case" kindref="compound">TEST_F_before_TEST_in_same_test_case</ref></type>
        </param>
        <param>
          <type>DefinedUsingTEST_F</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="510" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="510" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a4b026b84b5a6dcbfa586f406e7c6b79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_F_before_TEST_in_same_test_case, DefinedUsingTESTAndShouldFail)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="classTEST__F__before__TEST__in__same__test__case" kindref="compound">TEST_F_before_TEST_in_same_test_case</ref></type>
        </param>
        <param>
          <type>DefinedUsingTESTAndShouldFail</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="514" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="514" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a80bcd554d66913b961ad814266a403a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TEST_before_TEST_F_in_same_test_case, DefinedUsingTEST)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="classTEST__before__TEST__F__in__same__test__case" kindref="compound">TEST_before_TEST_F_in_same_test_case</ref></type>
        </param>
        <param>
          <type>DefinedUsingTEST</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="518" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="518" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aa0ba9be79b1b05ddadfc8d25c099df31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TEST_before_TEST_F_in_same_test_case, DefinedUsingTEST_FAndShouldFail)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTEST__before__TEST__F__in__same__test__case" kindref="compound">TEST_before_TEST_F_in_same_test_case</ref></type>
        </param>
        <param>
          <type>DefinedUsingTEST_FAndShouldFail</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="522" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="522" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a3dd01f9996bd85dd50bd7632f58cbf8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectNonfatalFailureTest, CanReferenceGlobalVariables)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectNonfatalFailureTest</type>
        </param>
        <param>
          <type>CanReferenceGlobalVariables</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="528" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="528" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1afe7af77e310ee1a7599e2bc1f0f14354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectNonfatalFailureTest, CanReferenceLocalVariables)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectNonfatalFailureTest</type>
        </param>
        <param>
          <type>CanReferenceLocalVariables</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="537" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="537" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ac144593aa4a95ae47c0bb03def354f66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectNonfatalFailureTest, SucceedsWhenThereIsOneNonfatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectNonfatalFailureTest</type>
        </param>
        <param>
          <type>SucceedsWhenThereIsOneNonfatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="547" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a3984cefae98995e99cc3de7251998c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectNonfatalFailureTest, FailsWhenThereIsNoNonfatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectNonfatalFailureTest</type>
        </param>
        <param>
          <type>FailsWhenThereIsNoNonfatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="554" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="554" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a17f835822727dac7b75b74ed70d2fbd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectNonfatalFailureTest, FailsWhenThereAreTwoNonfatalFailures)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectNonfatalFailureTest</type>
        </param>
        <param>
          <type>FailsWhenThereAreTwoNonfatalFailures</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="561" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="561" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ab9c67cf52ef031fdf619d61283da1ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectNonfatalFailureTest, FailsWhenThereIsOneFatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectNonfatalFailureTest</type>
        </param>
        <param>
          <type>FailsWhenThereIsOneFatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="573" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="573" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aa5976cbca1620f7fea18689a3cbf5333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectNonfatalFailureTest, FailsWhenStatementReturns)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectNonfatalFailureTest</type>
        </param>
        <param>
          <type>FailsWhenStatementReturns</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="580" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a4b06191d54fb76270da3d3dd497e62b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectFatalFailureTest, CanReferenceGlobalVariables)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectFatalFailureTest</type>
        </param>
        <param>
          <type>CanReferenceGlobalVariables</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="600" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="600" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ac6646aa5f6d4ea21c0528259118754a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectFatalFailureTest, CanReferenceLocalStaticVariables)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectFatalFailureTest</type>
        </param>
        <param>
          <type>CanReferenceLocalStaticVariables</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="609" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="609" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a0d894cc9ae86412b4c156748602a23a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectFatalFailureTest, SucceedsWhenThereIsOneFatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectFatalFailureTest</type>
        </param>
        <param>
          <type>SucceedsWhenThereIsOneFatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="618" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="618" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1af8e8545243605b2ba121e253ec48785e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectFatalFailureTest, FailsWhenThereIsNoFatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectFatalFailureTest</type>
        </param>
        <param>
          <type>FailsWhenThereIsNoFatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="625" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="625" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1acdca9b16622e8a506a39240c8809af38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FatalFailure</definition>
        <argsstring>()</argsstring>
        <name>FatalFailure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="631" column="6" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="631" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a4fd11a245bf0e8eb46d78c8dc14c730e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectFatalFailureTest, FailsWhenThereAreTwoFatalFailures)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectFatalFailureTest</type>
        </param>
        <param>
          <type>FailsWhenThereAreTwoFatalFailures</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="635" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="635" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a35fafc42558ee14c42320b359c270026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectFatalFailureTest, FailsWhenThereIsOneNonfatalFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectFatalFailureTest</type>
        </param>
        <param>
          <type>FailsWhenThereIsOneNonfatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="647" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="647" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aca5344af5eed2eefc512c555acbe5511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ExpectFatalFailureTest, FailsWhenStatementReturns)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectFatalFailureTest</type>
        </param>
        <param>
          <type>FailsWhenStatementReturns</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="654" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="654" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a61c686cb1c0f8f19c100ff975482ec7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ParamNameFunc</definition>
        <argsstring>(const testing::TestParamInfo&lt; std::string &gt; &amp;info)</argsstring>
        <name>ParamNameFunc</name>
        <param>
          <type>const <ref refid="structtesting_1_1TestParamInfo" kindref="compound">testing::TestParamInfo</ref>&lt; std::string &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="675" column="13" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="675" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a4e7fc7682f9a8a168b78d53b05fab8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ParamTest, Success)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classParamTest" kindref="compound">ParamTest</ref></type>
        </param>
        <param>
          <type>Success</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="681" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="681" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a0847a99be23b980115e2dd88a1bd60cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ParamTest, Failure)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classParamTest" kindref="compound">ParamTest</ref></type>
        </param>
        <param>
          <type>Failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="683" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="683" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a5c488fe4474fec68c24acfc4fb353ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(PrintingStrings, ParamTest, testing::Values(std::string(&quot;a&quot;)), ParamNameFunc)</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>PrintingStrings</type>
        </param>
        <param>
          <type><ref refid="classParamTest" kindref="compound">ParamTest</ref></type>
        </param>
        <param>
          <type>testing::Values(std::string(&quot;a&quot;))</type>
        </param>
        <param>
          <type>ParamNameFunc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="685" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="685" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a58a299d11fe0be24b18af95858897c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ThisIsOdd, NoTests, ::testing::Values(&quot;Hello&quot;))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>ThisIsOdd</type>
        </param>
        <param>
          <type>NoTests</type>
        </param>
        <param>
          <type>::testing::Values(&quot;Hello&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="690" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="690" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aac3ca1ad9617f345c6db202900f1f74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(DetectNotInstantiatedTest, Used)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classDetectNotInstantiatedTest" kindref="compound">DetectNotInstantiatedTest</ref></type>
        </param>
        <param>
          <type>Used</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="694" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="694" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1aba6f96ff830e50262dbb69eaa210eb4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE</definition>
        <argsstring>(TypedTest, testing::Types&lt; int &gt;)</argsstring>
        <name>TYPED_TEST_SUITE</name>
        <param>
          <type><ref refid="classTypedTest" kindref="compound">TypedTest</ref></type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types</ref>&lt; int &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="702" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="702" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ab72842d4a1d86ecc465501431a9316a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTest, Success)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classTypedTest" kindref="compound">TypedTest</ref></type>
        </param>
        <param>
          <type>Success</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="704" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="704" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1adde6a03096986f66d57f1a495c6f5d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTest, Failure)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classTypedTest" kindref="compound">TypedTest</ref></type>
        </param>
        <param>
          <type>Failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="706" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="706" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1af86f556b60291929fbf63895e0bbf4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE</definition>
        <argsstring>(TypedTestWithNames, TypesForTestWithNames, TypedTestNames)</argsstring>
        <name>TYPED_TEST_SUITE</name>
        <param>
          <type><ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref></type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">TypesForTestWithNames</ref></type>
        </param>
        <param>
          <type><ref refid="classTypedTestNames" kindref="compound">TypedTestNames</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="726" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="726" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1adf6be2d306f1c323e94bb55cda1e4c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTestWithNames, Success)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref></type>
        </param>
        <param>
          <type>Success</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="728" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="728" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a265bb410f3f6cd39de657d42097d8880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTestWithNames, Failure)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref></type>
        </param>
        <param>
          <type>Failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="730" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="730" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a327e34ac226454d455e97bb82f312fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE_P</definition>
        <argsstring>(TypedTestP)</argsstring>
        <name>TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="735" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="735" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1af87307c4977f2d33c48a819c3a0a752f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(TypedTestP, Success)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref></type>
        </param>
        <param>
          <type>Success</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="737" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="737" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a5cea7e5e2c1e26c8803405b8645e611f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(TypedTestP, Failure)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref></type>
        </param>
        <param>
          <type>Failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="739" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="739" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a08fd631c8702ffd71139025175f6f277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_TYPED_TEST_SUITE_P</definition>
        <argsstring>(TypedTestP, Success, Failure)</argsstring>
        <name>REGISTER_TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref></type>
        </param>
        <param>
          <type>Success</type>
        </param>
        <param>
          <type>Failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="743" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="743" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a03e9ca08d4ba8290159392dada23e655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_SUITE_P</definition>
        <argsstring>(Unsigned, TypedTestP, UnsignedTypes)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_SUITE_P</name>
        <param>
          <type>Unsigned</type>
        </param>
        <param>
          <type><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref></type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">UnsignedTypes</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="746" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="746" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1af0b02481d59373e33a937e0dcacaaeb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_SUITE_P</definition>
        <argsstring>(UnsignedCustomName, TypedTestP, UnsignedTypes, TypedTestPNames)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_SUITE_P</name>
        <param>
          <type>UnsignedCustomName</type>
        </param>
        <param>
          <type><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref></type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">UnsignedTypes</ref></type>
        </param>
        <param>
          <type><ref refid="classTypedTestPNames" kindref="compound">TypedTestPNames</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="761" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="761" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ab9a2fdb6482d0bc5bbd48f6e8aab9940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_SUITE_P</definition>
        <argsstring>(DetectNotInstantiatedTypesTest)</argsstring>
        <name>TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classDetectNotInstantiatedTypesTest" kindref="compound">DetectNotInstantiatedTypesTest</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="766" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="766" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a5f00094ca238af220c026d737e034100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(DetectNotInstantiatedTypesTest, Used)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classDetectNotInstantiatedTypesTest" kindref="compound">DetectNotInstantiatedTypesTest</ref></type>
        </param>
        <param>
          <type>Used</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="767" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="767" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a530fc81b4d356d88c475f969687c8596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_TYPED_TEST_SUITE_P</definition>
        <argsstring>(DetectNotInstantiatedTypesTest, Used)</argsstring>
        <name>REGISTER_TYPED_TEST_SUITE_P</name>
        <param>
          <type><ref refid="classDetectNotInstantiatedTypesTest" kindref="compound">DetectNotInstantiatedTypesTest</ref></type>
        </param>
        <param>
          <type>Used</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="771" column="1" declfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" declline="771" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ae7459e6b9516821fd0e77eb3aa9b7413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ExpectFailureTest, ExpectFatalFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref></type>
        </param>
        <param>
          <type>ExpectFatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="827" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="827" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1abec150ac715359c89fde1102cfc300d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ExpectFailureTest, ExpectNonFatalFailure)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref></type>
        </param>
        <param>
          <type>ExpectNonFatalFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="843" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="843" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a1f29562e9248524dda90aa6d641d77ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ExpectFailureTest, ExpectFatalFailureOnAllThreads)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref></type>
        </param>
        <param>
          <type>ExpectFatalFailureOnAllThreads</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="901" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="901" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a7714d1899711a604704737897595e7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ExpectFailureTest, ExpectNonFatalFailureOnAllThreads)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref></type>
        </param>
        <param>
          <type>ExpectNonFatalFailureOnAllThreads</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="915" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="915" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1ad50826ffeb23a0e76cdf8f99f3fdc24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestSuiteThatFailsToSetUp, ShouldNotRun)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestSuiteThatFailsToSetUp" kindref="compound">TestSuiteThatFailsToSetUp</ref></type>
        </param>
        <param>
          <type>ShouldNotRun</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="1008" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="1008" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a0bf3a127446adea7f3c54a688005646e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestSuiteThatSkipsInSetUp, ShouldNotRun)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestSuiteThatSkipsInSetUp" kindref="compound">TestSuiteThatSkipsInSetUp</ref></type>
        </param>
        <param>
          <type>ShouldNotRun</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="1014" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="1014" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="googletest-output-test___8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" line="1021" column="5" bodyfile="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc" bodystart="1021" bodyend="1058"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>purpose<sp/>of<sp/>this<sp/>file<sp/>is<sp/>to<sp/>generate<sp/>Google<sp/>Test<sp/>output<sp/>under</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>various<sp/>conditions.<sp/><sp/>The<sp/>output<sp/>will<sp/>then<sp/>be<sp/>verified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>googletest-output-test.py<sp/>to<sp/>ensure<sp/>that<sp/>Google<sp/>Test<sp/>generates<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>desired<sp/>messages.<sp/><sp/>Therefore,<sp/>most<sp/>tests<sp/>in<sp/>this<sp/>file<sp/>are<sp/>MEANT<sp/>TO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FAIL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/gtest-internal-inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127<sp/></highlight><highlight class="comment">/*<sp/>conditional<sp/>expression<sp/>is<sp/>constant<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ScopedFakeTestPartResultReporter;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::TestPartResultArray;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::Notification;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::internal::ThreadWithParam;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">posix<sp/>=<sp/>::testing::internal::posix;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>catching<sp/>fatal<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>subroutine<sp/>used<sp/>by<sp/>the<sp/>following<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestEq1(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>ASSERT_EQ(1,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>calls<sp/>a<sp/>test<sp/>subroutine,<sp/>catches<sp/>the<sp/>fatal<sp/>failure<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates,<sp/>and<sp/>then<sp/>returns<sp/>early.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TryTestSubroutine()<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calls<sp/>a<sp/>subrountine<sp/>that<sp/>yields<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>TestEq1(2);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Catches<sp/>the<sp/>fatal<sp/>failure<sp/>and<sp/>aborts<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>testing::Test::<sp/>prefix<sp/>is<sp/>necessary<sp/>when<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>HasFatalFailure()<sp/>outside<sp/>of<sp/>a<sp/>TEST,<sp/>TEST_F,<sp/>or<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testing::Test::HasFatalFailure())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>something<sp/>is<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>never<sp/>be<sp/>reached.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">TEST(PassingTest,<sp/>PassingTest1)<sp/>{}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">TEST(PassingTest,<sp/>PassingTest2)<sp/>{}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>parameters<sp/>of<sp/>failing<sp/>parameterized<sp/>tests<sp/>are<sp/>printed<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failing<sp/>test<sp/>summary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classFailingParamTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFailingParamTest" kindref="compound">FailingParamTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">testing::TestWithParam</ref>&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">TEST_P(<ref refid="classFailingParamTest" kindref="compound">FailingParamTest</ref>,<sp/>Fails)<sp/>{<sp/>EXPECT_EQ(1,<sp/>GetParam());<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>generates<sp/>a<sp/>test<sp/>which<sp/>will<sp/>fail.<sp/>Google<sp/>Test<sp/>is<sp/>expected<sp/>to<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>its<sp/>parameter<sp/>when<sp/>it<sp/>outputs<sp/>the<sp/>list<sp/>of<sp/>all<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(PrintingFailingParams,<sp/><ref refid="classFailingParamTest" kindref="compound">FailingParamTest</ref>,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(2));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>empty<sp/>value<sp/>for<sp/>the<sp/>test<sp/>suite<sp/>basename<sp/>yields<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>name<sp/>without<sp/>any<sp/>prior<sp/>/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classEmptyBasenameParamInst" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classEmptyBasenameParamInst" kindref="compound">EmptyBasenameParamInst</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">testing::TestWithParam</ref>&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">TEST_P(<ref refid="classEmptyBasenameParamInst" kindref="compound">EmptyBasenameParamInst</ref>,<sp/>Passes)<sp/>{<sp/>EXPECT_EQ(1,<sp/>GetParam());<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(,<sp/><ref refid="classEmptyBasenameParamInst" kindref="compound">EmptyBasenameParamInst</ref>,<sp/>testing::Values(1));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kGoldenString[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;Line\0<sp/>1\&quot;\nLine<sp/>2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">TEST(NonfatalFailureTest,<sp/>EscapesStringOperands)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::string<sp/>actual<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;actual<sp/>\&quot;string\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>EXPECT_EQ(kGoldenString,<sp/>actual);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>golden<sp/>=<sp/>kGoldenString;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>EXPECT_EQ(golden,<sp/>actual);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">TEST(NonfatalFailureTest,<sp/>DiffForLongStrings)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::string<sp/>golden_str(kGoldenString,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kGoldenString)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>EXPECT_EQ(golden_str,<sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>catching<sp/>a<sp/>fatal<sp/>failure<sp/>in<sp/>a<sp/>subroutine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">TEST(FatalFailureTest,<sp/>FatalFailureInSubroutine)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure<sp/>that<sp/>x<sp/>should<sp/>be<sp/>1)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>TryTestSubroutine();</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>catching<sp/>a<sp/>fatal<sp/>failure<sp/>in<sp/>a<sp/>nested<sp/>subroutine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">TEST(FatalFailureTest,<sp/>FatalFailureInNestedSubroutine)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure<sp/>that<sp/>x<sp/>should<sp/>be<sp/>1)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calls<sp/>a<sp/>subrountine<sp/>that<sp/>yields<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>TryTestSubroutine();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Catches<sp/>the<sp/>fatal<sp/>failure<sp/>and<sp/>aborts<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>calling<sp/>HasFatalFailure()<sp/>inside<sp/>a<sp/>TEST,<sp/>TEST_F,<sp/>or<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fixture,<sp/>the<sp/>testing::Test::<sp/>prefix<sp/>is<sp/>not<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasFatalFailure())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>something<sp/>is<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>never<sp/>be<sp/>reached.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>HasFatalFailure()<sp/>after<sp/>a<sp/>failed<sp/>EXPECT<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">TEST(FatalFailureTest,<sp/>NonfatalFailureInSubroutine)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure<sp/>on<sp/>false)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>nonfatal<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(HasFatalFailure());<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>succeed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>interleaving<sp/>user<sp/>logging<sp/>and<sp/>Google<sp/>Test<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">TEST(LoggingTest,<sp/>InterleavingLoggingAndAssertions)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[4]<sp/>=<sp/>{3,<sp/>9,<sp/>2,<sp/>6};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>failures<sp/>on<sp/>(3)<sp/>&gt;=<sp/>(a[i]))\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a));<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;i<sp/>==<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GE(3,<sp/>a[i]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>SCOPED_TRACE<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>function<sp/>for<sp/>testing<sp/>SCOPED_TRACE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SubWithoutTrace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Another<sp/>helper<sp/>function<sp/>for<sp/>testing<sp/>SCOPED_TRACE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SubWithTrace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(<ref refid="classtesting_1_1Message" kindref="compound">testing::Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;n<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>SubWithoutTrace(n);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">TEST(SCOPED_TRACETest,<sp/>AcceptedValues)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;literal<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(std::string(</highlight><highlight class="stringliteral">&quot;std::string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(1337);<sp/><sp/></highlight><highlight class="comment">//<sp/>streamable<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>null_value<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(null_value);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Just<sp/>checking<sp/>that<sp/>all<sp/>these<sp/>values<sp/>work<sp/>fine.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SCOPED_TRACE()<sp/>obeys<sp/>lexical<sp/>scopes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">TEST(SCOPED_TRACETest,<sp/>ObeysScopes)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expected<sp/>to<sp/>fail)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>no<sp/>trace<sp/>before<sp/>SCOPED_TRACE()<sp/>is<sp/>invoked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>and<sp/>shouldn&apos;t<sp/>have<sp/>a<sp/>trace.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;Expected<sp/>trace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>SCOPED_TRACE(),<sp/>a<sp/>failure<sp/>in<sp/>the<sp/>current<sp/>scope<sp/>should<sp/>contain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>and<sp/>should<sp/>have<sp/>a<sp/>trace.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Once<sp/>the<sp/>control<sp/>leaves<sp/>the<sp/>scope<sp/>of<sp/>the<sp/>SCOPED_TRACE(),<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>no<sp/>trace<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>and<sp/>shouldn&apos;t<sp/>have<sp/>a<sp/>trace.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SCOPED_TRACE<sp/>works<sp/>inside<sp/>a<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">TEST(SCOPED_TRACETest,<sp/>WorksInLoop)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expected<sp/>to<sp/>fail)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(<ref refid="classtesting_1_1Message" kindref="compound">testing::Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;i<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>SubWithoutTrace(i);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SCOPED_TRACE<sp/>works<sp/>in<sp/>a<sp/>subroutine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">TEST(SCOPED_TRACETest,<sp/>WorksInSubroutine)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expected<sp/>to<sp/>fail)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>SubWithTrace(1);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>SubWithTrace(2);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SCOPED_TRACE<sp/>can<sp/>be<sp/>nested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">TEST(SCOPED_TRACETest,<sp/>CanBeNested)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expected<sp/>to<sp/>fail)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>trace<sp/>without<sp/>a<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>SubWithTrace(2);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>multiple<sp/>SCOPED_TRACEs<sp/>can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>same<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">TEST(SCOPED_TRACETest,<sp/>CanBeRepeated)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expected<sp/>to<sp/>fail)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>ADD_FAILURE()</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>and<sp/>should<sp/>contain<sp/>trace<sp/>point<sp/>A.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ADD_FAILURE()</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>and<sp/>should<sp/>contain<sp/>trace<sp/>point<sp/>A<sp/>and<sp/>B.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>and<sp/>should<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;contain<sp/>trace<sp/>point<sp/>A,<sp/>B,<sp/>and<sp/>C.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>failure<sp/>is<sp/>expected,<sp/>and<sp/>should<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;contain<sp/>trace<sp/>point<sp/>A,<sp/>B,<sp/>and<sp/>D.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SCOPED_TRACE()s<sp/>can<sp/>be<sp/>used<sp/>concurrently<sp/>from<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>threads.<sp/><sp/>Namely,<sp/>an<sp/>assertion<sp/>should<sp/>be<sp/>affected<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SCOPED_TRACE()s<sp/>in<sp/>its<sp/>own<sp/>thread<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here&apos;s<sp/>the<sp/>sequence<sp/>of<sp/>actions<sp/>that<sp/>happen<sp/>in<sp/>the<sp/>test:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Thread<sp/>A<sp/>(main)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Thread<sp/>B<sp/>(spawned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>===============================|================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>spawns<sp/>thread<sp/>B<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-------------------------------+--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>waits<sp/>for<sp/>n1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SCOPED_TRACE(&quot;Trace<sp/>B&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>generates<sp/>failure<sp/>#1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>notifies<sp/>n1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-------------------------------+--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>SCOPED_TRACE(&quot;Trace<sp/>A&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>waits<sp/>for<sp/>n2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>generates<sp/>failure<sp/>#2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>notifies<sp/>n2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-------------------------------|--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>waits<sp/>for<sp/>n3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>generates<sp/>failure<sp/>#3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>trace<sp/>B<sp/>dies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>generates<sp/>failure<sp/>#4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>notifies<sp/>n3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-------------------------------|--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>generates<sp/>failure<sp/>#5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>finishes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>trace<sp/>A<sp/>dies<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>generates<sp/>failure<sp/>#6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-------------------------------|--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>waits<sp/>for<sp/>thread<sp/>B<sp/>to<sp/>finish<sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CheckPoints<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>Notification<sp/>n1;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>Notification<sp/>n2;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>Notification<sp/>n3;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ThreadWithScopedTrace(CheckPoints*<sp/>check_points)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;Trace<sp/>B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#1<sp/>(in<sp/>thread<sp/>B,<sp/>only<sp/>trace<sp/>B<sp/>alive).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>check_points-&gt;n1.Notify();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>check_points-&gt;n2.WaitForNotification();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#3<sp/>(in<sp/>thread<sp/>B,<sp/>trace<sp/>A<sp/>&amp;<sp/>B<sp/>both<sp/>alive).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>Trace<sp/>B<sp/>dies<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#4<sp/>(in<sp/>thread<sp/>B,<sp/>only<sp/>trace<sp/>A<sp/>alive).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>check_points-&gt;n3.Notify();</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">TEST(SCOPED_TRACETest,<sp/>WorksConcurrently)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>6<sp/>failures)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>CheckPoints<sp/>check_points;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>ThreadWithParam&lt;CheckPoints*&gt;<sp/>thread(&amp;ThreadWithScopedTrace,<sp/>&amp;check_points,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>check_points.n1.WaitForNotification();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;Trace<sp/>A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#2<sp/>(in<sp/>thread<sp/>A,<sp/>trace<sp/>A<sp/>&amp;<sp/>B<sp/>both<sp/>alive).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>check_points.n2.Notify();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>check_points.n3.WaitForNotification();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#5<sp/>(in<sp/>thread<sp/>A,<sp/>only<sp/>trace<sp/>A<sp/>alive).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>Trace<sp/>A<sp/>dies<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#6<sp/>(in<sp/>thread<sp/>A,<sp/>no<sp/>trace<sp/>alive).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>thread.Join();</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>basic<sp/>functionality<sp/>of<sp/>the<sp/>ScopedTrace<sp/>utility<sp/>(most<sp/>of<sp/>its<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>already<sp/>tested<sp/>in<sp/>SCOPED_TRACETest).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">TEST(ScopedTraceTest,<sp/>WithExplicitFileAndLine)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1ScopedTrace" kindref="compound">testing::ScopedTrace</ref><sp/>trace(</highlight><highlight class="stringliteral">&quot;explicit_file.cc&quot;</highlight><highlight class="normal">,<sp/>123,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>trace<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>that<sp/>the<sp/>trace<sp/>is<sp/>attached<sp/>to<sp/>a<sp/>particular<sp/>location.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">TEST(DisabledTestsWarningTest,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>DISABLED_AlsoRunDisabledTestsFlagSuppressesWarning)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>body<sp/>is<sp/>intentionally<sp/>empty.<sp/><sp/>Its<sp/>sole<sp/>purpose<sp/>is<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>verifying<sp/>that<sp/>the<sp/>--gtest_also_run_disabled_tests<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>suppresses<sp/>the<sp/>&quot;YOU<sp/>HAVE<sp/>12<sp/>DISABLED<sp/>TESTS&quot;<sp/>warning<sp/>at<sp/>the<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>assertions<sp/>outside<sp/>of<sp/>TEST<sp/>and<sp/>TEST_F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>creates<sp/>two<sp/>failures<sp/>intentionally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AdHocTest()<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;The<sp/>non-test<sp/>part<sp/>of<sp/>the<sp/>code<sp/>is<sp/>expected<sp/>to<sp/>have<sp/>2<sp/>failures.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>3);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>all<sp/>TESTs,<sp/>all<sp/>TEST_Fs,<sp/>and<sp/>the<sp/>ad<sp/>hoc<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RunAllTests()<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>AdHocTest();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>non-fatal<sp/>failures<sp/>in<sp/>the<sp/>fixture<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="classNonFatalFailureInFixtureConstructorTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNonFatalFailureInFixtureConstructorTest" kindref="compound">NonFatalFailureInFixtureConstructorTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="classNonFatalFailureInFixtureConstructorTest" kindref="compound">NonFatalFailureInFixtureConstructorTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>5<sp/>failures)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#1,<sp/>in<sp/>the<sp/>test<sp/>fixture<sp/>c&apos;tor.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="classNonFatalFailureInFixtureConstructorTest" kindref="compound">~NonFatalFailureInFixtureConstructorTest</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#5,<sp/>in<sp/>the<sp/>test<sp/>fixture<sp/>d&apos;tor.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#2,<sp/>in<sp/>SetUp().&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#4,<sp/>in<sp/>TearDown.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal">};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">TEST_F(<ref refid="classNonFatalFailureInFixtureConstructorTest" kindref="compound">NonFatalFailureInFixtureConstructorTest</ref>,<sp/>FailureInConstructor)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#3,<sp/>in<sp/>the<sp/>test<sp/>body.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>fatal<sp/>failures<sp/>in<sp/>the<sp/>fixture<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="classFatalFailureInFixtureConstructorTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFatalFailureInFixtureConstructorTest" kindref="compound">FatalFailureInFixtureConstructorTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><ref refid="classFatalFailureInFixtureConstructorTest" kindref="compound">FatalFailureInFixtureConstructorTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>failures)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><ref refid="classFatalFailureInFixtureConstructorTest" kindref="compound">~FatalFailureInFixtureConstructorTest</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#2,<sp/>in<sp/>the<sp/>test<sp/>fixture<sp/>d&apos;tor.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;UNEXPECTED<sp/>failure<sp/>in<sp/>SetUp().<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;We<sp/>should<sp/>never<sp/>get<sp/>here,<sp/>as<sp/>the<sp/>test<sp/>fixture<sp/>c&apos;tor<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;had<sp/>a<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;UNEXPECTED<sp/>failure<sp/>in<sp/>TearDown().<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;We<sp/>should<sp/>never<sp/>get<sp/>here,<sp/>as<sp/>the<sp/>test<sp/>fixture<sp/>c&apos;tor<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;had<sp/>a<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init()<sp/>{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#1,<sp/>in<sp/>the<sp/>test<sp/>fixture<sp/>c&apos;tor.&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal">};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">TEST_F(<ref refid="classFatalFailureInFixtureConstructorTest" kindref="compound">FatalFailureInFixtureConstructorTest</ref>,<sp/>FailureInConstructor)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;UNEXPECTED<sp/>failure<sp/>in<sp/>the<sp/>test<sp/>body.<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;We<sp/>should<sp/>never<sp/>get<sp/>here,<sp/>as<sp/>the<sp/>test<sp/>fixture<sp/>c&apos;tor<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;had<sp/>a<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>non-fatal<sp/>failures<sp/>in<sp/>SetUp().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="classNonFatalFailureInSetUpTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNonFatalFailureInSetUpTest" kindref="compound">NonFatalFailureInSetUpTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="classNonFatalFailureInSetUpTest" kindref="compound">~NonFatalFailureInSetUpTest</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>Deinit();<sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>4<sp/>failures)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#1,<sp/>in<sp/>SetUp().&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#3,<sp/>in<sp/>TearDown().&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Deinit()<sp/>{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#4,<sp/>in<sp/>the<sp/>test<sp/>fixture<sp/>d&apos;tor.&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal">};</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">TEST_F(<ref refid="classNonFatalFailureInSetUpTest" kindref="compound">NonFatalFailureInSetUpTest</ref>,<sp/>FailureInSetUp)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#2,<sp/>in<sp/>the<sp/>test<sp/>function.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>fatal<sp/>failures<sp/>in<sp/>SetUp().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="classFatalFailureInSetUpTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFatalFailureInSetUpTest" kindref="compound">FatalFailureInSetUpTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="classFatalFailureInSetUpTest" kindref="compound">~FatalFailureInSetUpTest</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>Deinit();<sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>3<sp/>failures)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#1,<sp/>in<sp/>SetUp().&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#2,<sp/>in<sp/>TearDown().&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Deinit()<sp/>{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>#3,<sp/>in<sp/>the<sp/>test<sp/>fixture<sp/>d&apos;tor.&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal">};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">TEST_F(<ref refid="classFatalFailureInSetUpTest" kindref="compound">FatalFailureInSetUpTest</ref>,<sp/>FailureInSetUp)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;UNEXPECTED<sp/>failure<sp/>in<sp/>the<sp/>test<sp/>function.<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;We<sp/>should<sp/>never<sp/>get<sp/>here,<sp/>as<sp/>SetUp()<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">TEST(AddFailureAtTest,<sp/>MessageContainsSpecifiedFileAndLineNumber)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>ADD_FAILURE_AT(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>nonfatal<sp/>failure<sp/>in<sp/>foo.cc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">TEST(GtestFailAtTest,<sp/>MessageContainsSpecifiedFileAndLineNumber)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>GTEST_FAIL_AT(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>42)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure<sp/>in<sp/>foo.cc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>MixedUpTestSuiteTest<sp/>test<sp/>case<sp/>verifies<sp/>that<sp/>Google<sp/>Test<sp/>will<sp/>fail<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>it<sp/>uses<sp/>a<sp/>different<sp/>fixture<sp/>class<sp/>than<sp/>what<sp/>other<sp/>tests<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>test<sp/>case<sp/>use.<sp/><sp/>It<sp/>deliberately<sp/>contains<sp/>two<sp/>fixture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>classes<sp/>with<sp/>the<sp/>same<sp/>name<sp/>but<sp/>defined<sp/>in<sp/>different<sp/>namespaces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>MixedUpTestSuiteWithSameTestNameTest<sp/>test<sp/>case<sp/>verifies<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>user<sp/>defines<sp/>two<sp/>tests<sp/>with<sp/>the<sp/>same<sp/>test<sp/>case<sp/>name<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>test<sp/>name<sp/>(but<sp/>in<sp/>different<sp/>namespaces),<sp/>the<sp/>second<sp/>test<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">foo<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="classfoo_1_1MixedUpTestSuiteTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfoo_1_1MixedUpTestSuiteTest" kindref="compound">MixedUpTestSuiteTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">TEST_F(<ref refid="classfoo_1_1MixedUpTestSuiteTest" kindref="compound">MixedUpTestSuiteTest</ref>,<sp/>FirstTestFromNamespaceFoo)<sp/>{}</highlight></codeline>
<codeline lineno="476"><highlight class="normal">TEST_F(MixedUpTestSuiteTest,<sp/>SecondTestFromNamespaceFoo)<sp/>{}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="classfoo_1_1MixedUpTestSuiteWithSameTestNameTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfoo_1_1MixedUpTestSuiteWithSameTestNameTest" kindref="compound">MixedUpTestSuiteWithSameTestNameTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal">TEST_F(<ref refid="classfoo_1_1MixedUpTestSuiteWithSameTestNameTest" kindref="compound">MixedUpTestSuiteWithSameTestNameTest</ref>,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TheSecondTestWithThisNameShouldFail)<sp/>{}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>foo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bar<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="classbar_1_1MixedUpTestSuiteTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbar_1_1MixedUpTestSuiteTest" kindref="compound">MixedUpTestSuiteTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>tests<sp/>are<sp/>expected<sp/>to<sp/>fail.<sp/><sp/>We<sp/>rely<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>golden<sp/>file<sp/>to<sp/>check<sp/>that<sp/>Google<sp/>Test<sp/>generates<sp/>the<sp/>right<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">TEST_F(<ref refid="classbar_1_1MixedUpTestSuiteTest" kindref="compound">MixedUpTestSuiteTest</ref>,<sp/>ThisShouldFail)<sp/>{}</highlight></codeline>
<codeline lineno="492"><highlight class="normal">TEST_F(MixedUpTestSuiteTest,<sp/>ThisShouldFailToo)<sp/>{}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="classbar_1_1MixedUpTestSuiteWithSameTestNameTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbar_1_1MixedUpTestSuiteWithSameTestNameTest" kindref="compound">MixedUpTestSuiteWithSameTestNameTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expected<sp/>to<sp/>fail.<sp/><sp/>We<sp/>rely<sp/>on<sp/>the<sp/>golden<sp/>file<sp/>to<sp/>check<sp/>that<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>the<sp/>right<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">TEST_F(<ref refid="classbar_1_1MixedUpTestSuiteWithSameTestNameTest" kindref="compound">MixedUpTestSuiteWithSameTestNameTest</ref>,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TheSecondTestWithThisNameShouldFail)<sp/>{}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>test<sp/>cases<sp/>verify<sp/>that<sp/>Google<sp/>Test<sp/>catches<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error<sp/>of<sp/>mixing<sp/>TEST<sp/>and<sp/>TEST_F<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case.<sp/><sp/>The<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>case<sp/>checks<sp/>the<sp/>scenario<sp/>where<sp/>TEST_F<sp/>appears<sp/>before<sp/>TEST,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>second<sp/>one<sp/>checks<sp/>where<sp/>TEST<sp/>appears<sp/>before<sp/>TEST_F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="classTEST__F__before__TEST__in__same__test__case" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTEST__F__before__TEST__in__same__test__case" kindref="compound">TEST_F_before_TEST_in_same_test_case</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal">TEST_F(<ref refid="classTEST__F__before__TEST__in__same__test__case" kindref="compound">TEST_F_before_TEST_in_same_test_case</ref>,<sp/>DefinedUsingTEST_F)<sp/>{}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expected<sp/>to<sp/>fail.<sp/><sp/>We<sp/>rely<sp/>on<sp/>the<sp/>golden<sp/>file<sp/>to<sp/>check<sp/>that<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>the<sp/>right<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">TEST(<ref refid="classTEST__F__before__TEST__in__same__test__case" kindref="compound">TEST_F_before_TEST_in_same_test_case</ref>,<sp/>DefinedUsingTESTAndShouldFail)<sp/>{}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="classTEST__before__TEST__F__in__same__test__case" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTEST__before__TEST__F__in__same__test__case" kindref="compound">TEST_before_TEST_F_in_same_test_case</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">TEST(<ref refid="classTEST__before__TEST__F__in__same__test__case" kindref="compound">TEST_before_TEST_F_in_same_test_case</ref>,<sp/>DefinedUsingTEST)<sp/>{}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expected<sp/>to<sp/>fail.<sp/><sp/>We<sp/>rely<sp/>on<sp/>the<sp/>golden<sp/>file<sp/>to<sp/>check<sp/>that<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>the<sp/>right<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">TEST_F(<ref refid="classTEST__before__TEST__F__in__same__test__case" kindref="compound">TEST_before_TEST_F_in_same_test_case</ref>,<sp/>DefinedUsingTEST_FAndShouldFail)<sp/>{}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>testing<sp/>EXPECT_NONFATAL_FAILURE()<sp/>and<sp/>EXPECT_FATAL_FAILURE().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>global_integer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_NONFATAL_FAILURE()<sp/>can<sp/>reference<sp/>global<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal">TEST(ExpectNonfatalFailureTest,<sp/>CanReferenceGlobalVariables)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>global_integer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>EXPECT_EQ(1,<sp/>global_integer)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>},</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_NONFATAL_FAILURE()<sp/>can<sp/>reference<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(static<sp/>or<sp/>not).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">TEST(ExpectNonfatalFailureTest,<sp/>CanReferenceLocalVariables)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/>EXPECT_EQ(m,<sp/>n)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>},</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_NONFATAL_FAILURE()<sp/>succeeds<sp/>when<sp/>there<sp/>is<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>non-fatal<sp/>failure<sp/>and<sp/>no<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">TEST(ExpectNonfatalFailureTest,<sp/>SucceedsWhenThereIsOneNonfatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>},</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_NONFATAL_FAILURE()<sp/>fails<sp/>when<sp/>there<sp/>is<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">TEST(ExpectNonfatalFailureTest,<sp/>FailsWhenThereIsNoNonfatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_NONFATAL_FAILURE()<sp/>fails<sp/>when<sp/>there<sp/>are<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-fatal<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">TEST(ExpectNonfatalFailureTest,<sp/>FailsWhenThereAreTwoNonfatalFailures)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure<sp/>1.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure<sp/>2.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_NONFATAL_FAILURE()<sp/>fails<sp/>when<sp/>there<sp/>is<sp/>one<sp/>fatal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal">TEST(ExpectNonfatalFailureTest,<sp/>FailsWhenThereIsOneFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_NONFATAL_FAILURE()<sp/>fails<sp/>when<sp/>the<sp/>statement<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tested<sp/>returns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal">TEST(ExpectNonfatalFailureTest,<sp/>FailsWhenStatementReturns)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_NONFATAL_FAILURE()<sp/>fails<sp/>when<sp/>the<sp/>statement<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tested<sp/>throws.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">TEST(ExpectNonfatalFailureTest,<sp/>FailsWhenStatementThrows)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>0;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>can<sp/>reference<sp/>global<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">TEST(ExpectFatalFailureTest,<sp/>CanReferenceGlobalVariables)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>global_integer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ASSERT_EQ(1,<sp/>global_integer)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>},</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>can<sp/>reference<sp/>local<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">TEST(ExpectFatalFailureTest,<sp/>CanReferenceLocalStaticVariables)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE({<sp/>ASSERT_EQ(0,<sp/>n)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>},</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>succeeds<sp/>when<sp/>there<sp/>is<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>fatal<sp/>failure<sp/>and<sp/>no<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">TEST(ExpectFatalFailureTest,<sp/>SucceedsWhenThereIsOneFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE({<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>},</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>fails<sp/>when<sp/>there<sp/>is<sp/>no<sp/>fatal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">TEST(ExpectFatalFailureTest,<sp/>FailsWhenThereIsNoFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE({},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>for<sp/>generating<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FatalFailure()<sp/>{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>fails<sp/>when<sp/>there<sp/>are<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fatal<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">TEST(ExpectFatalFailureTest,<sp/>FailsWhenThereAreTwoFatalFailures)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalFailure();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalFailure();</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>fails<sp/>when<sp/>there<sp/>is<sp/>one<sp/>non-fatal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">TEST(ExpectFatalFailureTest,<sp/>FailsWhenThereIsOneNonfatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE({<sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>fails<sp/>when<sp/>the<sp/>statement<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tested<sp/>returns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">TEST(ExpectFatalFailureTest,<sp/>FailsWhenStatementReturns)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE({<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EXPECT_FATAL_FAILURE()<sp/>fails<sp/>when<sp/>the<sp/>statement<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tested<sp/>throws.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">TEST(ExpectFatalFailureTest,<sp/>FailsWhenStatementThrows)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>a<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FATAL_FAILURE({<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>0;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>#ifdef<sp/>block<sp/>tests<sp/>the<sp/>output<sp/>of<sp/>value-parameterized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">std::string<sp/>ParamNameFunc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1TestParamInfo" kindref="compound">testing::TestParamInfo&lt;std::string&gt;</ref>&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info.param;</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="classParamTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classParamTest" kindref="compound">ParamTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">testing::TestWithParam</ref>&lt;std::string&gt;<sp/>{};</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">TEST_P(ParamTest,<sp/>Success)<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>GetParam());<sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">TEST_P(ParamTest,<sp/>Failure)<sp/>{<sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/>GetParam())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(PrintingStrings,<sp/>ParamTest,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">)),<sp/>ParamNameFunc);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>case<sp/>where<sp/>a<sp/>suite<sp/>has<sp/>INSTANTIATE_TEST_SUITE_P<sp/>but<sp/>not<sp/>TEST_P.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">NoTests<sp/>=<sp/>ParamTest;</highlight></codeline>
<codeline lineno="690"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(ThisIsOdd,<sp/>NoTests,<sp/>::testing::Values(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fails<sp/>under<sp/>kErrorOnUninstantiatedParameterizedTest=true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693" refid="classDetectNotInstantiatedTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDetectNotInstantiatedTest" kindref="compound">DetectNotInstantiatedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestWithParam" kindref="compound">testing::TestWithParam</ref>&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="694"><highlight class="normal">TEST_P(<ref refid="classDetectNotInstantiatedTest" kindref="compound">DetectNotInstantiatedTest</ref>,<sp/>Used)<sp/>{}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>would<sp/>make<sp/>the<sp/>test<sp/>failure<sp/>from<sp/>the<sp/>above<sp/>go<sp/>away.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INSTANTIATE_TEST_SUITE_P(Fix,<sp/>DetectNotInstantiatedTest,<sp/>testing::Values(1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTest" kindref="compound">TypedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classTypedTest" kindref="compound">TypedTest</ref>,<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types&lt;int&gt;</ref>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal">TYPED_TEST(<ref refid="classTypedTest" kindref="compound">TypedTest</ref>,<sp/>Success)<sp/>{<sp/>EXPECT_EQ(0,<sp/>TypeParam());<sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">TYPED_TEST(<ref refid="classTypedTest" kindref="compound">TypedTest</ref>,<sp/>Failure)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>TypeParam())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types&lt;char, int&gt;</ref><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">TypesForTestWithNames</ref>;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="713" refid="classTypedTestWithNames" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="classTypedTestNames" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestNames" kindref="compound">TypedTestNames</ref><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetName(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>char&gt;::value)</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;char&quot;</highlight><highlight class="normal">)<sp/>+<sp/>::testing::PrintToString(i);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>int&gt;::value)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>+<sp/>::testing::PrintToString(i);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal">};</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref>,<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">TypesForTestWithNames</ref>,<sp/><ref refid="classTypedTestNames" kindref="compound">TypedTestNames</ref>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal">TYPED_TEST(<ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref>,<sp/>Success)<sp/>{}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal">TYPED_TEST(<ref refid="classTypedTestWithNames" kindref="compound">TypedTestWithNames</ref>,<sp/>Failure)<sp/>{<sp/>FAIL();<sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="733" refid="classTypedTestP" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal">TYPED_TEST_P(<ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>,<sp/>Success)<sp/>{<sp/>EXPECT_EQ(0U,<sp/>TypeParam());<sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal">TYPED_TEST_P(<ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>,<sp/>Failure)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1U,<sp/>TypeParam())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(<ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>,<sp/>Success,<sp/>Failure);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types&lt;unsigned char, unsigned int&gt;</ref><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">UnsignedTypes</ref>;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(Unsigned,<sp/><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>,<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">UnsignedTypes</ref>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748" refid="classTypedTestPNames" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypedTestPNames" kindref="compound">TypedTestPNames</ref><sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetName(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>unsigned<sp/>char&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;unsignedChar&quot;</highlight><highlight class="normal">)<sp/>+<sp/>::testing::PrintToString(i);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>unsigned<sp/>int&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;unsignedInt&quot;</highlight><highlight class="normal">)<sp/>+<sp/>::testing::PrintToString(i);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal">};</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(UnsignedCustomName,<sp/><ref refid="classTypedTestP" kindref="compound">TypedTestP</ref>,<sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">UnsignedTypes</ref>,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTypedTestPNames" kindref="compound">TypedTestPNames</ref>);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="765" refid="classDetectNotInstantiatedTypesTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDetectNotInstantiatedTypesTest" kindref="compound">DetectNotInstantiatedTypesTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="766"><highlight class="normal">TYPED_TEST_SUITE_P(<ref refid="classDetectNotInstantiatedTypesTest" kindref="compound">DetectNotInstantiatedTypesTest</ref>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal">TYPED_TEST_P(<ref refid="classDetectNotInstantiatedTypesTest" kindref="compound">DetectNotInstantiatedTypesTest</ref>,<sp/>Used)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>TypeParam<sp/>instantiate;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>(void)instantiate;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(<ref refid="classDetectNotInstantiatedTypesTest" kindref="compound">DetectNotInstantiatedTypesTest</ref>,<sp/>Used);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>kErrorOnUninstantiatedTypeParameterizedTest=true<sp/>would<sp/>make<sp/>the<sp/>above<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>the<sp/>following<sp/>would<sp/>make<sp/>that<sp/>test<sp/>failure<sp/>go<sp/>away.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typedef<sp/>::testing::Types&lt;char,<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>MyTypes;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INSTANTIATE_TYPED_TEST_SUITE_P(All,<sp/>DetectNotInstantiatedTypesTest,<sp/>MyTypes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>rely<sp/>on<sp/>the<sp/>golden<sp/>file<sp/>to<sp/>verify<sp/>that<sp/>tests<sp/>whose<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name<sp/>ends<sp/>with<sp/>DeathTest<sp/>are<sp/>run<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal">TEST(ADeathTest,<sp/>ShouldRunFirst)<sp/>{}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>rely<sp/>on<sp/>the<sp/>golden<sp/>file<sp/>to<sp/>verify<sp/>that<sp/>typed<sp/>tests<sp/>whose<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>case<sp/>name<sp/>ends<sp/>with<sp/>DeathTest<sp/>are<sp/>run<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ATypedDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1ProxyTypeList" kindref="compound">testing::Types&lt;int, double&gt;</ref><sp/>NumericTypes;</highlight></codeline>
<codeline lineno="793"><highlight class="normal">TYPED_TEST_SUITE(ATypedDeathTest,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">TYPED_TEST(ATypedDeathTest,<sp/>ShouldRunFirst)<sp/>{}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>rely<sp/>on<sp/>the<sp/>golden<sp/>file<sp/>to<sp/>verify<sp/>that<sp/>type-parameterized<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whose<sp/>test<sp/>case<sp/>name<sp/>ends<sp/>with<sp/>DeathTest<sp/>are<sp/>run<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ATypeParamDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal">TYPED_TEST_SUITE_P(ATypeParamDeathTest);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal">TYPED_TEST_P(ATypeParamDeathTest,<sp/>ShouldRunFirst)<sp/>{}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(ATypeParamDeathTest,<sp/>ShouldRunFirst);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/>ATypeParamDeathTest,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>various<sp/>failure<sp/>conditions<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_{,NON}FATAL_FAILURE{,_ON_ALL_THREADS}.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815" refid="classExpectFailureTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>public<sp/>and<sp/>not<sp/>protected<sp/>due<sp/>to<sp/>a<sp/>bug<sp/>in<sp/>g++<sp/>3.4.2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>FailureMode<sp/>{<sp/>FATAL_FAILURE,<sp/>NONFATAL_FAILURE<sp/>};</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddFailure(FailureMode<sp/>failure)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failure<sp/>==<sp/>FATAL_FAILURE)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal">};</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">TEST_F(<ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref>,<sp/>ExpectFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>fatal<sp/>failure,<sp/>but<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(SUCCEED(),<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>fatal<sp/>failure,<sp/>but<sp/>got<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AddFailure(NONFATAL_FAILURE),</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrong<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AddFailure(FATAL_FAILURE),</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>other<sp/>fatal<sp/>failure<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">TEST_F(<ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref>,<sp/>ExpectNonFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>non-fatal<sp/>failure,<sp/>but<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(SUCCEED(),<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>non-fatal<sp/>failure,<sp/>but<sp/>got<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(AddFailure(FATAL_FAILURE),<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrong<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(AddFailure(NONFATAL_FAILURE),</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>other<sp/>non-fatal<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpectFailureWithThreadsTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref><sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddFailureInOtherThread(FailureMode<sp/>failure)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadWithParam&lt;FailureMode&gt;<sp/>thread(&amp;AddFailure,<sp/>failure,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.Join();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal">};</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">TEST_F(ExpectFailureWithThreadsTest,<sp/>ExpectFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>only<sp/>intercept<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>failures)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(AddFailureInOtherThread(FATAL_FAILURE),</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal">TEST_F(ExpectFailureWithThreadsTest,<sp/>ExpectNonFatalFailure)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>only<sp/>intercept<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>failures)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(AddFailureInOtherThread(NONFATAL_FAILURE),</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ExpectFailureWithThreadsTest<sp/>ScopedFakeTestPartResultReporterTest;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>ScopedFakeTestPartResultReporter<sp/>only<sp/>catches<sp/>failures<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>thread<sp/>if<sp/>it<sp/>is<sp/>instantiated<sp/>with<sp/>INTERCEPT_ONLY_CURRENT_THREAD.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal">TEST_F(ScopedFakeTestPartResultReporterTest,<sp/>InterceptOnlyCurrentThread)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>2<sp/>failures)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>TestPartResultArray<sp/>results;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter<sp/>reporter(</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedFakeTestPartResultReporter::INTERCEPT_ONLY_CURRENT_THREAD,</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;results);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailureInOtherThread(FATAL_FAILURE);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFailureInOtherThread(NONFATAL_FAILURE);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>two<sp/>failures<sp/>should<sp/>not<sp/>have<sp/>been<sp/>intercepted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>results.size())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>shouldn&apos;t<sp/>fail.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_IS_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal">TEST_F(<ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref>,<sp/>ExpectFatalFailureOnAllThreads)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>fatal<sp/>failure,<sp/>but<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(SUCCEED(),<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>fatal<sp/>failure,<sp/>but<sp/>got<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(AddFailure(NONFATAL_FAILURE),</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrong<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(AddFailure(FATAL_FAILURE),</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>other<sp/>fatal<sp/>failure<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal">TEST_F(<ref refid="classExpectFailureTest" kindref="compound">ExpectFailureTest</ref>,<sp/>ExpectNonFatalFailureOnAllThreads)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>non-fatal<sp/>failure,<sp/>but<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(SUCCEED(),</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>non-fatal<sp/>failure,<sp/>but<sp/>got<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(AddFailure(FATAL_FAILURE),</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrong<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(expecting<sp/>1<sp/>failure)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(AddFailure(NONFATAL_FAILURE),</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>other<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931" refid="classDynamicFixture" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDynamicFixture" kindref="compound">DynamicFixture</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><ref refid="classDynamicFixture" kindref="compound">DynamicFixture</ref>()<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;DynamicFixture()\n&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><ref refid="classDynamicFixture" kindref="compound">~DynamicFixture</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>printf(</highlight><highlight class="stringliteral">&quot;~DynamicFixture()\n&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>printf(</highlight><highlight class="stringliteral">&quot;DynamicFixture::SetUp\n&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>printf(</highlight><highlight class="stringliteral">&quot;DynamicFixture::TearDown\n&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;DynamicFixture::SetUpTestSuite\n&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DynamicFixture::TearDownTestSuite\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal">};</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Pass&gt;</highlight></codeline>
<codeline lineno="945" refid="classDynamicTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDynamicTest" kindref="compound">DynamicTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classDynamicFixture" kindref="compound">DynamicFixture</ref><sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestBody()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>EXPECT_TRUE(Pass);<sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal">};</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dynamic_test<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>two<sp/>tests<sp/>with<sp/>the<sp/>same<sp/>fixture<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DynamicFixture&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DynamicTestPass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>[]()<sp/>-&gt;<sp/><ref refid="classDynamicFixture" kindref="compound">DynamicFixture</ref>*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDynamicTest" kindref="compound">DynamicTest&lt;true&gt;</ref>;<sp/>}),</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DynamicFixture&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DynamicTestFail&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>[]()<sp/>-&gt;<sp/><ref refid="classDynamicFixture" kindref="compound">DynamicFixture</ref>*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDynamicTest" kindref="compound">DynamicTest&lt;false&gt;</ref>;<sp/>}),</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>the<sp/>same<sp/>fixture<sp/>with<sp/>another<sp/>name.<sp/>That&apos;s<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DynamicFixtureAnotherName&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DynamicTestPass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>-&gt;<sp/><ref refid="classDynamicFixture" kindref="compound">DynamicFixture</ref>*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDynamicTest" kindref="compound">DynamicTest&lt;true&gt;</ref>;<sp/>}),</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>two<sp/>tests<sp/>with<sp/>the<sp/>same<sp/>fixture<sp/>incorrectly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BadDynamicFixture1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FixtureBase&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>[]()<sp/>-&gt;<sp/><ref refid="classDynamicFixture" kindref="compound">DynamicFixture</ref>*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDynamicTest" kindref="compound">DynamicTest&lt;true&gt;</ref>;<sp/>}),</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BadDynamicFixture1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TestBase&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>-&gt;<sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref>*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDynamicTest" kindref="compound">DynamicTest&lt;true&gt;</ref>;<sp/>}),</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>two<sp/>tests<sp/>with<sp/>the<sp/>same<sp/>fixture<sp/>incorrectly<sp/>by<sp/>omitting<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BadDynamicFixture2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FixtureBase&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>[]()<sp/>-&gt;<sp/><ref refid="classDynamicFixture" kindref="compound">DynamicFixture</ref>*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDynamicTest" kindref="compound">DynamicTest&lt;true&gt;</ref>;<sp/>}),</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight><highlight class="stringliteral">&quot;BadDynamicFixture2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Derived&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDynamicTest" kindref="compound">DynamicTest&lt;true&gt;</ref>;<sp/>}));</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Two<sp/>test<sp/>environments<sp/>for<sp/>testing<sp/>testing::AddGlobalTestEnvironment().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984" refid="classFooEnvironment" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFooEnvironment" kindref="compound">FooEnvironment</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment" kindref="compound">testing::Environment</ref><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FooEnvironment::SetUp()<sp/>called.\n&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FooEnvironment::TearDown()<sp/>called.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>fatal<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal">};</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994" refid="classBarEnvironment" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBarEnvironment" kindref="compound">BarEnvironment</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment" kindref="compound">testing::Environment</ref><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BarEnvironment::SetUp()<sp/>called.\n&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BarEnvironment::TearDown()<sp/>called.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>non-fatal<sp/>failure.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004" refid="classTestSuiteThatFailsToSetUp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestSuiteThatFailsToSetUp" kindref="compound">TestSuiteThatFailsToSetUp</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{<sp/>EXPECT_TRUE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">TEST_F(<ref refid="classTestSuiteThatFailsToSetUp" kindref="compound">TestSuiteThatFailsToSetUp</ref>,<sp/>ShouldNotRun)<sp/>{<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="classTestSuiteThatSkipsInSetUp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestSuiteThatSkipsInSetUp" kindref="compound">TestSuiteThatSkipsInSetUp</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestSuite()<sp/>{<sp/>GTEST_SKIP()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Skip<sp/>entire<sp/>test<sp/>suite&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">TEST_F(<ref refid="classTestSuiteThatSkipsInSetUp" kindref="compound">TestSuiteThatSkipsInSetUp</ref>,<sp/>ShouldNotRun)<sp/>{<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>main<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>idea<sp/>is<sp/>to<sp/>use<sp/>Google<sp/>Test<sp/>to<sp/>run<sp/>all<sp/>the<sp/>tests<sp/>we<sp/>have<sp/>defined<sp/>(some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>them<sp/>are<sp/>intended<sp/>to<sp/>fail),<sp/>and<sp/>then<sp/>compare<sp/>the<sp/>test<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>&quot;golden&quot;<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(print_time,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>just<sp/>run<sp/>the<sp/>tests,<sp/>knowing<sp/>some<sp/>of<sp/>them<sp/>are<sp/>intended<sp/>to<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>use<sp/>a<sp/>separate<sp/>Python<sp/>script<sp/>to<sp/>compare<sp/>the<sp/>output<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>program<sp/>with<sp/>the<sp/>golden<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>hard<sp/>to<sp/>test<sp/>InitGoogleTest()<sp/>directly,<sp/>as<sp/>it<sp/>has<sp/>many</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>side<sp/>effects.<sp/><sp/>The<sp/>following<sp/>line<sp/>serves<sp/>as<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>internal_skip_environment_and_ad_hoc_tests<sp/>=</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::count(argv,<sp/>argv<sp/>+<sp/>argc,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;internal_skip_environment_and_ad_hoc_tests&quot;</highlight><highlight class="normal">))<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GTEST_FLAG_GET(internal_run_death_test).empty())<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>usual<sp/>output<sp/>capturing<sp/>if<sp/>we&apos;re<sp/>running<sp/>as<sp/>the<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>of<sp/>an<sp/>threadsafe-style<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>posix::FReopen(</highlight><highlight class="stringliteral">&quot;nul:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/>stdout);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>posix::FReopen(</highlight><highlight class="stringliteral">&quot;/dev/null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/>stdout);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal_skip_environment_and_ad_hoc_tests)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>two<sp/>global<sp/>test<sp/>environments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>golden<sp/>file<sp/>verifies<sp/>that<sp/>they<sp/>are<sp/>set<sp/>up<sp/>in<sp/>the<sp/>order<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>registered,<sp/>and<sp/>torn<sp/>down<sp/>in<sp/>the<sp/>reverse<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>testing::AddGlobalTestEnvironment(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classFooEnvironment" kindref="compound">FooEnvironment</ref>);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>testing::AddGlobalTestEnvironment(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classBarEnvironment" kindref="compound">BarEnvironment</ref>);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>4127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>return<sp/>RunAllTests();</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/googletest-output-test_.cc"/>
  </compounddef>
</doxygen>
