<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock__link__test_8h" kind="file" language="C++">
    <compoundname>gmock_link_test.h</compoundname>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includedby refid="gmock__link2__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock_link2_test.cc</includedby>
    <includedby refid="gmock__link__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock_link_test.cc</includedby>
    <incdepgraph>
      <node id="3">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
      </node>
      <node id="75">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="21">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="12">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/test/gmock_link_test.h</label>
        <link refid="gmock__link__test_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="31">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="55">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="22">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="17">
        <label>assert.h</label>
      </node>
      <node id="47">
        <label>atomic</label>
      </node>
      <node id="59">
        <label>cassert</label>
      </node>
      <node id="26">
        <label>cerrno</label>
      </node>
      <node id="71">
        <label>cmath</label>
      </node>
      <node id="38">
        <label>cstddef</label>
      </node>
      <node id="19">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>ctype.h</label>
      </node>
      <node id="4">
        <label>errno.h</label>
      </node>
      <node id="72">
        <label>exception</label>
      </node>
      <node id="50">
        <label>float.h</label>
      </node>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="73">
        <label>initializer_list</label>
      </node>
      <node id="39">
        <label>iomanip</label>
      </node>
      <node id="74">
        <label>ios</label>
      </node>
      <node id="61">
        <label>iosfwd</label>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="57">
        <label>iterator</label>
      </node>
      <node id="27">
        <label>limits</label>
      </node>
      <node id="67">
        <label>limits.h</label>
      </node>
      <node id="28">
        <label>locale</label>
      </node>
      <node id="51">
        <label>map</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="14">
        <label>ostream</label>
      </node>
      <node id="35">
        <label>regex.h</label>
      </node>
      <node id="40">
        <label>set</label>
      </node>
      <node id="41">
        <label>sstream</label>
      </node>
      <node id="24">
        <label>stddef.h</label>
      </node>
      <node id="13">
        <label>stdio.h</label>
      </node>
      <node id="18">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="25">
        <label>string.h</label>
      </node>
      <node id="33">
        <label>strings.h</label>
      </node>
      <node id="29">
        <label>sys/stat.h</label>
      </node>
      <node id="30">
        <label>sys/types.h</label>
      </node>
      <node id="9">
        <label>tuple</label>
      </node>
      <node id="10">
        <label>type_traits</label>
      </node>
      <node id="36">
        <label>typeinfo</label>
      </node>
      <node id="34">
        <label>unistd.h</label>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classInterface" prot="public">Interface</innerclass>
    <innerclass refid="classMock" prot="public">Mock</innerclass>
    <innerclass refid="classInvokeHelper" prot="public">InvokeHelper</innerclass>
    <innerclass refid="classFieldHelper" prot="public">FieldHelper</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="gmock__link__test_8h_1a2a241b93f4367065a763c7df5133e5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestReturnVoid)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestReturnVoid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="247" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="247" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a7fc9e5ba927fb0b787c401830d96e845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestReturn)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestReturn</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="255" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="255" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1adac5a0d25e665298c61d73103f6b4ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestReturnNull)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestReturnNull</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="264" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a305fc67126afc2ce2a398af8ac95f911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestReturnRef)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestReturnRef</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="272" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="272" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a84f858c615e1a833900ba5cb6fd6035d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestAssign)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestAssign</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="281" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="281" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a186ca1714643654a35d0daadde7cfccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestSetArgPointee)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestSetArgPointee</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="290" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="290" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1ac6a135440a78f13e4a16d1731bf80991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestSetArrayArgument)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestSetArrayArgument</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="299" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1aef5c583c3e024858d646fd49cb26d38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestSetErrnoAndReturn)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestSetErrnoAndReturn</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="312" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="312" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a632cd5bfa5abc4dca05bca7e32c3117c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestInvoke)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestInvoke</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="324" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="324" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a8677237cca1dcb672f230ba196bf46c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestInvokeWithoutArgs)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestInvokeWithoutArgs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="336" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="336" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a16605ff63dee99b3858ff175f3165a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestInvokeArgument)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestInvokeArgument</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="349" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="349" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a443d44d009c84175febff2fc677517b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestWithArg)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestWithArg</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="358" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="358" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a3f39bdcd5e11abe967d40fa209a5fbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestWithArgs)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestWithArgs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="367" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="367" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1ad60d270605d53ff00c73efcfc0353771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestWithoutArgs)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestWithoutArgs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="376" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="376" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a152c90c6b50fe035d27c83aa6c0f9793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestDoAll)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestDoAll</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="384" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="384" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a2918d5abf4d84037728f3c1bbc5c4fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestDoDefault)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestDoDefault</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="394" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="394" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1aaaae4940e8dd1c9ba7342163248ff86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestIgnoreResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestIgnoreResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="404" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="404" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a3f3f7a915ecbf4ed9480e7689ac3be1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestActionMacro)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestActionMacro</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="433" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="433" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a8e87d7c7853fa49506556f9e05487021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestActionPMacro)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestActionPMacro</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="445" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="445" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1ac6156044ada7f26a08d97b6abb8e5160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestActionP2Macro)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestActionP2Macro</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="461" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="461" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a56eb072fc6793f17991c4b9453cb57f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherAnything)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherAnything</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="471" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="471" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a0e54493b534daa8c40db27f11c1fa47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherA)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="478" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="478" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a9ac86d1d3b037000c95d84125b493aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatchersEq)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatchersEq</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="485" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="485" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a180ffdf57248ab9b453f3edcd93755ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatchersRelations)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatchersRelations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="494" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="494" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a88c24d00f8d1ef0bc424e44ef0d02c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherNotNull)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherNotNull</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="505" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="505" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a9c49e996772a00f039252ed51b929c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherIsNull)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherIsNull</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="512" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="512" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a97addba006a789710b9142e173d1f6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherRef)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherRef</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="519" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="519" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a7b2cbe54d3e02b9b9e9ac11fe2e4277a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherTypedEq)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherTypedEq</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="527" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="527" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a407dfcf377f8201153cb0141eb4e50d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatchersFloatingPoint)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatchersFloatingPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="536" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="536" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a77a83a48b183a392eddae15de6162950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherContainsRegex)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherContainsRegex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="548" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="548" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a2703b6bda7d6a9fe9ca0c3a545cb0794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherMatchesRegex)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherMatchesRegex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="555" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="555" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a0e620555ef048587252b680112dca0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatchersSubstrings)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatchersSubstrings</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="562" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="562" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1acd4cefd0a0c481117e8450bb3e26995a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatchersStringEquality)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatchersStringEquality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="571" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="571" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1adccb056e47ae0c111fdb5c8718aa1237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherElementsAre)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherElementsAre</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="580" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="580" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a75e1edbf10c6912cb689a744897c7cfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherElementsAreArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherElementsAreArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="587" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="587" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1af8960bb8270f5b279a8f7b41d3b045b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherIsSubsetOf)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherIsSubsetOf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="595" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="595" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1ac35b16985b69c6aee820e850a90a3a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherIsSupersetOf)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherIsSupersetOf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="603" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="603" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a16f49ffd8b6c3926dd3be08475a84cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherContainerEq)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherContainerEq</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="611" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="611" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1afd9457843e9d37ad61805fe4e346230a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherField)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="619" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="619" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a4f1efb4c1404ef1987ead7fbcda62f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherProperty)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="630" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="630" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1aa76ccb0b23625c6e67224dc93775c260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherResultOf)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherResultOf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="641" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="641" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a87dc8bf67fbb09f4887bd73c4c3d4cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherPointee)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherPointee</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="647" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="647" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a371f2d2cb3d6de8d92bcdc7880c396e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherTruly)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherTruly</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="655" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="655" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a2f67e08eb609d505e32d1ea9c5ea4934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherAllOf)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherAllOf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="661" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="661" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a44f6ef7c07900d4b35ecf9dd5fb3d199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherAnyOf)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherAnyOf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="667" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="667" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1a5ffe71be3f23caa89c945a8f91f37c61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherNot)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherNot</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="673" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="673" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="gmock__link__test_8h_1af0e170be9fd6cff187a448aa8be13996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LinkTest, TestMatcherCast)</argsstring>
        <name>TEST</name>
        <param>
          <type>LinkTest</type>
        </param>
        <param>
          <type>TestMatcherCast</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" line="679" column="1" bodyfile="build/_deps/googletest-src/googlemock/test/gmock_link_test.h" bodystart="679" bodyend="682"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2009,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>that:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a.<sp/>A<sp/>header<sp/>file<sp/>defining<sp/>a<sp/>mock<sp/>class<sp/>can<sp/>be<sp/>included<sp/>in<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>translation<sp/>units<sp/>without<sp/>causing<sp/>a<sp/>link<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>b.<sp/>Actions<sp/>and<sp/>matchers<sp/>can<sp/>be<sp/>instantiated<sp/>with<sp/>identical<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>arguments<sp/>in<sp/>different<sp/>translation<sp/>units<sp/>without<sp/>causing<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>The<sp/>following<sp/>constructs<sp/>are<sp/>currently<sp/>tested:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Actions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Return()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Return(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ReturnNull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ReturnRef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>SetArrayArgument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>SetErrnoAndReturn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Invoke(function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Invoke(object,<sp/>method)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>InvokeWithoutArgs(function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>InvokeWithoutArgs(object,<sp/>method)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>WithArg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>WithArgs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>WithoutArgs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>DoAll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>DoDefault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>IgnoreResult</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Throw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ACTION()-generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ACTION_P()-generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ACTION_P2()-generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Matchers:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>An</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Eq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Gt,<sp/>Lt,<sp/>Ge,<sp/>Le,<sp/>Ne</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>NotNull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TypedEq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>DoubleEq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>FloatEq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>NanSensitiveDoubleEq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>NanSensitiveFloatEq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ContainsRegex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>MatchesRegex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>EndsWith</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>StartsWith</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>StrCaseEq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>StrCaseNe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>StrEq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>StrNe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ElementsAreArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ContainerEq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ResultOf(function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ResultOf(callback)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Pointee</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Truly(predicate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>AddressSatisfies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>AllOf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>AnyOf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>MatcherCast&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Please<sp/>note:<sp/>this<sp/>test<sp/>does<sp/>not<sp/>verify<sp/>the<sp/>functioning<sp/>of<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>constructs,<sp/>only<sp/>that<sp/>the<sp/>programs<sp/>using<sp/>them<sp/>will<sp/>link<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>note:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>requires<sp/>identical<sp/>definitions<sp/>of<sp/>Interface<sp/>and<sp/>Mock<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included<sp/>in<sp/>different<sp/>translation<sp/>units.<sp/><sp/>We<sp/>achieve<sp/>this<sp/>by<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>them<sp/>in<sp/>this<sp/>header<sp/>and<sp/>#including<sp/>it<sp/>in<sp/>gmock_link_test.cc<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gmock_link2_test.cc.<sp/><sp/>Because<sp/>the<sp/>symbols<sp/>generated<sp/>by<sp/>the<sp/>compiler<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>those<sp/>constructs<sp/>must<sp/>be<sp/>identical<sp/>in<sp/>both<sp/>translation<sp/>units,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definitions<sp/>of<sp/>Interface<sp/>and<sp/>Mock<sp/>tests<sp/>MUST<sp/>be<sp/>kept<sp/>in<sp/>the<sp/>SAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NON-ANONYMOUS<sp/>namespace<sp/>in<sp/>this<sp/>file.<sp/><sp/>The<sp/>test<sp/>fixture<sp/>class<sp/>LinkTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>defined<sp/>as<sp/>LinkTest1<sp/>in<sp/>gmock_link_test.cc<sp/>and<sp/>as<sp/>LinkTest2<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gmock_link2_test.cc<sp/>to<sp/>avoid<sp/>producing<sp/>linker<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GOOGLEMOCK_TEST_GMOCK_LINK_TEST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GOOGLEMOCK_TEST_GMOCK_LINK_TEST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::_;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::A;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Action" kindref="compound">testing::Action</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::AllOf;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::AnyOf;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Assign;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ContainerEq;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::DoAll;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::DoDefault;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::DoubleEq;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ElementsAre;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ElementsAreArray;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::EndsWith;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Eq;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Field;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::FloatEq;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Ge;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::HasSubstr;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::IgnoreResult;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Invoke;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::InvokeArgument;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::InvokeWithoutArgs;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::IsNull;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::IsSubsetOf;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::IsSupersetOf;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Le;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Lt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Matcher" kindref="compound">testing::Matcher</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::MatcherCast;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::NanSensitiveDoubleEq;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::NanSensitiveFloatEq;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Ne;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Not;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::NotNull;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Pointee;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Property;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Ref;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ResultOf;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Return;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ReturnNull;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ReturnRef;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::SetArgPointee;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::SetArrayArgument;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::StartsWith;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::StrCaseEq;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::StrCaseNe;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::StrEq;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::StrNe;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Truly;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::TypedEq;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::WithArg;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::WithArgs;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::WithoutArgs;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::SetErrnoAndReturn;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::Throw;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::ContainsRegex;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">testing::MatchesRegex;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="classInterface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classInterface" kindref="compound">Interface</ref><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classInterface" kindref="compound">~Interface</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFromString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>StringFromString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IntFromString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>IntRefFromString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFromFunc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFromIntRef(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFromFloat(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFromDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFromVector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>v)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMock" kindref="compound">Mock</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classInterface" kindref="compound">Interface</ref><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(VoidFromString,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(StringFromString,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(IntFromString,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(IntRefFromString,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(VoidFromFunc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(VoidFromIntRef,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(VoidFromFloat,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>n));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(VoidFromDouble,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(VoidFromVector,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>v));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMock" kindref="compound">Mock</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMock" kindref="compound">Mock</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classInvokeHelper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classInvokeHelper" kindref="compound">InvokeHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StaticVoidFromVoid()<sp/>{}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFromVoid()<sp/>{}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StaticVoidFromString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>str<sp/>*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFromString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>str<sp/>*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StaticIntFromString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>str<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StaticBoolFromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>str<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classFieldHelper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFieldHelper" kindref="compound">FieldHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classFieldHelper" kindref="compound">FieldHelper</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_field)<sp/>:<sp/>field_(a_field)<sp/>{}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>field_;<sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>--<sp/>need<sp/>external<sp/>access<sp/>to<sp/>field_<sp/>to<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Field<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ReturnVoid<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST(LinkTest,<sp/>TestReturnVoid)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_)).WillOnce(Return());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Return<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">TEST(LinkTest,<sp/>TestReturn)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>StringFromString(_)).WillOnce(Return(&amp;ch));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>mock.StringFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ReturnNull<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">TEST(LinkTest,<sp/>TestReturnNull)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_)).WillOnce(Return());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ReturnRef<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">TEST(LinkTest,<sp/>TestReturnRef)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntRefFromString(_)).WillOnce(ReturnRef(n));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>mock.IntRefFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Assign<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">TEST(LinkTest,<sp/>TestAssign)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_)).WillOnce(Assign(&amp;ch,<sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>SetArgPointee<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">TEST(LinkTest,<sp/>TestSetArgPointee)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_)).WillOnce(SetArgPointee&lt;0&gt;(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>mock.VoidFromString(&amp;ch);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>SetArrayArgument<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">TEST(LinkTest,<sp/>TestSetArrayArgument)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch2<sp/>=<sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_))</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(SetArrayArgument&lt;0&gt;(&amp;ch2,<sp/>&amp;ch2<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>mock.VoidFromString(&amp;ch);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>SetErrnoAndReturn<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">TEST(LinkTest,<sp/>TestSetErrnoAndReturn)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>saved_errno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntFromString(_)).WillOnce(SetErrnoAndReturn(1,<sp/>-1));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>mock.IntFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>saved_errno;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Invoke(function)<sp/>and<sp/>Invoke(object,<sp/>method)<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">TEST(LinkTest,<sp/>TestInvoke)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="classInvokeHelper" kindref="compound">InvokeHelper</ref><sp/>test_invoke_helper;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_))</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(&amp;InvokeHelper::StaticVoidFromString))</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(&amp;test_invoke_helper,<sp/>&amp;InvokeHelper::VoidFromString));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>InvokeWithoutArgs<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">TEST(LinkTest,<sp/>TestInvokeWithoutArgs)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="classInvokeHelper" kindref="compound">InvokeHelper</ref><sp/>test_invoke_helper;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_))</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(InvokeWithoutArgs(&amp;InvokeHelper::StaticVoidFromVoid))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InvokeWithoutArgs(&amp;test_invoke_helper,<sp/>&amp;InvokeHelper::VoidFromVoid));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>InvokeArgument<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">TEST(LinkTest,<sp/>TestInvokeArgument)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromFunc(_)).WillOnce(InvokeArgument&lt;0&gt;(&amp;ch));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>mock.VoidFromFunc(InvokeHelper::StaticVoidFromString);</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>WithArg<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">TEST(LinkTest,<sp/>TestWithArg)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_))</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(WithArg&lt;0&gt;(Invoke(&amp;InvokeHelper::StaticVoidFromString)));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>WithArgs<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">TEST(LinkTest,<sp/>TestWithArgs)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_))</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(WithArgs&lt;0&gt;(Invoke(&amp;InvokeHelper::StaticVoidFromString)));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>WithoutArgs<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">TEST(LinkTest,<sp/>TestWithoutArgs)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_)).WillOnce(WithoutArgs(Return()));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>DoAll<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">TEST(LinkTest,<sp/>TestDoAll)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_))</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(SetArgPointee&lt;0&gt;(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">),<sp/>Return()));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>mock.VoidFromString(&amp;ch);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>DoDefault<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">TEST(LinkTest,<sp/>TestDoDefault)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(_)).WillByDefault(Return());</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_)).WillOnce(DoDefault());</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>mock.VoidFromString(&amp;ch);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>IgnoreResult<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">TEST(LinkTest,<sp/>TestIgnoreResult)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_)).WillOnce(IgnoreResult(Return(42)));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Throw<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">TEST(LinkTest,<sp/>TestThrow)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>VoidFromString(_)).WillOnce(Throw(42));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>EXPECT_THROW(mock.VoidFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ACTION*()<sp/>macros<sp/>trigger<sp/>warning<sp/>C4100<sp/>(unreferenced<sp/>formal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter)<sp/>in<sp/>MSVC<sp/>with<sp/>-W4.<sp/><sp/>Unfortunately<sp/>they<sp/>cannot<sp/>be<sp/>fixed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>macro<sp/>definition,<sp/>as<sp/>the<sp/>warnings<sp/>are<sp/>generated<sp/>when<sp/>the<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>expanded<sp/>and<sp/>macro<sp/>expansion<sp/>cannot<sp/>contain<sp/>#pragma.<sp/><sp/>Therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>suppress<sp/>them<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4100)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>actions<sp/>created<sp/>using<sp/>ACTION<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">namespace<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal">ACTION(Return1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">TEST(LinkTest,<sp/>TestActionMacro)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntFromString(_)).WillOnce(Return1());</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>mock.IntFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>actions<sp/>created<sp/>using<sp/>ACTION_P<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal">ACTION_P(ReturnArgument,<sp/>ret_value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_value;<sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">TEST(LinkTest,<sp/>TestActionPMacro)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntFromString(_)).WillOnce(ReturnArgument(42));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>mock.IntFromString(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>actions<sp/>created<sp/>using<sp/>ACTION_P2<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal">ACTION_P2(ReturnEqualsEitherOf,<sp/>first,<sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>==<sp/>first<sp/>||<sp/>arg0<sp/>==<sp/>second;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">TEST(LinkTest,<sp/>TestActionP2Macro)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntFromString(_))</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ReturnEqualsEitherOf(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>mock.IntFromString(&amp;ch);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>&quot;_&quot;<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherAnything)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(_)).WillByDefault(Return());</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>A<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherA)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(A&lt;char*&gt;())).WillByDefault(Return());</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Eq<sp/>and<sp/>the<sp/>&quot;bare<sp/>value&quot;<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">TEST(LinkTest,<sp/>TestMatchersEq)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(Eq(p))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Lt,<sp/>Gt,<sp/>Le,<sp/>Ge,<sp/>and<sp/>Ne<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">TEST(LinkTest,<sp/>TestMatchersRelations)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromFloat(Lt(1.0f))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromFloat(Gt(1.0f))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromFloat(Le(1.0f))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromFloat(Ge(1.0f))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromFloat(Ne(1.0f))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>NotNull<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherNotNull)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(NotNull())).WillByDefault(Return());</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>IsNull<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherIsNull)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(IsNull())).WillByDefault(Return());</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Ref<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherRef)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromIntRef(Ref(a))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>TypedEq<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherTypedEq)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromIntRef(TypedEq&lt;int&amp;&gt;(a))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>FloatEq,<sp/>DoubleEq,<sp/>NanSensitiveFloatEq<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NanSensitiveDoubleEq<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">TEST(LinkTest,<sp/>TestMatchersFloatingPoint)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromFloat(FloatEq(a))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromDouble(DoubleEq(a))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromFloat(NanSensitiveFloatEq(a))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromDouble(NanSensitiveDoubleEq(a)))</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return());</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ContainsRegex<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherContainsRegex)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(ContainsRegex(</highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>MatchesRegex<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherMatchesRegex)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(MatchesRegex(</highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>StartsWith,<sp/>EndsWith,<sp/>and<sp/>HasSubstr<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal">TEST(LinkTest,<sp/>TestMatchersSubstrings)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(StartsWith(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(EndsWith(</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(HasSubstr(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>StrEq,<sp/>StrNe,<sp/>StrCaseEq,<sp/>and<sp/>StrCaseNe<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">TEST(LinkTest,<sp/>TestMatchersStringEquality)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(StrEq(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(StrNe(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(StrCaseEq(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromString(StrCaseNe(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ElementsAre<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherElementsAre)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromVector(ElementsAre(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>_))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ElementsAreArray<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherElementsAreArray)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arr[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromVector(ElementsAreArray(arr))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>IsSubsetOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherIsSubsetOf)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arr[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromVector(IsSubsetOf(arr))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>IsSupersetOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherIsSupersetOf)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arr[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromVector(IsSupersetOf(arr))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ContainerEq<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherContainerEq)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><ref refid="classMock" kindref="compound">Mock</ref><sp/>mock;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>VoidFromVector(ContainerEq(v))).WillByDefault(Return());</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Field<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherField)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><ref refid="classFieldHelper" kindref="compound">FieldHelper</ref><sp/>helper(0);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;const FieldHelper&amp;&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;FieldHelper::field_,<sp/>Eq(0));</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(helper));</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;const FieldHelper*&gt;</ref><sp/>m2<sp/>=<sp/>Field(&amp;FieldHelper::field_,<sp/>Eq(0));</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(&amp;helper));</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Property<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherProperty)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><ref refid="classFieldHelper" kindref="compound">FieldHelper</ref><sp/>helper(0);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;const FieldHelper&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;FieldHelper::field,<sp/>Eq(0));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(helper));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;const FieldHelper*&gt;</ref><sp/>m2<sp/>=<sp/>Property(&amp;FieldHelper::field,<sp/>Eq(0));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(&amp;helper));</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ResultOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherResultOf)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;char*&gt;</ref><sp/>m<sp/>=<sp/>ResultOf(&amp;InvokeHelper::StaticIntFromString,<sp/>Eq(1));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>ResultOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherPointee)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m<sp/>=<sp/>Pointee(Eq(1));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;n));</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Truly<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherTruly)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>Truly(&amp;InvokeHelper::StaticBoolFromString);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>AllOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherAllOf)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>AllOf(_,<sp/>Eq(1));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>AnyOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherAnyOf)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>AnyOf(_,<sp/>Eq(1));</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>Not<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherNot)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Not(_);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1));</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>linkage<sp/>of<sp/>the<sp/>MatcherCast&lt;T&gt;()<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal">TEST(LinkTest,<sp/>TestMatcherCast)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>MatcherCast&lt;const<sp/>char*&gt;(_);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GOOGLEMOCK_TEST_GMOCK_LINK_TEST_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/test/gmock_link_test.h"/>
  </compounddef>
</doxygen>
