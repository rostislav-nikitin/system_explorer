<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gmock-actions__test_8cc" kind="file" language="C++">
    <compoundname>gmock-actions_test.cc</compoundname>
    <includes refid="gmock-actions_8h" local="yes">gmock/gmock-actions.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">functional</includes>
    <includes local="no">iterator</includes>
    <includes local="no">memory</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gmock-port_8h" local="yes">gmock/internal/gmock-port.h</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">build/_deps/googletest-src/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="2">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>gmock/gmock-function-mocker.h</label>
        <link refid="gmock-function-mocker_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>gmock/gmock-nice-strict.h</label>
        <link refid="gmock-nice-strict_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
      </node>
      <node id="75">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="20">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="11">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gmock/internal/gmock-pp.h</label>
        <link refid="gmock-pp_8h_source"/>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc</label>
        <link refid="gmock-actions__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="30">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="54">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="44">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="21">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="16">
        <label>assert.h</label>
      </node>
      <node id="46">
        <label>atomic</label>
      </node>
      <node id="58">
        <label>cassert</label>
      </node>
      <node id="25">
        <label>cerrno</label>
      </node>
      <node id="71">
        <label>cmath</label>
      </node>
      <node id="37">
        <label>cstddef</label>
      </node>
      <node id="18">
        <label>cstdint</label>
      </node>
      <node id="22">
        <label>ctype.h</label>
      </node>
      <node id="3">
        <label>errno.h</label>
      </node>
      <node id="72">
        <label>exception</label>
      </node>
      <node id="49">
        <label>float.h</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="73">
        <label>initializer_list</label>
      </node>
      <node id="38">
        <label>iomanip</label>
      </node>
      <node id="74">
        <label>ios</label>
      </node>
      <node id="60">
        <label>iosfwd</label>
      </node>
      <node id="19">
        <label>iostream</label>
      </node>
      <node id="56">
        <label>iterator</label>
      </node>
      <node id="26">
        <label>limits</label>
      </node>
      <node id="67">
        <label>limits.h</label>
      </node>
      <node id="27">
        <label>locale</label>
      </node>
      <node id="50">
        <label>map</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="13">
        <label>ostream</label>
      </node>
      <node id="34">
        <label>regex.h</label>
      </node>
      <node id="39">
        <label>set</label>
      </node>
      <node id="40">
        <label>sstream</label>
      </node>
      <node id="23">
        <label>stddef.h</label>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
      <node id="17">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="24">
        <label>string.h</label>
      </node>
      <node id="32">
        <label>strings.h</label>
      </node>
      <node id="28">
        <label>sys/stat.h</label>
      </node>
      <node id="29">
        <label>sys/types.h</label>
      </node>
      <node id="8">
        <label>tuple</label>
      </node>
      <node id="9">
        <label>type_traits</label>
      </node>
      <node id="35">
        <label>typeinfo</label>
      </node>
      <node id="33">
        <label>unistd.h</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesting">testing</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-actions__test_8cc_1ac1575c67c67687efdd5159442637e6ff" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc" line="363" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-actions__test_8cc_1aba12d2a74188c2b8fd44f19be0f24eff" prot="private" static="no" mutable="no">
        <type>bool *const</type>
        <definition>bool* const converted_</definition>
        <argsstring></argsstring>
        <name>converted_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc" line="841" column="14" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-actions__test_8cc_1ac4f474c82e82cbb89ca7c36dd52be0ed" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc" line="1714" column="7" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc" bodystart="1714" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>built-in<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-actions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silence<sp/>C4100<sp/>(unreferenced<sp/>formal<sp/>parameter)<sp/>and<sp/>C4503<sp/>(decorated<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>length<sp/>exceeded)<sp/>for<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4100<sp/>4503)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER<sp/>==<sp/>1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>silence<sp/>C4800<sp/>(C4800:<sp/>&apos;int<sp/>*const<sp/>&apos;:<sp/>forcing<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>bool<sp/>&apos;true&apos;<sp/>or<sp/>&apos;false&apos;)<sp/>for<sp/>MSVC<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">using<sp/>::testing::internal::BuiltInDefaultValue;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">TEST(TypeTraits,<sp/>Negation)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Direct<sp/>use<sp/>with<sp/>std<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;std::false_type,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::negation&lt;std::true_type&gt;&gt;::value,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;std::true_type,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::negation&lt;std::false_type&gt;&gt;::value,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>other<sp/>types<sp/>that<sp/>fit<sp/>the<sp/>requirement<sp/>of<sp/>a<sp/>value<sp/>member<sp/>that<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convertible<sp/>to<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::negation&lt;std::integral_constant&lt;int,<sp/>0&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::negation&lt;std::integral_constant&lt;int,<sp/>1&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::negation&lt;std::integral_constant&lt;int,<sp/>-1&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Weird<sp/>false/true<sp/>types<sp/>that<sp/>aren&apos;t<sp/>actually<sp/>bool<sp/>constants<sp/>(but<sp/>should<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>legal<sp/>according<sp/>to<sp/>[meta.logical]<sp/>because<sp/>`bool(T::value)`<sp/>is<sp/>valid),<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distinct<sp/>from<sp/>std::false_type<sp/>and<sp/>std::true_type,<sp/>and<sp/>are<sp/>distinct<sp/>from<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiations<sp/>of<sp/>the<sp/>same<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>let<sp/>us<sp/>check<sp/>finicky<sp/>details<sp/>mandated<sp/>by<sp/>the<sp/>standard<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;std::conjunction<sp/>should<sp/>evaluate<sp/>to<sp/>a<sp/>type<sp/>that<sp/>inherits<sp/>from<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>false-y<sp/>input&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyFalse<sp/>:<sp/>std::integral_constant&lt;int,<sp/>0&gt;<sp/>{};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyTrue<sp/>:<sp/>std::integral_constant&lt;int,<sp/>-1&gt;<sp/>{};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">TEST(TypeTraits,<sp/>Conjunction)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>case:<sp/>always<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;std::true_type,<sp/>internal::conjunction&lt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>predicate:<sp/>inherits<sp/>from<sp/>that<sp/>predicate,<sp/>regardless<sp/>of<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyFalse&lt;0&gt;,<sp/>internal::conjunction&lt;MyFalse&lt;0&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyTrue&lt;0&gt;,<sp/>internal::conjunction&lt;MyTrue&lt;0&gt;&gt;&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiple<sp/>predicates,<sp/>with<sp/>at<sp/>least<sp/>one<sp/>false:<sp/>inherits<sp/>from<sp/>that<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyFalse&lt;1&gt;,<sp/>internal::conjunction&lt;MyTrue&lt;0&gt;,<sp/>MyFalse&lt;1&gt;,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyTrue&lt;2&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyFalse&lt;1&gt;,<sp/>internal::conjunction&lt;MyTrue&lt;0&gt;,<sp/>MyFalse&lt;1&gt;,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyFalse&lt;2&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Short<sp/>circuiting:<sp/>in<sp/>the<sp/>case<sp/>above,<sp/>additional<sp/>predicates<sp/>need<sp/>not<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>a<sp/>value<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Empty<sp/>{};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyFalse&lt;1&gt;,<sp/>internal::conjunction&lt;MyTrue&lt;0&gt;,<sp/>MyFalse&lt;1&gt;,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Empty&gt;&gt;::value,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>predicates<sp/>true:<sp/>inherits<sp/>from<sp/>the<sp/>last.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyTrue&lt;2&gt;,<sp/>internal::conjunction&lt;MyTrue&lt;0&gt;,<sp/>MyTrue&lt;1&gt;,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyTrue&lt;2&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">TEST(TypeTraits,<sp/>Disjunction)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>case:<sp/>always<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;std::false_type,<sp/>internal::disjunction&lt;&gt;&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>predicate:<sp/>inherits<sp/>from<sp/>that<sp/>predicate,<sp/>regardless<sp/>of<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyFalse&lt;0&gt;,<sp/>internal::disjunction&lt;MyFalse&lt;0&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyTrue&lt;0&gt;,<sp/>internal::disjunction&lt;MyTrue&lt;0&gt;&gt;&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiple<sp/>predicates,<sp/>with<sp/>at<sp/>least<sp/>one<sp/>true:<sp/>inherits<sp/>from<sp/>that<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyTrue&lt;1&gt;,<sp/>internal::disjunction&lt;MyFalse&lt;0&gt;,<sp/>MyTrue&lt;1&gt;,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyFalse&lt;2&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyTrue&lt;1&gt;,<sp/>internal::disjunction&lt;MyFalse&lt;0&gt;,<sp/>MyTrue&lt;1&gt;,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyTrue&lt;2&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Short<sp/>circuiting:<sp/>in<sp/>the<sp/>case<sp/>above,<sp/>additional<sp/>predicates<sp/>need<sp/>not<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>a<sp/>value<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Empty<sp/>{};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyTrue&lt;1&gt;,<sp/>internal::disjunction&lt;MyFalse&lt;0&gt;,<sp/>MyTrue&lt;1&gt;,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Empty&gt;&gt;::value,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>predicates<sp/>false:<sp/>inherits<sp/>from<sp/>the<sp/>last.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;MyFalse&lt;2&gt;,<sp/>internal::disjunction&lt;MyFalse&lt;0&gt;,<sp/>MyFalse&lt;1&gt;,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyFalse&lt;2&gt;&gt;&gt;::value,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">TEST(TypeTraits,<sp/>IsInvocableRV)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">C<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&amp;<sp/>{}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>overload<sp/>is<sp/>callable<sp/>for<sp/>const<sp/>and<sp/>non-const<sp/>rvalues<sp/>and<sp/>lvalues.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>used<sp/>to<sp/>obtain<sp/>an<sp/>int,<sp/>cv<sp/>void,<sp/>or<sp/>anything<sp/>int<sp/>is<sp/>convertible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;int,<sp/>C&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;int,<sp/>C&amp;&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;int,<sp/>const<sp/>C&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;int,<sp/>const<sp/>C&amp;&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;void,<sp/>C&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;const<sp/>volatile<sp/>void,<sp/>C&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;char,<sp/>C&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>possible<sp/>to<sp/>provide<sp/>an<sp/>int.<sp/>If<sp/>it&apos;s<sp/>given<sp/>to<sp/>an<sp/>lvalue,<sp/>the<sp/>result<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>void.<sp/>Otherwise<sp/>it<sp/>is<sp/>std::string<sp/>(which<sp/>is<sp/>also<sp/>treated<sp/>as<sp/>allowed<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>void<sp/>result<sp/>type).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;void,<sp/>C&amp;,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;int,<sp/>C&amp;,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;std::string,<sp/>C&amp;,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;void,<sp/>const<sp/>C&amp;,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;std::string,<sp/>C,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;void,<sp/>C,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;int,<sp/>C,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>not<sp/>possible<sp/>to<sp/>provide<sp/>other<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;void,<sp/>C,<sp/>std::string&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;void,<sp/>C,<sp/>int,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>C++17<sp/>and<sp/>above,<sp/>where<sp/>it&apos;s<sp/>guaranteed<sp/>that<sp/>functions<sp/>can<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-moveable<sp/>objects,<sp/>everything<sp/>should<sp/>work<sp/>fine<sp/>for<sp/>non-moveable<sp/>rsult</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>types<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_INTERNAL_CPLUSPLUS_LANG)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_INTERNAL_CPLUSPLUS_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NonMoveable<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NonMoveable()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NonMoveable(NonMoveable&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_move_constructible_v&lt;NonMoveable&gt;);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Callable<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NonMoveable<sp/>operator()()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NonMoveable();<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;NonMoveable,<sp/>Callable&gt;::value);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(internal::is_callable_r&lt;void,<sp/>Callable&gt;::value);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::is_callable_r&lt;const<sp/>volatile<sp/>void,<sp/>Callable&gt;::value);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;int,<sp/>Callable&gt;::value);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;NonMoveable,<sp/>Callable,<sp/>int&gt;::value);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>C++17<sp/>and<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>should<sp/>choke<sp/>when<sp/>we<sp/>try<sp/>to<sp/>call<sp/>other<sp/>arguments<sp/>besides<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>callable<sp/>objects,<sp/>but<sp/>they<sp/>should<sp/>not<sp/>show<sp/>up<sp/>as<sp/>callable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;void,<sp/>int&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;void,<sp/>void<sp/>(C::*)()&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!internal::is_callable_r&lt;void,<sp/>void<sp/>(C::*)(),<sp/>C*&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;T*&gt;::Get()<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>IsNullForPointerTypes)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;int*&gt;::Get()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;const<sp/>char*&gt;::Get()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;void*&gt;::Get()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;T*&gt;::Exists()<sp/>return<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>ExistsForPointerTypes)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;int*&gt;::Exists());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;const<sp/>char*&gt;::Exists());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;void*&gt;::Exists());</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;T&gt;::Get()<sp/>returns<sp/>0<sp/>when<sp/>T<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>built-in<sp/>numeric<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>IsZeroForNumericTypes)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>BuiltInDefaultValue&lt;unsigned<sp/>char&gt;::Get());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;signed<sp/>char&gt;::Get());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;char&gt;::Get());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GMOCK_WCHAR_T_IS_NATIVE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__WCHAR_UNSIGNED__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;wchar_t&gt;::Get());</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>BuiltInDefaultValue&lt;wchar_t&gt;::Get());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>BuiltInDefaultValue&lt;unsigned<sp/>short&gt;::Get());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;signed<sp/>short&gt;::Get());<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;short&gt;::Get());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>BuiltInDefaultValue&lt;unsigned<sp/>int&gt;::Get());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;signed<sp/>int&gt;::Get());</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;int&gt;::Get());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>BuiltInDefaultValue&lt;unsigned<sp/>long&gt;::Get());<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;signed<sp/>long&gt;::Get());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;long&gt;::Get());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>BuiltInDefaultValue&lt;unsigned<sp/>long<sp/>long&gt;::Get());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;signed<sp/>long<sp/>long&gt;::Get());<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;long<sp/>long&gt;::Get());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;float&gt;::Get());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;double&gt;::Get());</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;T&gt;::Exists()<sp/>returns<sp/>true<sp/>when<sp/>T<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>built-in<sp/>numeric<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>ExistsForNumericTypes)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;unsigned<sp/>char&gt;::Exists());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;signed<sp/>char&gt;::Exists());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;char&gt;::Exists());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GMOCK_WCHAR_T_IS_NATIVE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;wchar_t&gt;::Exists());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;unsigned<sp/>short&gt;::Exists());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;signed<sp/>short&gt;::Exists());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;short&gt;::Exists());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;unsigned<sp/>int&gt;::Exists());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;signed<sp/>int&gt;::Exists());</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;int&gt;::Exists());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;unsigned<sp/>long&gt;::Exists());<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;signed<sp/>long&gt;::Exists());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;long&gt;::Exists());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;unsigned<sp/>long<sp/>long&gt;::Exists());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;signed<sp/>long<sp/>long&gt;::Exists());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;long<sp/>long&gt;::Exists());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;float&gt;::Exists());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;double&gt;::Exists());</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;bool&gt;::Get()<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>IsFalseForBool)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(BuiltInDefaultValue&lt;bool&gt;::Get());</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;bool&gt;::Exists()<sp/>returns<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>BoolExists)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;bool&gt;::Exists());</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;T&gt;::Get()<sp/>returns<sp/>&quot;&quot;<sp/>when<sp/>T<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>IsEmptyStringForString)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>BuiltInDefaultValue&lt;::std::string&gt;::Get());</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;T&gt;::Exists()<sp/>returns<sp/>true<sp/>when<sp/>T<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>ExistsForString)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;::std::string&gt;::Exists());</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;const<sp/>T&gt;::Get()<sp/>returns<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>as<sp/>BuiltInDefaultValue&lt;T&gt;::Get()<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>WorksForConstTypes)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>BuiltInDefaultValue&lt;const<sp/>std::string&gt;::Get());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>BuiltInDefaultValue&lt;const<sp/>int&gt;::Get());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;char*<sp/>const&gt;::Get()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(BuiltInDefaultValue&lt;const<sp/>bool&gt;::Get());</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type<sp/>that&apos;s<sp/>default<sp/>constructible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyDefaultConstructible<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>MyDefaultConstructible()<sp/>:<sp/>value_(42)<sp/>{}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type<sp/>that&apos;s<sp/>not<sp/>default<sp/>constructible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyNonDefaultConstructible<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>have<sp/>a<sp/>default<sp/>ctor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MyNonDefaultConstructible(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">};</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>ExistsForDefaultConstructibleType)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(BuiltInDefaultValue&lt;MyDefaultConstructible&gt;::Exists());</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>IsDefaultConstructedForDefaultConstructibleType)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>BuiltInDefaultValue&lt;MyDefaultConstructible&gt;::Get().value());</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">TEST(BuiltInDefaultValueTest,<sp/>DoesNotExistForNonDefaultConstructibleType)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(BuiltInDefaultValue&lt;MyNonDefaultConstructible&gt;::Exists());</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BuiltInDefaultValue&lt;T&amp;&gt;::Get()<sp/>aborts<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">TEST(BuiltInDefaultValueDeathTest,<sp/>IsUndefinedForReferences)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED({<sp/>BuiltInDefaultValue&lt;int&amp;&gt;::Get();<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED({<sp/>BuiltInDefaultValue&lt;const<sp/>char&amp;&gt;::Get();<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">TEST(BuiltInDefaultValueDeathTest,<sp/>IsUndefinedForNonDefaultConstructibleType)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>BuiltInDefaultValue&lt;MyNonDefaultConstructible&gt;::Get();<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DefaultValue&lt;T&gt;::IsSet()<sp/>is<sp/>false<sp/>initially.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">TEST(DefaultValueTest,<sp/>IsInitiallyUnset)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;int&gt;::IsSet());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyDefaultConstructible&gt;::IsSet());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;const<sp/>MyNonDefaultConstructible&gt;::IsSet());</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DefaultValue&lt;T&gt;<sp/>can<sp/>be<sp/>set<sp/>and<sp/>then<sp/>unset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">TEST(DefaultValueTest,<sp/>CanBeSetAndUnset)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;int&gt;::Exists());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;const<sp/>MyNonDefaultConstructible&gt;::Exists());</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>DefaultValue&lt;int&gt;::Set(1);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>DefaultValue&lt;const<sp/>MyNonDefaultConstructible&gt;::Set(</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MyNonDefaultConstructible(42));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>DefaultValue&lt;int&gt;::Get());</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>DefaultValue&lt;const<sp/>MyNonDefaultConstructible&gt;::Get().value());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;int&gt;::Exists());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;const<sp/>MyNonDefaultConstructible&gt;::Exists());</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>DefaultValue&lt;int&gt;::Clear();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>DefaultValue&lt;const<sp/>MyNonDefaultConstructible&gt;::Clear();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;int&gt;::IsSet());</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;const<sp/>MyNonDefaultConstructible&gt;::IsSet());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;int&gt;::Exists());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;const<sp/>MyNonDefaultConstructible&gt;::Exists());</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DefaultValue&lt;T&gt;::Get()<sp/>returns<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BuiltInDefaultValue&lt;T&gt;::Get()<sp/>when<sp/>DefaultValue&lt;T&gt;::IsSet()<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">TEST(DefaultValueDeathTest,<sp/>GetReturnsBuiltInDefaultValueWhenUnset)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;int&gt;::IsSet());</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;int&gt;::Exists());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyNonDefaultConstructible&gt;::IsSet());</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyNonDefaultConstructible&gt;::Exists());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>DefaultValue&lt;int&gt;::Get());</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED({<sp/>DefaultValue&lt;MyNonDefaultConstructible&gt;::Get();<sp/>},</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">TEST(DefaultValueTest,<sp/>GetWorksForMoveOnlyIfSet)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;std::unique_ptr&lt;int&gt;&gt;::Exists());</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;std::unique_ptr&lt;int&gt;&gt;::Get()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>DefaultValue&lt;std::unique_ptr&lt;int&gt;&gt;::SetFactory(</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;int&gt;(42);<sp/>});</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;std::unique_ptr&lt;int&gt;&gt;::Exists());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>i<sp/>=<sp/>DefaultValue&lt;std::unique_ptr&lt;int&gt;&gt;::Get();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>*i);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DefaultValue&lt;void&gt;::Get()<sp/>returns<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">TEST(DefaultValueTest,<sp/>GetWorksForVoid)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DefaultValue&lt;void&gt;::Get();<sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>DefaultValue<sp/>with<sp/>a<sp/>reference<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DefaultValue&lt;T&amp;&gt;::IsSet()<sp/>is<sp/>false<sp/>initially.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">TEST(DefaultValueOfReferenceTest,<sp/>IsInitiallyUnset)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;int&amp;&gt;::IsSet());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyDefaultConstructible&amp;&gt;::IsSet());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::IsSet());</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DefaultValue&lt;T&amp;&gt;::Exists<sp/>is<sp/>false<sp/>initially.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">TEST(DefaultValueOfReferenceTest,<sp/>IsInitiallyNotExisting)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;int&amp;&gt;::Exists());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyDefaultConstructible&amp;&gt;::Exists());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::Exists());</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DefaultValue&lt;T&amp;&gt;<sp/>can<sp/>be<sp/>set<sp/>and<sp/>then<sp/>unset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">TEST(DefaultValueOfReferenceTest,<sp/>CanBeSetAndUnset)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>DefaultValue&lt;const<sp/>int&amp;&gt;::Set(n);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>MyNonDefaultConstructible<sp/>x(42);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::Set(x);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;const<sp/>int&amp;&gt;::Exists());</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::Exists());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>&amp;(DefaultValue&lt;const<sp/>int&amp;&gt;::Get()));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;x,<sp/>&amp;(DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::Get()));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>DefaultValue&lt;const<sp/>int&amp;&gt;::Clear();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::Clear();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;const<sp/>int&amp;&gt;::Exists());</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::Exists());</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;const<sp/>int&amp;&gt;::IsSet());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::IsSet());</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DefaultValue&lt;T&amp;&gt;::Get()<sp/>returns<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BuiltInDefaultValue&lt;T&amp;&gt;::Get()<sp/>when<sp/>DefaultValue&lt;T&amp;&gt;::IsSet()<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">TEST(DefaultValueOfReferenceDeathTest,<sp/>GetReturnsBuiltInDefaultValueWhenUnset)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;int&amp;&gt;::IsSet());</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(DefaultValue&lt;MyNonDefaultConstructible&amp;&gt;::IsSet());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED({<sp/>DefaultValue&lt;int&amp;&gt;::Get();<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED({<sp/>DefaultValue&lt;MyNonDefaultConstructible&gt;::Get();<sp/>},</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ActionInterface<sp/>can<sp/>be<sp/>implemented<sp/>by<sp/>defining<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Perform<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MyGlobalFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyActionImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ActionInterface&lt;MyGlobalFunction&gt;<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;bool,<sp/>int&gt;&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(args)<sp/>?<sp/>std::get&lt;1&gt;(args)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal">};</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">TEST(ActionInterfaceTest,<sp/>CanBeImplementedByDefiningPerform)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>MyActionImpl<sp/>my_action_impl;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>(void)my_action_impl;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">TEST(ActionInterfaceTest,<sp/>MakeAction)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>Action&lt;MyGlobalFunction&gt;<sp/>action<sp/>=<sp/>MakeAction(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MyActionImpl);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>exercising<sp/>the<sp/>Perform()<sp/>method<sp/>of<sp/>Action&lt;F&gt;,<sp/>we<sp/>must<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>a<sp/>tuple<sp/>whose<sp/>size<sp/>and<sp/>type<sp/>are<sp/>compatible<sp/>with<sp/>F&apos;s<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>types.<sp/><sp/>For<sp/>example,<sp/>if<sp/>F<sp/>is<sp/>int(),<sp/>then<sp/>Perform()<sp/>takes<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0-tuple;<sp/>if<sp/>F<sp/>is<sp/>void(bool,<sp/>int),<sp/>then<sp/>Perform()<sp/>takes<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::tuple&lt;bool,<sp/>int&gt;,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>action.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5)));</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Action&lt;F&gt;<sp/>can<sp/>be<sp/>constructed<sp/>from<sp/>a<sp/>pointer<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ActionInterface&lt;F&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">TEST(ActionTest,<sp/>CanBeConstructedFromActionInterface)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>Action&lt;MyGlobalFunction&gt;<sp/>action(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MyActionImpl);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Action&lt;F&gt;<sp/>delegates<sp/>actual<sp/>work<sp/>to<sp/>ActionInterface&lt;F&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">TEST(ActionTest,<sp/>DelegatesWorkToActionInterface)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;MyGlobalFunction&gt;<sp/>action(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MyActionImpl);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>action.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5)));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>action.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Action&lt;F&gt;<sp/>can<sp/>be<sp/>copied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">TEST(ActionTest,<sp/>IsCopyable)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>Action&lt;MyGlobalFunction&gt;<sp/>a1(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MyActionImpl);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>Action&lt;MyGlobalFunction&gt;<sp/>a2(a1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a1<sp/>should<sp/>continue<sp/>to<sp/>work<sp/>after<sp/>being<sp/>copied<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5)));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a2<sp/>should<sp/>work<sp/>like<sp/>the<sp/>action<sp/>it<sp/>was<sp/>copied<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5)));</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>a2<sp/>=<sp/>a1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>assignment<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a1<sp/>should<sp/>continue<sp/>to<sp/>work<sp/>after<sp/>being<sp/>copied<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5)));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a2<sp/>should<sp/>work<sp/>like<sp/>the<sp/>action<sp/>it<sp/>was<sp/>copied<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5)));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>Action&lt;From&gt;<sp/>object<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compatible<sp/>Action&lt;To&gt;<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IsNotZero<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ActionInterface&lt;bool(int)&gt;<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;int&gt;&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(arg)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal">};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">TEST(ActionTest,<sp/>CanBeConvertedToOtherActionType)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;bool(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>IsNotZero);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)&gt;<sp/>a2<sp/>=<sp/>Action&lt;int(char)&gt;(a1);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a2.Perform(std::make_tuple(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>classes<sp/>are<sp/>for<sp/>testing<sp/>MakePolymorphicAction().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>polymorphic<sp/>action<sp/>that<sp/>returns<sp/>the<sp/>second<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments<sp/>it<sp/>receives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReturnSecondArgumentAction<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>verify<sp/>that<sp/>MakePolymorphicAction()<sp/>can<sp/>work<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>polymorphic<sp/>action<sp/>whose<sp/>Perform()<sp/>method<sp/>template<sp/>is<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>or<sp/>not.<sp/><sp/>This<sp/>lets<sp/>us<sp/>verify<sp/>the<sp/>non-const<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(args);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal">};</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>polymorphic<sp/>action<sp/>that<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>nullary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>return<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReturnZeroFromNullaryFunctionAction<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>that<sp/>MakePolymorphicAction()<sp/>works<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>class&apos;<sp/>Perform()<sp/>method<sp/>template<sp/>takes<sp/>only<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>verify<sp/>that<sp/>MakePolymorphicAction()<sp/>can<sp/>work<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>polymorphic<sp/>action<sp/>whose<sp/>Perform()<sp/>method<sp/>template<sp/>is<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>or<sp/>not.<sp/><sp/>This<sp/>lets<sp/>us<sp/>verify<sp/>the<sp/>const<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result&gt;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;&gt;&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal">};</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>functions<sp/>verify<sp/>that<sp/>MakePolymorphicAction()<sp/>returns<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PolymorphicAction&lt;T&gt;<sp/>where<sp/>T<sp/>is<sp/>the<sp/>argument&apos;s<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">PolymorphicAction&lt;ReturnSecondArgumentAction&gt;<sp/>ReturnSecondArgument()<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(ReturnSecondArgumentAction());</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">PolymorphicAction&lt;ReturnZeroFromNullaryFunctionAction&gt;</highlight></codeline>
<codeline lineno="635"><highlight class="normal">ReturnZeroFromNullaryFunction()<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(ReturnZeroFromNullaryFunctionAction());</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MakePolymorphicAction()<sp/>turns<sp/>a<sp/>polymorphic<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>class<sp/>into<sp/>a<sp/>polymorphic<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">TEST(MakePolymorphicActionTest,<sp/>ConstructsActionFromImpl)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>ReturnSecondArgument();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>5,<sp/>2.0)));</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MakePolymorphicAction()<sp/>works<sp/>when<sp/>the<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class&apos;<sp/>Perform()<sp/>method<sp/>template<sp/>has<sp/>only<sp/>one<sp/>template<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal">TEST(MakePolymorphicActionTest,<sp/>WorksWhenPerformHasOneTemplateParameter)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>Action&lt;int()&gt;<sp/>a1<sp/>=<sp/>ReturnZeroFromNullaryFunction();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a1.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*()&gt;<sp/>a2<sp/>=<sp/>ReturnZeroFromNullaryFunction();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a2.Perform(std::make_tuple())<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Return()<sp/>works<sp/>as<sp/>an<sp/>action<sp/>for<sp/>void-returning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal">TEST(ReturnTest,<sp/>WorksForVoid)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>ret<sp/>=<sp/>Return();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret.Perform(std::make_tuple(1));</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Return(v)<sp/>returns<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">TEST(ReturnTest,<sp/>ReturnsGivenValue)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>Action&lt;int()&gt;<sp/>ret<sp/>=<sp/>Return(1);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>Return(-5);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-5,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Return(&quot;string<sp/>literal&quot;)<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">TEST(ReturnTest,<sp/>AcceptsStringLiteral)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*()&gt;<sp/>a1<sp/>=<sp/>Return(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>Action&lt;std::string()&gt;<sp/>a2<sp/>=<sp/>Return(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>a2.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return(x)<sp/>should<sp/>work<sp/>fine<sp/>when<sp/>the<sp/>mock<sp/>function&apos;s<sp/>return<sp/>type<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference-like<sp/>wrapper<sp/>for<sp/>decltype(x),<sp/>as<sp/>when<sp/>x<sp/>is<sp/>a<sp/>std::string<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mock<sp/>function<sp/>returns<sp/>std::string_view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal">TEST(ReturnTest,<sp/>SupportsReferenceLikeReturnType)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>reference<sp/>wrapper<sp/>for<sp/>std::vector&lt;int&gt;,<sp/>implicitly<sp/>convertible<sp/>from<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Result<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;*<sp/>v;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>Result(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>vec)<sp/>:<sp/>v(&amp;vec)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>an<sp/>action<sp/>for<sp/>a<sp/>mock<sp/>function<sp/>that<sp/>returns<sp/>the<sp/>reference<sp/>wrapper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type,<sp/>initializing<sp/>it<sp/>with<sp/>an<sp/>actual<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>returned<sp/>wrapper<sp/>should<sp/>be<sp/>initialized<sp/>with<sp/>a<sp/>copy<sp/>of<sp/>that<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that&apos;s<sp/>embedded<sp/>within<sp/>the<sp/>action<sp/>itself<sp/>(which<sp/>should<sp/>stay<sp/>alive<sp/>as<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>mock<sp/>object<sp/>is<sp/>alive),<sp/>rather<sp/>than<sp/>e.g.<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>feed<sp/>to<sp/>Return.<sp/>This<sp/>should<sp/>work<sp/>fine<sp/>both<sp/>for<sp/>WillOnce<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>WillRepeatedly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>MockFunction&lt;Result()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(std::vector&lt;int&gt;{17,<sp/>19,<sp/>23}))</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(Return(std::vector&lt;int&gt;{29,<sp/>31,<sp/>37}));</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>EXPECT_THAT(mock.AsStdFunction()(),</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Field(&amp;Result::v,<sp/>Pointee(ElementsAre(17,<sp/>19,<sp/>23))));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>EXPECT_THAT(mock.AsStdFunction()(),</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Field(&amp;Result::v,<sp/>Pointee(ElementsAre(29,<sp/>31,<sp/>37))));</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal">TEST(ReturnTest,<sp/>PrefersConversionOperator)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>types<sp/>In<sp/>and<sp/>Out<sp/>such<sp/>that:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/>In<sp/>is<sp/>implicitly<sp/>convertible<sp/>to<sp/>Out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/>Out<sp/>also<sp/>has<sp/>an<sp/>explicit<sp/>constructor<sp/>from<sp/>In.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">In;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Out<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Out(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>x(val)<sp/>{}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Out(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>In&amp;)<sp/>:<sp/>x(0)<sp/>{}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">In<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Out()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Out{19};<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assumption<sp/>check:<sp/>the<sp/>C++<sp/>language<sp/>rules<sp/>are<sp/>such<sp/>that<sp/>a<sp/>function<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>Out<sp/>which<sp/>uses<sp/>In<sp/>a<sp/>return<sp/>statement<sp/>will<sp/>use<sp/>the<sp/>implicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>path<sp/>rather<sp/>than<sp/>the<sp/>explicit<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>EXPECT_THAT([]()<sp/>-&gt;<sp/>Out<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>In();<sp/>}(),<sp/>Field(&amp;Out::x,<sp/>19));</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>should<sp/>work<sp/>the<sp/>same<sp/>way:<sp/>if<sp/>the<sp/>mock<sp/>function&apos;s<sp/>return<sp/>type<sp/>is<sp/>Out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>feed<sp/>Return<sp/>an<sp/>In<sp/>value,<sp/>then<sp/>the<sp/>Out<sp/>should<sp/>be<sp/>created<sp/>through<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implicit<sp/>conversion<sp/>path<sp/>rather<sp/>than<sp/>the<sp/>explicit<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>MockFunction&lt;Out()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(Return(In()));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>EXPECT_THAT(mock.AsStdFunction()(),<sp/>Field(&amp;Out::x,<sp/>19));</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>use<sp/>Return(R)<sp/>with<sp/>a<sp/>mock<sp/>function<sp/>result<sp/>type<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>convertible<sp/>from<sp/>const<sp/>R&amp;<sp/>but<sp/>*not*<sp/>R<sp/>(such<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::reference_wrapper).<sp/>This<sp/>should<sp/>work<sp/>for<sp/>both<sp/>WillOnce<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WillRepeatedly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">TEST(ReturnTest,<sp/>ConversionRequiresConstLvalueReference)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">R<sp/>=<sp/>int;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">U<sp/>=<sp/>std::reference_wrapper&lt;const<sp/>int&gt;;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_convertible&lt;const<sp/>R&amp;,<sp/>U&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_convertible&lt;R,<sp/>U&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>MockFunction&lt;U()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(Return(17)).WillRepeatedly(Return(19));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>EXPECT_EQ(19,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return(x)<sp/>should<sp/>not<sp/>be<sp/>usable<sp/>with<sp/>a<sp/>mock<sp/>function<sp/>result<sp/>type<sp/>that&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implicitly<sp/>convertible<sp/>from<sp/>decltype(x)<sp/>but<sp/>requires<sp/>a<sp/>non-const<sp/>lvalue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>to<sp/>the<sp/>input.<sp/>It<sp/>doesn&apos;t<sp/>make<sp/>sense<sp/>for<sp/>the<sp/>conversion<sp/>operator<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modify<sp/>the<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">TEST(ReturnTest,<sp/>ConversionRequiresMutableLvalueReference)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>a<sp/>type<sp/>that<sp/>is<sp/>implicitly<sp/>convertible<sp/>from<sp/>std::string&amp;,<sp/>but<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::string&amp;&amp;<sp/>or<sp/>`const<sp/>std::string&amp;`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>asserting<sp/>about<sp/>conversion<sp/>from<sp/>std::string<sp/>on<sp/>MSVC,<sp/>which<sp/>seems<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implement<sp/>std::is_convertible<sp/>incorrectly<sp/>in<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">S<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>S(std::string&amp;)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_convertible&lt;std::string&amp;,<sp/>S&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_convertible&lt;std::string&amp;&amp;,<sp/>S&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_convertible&lt;const<sp/>std::string&amp;,<sp/>S&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>shouldn&apos;t<sp/>be<sp/>possible<sp/>to<sp/>use<sp/>the<sp/>result<sp/>of<sp/>Return(std::string)<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>context<sp/>where<sp/>an<sp/>S<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>too<sp/>we<sp/>disable<sp/>the<sp/>assertion<sp/>for<sp/>MSVC,<sp/>since<sp/>its<sp/>incorrect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>is_convertible<sp/>causes<sp/>our<sp/>SFINAE<sp/>to<sp/>be<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RA<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(Return(std::string()));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_convertible&lt;RA,<sp/>Action&lt;S()&gt;&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_convertible&lt;RA,<sp/>OnceAction&lt;S()&gt;&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">TEST(ReturnTest,<sp/>MoveOnlyResultType)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>should<sp/>support<sp/>move-only<sp/>result<sp/>types<sp/>when<sp/>used<sp/>with<sp/>WillOnce.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;std::unique_ptr&lt;int&gt;()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(std::unique_ptr&lt;int&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(17))));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(mock.AsStdFunction()(),<sp/>Pointee(17));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>of<sp/>Return<sp/>should<sp/>not<sp/>be<sp/>convertible<sp/>to<sp/>Action<sp/>(so<sp/>it<sp/>can&apos;t<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>with<sp/>WillRepeatedly).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_convertible&lt;decltype(Return(std::unique_ptr&lt;int&gt;())),</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Action&lt;std::unique_ptr&lt;int&gt;()&gt;&gt;::value,</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Return(v)<sp/>is<sp/>covariant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classBase" kindref="compound">Base</ref><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal">};</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Derived<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Derived&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal">};</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">TEST(ReturnTest,<sp/>IsCovariant)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><ref refid="classBase" kindref="compound">Base</ref><sp/>base;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>Derived<sp/>derived;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>Action&lt;<ref refid="classBase" kindref="compound">Base</ref>*()&gt;<sp/>ret<sp/>=<sp/>Return(&amp;base);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;base,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>Return(&amp;derived);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;derived,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>type<sp/>of<sp/>the<sp/>value<sp/>passed<sp/>into<sp/>Return<sp/>is<sp/>converted<sp/>into<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>action<sp/>is<sp/>cast<sp/>to<sp/>Action&lt;T(...)&gt;<sp/>rather<sp/>than<sp/>when<sp/>the<sp/>action<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>performed.<sp/>See<sp/>comments<sp/>on<sp/>testing::internal::ReturnAction<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gmock-actions.h<sp/>for<sp/>more<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FromType<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FromType(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_converted)<sp/>:<sp/>converted_(is_converted)<sp/>{}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>converted()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>converted_;<sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>converted_;</highlight></codeline>
<codeline lineno="842"><highlight class="normal">};</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ToType<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>allow<sp/>implicit<sp/>conversion<sp/>due<sp/>to<sp/>use<sp/>in<sp/>ImplicitCast_&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>ToType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FromType&amp;<sp/>x)<sp/>{<sp/>*x.converted()<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal">};</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal">TEST(ReturnTest,<sp/>ConvertsArgumentWhenConverted)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>FromType<sp/>x(&amp;converted);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>Action&lt;ToType()&gt;<sp/>action(Return(x));</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(converted)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>must<sp/>convert<sp/>its<sp/>argument<sp/>in<sp/>its<sp/>own<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;conversion<sp/>operator.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>converted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>action.Perform(std::tuple&lt;&gt;());</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(converted)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Action<sp/>must<sp/>NOT<sp/>convert<sp/>its<sp/>argument<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;when<sp/>performed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnNull()<sp/>returns<sp/>NULL<sp/>in<sp/>a<sp/>pointer-returning<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal">TEST(ReturnNullTest,<sp/>WorksInPointerReturningFunction)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*()&gt;<sp/>a1<sp/>=<sp/>ReturnNull();</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a1.Perform(std::make_tuple())<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(bool)&gt;<sp/>a2<sp/>=<sp/>ReturnNull();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a2.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnNull()<sp/>returns<sp/>NULL<sp/>for<sp/>shared_ptr<sp/>and<sp/>unique_ptr<sp/>returning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal">TEST(ReturnNullTest,<sp/>WorksInSmartPointerReturningFunction)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;std::unique_ptr&lt;const<sp/>int&gt;()&gt;<sp/>a1<sp/>=<sp/>ReturnNull();</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a1.Perform(std::make_tuple())<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;std::shared_ptr&lt;int&gt;(std::string)&gt;<sp/>a2<sp/>=<sp/>ReturnNull();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a2.Perform(std::make_tuple(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">))<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnRef(v)<sp/>works<sp/>for<sp/>reference<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal">TEST(ReturnRefTest,<sp/>WorksForReference)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;(bool)&gt;<sp/>ret<sp/>=<sp/>ReturnRef(n);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>&amp;ret.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnRef(v)<sp/>is<sp/>covariant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal">TEST(ReturnRefTest,<sp/>IsCovariant)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><ref refid="classBase" kindref="compound">Base</ref><sp/>base;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>Derived<sp/>derived;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>Action&lt;<ref refid="classBase" kindref="compound">Base</ref>&amp;()&gt;<sp/>a<sp/>=<sp/>ReturnRef(base);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;base,<sp/>&amp;a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>ReturnRef(derived);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;derived,<sp/>&amp;a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>decltype(ReturnRef(std::declval&lt;T&amp;&amp;&gt;()))&gt;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CanCallReturnRef(T&amp;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CanCallReturnRef(Unused)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnRef(v)<sp/>is<sp/>working<sp/>with<sp/>non-temporaries<sp/>(T&amp;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal">TEST(ReturnRefTest,<sp/>WorksForNonTemporary)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scalar_value<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(CanCallReturnRef(scalar_value));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>std::string<sp/>non_scalar_value(</highlight><highlight class="stringliteral">&quot;ABC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(CanCallReturnRef(non_scalar_value));</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>const_scalar_value{321};</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(CanCallReturnRef(const_scalar_value));</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>const_non_scalar_value(</highlight><highlight class="stringliteral">&quot;CBA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(CanCallReturnRef(const_non_scalar_value));</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnRef(v)<sp/>is<sp/>not<sp/>working<sp/>with<sp/>temporaries<sp/>(T&amp;&amp;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal">TEST(ReturnRefTest,<sp/>DoesNotWorkForTemporary)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scalar_value<sp/>=<sp/>[]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>123;<sp/>};</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(CanCallReturnRef(scalar_value()));</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>non_scalar_value<sp/>=<sp/>[]()<sp/>-&gt;<sp/>std::string<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ABC&quot;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(CanCallReturnRef(non_scalar_value()));</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>use<sp/>here<sp/>callable<sp/>returning<sp/>&quot;const<sp/>scalar<sp/>type&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>such<sp/>const<sp/>for<sp/>scalar<sp/>return<sp/>type<sp/>is<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(CanCallReturnRef(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(321)));</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>const_non_scalar_value<sp/>=<sp/>[]()<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CBA&quot;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(CanCallReturnRef(const_non_scalar_value()));</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnRefOfCopy(v)<sp/>works<sp/>for<sp/>reference<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal">TEST(ReturnRefOfCopyTest,<sp/>WorksForReference)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;()&gt;<sp/>ret<sp/>=<sp/>ReturnRefOfCopy(n);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>EXPECT_NE(&amp;n,<sp/>&amp;ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>43;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>EXPECT_NE(&amp;n,<sp/>&amp;ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnRefOfCopy(v)<sp/>is<sp/>covariant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">TEST(ReturnRefOfCopyTest,<sp/>IsCovariant)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><ref refid="classBase" kindref="compound">Base</ref><sp/>base;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>Derived<sp/>derived;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>Action&lt;<ref refid="classBase" kindref="compound">Base</ref>&amp;()&gt;<sp/>a<sp/>=<sp/>ReturnRefOfCopy(base);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>EXPECT_NE(&amp;base,<sp/>&amp;a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>ReturnRefOfCopy(derived);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>EXPECT_NE(&amp;derived,<sp/>&amp;a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnRoundRobin(v)<sp/>works<sp/>with<sp/>initializer<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal">TEST(ReturnRoundRobinTest,<sp/>WorksForInitList)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>Action&lt;int()&gt;<sp/>ret<sp/>=<sp/>ReturnRoundRobin({1,<sp/>2,<sp/>3});</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ReturnRoundRobin(v)<sp/>works<sp/>with<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal">TEST(ReturnRoundRobinTest,<sp/>WorksForVector)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>v<sp/>=<sp/>{4.4,<sp/>5.5,<sp/>6.6};</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>Action&lt;double()&gt;<sp/>ret<sp/>=<sp/>ReturnRoundRobin(v);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4.4,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5.5,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6.6,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4.4,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5.5,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6.6,<sp/>ret.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoDefault()<sp/>does<sp/>the<sp/>default<sp/>action<sp/>for<sp/>the<sp/>mock<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockClass<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>MockClass()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(IntFunc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(Foo,<sp/>MyNonDefaultConstructible());</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(MakeUnique,<sp/>std::unique_ptr&lt;int&gt;());</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(MakeUniqueBase,<sp/>std::unique_ptr&lt;Base&gt;());</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(MakeVectorUnique,<sp/>std::vector&lt;std::unique_ptr&lt;int&gt;&gt;());</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TakeUnique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(std::unique_ptr&lt;int&gt;));</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(TakeUnique,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;int&gt;&amp;,<sp/>std::unique_ptr&lt;int&gt;));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>MockClass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockClass&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>MockClass&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MockClass&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoDefault()<sp/>returns<sp/>the<sp/>built-in<sp/>default<sp/>value<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>type<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal">TEST(DoDefaultTest,<sp/>ReturnsBuiltInDefaultValueByDefault)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntFunc(_)).WillOnce(DoDefault());</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.IntFunc(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoDefault()<sp/>throws<sp/>(when<sp/>exceptions<sp/>are<sp/>enabled)<sp/>or<sp/>aborts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>process<sp/>when<sp/>there<sp/>is<sp/>no<sp/>built-in<sp/>default<sp/>value<sp/>for<sp/>the<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal">TEST(DoDefaultDeathTest,<sp/>DiesForUnknowType)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo()).WillRepeatedly(DoDefault());</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>EXPECT_ANY_THROW(mock.Foo());</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED({<sp/>mock.Foo();<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>using<sp/>DoDefault()<sp/>inside<sp/>a<sp/>composite<sp/>action<sp/>leads<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>run-time<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFunc(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal">TEST(DoDefaultDeathTest,<sp/>DiesIfUsedInCompositeAction)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntFunc(_))</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(DoAll(Invoke(VoidFunc),<sp/>DoDefault()));</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ideally<sp/>we<sp/>should<sp/>verify<sp/>the<sp/>error<sp/>message<sp/>as<sp/>well.<sp/><sp/>Sadly,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_DEATH()<sp/>can<sp/>only<sp/>capture<sp/>stderr,<sp/>while<sp/>Google<sp/>Mock&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>errors<sp/>are<sp/>printed<sp/>on<sp/>stdout.<sp/><sp/>Therefore<sp/>we<sp/>have<sp/>to<sp/>settle<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>verifying<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED({<sp/>mock.IntFunc(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoDefault()<sp/>returns<sp/>the<sp/>default<sp/>value<sp/>set<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DefaultValue&lt;T&gt;::Set()<sp/>when<sp/>it&apos;s<sp/>not<sp/>overridden<sp/>by<sp/>an<sp/>ON_CALL().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">TEST(DoDefaultTest,<sp/>ReturnsUserSpecifiedPerTypeDefaultValueWhenThereIsOne)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>DefaultValue&lt;int&gt;::Set(1);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntFunc(_)).WillOnce(DoDefault());</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>mock.IntFunc(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>DefaultValue&lt;int&gt;::Clear();</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>DoDefault()<sp/>does<sp/>the<sp/>action<sp/>specified<sp/>by<sp/>ON_CALL().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal">TEST(DoDefaultTest,<sp/>DoesWhatOnCallSpecifies)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>ON_CALL(mock,<sp/>IntFunc(_)).WillByDefault(Return(2));</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>IntFunc(_)).WillOnce(DoDefault());</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>mock.IntFunc(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>using<sp/>DoDefault()<sp/>in<sp/>ON_CALL()<sp/>leads<sp/>to<sp/>a<sp/>run-time<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">TEST(DoDefaultTest,<sp/>CannotBeUsedInOnCall)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CALL(mock,<sp/>IntFunc(_)).WillByDefault(DoDefault());</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DoDefault()<sp/>cannot<sp/>be<sp/>used<sp/>in<sp/>ON_CALL()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetArgPointee&lt;N&gt;(v)<sp/>sets<sp/>the<sp/>variable<sp/>pointed<sp/>to<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>N-th<sp/>(0-based)<sp/>argument<sp/>to<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal">TEST(SetArgPointeeTest,<sp/>SetsTheNthPointee)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArgPointee&lt;1&gt;(2);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;ch));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;ch));</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>ch);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetArgPointee&lt;N&gt;()<sp/>accepts<sp/>a<sp/>string<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal">TEST(SetArgPointeeTest,<sp/>AcceptsStringLiteral)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(std::string*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArgPointee&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(&amp;str,<sp/>&amp;ptr));</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>SetArgPointee&lt;1&gt;(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(&amp;str,<sp/>&amp;ptr));</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>ptr);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal">TEST(SetArgPointeeTest,<sp/>AcceptsWideStringLiteral)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArgPointee&lt;0&gt;(L</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(&amp;ptr));</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(L</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>ptr);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyStringFunction(std::wstring*);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>Action&lt;MyStringFunction&gt;<sp/>a2<sp/>=<sp/>SetArgPointee&lt;0&gt;(L</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>std::wstring<sp/>str<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>a2.Perform(std::make_tuple(&amp;str));</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>EXPECT_EQ(L</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetArgPointee&lt;N&gt;()<sp/>accepts<sp/>a<sp/>char<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal">TEST(SetArgPointeeTest,<sp/>AcceptsCharPointer)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>std::string*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArgPointee&lt;1&gt;(hi);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;str,<sp/>&amp;ptr));</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>world_array[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>world<sp/>=<sp/>world_array;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>SetArgPointee&lt;2&gt;(world);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;str,<sp/>&amp;ptr));</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>EXPECT_EQ(world,<sp/>ptr);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal">TEST(SetArgPointeeTest,<sp/>AcceptsWideCharPointer)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArgPointee&lt;1&gt;(hi);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;ptr));</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>EXPECT_EQ(hi,<sp/>ptr);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyStringFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>std::wstring*);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>world_array[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>world<sp/>=<sp/>world_array;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>Action&lt;MyStringFunction&gt;<sp/>a2<sp/>=<sp/>SetArgPointee&lt;1&gt;(world);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>std::wstring<sp/>str;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>a2.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;str));</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>EXPECT_EQ(world_array,<sp/>str);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetArgumentPointee&lt;N&gt;(v)<sp/>sets<sp/>the<sp/>variable<sp/>pointed<sp/>to<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>N-th<sp/>(0-based)<sp/>argument<sp/>to<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal">TEST(SetArgumentPointeeTest,<sp/>SetsTheNthPointee)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>Action&lt;MyFunction&gt;<sp/>a<sp/>=<sp/>SetArgumentPointee&lt;1&gt;(2);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;ch));</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>SetArgumentPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;ch));</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>ch);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions<sp/>and<sp/>functors<sp/>for<sp/>testing<sp/>Invoke()<sp/>and<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NullaryFunctor<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidNullary()<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VoidNullaryFunctor<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Short(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;<sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>CharPtr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Unary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Binary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input<sp/>+<sp/>n;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidBinary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ternary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y<sp/>+<sp/>z;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d;<sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Foo<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>Foo()<sp/>:<sp/>value_(123)<sp/>{}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>InvokeWithoutArgs(function).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal">TEST(InvokeWithoutArgsTest,<sp/>Function)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>one<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>InvokeWithoutArgs(Nullary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(std::make_tuple(2)));</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>two<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;<sp/>a2<sp/>=<sp/>InvokeWithoutArgs(Nullary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a2.Perform(std::make_tuple(2,<sp/>3.5)));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a3<sp/>=<sp/>InvokeWithoutArgs(VoidNullary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>a3.Perform(std::make_tuple(1));</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(g_done);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>InvokeWithoutArgs(functor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal">TEST(InvokeWithoutArgsTest,<sp/>Functor)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>no<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>Action&lt;int()&gt;<sp/>a<sp/>=<sp/>InvokeWithoutArgs(NullaryFunctor());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>three<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)&gt;<sp/>a2<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeWithoutArgs(NullaryFunctor());</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>a2.Perform(std::make_tuple(3,<sp/>3.5,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>Action&lt;void()&gt;<sp/>a3<sp/>=<sp/>InvokeWithoutArgs(VoidNullaryFunctor());</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>a3.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(g_done);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>InvokeWithoutArgs(obj_ptr,<sp/>method).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal">TEST(InvokeWithoutArgsTest,<sp/>Method)<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeWithoutArgs(&amp;foo,<sp/>&amp;Foo::Nullary);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>IgnoreResult()<sp/>on<sp/>a<sp/>polymorphic<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal">TEST(IgnoreResultTest,<sp/>PolymorphicAction)<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>IgnoreResult(Return(5));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(1));</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>IgnoreResult()<sp/>on<sp/>a<sp/>monomorphic<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReturnOne()<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal">TEST(IgnoreResultTest,<sp/>MonomorphicAction)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>Action&lt;void()&gt;<sp/>a<sp/>=<sp/>IgnoreResult(Invoke(ReturnOne));</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(g_done);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>IgnoreResult()<sp/>on<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>a<sp/>class<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal">MyNonDefaultConstructible<sp/>ReturnMyNonDefaultConstructible(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>x<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MyNonDefaultConstructible(42);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal">TEST(IgnoreResultTest,<sp/>ActionReturningClass)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IgnoreResult(Invoke(ReturnMyNonDefaultConstructible));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(2));</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(g_done);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal">TEST(AssignTest,<sp/>Int)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Assign(&amp;x,<sp/>5);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(0));</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>x);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal">TEST(AssignTest,<sp/>String)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>::std::string<sp/>x;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Assign(&amp;x,<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">,<sp/>x);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal">TEST(AssignTest,<sp/>CompatibleTypes)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>Assign(&amp;x,<sp/>5);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(0));</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(5,<sp/>x);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoAll<sp/>should<sp/>support<sp/>&amp;&amp;-qualified<sp/>actions<sp/>when<sp/>used<sp/>with<sp/>WillOnce.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal">TEST(DoAll,<sp/>SupportsRefQualifiedActions)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitialAction<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg)<sp/>&amp;&amp;<sp/>{<sp/>EXPECT_EQ(17,<sp/>arg);<sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FinalAction<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>19;<sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(DoAll(InitialAction{},<sp/>FinalAction{}));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>EXPECT_EQ(19,<sp/>mock.AsStdFunction()(17));</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoAll<sp/>should<sp/>never<sp/>provide<sp/>rvalue<sp/>references<sp/>to<sp/>the<sp/>initial<sp/>actions.<sp/>If<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mock<sp/>action<sp/>itself<sp/>accepts<sp/>an<sp/>rvalue<sp/>reference<sp/>or<sp/>a<sp/>non-scalar<sp/>object<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>then<sp/>the<sp/>final<sp/>action<sp/>should<sp/>receive<sp/>an<sp/>rvalue<sp/>reference,<sp/>but<sp/>initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>actions<sp/>should<sp/>receive<sp/>only<sp/>lvalue<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal">TEST(DoAll,<sp/>ProvidesLvalueReferencesToInitialActions)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Obj<sp/>{};</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>action<sp/>accepts<sp/>by<sp/>value:<sp/>the<sp/>initial<sp/>action<sp/>should<sp/>be<sp/>fed<sp/>a<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lvalue<sp/>reference,<sp/>and<sp/>the<sp/>final<sp/>action<sp/>an<sp/>rvalue<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitialAction<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>call&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>call&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj&amp;&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>call&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;void(Obj)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](Obj&amp;&amp;)<sp/>{}))</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](Obj&amp;&amp;)<sp/>{}));</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(Obj{});</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(Obj{});</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>action<sp/>accepts<sp/>by<sp/>const<sp/>lvalue<sp/>reference:<sp/>both<sp/>actions<sp/>should<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>const<sp/>lvalue<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitialAction<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>call&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>call&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj&amp;&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>call&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;void(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj&amp;)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj&amp;)<sp/>{}))</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj&amp;)<sp/>{}));</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(Obj{});</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(Obj{});</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>action<sp/>accepts<sp/>by<sp/>non-const<sp/>lvalue<sp/>reference:<sp/>both<sp/>actions<sp/>should<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>non-const<sp/>lvalue<sp/>reference<sp/>if<sp/>they<sp/>want<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitialAction<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>call&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;void(Obj&amp;)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](Obj&amp;)<sp/>{}))</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](Obj&amp;)<sp/>{}));</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>Obj<sp/>obj;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(obj);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(obj);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>action<sp/>accepts<sp/>by<sp/>rvalue<sp/>reference:<sp/>the<sp/>initial<sp/>actions<sp/>should<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>non-const<sp/>lvalue<sp/>reference<sp/>if<sp/>it<sp/>wants<sp/>it,<sp/>and<sp/>the<sp/>final<sp/>action<sp/>an<sp/>rvalue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitialAction<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>call&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;void(Obj&amp;&amp;)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](Obj&amp;&amp;)<sp/>{}))</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](Obj&amp;&amp;)<sp/>{}));</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(Obj{});</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(Obj{});</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&amp;&amp;-qualified<sp/>initial<sp/>actions<sp/>should<sp/>also<sp/>be<sp/>allowed<sp/>with<sp/>WillOnce.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitialAction<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;)<sp/>&amp;&amp;<sp/>{}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;void(Obj&amp;)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](Obj&amp;)<sp/>{}));</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>Obj<sp/>obj;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(obj);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitialAction<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Obj&amp;)<sp/>&amp;&amp;<sp/>{}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;void(Obj&amp;&amp;)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(InitialAction{},<sp/>InitialAction{},<sp/>[](Obj&amp;&amp;)<sp/>{}));</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>mock.AsStdFunction()(Obj{});</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DoAll<sp/>should<sp/>support<sp/>being<sp/>used<sp/>with<sp/>type-erased<sp/>Action<sp/>objects,<sp/>both<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WillOnce<sp/>and<sp/>WillRepeatedly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal">TEST(DoAll,<sp/>SupportsTypeErasedActions)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>only<sp/>type-erased<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;void()&gt;<sp/>initial_action<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int()&gt;<sp/>final_action<sp/>=<sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;<sp/>};</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>MockFunction&lt;int()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(initial_action,<sp/>initial_action,<sp/>final_action))</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(DoAll(initial_action,<sp/>initial_action,<sp/>final_action));</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>&amp;&amp;-qualified<sp/>and<sp/>move-only<sp/>final<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FinalAction<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FinalAction()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FinalAction(FinalAction&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;<sp/>}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(initial_action,<sp/>initial_action,<sp/>FinalAction{}));</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>and<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>1<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal">TEST(WithArgsTest,<sp/>OneArg)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>Action&lt;bool(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)&gt;<sp/>a<sp/>=<sp/>WithArgs&lt;1&gt;(Invoke(Unary));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(std::make_tuple(1.5,<sp/>-1)));</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a.Perform(std::make_tuple(1.5,<sp/>1)));</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>2<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal">TEST(WithArgsTest,<sp/>TwoArgs)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>2&gt;(Invoke(Binary));</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s<sp/>+<sp/>2,<sp/>a.Perform(std::make_tuple(CharPtr(s),<sp/>0.5,<sp/>Short(2))));</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ConcatAll<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>std::string<sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>std::string<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a,<sp/>I...<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>ConcatAll()(i...);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>10<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal">TEST(WithArgsTest,<sp/>TenArgs)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>Action&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>2,<sp/>3,<sp/>2,<sp/>1,<sp/>0,<sp/>1,<sp/>2,<sp/>3&gt;(Invoke(ConcatAll{}));</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0123210123&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>is<sp/>not<sp/>Invoke().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SubtractAction<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ActionInterface&lt;int(int,<sp/>int)&gt;<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;int,<sp/>int&gt;&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(args)<sp/>-<sp/>std::get&lt;1&gt;(args);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal">TEST(WithArgsTest,<sp/>NonInvokeAction)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;2,<sp/>1&gt;(MakeAction(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SubtractAction));</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>std::tuple&lt;std::string,<sp/>int,<sp/>int&gt;<sp/>dummy<sp/>=</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(std::string(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>10);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>EXPECT_EQ(8,<sp/>a.Perform(dummy));</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>to<sp/>pass<sp/>all<sp/>original<sp/>arguments<sp/>in<sp/>the<sp/>original<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal">TEST(WithArgsTest,<sp/>Identity)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>z)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>2&gt;(Invoke(Ternary));</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>a.Perform(std::make_tuple(100,<sp/>Char(20),<sp/>Short(3))));</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>repeated<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal">TEST(WithArgsTest,<sp/>RepeatedArguments)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;1,<sp/>1,<sp/>1,<sp/>1&gt;(Invoke(SumOf4));</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4,<sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1,<sp/>10)));</highlight></codeline>
<codeline lineno="1540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>reversed<sp/>argument<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal">TEST(WithArgsTest,<sp/>ReversedArgumentOrder)<sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;1,<sp/>0&gt;(Invoke(Binary));</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s<sp/>+<sp/>2,<sp/>a.Perform(std::make_tuple(Short(2),<sp/>CharPtr(s))));</highlight></codeline>
<codeline lineno="1548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>compatible,<sp/>but<sp/>not<sp/>identical,<sp/>argument<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal">TEST(WithArgsTest,<sp/>ArgsOfCompatibleTypes)<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>Action&lt;long(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)&gt;<sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>3&gt;(Invoke(Ternary));</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(std::make_tuple(Short(100),<sp/>Char(20),<sp/>5.6,<sp/>Char(3))));</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal">TEST(WithArgsTest,<sp/>VoidAction)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>Action&lt;void(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)&gt;<sp/>a<sp/>=<sp/>WithArgs&lt;2,<sp/>1&gt;(Invoke(VoidBinary));</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>a.Perform(std::make_tuple(1.5,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(g_done);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal">TEST(WithArgsTest,<sp/>ReturnReference)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>aa<sp/>=<sp/>WithArgs&lt;0&gt;([](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>a)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>res<sp/>=<sp/>aa.Perform(std::forward_as_tuple(i,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;i,<sp/>&amp;res);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal">TEST(WithArgsTest,<sp/>InnerActionWithConversion)<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>Action&lt;Derived*()&gt;<sp/>inner<sp/>=<sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>MockFunction&lt;<ref refid="classBase" kindref="compound">Base</ref>*(double)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(WithoutArgs(inner))</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(WithoutArgs(inner));</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>mock.AsStdFunction()(1.1));</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>mock.AsStdFunction()(1.1));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>use<sp/>an<sp/>&amp;&amp;-qualified<sp/>inner<sp/>action<sp/>as<sp/>long<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whole<sp/>shebang<sp/>is<sp/>used<sp/>as<sp/>an<sp/>rvalue<sp/>with<sp/>WillOnce.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal">TEST(WithArgsTest,<sp/>RefQualifiedInnerAction)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SomeAction<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg)<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(17,<sp/>arg);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>19;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(WithArg&lt;1&gt;(SomeAction{}));</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>EXPECT_EQ(19,<sp/>mock.AsStdFunction()(0,<sp/>17));</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SetErrnoAndReturnTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>errno<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>errno<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal">TEST_F(SetErrnoAndReturnTest,<sp/>Int)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/>a<sp/>=<sp/>SetErrnoAndReturn(ENOTTY,<sp/>-5);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-5,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ENOTTY,<sp/>errno);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal">TEST_F(SetErrnoAndReturnTest,<sp/>Ptr)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*(void)&gt;<sp/>a<sp/>=<sp/>SetErrnoAndReturn(ENOTTY,<sp/>&amp;x);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;x,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ENOTTY,<sp/>errno);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal">TEST_F(SetErrnoAndReturnTest,<sp/>CompatibleTypes)<sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>Action&lt;double()&gt;<sp/>a<sp/>=<sp/>SetErrnoAndReturn(EINVAL,<sp/>5);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(5.0,<sp/>a.Perform(std::make_tuple()));</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>EXPECT_EQ(EINVAL,<sp/>errno);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ByRef().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>result<sp/>of<sp/>ByRef()<sp/>is<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal">TEST(ByRefTest,<sp/>IsCopyable)<sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref_wrapper<sp/>=<sp/>ByRef(s1);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>r1<sp/>=<sp/>ref_wrapper;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;s1,<sp/>&amp;r1);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigns<sp/>a<sp/>new<sp/>value<sp/>to<sp/>ref_wrapper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>ref_wrapper<sp/>=<sp/>ByRef(s2);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>r2<sp/>=<sp/>ref_wrapper;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;s2,<sp/>&amp;r2);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref_wrapper1<sp/>=<sp/>ByRef(s1);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copies<sp/>ref_wrapper1<sp/>to<sp/>ref_wrapper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>ref_wrapper<sp/>=<sp/>ref_wrapper1;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>r3<sp/>=<sp/>ref_wrapper;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;s1,<sp/>&amp;r3);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ByRef()<sp/>on<sp/>a<sp/>const<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal">TEST(ByRefTest,<sp/>ConstValue)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int&amp;<sp/>ref<sp/>=<sp/>ByRef(n);<sp/><sp/>//<sp/>This<sp/>shouldn&apos;t<sp/>compile<sp/>-<sp/>we<sp/>have<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>negative<sp/>compilation<sp/>test<sp/>to<sp/>catch<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>const_ref<sp/>=<sp/>ByRef(n);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>&amp;const_ref);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ByRef()<sp/>on<sp/>a<sp/>non-const<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal">TEST(ByRefTest,<sp/>NonConstValue)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ByRef(n)<sp/>can<sp/>be<sp/>used<sp/>as<sp/>either<sp/>an<sp/>int&amp;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>ref<sp/>=<sp/>ByRef(n);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>&amp;ref);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>const<sp/>int&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>const_ref<sp/>=<sp/>ByRef(n);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>&amp;const_ref);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>explicitly<sp/>specifying<sp/>the<sp/>type<sp/>when<sp/>using<sp/>ByRef().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal">TEST(ByRefTest,<sp/>ExplicitType)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>r1<sp/>=<sp/>ByRef&lt;const<sp/>int&gt;(n);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>&amp;r1);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ByRef&lt;char&gt;(n);<sp/><sp/>//<sp/>This<sp/>shouldn&apos;t<sp/>compile<sp/>-<sp/>we<sp/>have<sp/>a<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compilation<sp/>test<sp/>to<sp/>catch<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>Derived<sp/>d;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>Derived&amp;<sp/>r2<sp/>=<sp/>ByRef&lt;Derived&gt;(d);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;d,<sp/>&amp;r2);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Derived&amp;<sp/>r3<sp/>=<sp/>ByRef&lt;const<sp/>Derived&gt;(d);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;d,<sp/>&amp;r3);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><ref refid="classBase" kindref="compound">Base</ref>&amp;<sp/>r4<sp/>=<sp/>ByRef&lt;Base&gt;(d);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;d,<sp/>&amp;r4);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBase" kindref="compound">Base</ref>&amp;<sp/>r5<sp/>=<sp/>ByRef&lt;const<sp/>Base&gt;(d);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;d,<sp/>&amp;r5);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>shouldn&apos;t<sp/>compile<sp/>-<sp/>we<sp/>have<sp/>a<sp/>negative<sp/>compilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>b;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ByRef&lt;Derived&gt;(b);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Google<sp/>Mock<sp/>prints<sp/>expression<sp/>ByRef(x)<sp/>as<sp/>a<sp/>reference<sp/>to<sp/>x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal">TEST(ByRefTest,<sp/>PrintsCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>::std::stringstream<sp/>expected,<sp/>actual;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalPrinter" kindref="compound">testing::internal::UniversalPrinter&lt;const int&amp;&gt;::Print</ref>(n,<sp/>&amp;expected);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/>testing::internal::UniversalPrint(ByRef(n),<sp/>&amp;actual);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected.str(),<sp/>actual.str());</highlight></codeline>
<codeline lineno="1710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryConstructorClass<sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>UnaryConstructorClass(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)<sp/>:<sp/>value(v)<sp/>{}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ReturnNew()<sp/>with<sp/>a<sp/>unary<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal">TEST(ReturnNewTest,<sp/>Unary)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>Action&lt;UnaryConstructorClass*()&gt;<sp/>a<sp/>=<sp/>ReturnNew&lt;UnaryConstructorClass&gt;(4000);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/>UnaryConstructorClass*<sp/>c<sp/>=<sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4000,<sp/>c-&gt;value);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal">TEST(ReturnNewTest,<sp/>UnaryWorksWhenMockMethodHasArgs)<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>Action&lt;UnaryConstructorClass*(bool,<sp/>int)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReturnNew&lt;UnaryConstructorClass&gt;(4000);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>UnaryConstructorClass*<sp/>c<sp/>=<sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>5));</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4000,<sp/>c-&gt;value);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal">TEST(ReturnNewTest,<sp/>UnaryWorksWhenMockMethodReturnsPointerToConst)<sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>Action&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnaryConstructorClass*()&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReturnNew&lt;UnaryConstructorClass&gt;(4000);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnaryConstructorClass*<sp/>c<sp/>=<sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4000,<sp/>c-&gt;value);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TenArgConstructorClass<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/>TenArgConstructorClass(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a4,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a5,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a6,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a7,</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a8,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a9,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a10)</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(a1<sp/>+<sp/>a2<sp/>+<sp/>a3<sp/>+<sp/>a4<sp/>+<sp/>a5<sp/>+<sp/>a6<sp/>+<sp/>a7<sp/>+<sp/>a8<sp/>+<sp/>a9<sp/>+<sp/>a10)<sp/>{}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ReturnNew()<sp/>with<sp/>a<sp/>10-argument<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal">TEST(ReturnNewTest,<sp/>ConstructorThatTakes10Arguments)<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>Action&lt;TenArgConstructorClass*()&gt;<sp/>a<sp/>=<sp/>ReturnNew&lt;TenArgConstructorClass&gt;(</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1000000000,<sp/>200000000,<sp/>30000000,<sp/>4000000,<sp/>500000,<sp/>60000,<sp/>7000,<sp/>800,<sp/>90,</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>TenArgConstructorClass*<sp/>c<sp/>=<sp/>a.Perform(std::make_tuple());</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1234567890,<sp/>c-&gt;value_);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal">std::unique_ptr&lt;int&gt;<sp/>UniquePtrSource()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;int&gt;(19);<sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal">std::vector&lt;std::unique_ptr&lt;int&gt;&gt;<sp/>VectorUniquePtrSource()<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;int&gt;&gt;<sp/>out;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>out.emplace_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(7));</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal">TEST(MockMethodTest,<sp/>CanReturnMoveOnlyValue_Return)<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>i(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(19));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>MakeUnique()).WillOnce(Return(ByMove(std::move(i))));</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>MakeVectorUnique())</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(ByMove(VectorUniquePtrSource())));</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/>Derived*<sp/>d<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Derived;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>MakeUniqueBase())</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(ByMove(std::unique_ptr&lt;Derived&gt;(d))));</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>result1<sp/>=<sp/>mock.MakeUnique();</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>EXPECT_EQ(19,<sp/>*result1);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;int&gt;&gt;<sp/>vresult<sp/>=<sp/>mock.MakeVectorUnique();</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1u,<sp/>vresult.size());</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>EXPECT_NE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>vresult[0]);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>*vresult[0]);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Base&gt;<sp/>result2<sp/>=<sp/>mock.MakeUniqueBase();</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>EXPECT_EQ(d,<sp/>result2.get());</highlight></codeline>
<codeline lineno="1787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal">TEST(MockMethodTest,<sp/>CanReturnMoveOnlyValue_DoAllReturn)<sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>testing::MockFunction&lt;void()&gt;<sp/>mock_function;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>i(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(19));</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_function,<sp/>Call());</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>MakeUnique())</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(InvokeWithoutArgs(&amp;mock_function,</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;testing::MockFunction&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;::Call),</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(ByMove(std::move(i)))));</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>result1<sp/>=<sp/>mock.MakeUnique();</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>EXPECT_EQ(19,<sp/>*result1);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal">TEST(MockMethodTest,<sp/>CanReturnMoveOnlyValue_Invoke)<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>DefaultValue&lt;std::unique_ptr&lt;int&gt;&gt;::SetFactory(</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;int&gt;(42);<sp/>});</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>*mock.MakeUnique());</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>MakeUnique()).WillRepeatedly(Invoke(UniquePtrSource));</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>MakeVectorUnique())</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(Invoke(VectorUniquePtrSource));</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>result1<sp/>=<sp/>mock.MakeUnique();</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>EXPECT_EQ(19,<sp/>*result1);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>result2<sp/>=<sp/>mock.MakeUnique();</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/>EXPECT_EQ(19,<sp/>*result2);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>EXPECT_NE(result1,<sp/>result2);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;int&gt;&gt;<sp/>vresult<sp/>=<sp/>mock.MakeVectorUnique();</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1u,<sp/>vresult.size());</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>EXPECT_NE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>vresult[0]);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>*vresult[0]);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal">TEST(MockMethodTest,<sp/>CanTakeMoveOnlyValue)<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>MockClass<sp/>mock;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;int&gt;(i);<sp/>};</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>TakeUnique(_)).WillRepeatedly([](std::unique_ptr&lt;int&gt;<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*i;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoAll()<sp/>does<sp/>not<sp/>compile,<sp/>since<sp/>it<sp/>would<sp/>move<sp/>from<sp/>its<sp/>arguments<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_CALL(mock,<sp/>TakeUnique(_,<sp/>_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(DoAll(Invoke([](std::unique_ptr&lt;int&gt;<sp/>j)<sp/>{}),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Return(1)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>TakeUnique(testing::Pointee(7)))</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(-7))</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.RetiresOnSaturation();</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>TakeUnique(testing::IsNull()))</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(-1))</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.RetiresOnSaturation();</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>mock.TakeUnique(make(5)));</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-7,<sp/>mock.TakeUnique(make(7)));</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>mock.TakeUnique(make(7)));</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>mock.TakeUnique(make(7)));</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-1,<sp/>mock.TakeUnique({}));</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>arguments<sp/>are<sp/>moved,<sp/>some<sp/>passed<sp/>by<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lvalue<sp/>=<sp/>make(6);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>TakeUnique(_,<sp/>_))</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;int&gt;&amp;<sp/>i,<sp/>std::unique_ptr&lt;int&gt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*i<sp/>*<sp/>*j;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>mock.TakeUnique(lvalue,<sp/>make(7)));</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>unique_ptr<sp/>can<sp/>be<sp/>saved<sp/>by<sp/>the<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>saved;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>TakeUnique(_)).WillOnce([&amp;saved](std::unique_ptr&lt;int&gt;<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>std::move(i);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.TakeUnique(make(42)));</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>*saved);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>use<sp/>callables<sp/>with<sp/>an<sp/>&amp;&amp;-qualified<sp/>call<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>WillOnce,<sp/>since<sp/>they<sp/>will<sp/>be<sp/>called<sp/>only<sp/>once.<sp/>This<sp/>allows<sp/>actions<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contain<sp/>and<sp/>manipulate<sp/>move-only<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal">TEST(MockMethodTest,<sp/>ActionHasRvalueRefQualifiedCallOperator)<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Return17<sp/>{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;<sp/>}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Action<sp/>is<sp/>directly<sp/>compatible<sp/>with<sp/>mocked<sp/>function<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;int()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(Return17());</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Action<sp/>doesn&apos;t<sp/>want<sp/>mocked<sp/>function<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(Return17());</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()(0));</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case:<sp/>if<sp/>an<sp/>action<sp/>has<sp/>both<sp/>a<sp/>const-qualified<sp/>and<sp/>an<sp/>&amp;&amp;-qualified<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator,<sp/>there<sp/>should<sp/>be<sp/>no<sp/>&quot;ambiguous<sp/>call&quot;<sp/>errors.<sp/>The<sp/>&amp;&amp;-qualified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator<sp/>should<sp/>be<sp/>used<sp/>by<sp/>WillOnce<sp/>(since<sp/>it<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>retain<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>action<sp/>beyond<sp/>one<sp/>call),<sp/>and<sp/>the<sp/>const-qualified<sp/>one<sp/>by<sp/>WillRepeatedly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal">TEST(MockMethodTest,<sp/>ActionHasMultipleCallOperators)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ReturnInt<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;<sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>const&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>19;<sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Directly<sp/>compatible<sp/>with<sp/>mocked<sp/>function<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;int()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(ReturnInt()).WillRepeatedly(ReturnInt());</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(19,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(19,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignores<sp/>function<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(ReturnInt()).WillRepeatedly(ReturnInt());</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()(0));</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(19,<sp/>mock.AsStdFunction()(0));</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(19,<sp/>mock.AsStdFunction()(0));</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WillOnce<sp/>should<sp/>have<sp/>no<sp/>problem<sp/>coping<sp/>with<sp/>a<sp/>move-only<sp/>action,<sp/>whether<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&amp;&amp;-qualified<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal">TEST(MockMethodTest,<sp/>MoveOnlyAction)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&amp;&amp;-qualified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Return17<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return17()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return17(Return17&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return17(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Return17&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return17<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Return17&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;<sp/>}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;int()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(Return17());</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>&amp;&amp;-qualified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Return17<sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return17()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return17(Return17&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return17(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Return17&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Return17<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Return17&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;<sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>MockFunction&lt;int()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(Return17());</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>use<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>a<sp/>value<sp/>with<sp/>a<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>that<sp/>doesn&apos;t,<sp/>both<sp/>through<sp/>WillOnce<sp/>and<sp/>WillRepeatedly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal">TEST(MockMethodTest,<sp/>ActionReturnsIgnoredValue)<sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ReturnInt<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>MockFunction&lt;void()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(ReturnInt()).WillRepeatedly(ReturnInt());</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/>mock.AsStdFunction()();</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>mock.AsStdFunction()();</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Despite<sp/>the<sp/>fanciness<sp/>around<sp/>move-only<sp/>actions<sp/>and<sp/>so<sp/>on,<sp/>it<sp/>should<sp/>still<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possible<sp/>to<sp/>hand<sp/>an<sp/>lvalue<sp/>reference<sp/>to<sp/>a<sp/>copyable<sp/>action<sp/>to<sp/>WillOnce.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal">TEST(MockMethodTest,<sp/>WillOnceCanAcceptLvalueReference)<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/>MockFunction&lt;int()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>action<sp/>=<sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;<sp/>};</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call).WillOnce(action);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="1985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>callable<sp/>that<sp/>doesn&apos;t<sp/>use<sp/>SFINAE<sp/>to<sp/>restrict<sp/>its<sp/>call<sp/>operator&apos;s<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set,<sp/>but<sp/>is<sp/>still<sp/>picky<sp/>about<sp/>which<sp/>arguments<sp/>it<sp/>will<sp/>accept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StaticAssertSingleArgument<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CheckArgs()<sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>=<sp/>CheckArgs&lt;Args...&gt;()&gt;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WillOnce<sp/>and<sp/>WillRepeatedly<sp/>should<sp/>both<sp/>work<sp/>fine<sp/>with<sp/>naïve<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>actions<sp/>that<sp/>don&apos;t<sp/>use<sp/>SFINAE<sp/>to<sp/>limit<sp/>the<sp/>overload<sp/>set<sp/>for<sp/>their<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator.<sp/>If<sp/>they<sp/>are<sp/>compatible<sp/>with<sp/>the<sp/>actual<sp/>mocked<sp/>signature,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shouldn&apos;t<sp/>probe<sp/>them<sp/>with<sp/>no<sp/>arguments<sp/>and<sp/>trip<sp/>a<sp/>static_assert.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal">TEST(MockMethodTest,<sp/>ActionSwallowsAllArguments)<sp/>{</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>MockFunction&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(StaticAssertSingleArgument{})</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(StaticAssertSingleArgument{});</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()(0));</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()(0));</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ActionWithTemplatedConversionOperators<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>OnceAction&lt;int(Args...)&gt;()<sp/>&amp;&amp;<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>17;<sp/>};</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Action&lt;int(Args...)&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>19;<sp/>};</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>fine<sp/>to<sp/>hand<sp/>both<sp/>WillOnce<sp/>and<sp/>WillRepeatedly<sp/>a<sp/>function<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>templated<sp/>conversion<sp/>operators<sp/>to<sp/>OnceAction<sp/>and<sp/>Action.<sp/>WillOnce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>prefer<sp/>the<sp/>OnceAction<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal">TEST(MockMethodTest,<sp/>ActionHasTemplatedConversionOperators)<sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>MockFunction&lt;int()&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Call)</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ActionWithTemplatedConversionOperators{})</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(ActionWithTemplatedConversionOperators{});</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/>EXPECT_EQ(17,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/>EXPECT_EQ(19,<sp/>mock.AsStdFunction()());</highlight></codeline>
<codeline lineno="2039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>std::function<sp/>based<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Add(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>ref,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ptr)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>val<sp/>+<sp/>ref<sp/>+<sp/>*ptr;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/>ref<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>43;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Deref(std::unique_ptr&lt;int&gt;<sp/>ptr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr;<sp/>}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Double<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>T<sp/>operator()(T<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal">std::unique_ptr&lt;int&gt;<sp/>UniqueInt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;int&gt;(i);<sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal">TEST(FunctorActionTest,<sp/>ActionFromFunction)<sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=<sp/>&amp;Add;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1,<sp/>y<sp/>=<sp/>2,<sp/>z<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a.Perform(std::forward_as_tuple(x,<sp/>y,<sp/>&amp;z)));</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>y);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/>EXPECT_EQ(43,<sp/>z);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>Action&lt;int(std::unique_ptr&lt;int&gt;)&gt;<sp/>a1<sp/>=<sp/>&amp;Deref;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>a1.Perform(std::make_tuple(UniqueInt(7))));</highlight></codeline>
<codeline lineno="2070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal">TEST(FunctorActionTest,<sp/>ActionFromLambda)<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>[](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>?<sp/>i<sp/>:<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5)));</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a1.Perform(std::make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>5)));</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;int&gt;<sp/>saved;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/>Action&lt;void(std::unique_ptr&lt;int&gt;)&gt;<sp/>a2<sp/>=<sp/>[&amp;saved](std::unique_ptr&lt;int&gt;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>std::move(p);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>a2.Perform(std::make_tuple(UniqueInt(5)));</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*saved);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal">TEST(FunctorActionTest,<sp/>PolymorphicFunctor)<sp/>{</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>ai<sp/>=<sp/>Double();</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>ai.Perform(std::make_tuple(1)));</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/>Action&lt;double(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;<sp/>ad<sp/>=<sp/>Double();<sp/><sp/></highlight><highlight class="comment">//<sp/>Double?<sp/>Double<sp/>double!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3.0,<sp/>ad.Perform(std::make_tuple(1.5)));</highlight></codeline>
<codeline lineno="2090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal">TEST(FunctorActionTest,<sp/>TypeConversion)<sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Numeric<sp/>promotions<sp/>are<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;bool(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>a1<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;<sp/>1;<sp/>};</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;<sp/>a2<sp/>=<sp/>Action&lt;int(bool)&gt;(a1);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(std::make_tuple(42)));</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a2.Perform(std::make_tuple(42)));</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implicit<sp/>constructors<sp/>are<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;bool(std::string)&gt;<sp/>s1<sp/>=<sp/>[](std::string<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!s.empty();<sp/>};</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>s2<sp/>=<sp/>Action&lt;int(const<sp/>char*)&gt;(s1);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>s2.Perform(std::make_tuple(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>s2.Perform(std::make_tuple(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>between<sp/>the<sp/>lambda<sp/>and<sp/>the<sp/>action<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;bool(std::string)&gt;<sp/>x1<sp/>=<sp/>[](Unused)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>42;<sp/>};</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Action&lt;bool(std::string)&gt;<sp/>x2<sp/>=<sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>42;<sp/>};</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(x1.Perform(std::make_tuple(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(x2.Perform(std::make_tuple(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>decay<sp/>occurs<sp/>where<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/>std::function&lt;int()&gt;<sp/>f<sp/>=<sp/>[]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>7;<sp/>};</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>d<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>d.Perform(std::make_tuple(1)));</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>creation<sp/>of<sp/>an<sp/>empty<sp/>action<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>Action&lt;void(int)&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal">TEST(FunctorActionTest,<sp/>UnusedArguments)<sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>users<sp/>can<sp/>ignore<sp/>uninteresting<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/>Action&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)&gt;<sp/>a<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>Unused,<sp/>Unused)<sp/>{</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2<sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>std::tuple&lt;int,<sp/>double,<sp/>double&gt;<sp/>dummy<sp/>=<sp/>std::make_tuple(3,<sp/>7.3,<sp/>9.44);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a.Perform(dummy));</highlight></codeline>
<codeline lineno="2128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>basic<sp/>built-in<sp/>actions<sp/>work<sp/>with<sp/>move-only<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal">TEST(MoveOnlyArgumentsTest,<sp/>ReturningActions)<sp/>{</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/>Action&lt;int(std::unique_ptr&lt;int&gt;)&gt;<sp/>a<sp/>=<sp/>Return(1);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>testing::WithoutArgs([]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>7;<sp/>});</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>a.Perform(std::make_tuple(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>Action&lt;void(std::unique_ptr&lt;int&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&gt;<sp/>a2<sp/>=<sp/>testing::SetArgPointee&lt;1&gt;(3);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/>a2.Perform(std::make_tuple(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;x));</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/>EXPECT_EQ(x,<sp/>3);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal">ACTION(ReturnArity)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple_size&lt;args_type&gt;::value;<sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal">TEST(ActionMacro,<sp/>LargeArity)<sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/><ref refid="classtesting_1_1Action" kindref="compound">testing::Action</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;(ReturnArity()).Perform(std::make_tuple(0)));</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>10,</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1Action" kindref="compound">testing::Action</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;(</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnArity())</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Perform(std::make_tuple(0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9)));</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>20,</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1Action" kindref="compound">testing::Action</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;(</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnArity())</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Perform(std::make_tuple(0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,<sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19)));</highlight></codeline>
<codeline lineno="2161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER<sp/>==<sp/>1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4800</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal">GTEST_DISABLE_MSC_WARNINGS_POP_()<sp/><sp/></highlight><highlight class="comment">//<sp/>4100<sp/>4503</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc"/>
  </compounddef>
</doxygen>
