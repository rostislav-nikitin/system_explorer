<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="md_build__deps_googletest_src_docs_advanced" kind="page">
    <compoundname>md_build__deps_googletest_src_docs_advanced</compoundname>
    <title>Advanced GoogleTest Topics</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md11">
<title>Introduction</title>
<para>Now that you have read the <ref refid="md_build__deps_googletest_src_docs_primer" kindref="compound">GoogleTest Primer</ref> and learned how to write tests using GoogleTest, it&apos;s time to learn some new tricks. This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md12">
<title>More Assertions</title>
<para>This section covers some less frequently used, but still significant, assertions.</para>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md13">
<title>Explicit Success and Failure</title>
<para>See <ulink url="reference/assertions.md#success-failure">Explicit Success and Failure</ulink> in the Assertions Reference.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md14">
<title>Exception Assertions</title>
<para>See <ulink url="reference/assertions.md#exceptions">Exception Assertions</ulink> in the Assertions Reference.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md15">
<title>Predicate Assertions for Better Error Messages</title>
<para>Even though GoogleTest has a rich set of assertions, they can never be complete, as it&apos;s impossible (nor a good idea) to anticipate all scenarios a user might run into. Therefore, sometimes a user has to use <computeroutput>EXPECT_TRUE()</computeroutput> to check a complex expression, for lack of a better macro. This has the problem of not showing you the values of the parts of the expression, making it hard to understand what went wrong. As a workaround, some users choose to construct the failure message by themselves, streaming it into <computeroutput>EXPECT_TRUE()</computeroutput>. However, this is awkward especially when the expression has side-effects or is expensive to evaluate.</para>
<para>GoogleTest gives you three different options to solve this problem:</para>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md16">
<title>Using an Existing Boolean Function</title>
<para>If you already have a function or functor that returns <computeroutput>bool</computeroutput> (or a type that can be implicitly converted to <computeroutput>bool</computeroutput>), you can use it in a <emphasis>predicate assertion</emphasis> to get the function arguments printed for free. See <ulink url="reference/assertions.md#EXPECT_PRED"><computeroutput>EXPECT_PRED*</computeroutput></ulink> in the Assertions Reference for details.</para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md17">
<title>Using a Function That Returns an AssertionResult</title>
<para>While <computeroutput>EXPECT_PRED*()</computeroutput> and friends are handy for a quick job, the syntax is not satisfactory: you have to use different macros for different arities, and it feels more like Lisp than C++. The <computeroutput>::testing::AssertionResult</computeroutput> class solves this problem.</para>
<para>An <computeroutput>AssertionResult</computeroutput> object represents the result of an assertion (whether it&apos;s a success or a failure, and an associated message). You can create an <computeroutput>AssertionResult</computeroutput> using one of these factory functions:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>testing<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>an<sp/>AssertionResult<sp/>object<sp/>to<sp/>indicate<sp/>that<sp/>an<sp/>assertion<sp/>has</highlight></codeline>
<codeline><highlight class="normal">//<sp/>succeeded.</highlight></codeline>
<codeline><highlight class="normal">AssertionResult<sp/>AssertionSuccess();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>an<sp/>AssertionResult<sp/>object<sp/>to<sp/>indicate<sp/>that<sp/>an<sp/>assertion<sp/>has</highlight></codeline>
<codeline><highlight class="normal">//<sp/>failed.</highlight></codeline>
<codeline><highlight class="normal">AssertionResult<sp/>AssertionFailure();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>You can then use the <computeroutput>&lt;&lt;</computeroutput> operator to stream messages to the <computeroutput>AssertionResult</computeroutput> object.</para>
<para>To provide more readable messages in Boolean assertions (e.g. <computeroutput>EXPECT_TRUE()</computeroutput>), write a predicate function that returns <computeroutput>AssertionResult</computeroutput> instead of <computeroutput>bool</computeroutput>. For example, if you define <computeroutput>IsEven()</computeroutput> as:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">testing::AssertionResult<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionSuccess();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>odd&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>instead of:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(n<sp/>%<sp/>2)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>the failed assertion <computeroutput>EXPECT_TRUE(IsEven(Fib(4)))</computeroutput> will print:</para>
<para><programlisting filename=".none"><codeline><highlight class="normal">Value<sp/>of:<sp/>IsEven(Fib(4))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>false<sp/>(3<sp/>is<sp/>odd)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>true</highlight></codeline>
</programlisting></para>
<para>instead of a more opaque</para>
<para><programlisting filename=".none"><codeline><highlight class="normal">Value<sp/>of:<sp/>IsEven(Fib(4))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>true</highlight></codeline>
</programlisting></para>
<para>If you want informative messages in <computeroutput>EXPECT_FALSE</computeroutput> and <computeroutput>ASSERT_FALSE</computeroutput> as well (one third of Boolean assertions in the Google code base are negative ones), and are fine with making the predicate slower in the success case, you can supply a success message:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">testing::AssertionResult<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionSuccess()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>even&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>odd&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Then the statement <computeroutput>EXPECT_FALSE(IsEven(Fib(6)))</computeroutput> will print</para>
<para><programlisting filename=".none"><codeline><highlight class="normal">Value<sp/>of:<sp/>IsEven(Fib(6))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Actual:<sp/>true<sp/>(8<sp/>is<sp/>even)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>false</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md18">
<title>Using a Predicate-Formatter</title>
<para>If you find the default message generated by <ulink url="reference/assertions.md#EXPECT_PRED"><computeroutput>EXPECT_PRED*</computeroutput></ulink> and <ulink url="reference/assertions.md#EXPECT_TRUE"><computeroutput>EXPECT_TRUE</computeroutput></ulink> unsatisfactory, or some arguments to your predicate do not support streaming to <computeroutput>ostream</computeroutput>, you can instead use <emphasis>predicate-formatter assertions</emphasis> to <emphasis>fully</emphasis> customize how the message is formatted. See <ulink url="reference/assertions.md#EXPECT_PRED_FORMAT"><computeroutput>EXPECT_PRED_FORMAT*</computeroutput></ulink> in the Assertions Reference for details.</para>
</sect3>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md19">
<title>Floating-Point Comparison</title>
<para>See <ulink url="reference/assertions.md#floating-point">Floating-Point Comparison</ulink> in the Assertions Reference.</para>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md20">
<title>Floating-Point Predicate-Format Functions</title>
<para>Some floating-point operations are useful, but not that often used. In order to avoid an explosion of new macros, we provide them as predicate-format functions that can be used in the predicate assertion macro <ulink url="reference/assertions.md#EXPECT_PRED_FORMAT"><computeroutput>EXPECT_PRED_FORMAT2</computeroutput></ulink>, for example:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::FloatLE;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::DoubleLE;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">EXPECT_PRED_FORMAT2(FloatLE,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_PRED_FORMAT2(DoubleLE,<sp/>val1,<sp/>val2);</highlight></codeline>
</programlisting></para>
<para>The above code verifies that <computeroutput>val1</computeroutput> is less than, or approximately equal to, <computeroutput>val2</computeroutput>.</para>
</sect3>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md21">
<title>Asserting Using gMock Matchers</title>
<para>See <ulink url="reference/assertions.md#EXPECT_THAT"><computeroutput>EXPECT_THAT</computeroutput></ulink> in the Assertions Reference.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md22">
<title>More String Assertions</title>
<para>(Please read the previous section first if you haven&apos;t.)</para>
<para>You can use the gMock <ulink url="reference/matchers.md#string-matchers">string matchers</ulink> with <ulink url="reference/assertions.md#EXPECT_THAT"><computeroutput>EXPECT_THAT</computeroutput></ulink> to do more string comparison tricks (sub-string, prefix, suffix, regular expression, and etc). For example,</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::HasSubstr;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MatchesRegex;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_THAT(foo_string,<sp/>HasSubstr(&quot;needle&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_THAT(bar_string,<sp/>MatchesRegex(&quot;\\w*\\d+&quot;));</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md23">
<title>Windows HRESULT assertions</title>
<para>See <ulink url="reference/assertions.md#HRESULT">Windows HRESULT Assertions</ulink> in the Assertions Reference.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md24">
<title>Type Assertions</title>
<para>You can call the function</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">::testing::StaticAssertTypeEq&lt;T1,<sp/>T2&gt;();</highlight></codeline>
</programlisting></para>
<para>to assert that types <computeroutput>T1</computeroutput> and <computeroutput>T2</computeroutput> are the same. The function does nothing if the assertion is satisfied. If the types are different, the function call will fail to compile, the compiler error message will say that <computeroutput>T1 and T2 are not the same type</computeroutput> and most likely (depending on the compiler) show you the actual values of <computeroutput>T1</computeroutput> and <computeroutput>T2</computeroutput>. This is mainly useful inside template code.</para>
<para><bold>Caveat</bold>: When used inside a member function of a class template or a function template, <computeroutput>StaticAssertTypeEq&lt;T1, T2&gt;()</computeroutput> is effective only if the function is instantiated. For example, given:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>Bar()<sp/>{<sp/>testing::StaticAssertTypeEq&lt;int,<sp/>T&gt;();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>the code:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Test1()<sp/>{<sp/>Foo&lt;bool&gt;<sp/>foo;<sp/>}</highlight></codeline>
</programlisting></para>
<para>will not generate a compiler error, as <computeroutput>Foo&lt;bool&gt;::Bar()</computeroutput> is never actually instantiated. Instead, you need:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Test2()<sp/>{<sp/>Foo&lt;bool&gt;<sp/>foo;<sp/>foo.Bar();<sp/>}</highlight></codeline>
</programlisting></para>
<para>to cause a compiler error.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md25">
<title>Assertion Placement</title>
<para>You can use assertions in any C++ function. In particular, it doesn&apos;t have to be a method of the test fixture class. The one constraint is that assertions that generate a fatal failure (<computeroutput>FAIL*</computeroutput> and <computeroutput>ASSERT_*</computeroutput>) can only be used in void-returning functions. This is a consequence of Google&apos;s not using exceptions. By placing it in a non-void function you&apos;ll get a confusing compile error like <computeroutput>&quot;error: void value not ignored as it ought to be&quot;</computeroutput> or <lsquo/>&quot;cannot
initialize return object of type &apos;bool&amp;rsquo; with an rvalue of type &apos;void&apos;&quot;` or `&quot;error: no viable conversion from &apos;void&apos; to &apos;string&apos;&quot;`.</para>
<para>If you need to use fatal assertions in a function that returns non-void, one option is to make the function return the value in an out parameter instead. For example, you can rewrite <computeroutput>T2 Foo(T1 x)</computeroutput> to <computeroutput>void Foo(T1 x, T2* result)</computeroutput>. You need to make sure that <computeroutput>*result</computeroutput> contains some sensible value even when the function returns prematurely. As the function now returns <computeroutput>void</computeroutput>, you can use any assertion inside of it.</para>
<para>If changing the function&apos;s type is not an option, you should just use assertions that generate non-fatal failures, such as <computeroutput>ADD_FAILURE*</computeroutput> and <computeroutput>EXPECT_*</computeroutput>.</para>
<para>{: .callout .note} NOTE: Constructors and destructors are not considered void-returning functions, according to the C++ language specification, and so you may not use fatal assertions in them; you&apos;ll get a compilation error if you try. Instead, either call <computeroutput>abort</computeroutput> and crash the entire test executable, or put the fatal assertion in a <computeroutput>SetUp</computeroutput>/<computeroutput>TearDown</computeroutput> function; see <ulink url="faq.md#CtorVsSetUp">constructor/destructor vs. <computeroutput>SetUp</computeroutput>/<computeroutput>TearDown</computeroutput></ulink></para>
<para>{: .callout .warning} WARNING: A fatal assertion in a helper function (private void-returning method) called from a constructor or destructor does not terminate the current test, as your intuition might suggest: it merely returns from the constructor or destructor early, possibly leaving your object in a partially-constructed or partially-destructed state! You almost certainly want to <computeroutput>abort</computeroutput> or use <computeroutput>SetUp</computeroutput>/<computeroutput>TearDown</computeroutput> instead.</para>
</sect2>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md26">
<title>Skipping test execution</title>
<para>Related to the assertions <computeroutput>SUCCEED()</computeroutput> and <computeroutput>FAIL()</computeroutput>, you can prevent further test execution at runtime with the <computeroutput>GTEST_SKIP()</computeroutput> macro. This is useful when you need to check for preconditions of the system under test during runtime and skip tests in a meaningful way.</para>
<para><computeroutput>GTEST_SKIP()</computeroutput> can be used in individual test cases or in the <computeroutput>SetUp()</computeroutput> methods of classes derived from either <computeroutput><ref refid="classtesting_1_1Environment" kindref="compound">testing::Environment</ref></computeroutput> or <computeroutput><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref></computeroutput>. For example:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">TEST(SkipTest,<sp/>DoesSkip)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GTEST_SKIP()<sp/>&lt;&lt;<sp/>&quot;Skipping<sp/>single<sp/>test&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>1);<sp/><sp/>//<sp/>Won&apos;t<sp/>fail;<sp/>it<sp/>won&apos;t<sp/>be<sp/>executed</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>SkipFixture<sp/>:<sp/>public<sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_SKIP()<sp/>&lt;&lt;<sp/>&quot;Skipping<sp/>all<sp/>tests<sp/>for<sp/>this<sp/>fixture&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>for<sp/>SkipFixture<sp/>won&apos;t<sp/>be<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal">TEST_F(SkipFixture,<sp/>SkipsOneTest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>7);<sp/><sp/>//<sp/>Won&apos;t<sp/>fail</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>As with assertion macros, you can stream a custom message into <computeroutput>GTEST_SKIP()</computeroutput>.</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md27">
<title>Teaching GoogleTest How to Print Your Values</title>
<para>When a test assertion such as <computeroutput>EXPECT_EQ</computeroutput> fails, GoogleTest prints the argument values to help you debug. It does this using a user-extensible value printer.</para>
<para>This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the <computeroutput>&lt;&lt;</computeroutput> operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out.</para>
<para>As mentioned earlier, the printer is <emphasis>extensible</emphasis>. That means you can teach it to do a better job at printing your particular type than to dump the bytes. To do that, define an <computeroutput>AbslStringify()</computeroutput> overload as a <computeroutput>friend</computeroutput> function template for your type:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Point<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>GoogleTest<sp/>to<sp/>be<sp/>able<sp/>to<sp/>print<sp/>instances<sp/>of<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Provide<sp/>a<sp/>friend<sp/>overload.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sink&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AbslStringify(Sink&amp;<sp/>sink,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>point)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>absl::Format(&amp;sink,<sp/></highlight><highlight class="stringliteral">&quot;(%d,<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>point.x,<sp/>point.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>can&apos;t<sp/>declare<sp/>the<sp/>function<sp/>in<sp/>the<sp/>class<sp/>it&apos;s<sp/>important<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>AbslStringify<sp/>overload<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>SAME<sp/>namespace<sp/>that<sp/>defines<sp/>Point.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++&apos;s<sp/>look-up<sp/>rules<sp/>rely<sp/>on<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>EnumWithStringify<sp/>{<sp/>kMany<sp/>=<sp/>0,<sp/>kChoices<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sink&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AbslStringify(Sink&amp;<sp/>sink,<sp/>EnumWithStringify<sp/>e)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>absl::Format(&amp;sink,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>e<sp/>==<sp/>EnumWithStringify::kMany<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Many&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Choices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>foo</highlight></codeline>
</programlisting></para>
<para>{: .callout .note} Note: <computeroutput>AbslStringify()</computeroutput> utilizes a generic &quot;sink&quot; buffer to construct its string. For more information about supported operations on <computeroutput>AbslStringify()</computeroutput>&apos;s sink, see go/abslstringify.</para>
<para><computeroutput>AbslStringify()</computeroutput> can also use <computeroutput>absl::StrFormat</computeroutput>&apos;s catch-all <computeroutput>v</computeroutput> type specifier within its own format strings to perform type deduction. <computeroutput>Point</computeroutput> above could be formatted as <computeroutput>&quot;(%v, %v)&quot;</computeroutput> for example, and deduce the <computeroutput>int</computeroutput> values as <computeroutput>d</computeroutput>.</para>
<para>Sometimes, <computeroutput>AbslStringify()</computeroutput> might not be an option: your team may wish to print types with extra debugging information for testing purposes only. If so, you can instead define a <computeroutput>PrintTo()</computeroutput> function like this:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ostream&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>foo<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Point<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>friend<sp/>void<sp/>PrintTo(const<sp/>Point&amp;<sp/>point,<sp/>std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>point.x<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>point.y<sp/>&lt;&lt;<sp/>&quot;)&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>y;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>you<sp/>can&apos;t<sp/>declare<sp/>the<sp/>function<sp/>in<sp/>the<sp/>class<sp/>it&apos;s<sp/>important<sp/>that<sp/>PrintTo()</highlight></codeline>
<codeline><highlight class="normal">//<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>SAME<sp/>namespace<sp/>that<sp/>defines<sp/>Point.<sp/><sp/>C++&apos;s<sp/>look-up<sp/>rules</highlight></codeline>
<codeline><highlight class="normal">//<sp/>rely<sp/>on<sp/>that.</highlight></codeline>
<codeline><highlight class="normal">void<sp/>PrintTo(const<sp/>Point&amp;<sp/>point,<sp/>std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>point.x<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>point.y<sp/>&lt;&lt;<sp/>&quot;)&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>foo</highlight></codeline>
</programlisting></para>
<para>If you have defined both <computeroutput>AbslStringify()</computeroutput> and <computeroutput>PrintTo()</computeroutput>, the latter will be used by GoogleTest. This allows you to customize how the value appears in GoogleTest&apos;s output without affecting code that relies on the behavior of <computeroutput>AbslStringify()</computeroutput>.</para>
<para>If you have an existing <computeroutput>&lt;&lt;</computeroutput> operator and would like to define an <computeroutput>AbslStringify()</computeroutput>, the latter will be used for GoogleTest printing.</para>
<para>If you want to print a value <computeroutput>x</computeroutput> using GoogleTest&apos;s value printer yourself, just call <computeroutput>::testing::PrintToString(x)</computeroutput>, which returns an <computeroutput>std::string</computeroutput>:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">vector&lt;pair&lt;Point,<sp/>int&gt;<sp/>&gt;<sp/>point_ints<sp/>=<sp/>GetPointIntVector();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EXPECT_TRUE(IsCorrectPointIntVector(point_ints))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;point_ints<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>testing::PrintToString(point_ints);</highlight></codeline>
</programlisting></para>
<para>For more details regarding <computeroutput>AbslStringify()</computeroutput> and its integration with other libraries, see go/abslstringify.</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md28">
<title>Death Tests</title>
<para>In many applications, there are assertions that can cause application failure if a condition is not met. These consistency checks, which ensure that the program is in a known good state, are there to fail at the earliest possible time after some program state is corrupted. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.</para>
<para>Since these precondition checks cause the processes to die, we call such tests <emphasis>death tests</emphasis>. More generally, any test that checks that a program terminates (except by throwing an exception) in an expected fashion is also a death test.</para>
<para>Note that if a piece of code throws an exception, we don&apos;t consider it &quot;death&quot; for the purpose of death tests, as the caller of the code could catch the exception and avoid the crash. If you want to verify exceptions thrown by your code, see Exception Assertions.</para>
<para>If you want to test <computeroutput>EXPECT_*()/ASSERT_*()</computeroutput> failures in your test code, see "Catching" Failures.</para>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md29">
<title>How to Write a Death Test</title>
<para>GoogleTest provides assertion macros to support death tests. See <ulink url="reference/assertions.md#death">Death Assertions</ulink> in the Assertions Reference for details.</para>
<para>To write a death test, simply use one of the macros inside your test function. For example,</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>Foo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>death<sp/>test<sp/>uses<sp/>a<sp/>compound<sp/>statement.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Foo(&amp;n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/>&quot;Error<sp/>on<sp/>line<sp/>.*<sp/>of<sp/>Foo()&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>NormalExit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EXIT(NormalExit(),<sp/>testing::ExitedWithCode(0),<sp/>&quot;Success&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>KillProcess)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EXIT(KillProcess(),<sp/>testing::KilledBySignal(SIGKILL),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Sending<sp/>myself<sp/>unblockable<sp/>signal&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>verifies that:</para>
<para><itemizedlist>
<listitem><para>calling <computeroutput>Foo(5)</computeroutput> causes the process to die with the given error message,</para>
</listitem><listitem><para>calling <computeroutput>NormalExit()</computeroutput> causes the process to print <computeroutput>&quot;Success&quot;</computeroutput> to stderr and exit with exit code 0, and</para>
</listitem><listitem><para>calling <computeroutput>KillProcess()</computeroutput> kills the process with signal <computeroutput>SIGKILL</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>The test function body may contain other assertions and statements as well, if necessary.</para>
<para>Note that a death test only cares about three things:</para>
<para><orderedlist>
<listitem><para>does <computeroutput>statement</computeroutput> abort or exit the process?</para>
</listitem><listitem><para>(in the case of <computeroutput>ASSERT_EXIT</computeroutput> and <computeroutput>EXPECT_EXIT</computeroutput>) does the exit status satisfy <computeroutput>predicate</computeroutput>? Or (in the case of <computeroutput>ASSERT_DEATH</computeroutput> and <computeroutput>EXPECT_DEATH</computeroutput>) is the exit status non-zero? And</para>
</listitem><listitem><para>does the stderr output match <computeroutput>matcher</computeroutput>?</para>
</listitem></orderedlist>
</para>
<para>In particular, if <computeroutput>statement</computeroutput> generates an <computeroutput>ASSERT_*</computeroutput> or <computeroutput>EXPECT_*</computeroutput> failure, it will <bold>not</bold> cause the death test to fail, as GoogleTest assertions don&apos;t abort the process.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md30">
<title>Death Test Naming</title>
<para>{: .callout .important} IMPORTANT: We strongly recommend you to follow the convention of naming your <bold>test suite</bold> (not test) <computeroutput>*DeathTest</computeroutput> when it contains a death test, as demonstrated in the above example. The Death Tests And Threads section below explains why.</para>
<para>If a test fixture class is shared by normal tests and death tests, you can use <computeroutput>using</computeroutput> or <computeroutput>typedef</computeroutput> to introduce an alias for the fixture class and avoid duplicating its code:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>FooDeathTest<sp/>=<sp/>FooTest;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>DoesThis)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>normal<sp/>test</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooDeathTest,<sp/>DoesThat)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>death<sp/>test</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md31">
<title>Regular Expression Syntax</title>
<para>When built with Bazel and using Abseil, GoogleTest uses the <ulink url="https://github.com/google/re2/wiki/Syntax">RE2</ulink> syntax. Otherwise, for POSIX systems (Linux, Cygwin, Mac), GoogleTest uses the <ulink url="http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html#tag_09_04">POSIX extended regular expression</ulink> syntax. To learn about POSIX syntax, you may want to read this <ulink url="http://en.wikipedia.org/wiki/Regular_expression#POSIX_extended">Wikipedia entry</ulink>.</para>
<para>On Windows, GoogleTest uses its own simple regular expression implementation. It lacks many features. For example, we don&apos;t support union (<computeroutput>&quot;x|y&quot;</computeroutput>), grouping (<computeroutput>&quot;(xy)&quot;</computeroutput>), brackets (<computeroutput>&quot;[xy]&quot;</computeroutput>), and repetition count (<computeroutput>&quot;x{5,7}&quot;</computeroutput>), among others. Below is what we do support (<computeroutput>A</computeroutput> denotes a literal character, period (<computeroutput>.</computeroutput>), or a single <computeroutput>\\</computeroutput> escape sequence; <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> denote regular expressions.):</para>
<para><table rows="21" cols="2"><row>
<entry thead="yes"><para>Expression   </para>
</entry><entry thead="yes"><para>Meaning    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>c</computeroutput>   </para>
</entry><entry thead="no"><para>matches any literal character <computeroutput>c</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\d</computeroutput>   </para>
</entry><entry thead="no"><para>matches any decimal digit    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\D</computeroutput>   </para>
</entry><entry thead="no"><para>matches any character that&apos;s not a decimal digit    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\f</computeroutput>   </para>
</entry><entry thead="no"><para>matches <computeroutput>\f</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\n</computeroutput>   </para>
</entry><entry thead="no"><para>matches <computeroutput>\n</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\r</computeroutput>   </para>
</entry><entry thead="no"><para>matches <computeroutput>\r</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\s</computeroutput>   </para>
</entry><entry thead="no"><para>matches any ASCII whitespace, including <computeroutput>\n</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\S</computeroutput>   </para>
</entry><entry thead="no"><para>matches any character that&apos;s not a whitespace    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\t</computeroutput>   </para>
</entry><entry thead="no"><para>matches <computeroutput>\t</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\v</computeroutput>   </para>
</entry><entry thead="no"><para>matches <computeroutput>\v</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\w</computeroutput>   </para>
</entry><entry thead="no"><para>matches any letter, <computeroutput>_</computeroutput>, or decimal digit    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\W</computeroutput>   </para>
</entry><entry thead="no"><para>matches any character that <computeroutput>\\w</computeroutput> doesn&apos;t match    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\\c</computeroutput>   </para>
</entry><entry thead="no"><para>matches any literal character <computeroutput>c</computeroutput>, which must be a punctuation    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>.</computeroutput>   </para>
</entry><entry thead="no"><para>matches any single character except <computeroutput>\n</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>A?</computeroutput>   </para>
</entry><entry thead="no"><para>matches 0 or 1 occurrences of <computeroutput>A</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>A*</computeroutput>   </para>
</entry><entry thead="no"><para>matches 0 or many occurrences of <computeroutput>A</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>A+</computeroutput>   </para>
</entry><entry thead="no"><para>matches 1 or many occurrences of <computeroutput>A</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>^</computeroutput>   </para>
</entry><entry thead="no"><para>matches the beginning of a string (not that of each line)    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>$</computeroutput>   </para>
</entry><entry thead="no"><para>matches the end of a string (not that of each line)    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>xy</computeroutput>   </para>
</entry><entry thead="no"><para>matches <computeroutput>x</computeroutput> followed by <computeroutput>y</computeroutput>   </para>
</entry></row>
</table>
</para>
<para>To help you determine which capability is available on your system, GoogleTest defines macros to govern which regular expression it is using. The macros are: <computeroutput>GTEST_USES_SIMPLE_RE=1</computeroutput> or <computeroutput>GTEST_USES_POSIX_RE=1</computeroutput>. If you want your death tests to work in all cases, you can either <computeroutput>#if</computeroutput> on these macros or use the more limited syntax only.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md32">
<title>How It Works</title>
<para>See <ulink url="reference/assertions.md#death">Death Assertions</ulink> in the Assertions Reference.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md33">
<title>Death Tests And Threads</title>
<para>The reason for the two death test styles has to do with thread safety. Due to well-known problems with forking in the presence of threads, death tests should be run in a single-threaded context. Sometimes, however, it isn&apos;t feasible to arrange that kind of environment. For example, statically-initialized modules may start threads before main is ever reached. Once threads have been created, it may be difficult or impossible to clean them up.</para>
<para>GoogleTest has three features intended to raise awareness of threading issues.</para>
<para><orderedlist>
<listitem><para>A warning is emitted if multiple threads are running when a death test is encountered.</para>
</listitem><listitem><para>Test suites with a name ending in &quot;DeathTest&quot; are run before all other tests.</para>
</listitem><listitem><para>It uses <computeroutput>clone()</computeroutput> instead of <computeroutput>fork()</computeroutput> to spawn the child process on Linux (<computeroutput>clone()</computeroutput> is not available on Cygwin and Mac), as <computeroutput>fork()</computeroutput> is more likely to cause the child to hang when the parent process has multiple threads.</para>
</listitem></orderedlist>
</para>
<para>It&apos;s perfectly fine to create threads inside a death test statement; they are executed in a separate process and cannot affect the parent.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md34">
<title>Death Test Styles</title>
<para>The &quot;threadsafe&quot; death test style was introduced in order to help mitigate the risks of testing in a possibly multithreaded environment. It trades increased test execution time (potentially dramatically so) for improved thread safety.</para>
<para>The automated testing framework does not set the style flag. You can choose a particular style of death tests by setting the flag programmatically:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">GTEST_FLAG_SET(death_test_style,<sp/>&quot;threadsafe&quot;);</highlight></codeline>
</programlisting></para>
<para>You can do this in <computeroutput>main()</computeroutput> to set the style for all death tests in the binary, or in individual tests. Recall that flags are saved before running each test and restored afterwards, so you need not do that yourself. For example:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/>&quot;fast&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>TestOne)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GTEST_FLAG_SET(death_test_style,<sp/>&quot;threadsafe&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>test<sp/>is<sp/>run<sp/>in<sp/>the<sp/>&quot;threadsafe&quot;<sp/>style:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH(ThisShouldDie(),<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>TestTwo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>test<sp/>is<sp/>run<sp/>in<sp/>the<sp/>&quot;fast&quot;<sp/>style:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH(ThisShouldDie(),<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md35">
<title>Caveats</title>
<para>The <computeroutput>statement</computeroutput> argument of <computeroutput>ASSERT_EXIT()</computeroutput> can be any valid C++ statement. If it leaves the current function via a <computeroutput>return</computeroutput> statement or by throwing an exception, the death test is considered to have failed. Some GoogleTest macros may return from the current function (e.g. <computeroutput>ASSERT_TRUE()</computeroutput>), so be sure to avoid them in <computeroutput>statement</computeroutput>.</para>
<para>Since <computeroutput>statement</computeroutput> runs in the child process, any in-memory side effect (e.g. modifying a variable, releasing memory, etc) it causes will <emphasis>not</emphasis> be observable in the parent process. In particular, if you release memory in a death test, your program will fail the heap check as the parent process will never see the memory reclaimed. To solve this problem, you can</para>
<para><orderedlist>
<listitem><para>try not to free memory in a death test;</para>
</listitem><listitem><para>free the memory again in the parent process; or</para>
</listitem><listitem><para>do not use the heap checker in your program.</para>
</listitem></orderedlist>
</para>
<para>Due to an implementation detail, you cannot place multiple death test assertions on the same line; otherwise, compilation will fail with an unobvious error message.</para>
<para>Despite the improved thread safety afforded by the &quot;threadsafe&quot; style of death test, thread problems such as deadlock are still possible in the presence of handlers registered with <computeroutput>pthread_atfork(3)</computeroutput>.</para>
</sect2>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md36">
<title>Using Assertions in Sub-routines</title>
<para>{: .callout .note} Note: If you want to put a series of test assertions in a subroutine to check for a complex condition, consider using <ulink url="gmock_cook_book.md#NewMatchers">a custom GMock matcher</ulink> instead. This lets you provide a more readable error message in case of failure and avoid all of the issues described below.</para>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md37">
<title>Adding Traces to Assertions</title>
<para>If a test sub-routine is called from several places, when an assertion inside it fails, it can be hard to tell which invocation of the sub-routine the failure is from. You can alleviate this problem using extra logging or custom failure messages, but that usually clutters up your tests. A better solution is to use the <computeroutput>SCOPED_TRACE</computeroutput> macro or the <computeroutput>ScopedTrace</computeroutput> utility:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">SCOPED_TRACE(message);</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">ScopedTrace<sp/>trace(&quot;file_path&quot;,<sp/>line_number,<sp/>message);</highlight></codeline>
</programlisting></para>
<para>where <computeroutput>message</computeroutput> can be anything streamable to <computeroutput>std::ostream</computeroutput>. <computeroutput>SCOPED_TRACE</computeroutput> macro will cause the current file name, line number, and the given message to be added in every failure message. <computeroutput>ScopedTrace</computeroutput> accepts explicit file name and line number in arguments, which is useful for writing test helpers. The effect will be undone when the control leaves the current lexical scope.</para>
<para>For example,</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">10:<sp/>void<sp/>Sub1(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">11:<sp/><sp/><sp/>EXPECT_EQ(Bar(n),<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">12:<sp/><sp/><sp/>EXPECT_EQ(Bar(n<sp/>+<sp/>1),<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">13:<sp/>}</highlight></codeline>
<codeline><highlight class="normal">14:</highlight></codeline>
<codeline><highlight class="normal">15:<sp/>TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">16:<sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">17:<sp/><sp/><sp/><sp/><sp/>SCOPED_TRACE(&quot;A&quot;);<sp/><sp/>//<sp/>This<sp/>trace<sp/>point<sp/>will<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline><highlight class="normal">18:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>every<sp/>failure<sp/>in<sp/>this<sp/>scope.</highlight></codeline>
<codeline><highlight class="normal">19:<sp/><sp/><sp/><sp/><sp/>Sub1(1);</highlight></codeline>
<codeline><highlight class="normal">20:<sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">21:<sp/><sp/><sp/>//<sp/>Now<sp/>it<sp/>won&apos;t.</highlight></codeline>
<codeline><highlight class="normal">22:<sp/><sp/><sp/>Sub1(9);</highlight></codeline>
<codeline><highlight class="normal">23:<sp/>}</highlight></codeline>
</programlisting></para>
<para>could result in messages like these:</para>
<para><programlisting filename=".none"><codeline><highlight class="normal">path/to/foo_test.cc:11:<sp/>Failure</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>Bar(n)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>2</highlight></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>trace:</highlight></codeline>
<codeline><highlight class="normal">path/to/foo_test.cc:17:<sp/>A</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">path/to/foo_test.cc:12:<sp/>Failure</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>Bar(n<sp/>+<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>3</highlight></codeline>
</programlisting></para>
<para>Without the trace, it would&apos;ve been difficult to know which invocation of <computeroutput>Sub1()</computeroutput> the two failures come from respectively. (You could add an extra message to each assertion in <computeroutput>Sub1()</computeroutput> to indicate the value of <computeroutput>n</computeroutput>, but that&apos;s tedious.)</para>
<para>Some tips on using <computeroutput>SCOPED_TRACE</computeroutput>:</para>
<para><orderedlist>
<listitem><para>With a suitable message, it&apos;s often enough to use <computeroutput>SCOPED_TRACE</computeroutput> at the beginning of a sub-routine, instead of at each call site.</para>
</listitem><listitem><para>When calling sub-routines inside a loop, make the loop iterator part of the message in <computeroutput>SCOPED_TRACE</computeroutput> such that you can know which iteration the failure is from.</para>
</listitem><listitem><para>Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don&apos;t have to choose a unique message for <computeroutput>SCOPED_TRACE</computeroutput>. You can simply use <computeroutput>&quot;&quot;</computeroutput>.</para>
</listitem><listitem><para>You can use <computeroutput>SCOPED_TRACE</computeroutput> in an inner scope when there is one in the outer scope. In this case, all active trace points will be included in the failure messages, in reverse order they are encountered.</para>
</listitem><listitem><para>The trace dump is clickable in Emacs - hit <computeroutput>return</computeroutput> on a line number and you&apos;ll be taken to that line in the source file!</para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md38">
<title>Propagating Fatal Failures</title>
<para>A common pitfall when using <computeroutput>ASSERT_*</computeroutput> and <computeroutput>FAIL*</computeroutput> is not understanding that when they fail they only abort the <emphasis>current function</emphasis>, not the entire test. For example, the following test will segfault:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Subroutine()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Generates<sp/>a<sp/>fatal<sp/>failure<sp/>and<sp/>aborts<sp/>the<sp/>current<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>following<sp/>won&apos;t<sp/>be<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Subroutine();<sp/><sp/>//<sp/>The<sp/>intended<sp/>behavior<sp/>is<sp/>for<sp/>the<sp/>fatal<sp/>failure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>in<sp/>Subroutine()<sp/>to<sp/>abort<sp/>the<sp/>entire<sp/>test.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>actual<sp/>behavior:<sp/>the<sp/>function<sp/>goes<sp/>on<sp/>after<sp/>Subroutine()<sp/>returns.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>p<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*p<sp/>=<sp/>3;<sp/><sp/>//<sp/>Segfault!</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>To alleviate this, GoogleTest provides three different solutions. You could use either exceptions, the <computeroutput>(ASSERT|EXPECT)_NO_FATAL_FAILURE</computeroutput> assertions or the <computeroutput>HasFatalFailure()</computeroutput> function. They are described in the following two subsections.</para>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md39">
<title>Asserting on Subroutines with an exception</title>
<para>The following code can turn ASSERT-failure into an exception:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">class<sp/>ThrowListener<sp/>:<sp/>public<sp/>testing::EmptyTestEventListener<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>OnTestPartResult(const<sp/>testing::TestPartResult&amp;<sp/>result)<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(result.type()<sp/>==<sp/>testing::TestPartResult::kFatalFailure)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>testing::AssertionException(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::UnitTest::GetInstance()-&gt;listeners().Append(new<sp/>ThrowListener);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This listener should be added after other listeners if you have any, otherwise they won&apos;t see failed <computeroutput>OnTestPartResult</computeroutput>.</para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md40">
<title>Asserting on Subroutines</title>
<para>As shown above, if your test calls a subroutine that has an <computeroutput>ASSERT_*</computeroutput> failure in it, the test will continue after the subroutine returns. This may not be what you want.</para>
<para>Often people want fatal failures to propagate like exceptions. For that GoogleTest offers the following macros:</para>
<para><table rows="2" cols="3"><row>
<entry thead="yes"><para>Fatal assertion   </para>
</entry><entry thead="yes"><para>Nonfatal assertion   </para>
</entry><entry thead="yes"><para>Verifies    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>ASSERT_NO_FATAL_FAILURE(statement);</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>EXPECT_NO_FATAL_FAILURE(statement);</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>statement</computeroutput> doesn&apos;t generate any new fatal failures in the current thread.   </para>
</entry></row>
</table>
</para>
<para>Only failures in the thread that executes the assertion are checked to determine the result of this type of assertions. If <computeroutput>statement</computeroutput> creates new threads, failures in these threads are ignored.</para>
<para>Examples:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">ASSERT_NO_FATAL_FAILURE(Foo());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">EXPECT_NO_FATAL_FAILURE({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>Bar();</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para>Assertions from multiple threads are currently not supported on Windows.</para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md41">
<title>Checking for Failures in the Current Test</title>
<para><computeroutput>HasFatalFailure()</computeroutput> in the <computeroutput><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref></computeroutput> class returns <computeroutput>true</computeroutput> if an assertion in the current test has suffered a fatal failure. This allows functions to catch fatal failures in a sub-routine and return early.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>HasFatalFailure();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>The typical usage, which basically simulates the behavior of a thrown exception, is:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Subroutine();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Aborts<sp/>if<sp/>Subroutine()<sp/>had<sp/>a<sp/>fatal<sp/>failure.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(HasFatalFailure())<sp/>return;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>following<sp/>won&apos;t<sp/>be<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If <computeroutput>HasFatalFailure()</computeroutput> is used outside of <computeroutput>TEST()</computeroutput> , <computeroutput>TEST_F()</computeroutput> , or a test fixture, you must add the <computeroutput><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref>::</computeroutput> prefix, as in:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(testing::Test::HasFatalFailure())<sp/>return;</highlight></codeline>
</programlisting></para>
<para>Similarly, <computeroutput>HasNonfatalFailure()</computeroutput> returns <computeroutput>true</computeroutput> if the current test has at least one non-fatal failure, and <computeroutput>HasFailure()</computeroutput> returns <computeroutput>true</computeroutput> if the current test has at least one failure of either kind.</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md42">
<title>Logging Additional Information</title>
<para>In your test code, you can call <computeroutput>RecordProperty(&quot;key&quot;, value)</computeroutput> to log additional information, where <computeroutput>value</computeroutput> can be either a string or an <computeroutput>int</computeroutput>. The <emphasis>last</emphasis> value recorded for a key will be emitted to the XML output if you specify one. For example, the test</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">TEST_F(WidgetUsageTest,<sp/>MinAndMaxWidgets)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RecordProperty(&quot;MaximumWidgets&quot;,<sp/>ComputeMaxUsage());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RecordProperty(&quot;MinimumWidgets&quot;,<sp/>ComputeMinUsage());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>will output XML like this:</para>
<para><programlisting filename=".xml"><codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">testcase</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">name</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;MinAndMaxWidgets&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">file</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;test.cpp&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">line</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">status</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;run&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">time</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;0.006&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">classname</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;WidgetUsageTest&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">MaximumWidgets</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;12&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">MinimumWidgets</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal"><sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting></para>
<para>{: .callout .note} <blockquote><para><zwj/>NOTE:</para>
<para><itemizedlist>
<listitem><para><computeroutput>RecordProperty()</computeroutput> is a static member of the <computeroutput>Test</computeroutput> class. Therefore it needs to be prefixed with <computeroutput><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref>::</computeroutput> if used outside of the <computeroutput>TEST</computeroutput> body and the test fixture class.</para>
</listitem><listitem><para>*<computeroutput>key</computeroutput>* must be a valid XML attribute name, and cannot conflict with the ones already used by GoogleTest (<computeroutput>name</computeroutput>, <computeroutput>status</computeroutput>, <computeroutput>time</computeroutput>, <computeroutput>classname</computeroutput>, <computeroutput>type_param</computeroutput>, and <computeroutput>value_param</computeroutput>).</para>
</listitem><listitem><para>Calling <computeroutput>RecordProperty()</computeroutput> outside of the lifespan of a test is allowed. If it&apos;s called outside of a test but between a test suite&apos;s <computeroutput>SetUpTestSuite()</computeroutput> and <computeroutput>TearDownTestSuite()</computeroutput> methods, it will be attributed to the XML element for the test suite. If it&apos;s called outside of all test suites (e.g. in a test environment), it will be attributed to the top-level XML element. </para>
</listitem></itemizedlist>
</para>
</blockquote></para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md43">
<title>Sharing Resources Between Tests in the Same Test Suite</title>
<para>GoogleTest creates a new test fixture object for each test in order to make tests independent and easier to debug. However, sometimes tests use resources that are expensive to set up, making the one-copy-per-test model prohibitively expensive.</para>
<para>If the tests don&apos;t change the resource, there&apos;s no harm in their sharing a single resource copy. So, in addition to per-test set-up/tear-down, GoogleTest also supports per-test-suite set-up/tear-down. To use it:</para>
<para><orderedlist>
<listitem><para>In your test fixture class (say <computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref></computeroutput> ), declare as <computeroutput>static</computeroutput> some member variables to hold the shared resources.</para>
</listitem><listitem><para>Outside your test fixture class (typically just below it), define those member variables, optionally giving them initial values.</para>
</listitem><listitem><para>In the same test fixture class, define a <computeroutput>static void SetUpTestSuite()</computeroutput> function (remember not to spell it as **<computeroutput>SetupTestSuite</computeroutput>** with a small <computeroutput>u</computeroutput>!) to set up the shared resources and a <computeroutput>static void TearDownTestSuite()</computeroutput> function to tear them down.</para>
</listitem></orderedlist>
</para>
<para>That&apos;s it! GoogleTest automatically calls <computeroutput>SetUpTestSuite()</computeroutput> before running the <emphasis>first test</emphasis> in the <computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref></computeroutput> test suite (i.e. before creating the first <computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref></computeroutput> object), and calls <computeroutput>TearDownTestSuite()</computeroutput> after running the <emphasis>last test</emphasis> in it (i.e. after deleting the last <computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref></computeroutput> object). In between, the tests can use the shared resources.</para>
<para>Remember that the test order is undefined, so your code can&apos;t depend on a test preceding or following another. Also, the tests must either not modify the state of any shared resource, or, if they do modify the state, they must restore the state to its original value before passing control to the next test.</para>
<para>Note that <computeroutput>SetUpTestSuite()</computeroutput> may be called multiple times for a test fixture class that has derived classes, so you should not expect code in the function body to be run only once. Also, derived classes still have access to shared resources defined as static members, so careful consideration is needed when managing shared resources to avoid memory leaks if shared resources are not properly cleaned up in <computeroutput>TearDownTestSuite()</computeroutput>.</para>
<para>Here&apos;s an example of per-test-suite set-up and tear-down:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Per-test-suite<sp/>set-up.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Called<sp/>before<sp/>the<sp/>first<sp/>test<sp/>in<sp/>this<sp/>test<sp/>suite.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Can<sp/>be<sp/>omitted<sp/>if<sp/>not<sp/>needed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>SetUpTestSuite()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/>new<sp/>...;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>`shared_resource_`<sp/>is<sp/>**not<sp/>deleted**<sp/>in<sp/>`TearDownTestSuite()`,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>reallocation<sp/>should<sp/>be<sp/>prevented<sp/>because<sp/>`SetUpTestSuite()`<sp/>may<sp/>be<sp/>called</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>in<sp/>subclasses<sp/>of<sp/>FooTest<sp/>and<sp/>lead<sp/>to<sp/>memory<sp/>leak.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(shared_resource_<sp/>==<sp/>nullptr)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>shared_resource_<sp/>=<sp/>new<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Per-test-suite<sp/>tear-down.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Called<sp/>after<sp/>the<sp/>last<sp/>test<sp/>in<sp/>this<sp/>test<sp/>suite.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Can<sp/>be<sp/>omitted<sp/>if<sp/>not<sp/>needed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>TearDownTestSuite()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>shared_resource_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>can<sp/>define<sp/>per-test<sp/>set-up<sp/>logic<sp/>as<sp/>usual.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>can<sp/>define<sp/>per-test<sp/>tear-down<sp/>logic<sp/>as<sp/>usual.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>TearDown()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Some<sp/>expensive<sp/>resource<sp/>shared<sp/>by<sp/>all<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>T*<sp/>shared_resource_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">T*<sp/>FooTest::shared_resource_<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>Test1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>shared_resource_<sp/>here<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>Test2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>shared_resource_<sp/>here<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>{: .callout .note} NOTE: Though the above code declares <computeroutput>SetUpTestSuite()</computeroutput> protected, it may sometimes be necessary to declare it public, such as when using it with <computeroutput>TEST_P</computeroutput>.</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md44">
<title>Global Set-Up and Tear-Down</title>
<para>Just as you can do set-up and tear-down at the test level and the test suite level, you can also do it at the test program level. Here&apos;s how.</para>
<para>First, you subclass the <computeroutput><ref refid="classtesting_1_1Environment" kindref="compound">testing::Environment</ref></computeroutput> class to define a test environment, which knows how to set-up and tear-down:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Environment<sp/>:<sp/>public<sp/>::testing::Environment<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>~Environment()<sp/>override<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>set<sp/>up<sp/>the<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>tear<sp/>down<sp/>the<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>TearDown()<sp/>override<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>Then, you register an instance of your environment class with GoogleTest by calling the <computeroutput>testing::AddGlobalTestEnvironment()</computeroutput> function:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">Environment*<sp/>AddGlobalTestEnvironment(Environment*<sp/>env);</highlight></codeline>
</programlisting></para>
<para>Now, when <computeroutput>RUN_ALL_TESTS()</computeroutput> is called, it first calls the <computeroutput>SetUp()</computeroutput> method of each environment object, then runs the tests if none of the environments reported fatal failures and <computeroutput>GTEST_SKIP()</computeroutput> was not called. <computeroutput>RUN_ALL_TESTS()</computeroutput> always calls <computeroutput>TearDown()</computeroutput> with each environment object, regardless of whether or not the tests were run.</para>
<para>It&apos;s OK to register multiple environment objects. In this suite, their <computeroutput>SetUp()</computeroutput> will be called in the order they are registered, and their <computeroutput>TearDown()</computeroutput> will be called in the reverse order.</para>
<para>Note that GoogleTest takes ownership of the registered environment objects. Therefore <bold>do not delete them</bold> by yourself.</para>
<para>You should call <computeroutput>AddGlobalTestEnvironment()</computeroutput> before <computeroutput>RUN_ALL_TESTS()</computeroutput> is called, probably in <computeroutput>main()</computeroutput>. If you use <computeroutput>gtest_main</computeroutput>, you need to call this before <computeroutput>main()</computeroutput> starts for it to take effect. One way to do this is to define a global variable like this:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">testing::Environment*<sp/>const<sp/>foo_env<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testing::AddGlobalTestEnvironment(new<sp/>FooEnvironment);</highlight></codeline>
</programlisting></para>
<para>However, we strongly recommend you to write your own <computeroutput>main()</computeroutput> and call <computeroutput>AddGlobalTestEnvironment()</computeroutput> there, as relying on initialization of global variables makes the code harder to read and may cause problems when you register multiple environments from different translation units and the environments have dependencies among them (remember that the compiler doesn&apos;t guarantee the order in which global variables from different translation units are initialized).</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md45">
<title>Value-Parameterized Tests</title>
<para><emphasis>Value-parameterized tests</emphasis> allow you to test your code with different parameters without writing multiple copies of the same test. This is useful in a number of situations, for example:</para>
<para><itemizedlist>
<listitem><para>You have a piece of code whose behavior is affected by one or more command-line flags. You want to make sure your code performs correctly for various values of those flags.</para>
</listitem><listitem><para>You want to test different implementations of an OO interface.</para>
</listitem><listitem><para>You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!</para>
</listitem></itemizedlist>
</para>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md46">
<title>How to Write Value-Parameterized Tests</title>
<para>To write value-parameterized tests, first you should define a fixture class. It must be derived from both <computeroutput><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref></computeroutput> and <computeroutput><ref refid="classtesting_1_1WithParamInterface" kindref="compound">testing::WithParamInterface</ref>&lt;T&gt;</computeroutput> (the latter is a pure interface), where <computeroutput>T</computeroutput> is the type of your parameter values. For convenience, you can just derive the fixture class from <computeroutput><ref refid="classtesting_1_1TestWithParam" kindref="compound">testing::TestWithParam</ref>&lt;T&gt;</computeroutput>, which itself is derived from both <computeroutput><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref></computeroutput> and <computeroutput><ref refid="classtesting_1_1WithParamInterface" kindref="compound">testing::WithParamInterface</ref>&lt;T&gt;</computeroutput>. <computeroutput>T</computeroutput> can be any copyable type. If it&apos;s a raw pointer, you are responsible for managing the lifespan of the pointed values.</para>
<para>{: .callout .note} NOTE: If your test fixture defines <computeroutput>SetUpTestSuite()</computeroutput> or <computeroutput>TearDownTestSuite()</computeroutput> they must be declared <bold>public</bold> rather than <bold>protected</bold> in order to use <computeroutput>TEST_P</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>testing::TestWithParam&lt;absl::string_view&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>can<sp/>implement<sp/>all<sp/>the<sp/>usual<sp/>fixture<sp/>class<sp/>members<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>access<sp/>the<sp/>test<sp/>parameter,<sp/>call<sp/>GetParam()<sp/>from<sp/>class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>TestWithParam&lt;T&gt;.</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Or,<sp/>when<sp/>you<sp/>want<sp/>to<sp/>add<sp/>parameters<sp/>to<sp/>a<sp/>pre-existing<sp/>fixture<sp/>class:</highlight></codeline>
<codeline><highlight class="normal">class<sp/>BaseTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>BarTest<sp/>:<sp/>public<sp/>BaseTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public<sp/>testing::WithParamInterface&lt;absl::string_view&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>Then, use the <computeroutput>TEST_P</computeroutput> macro to define as many test patterns using this fixture as you want. The <computeroutput>_P</computeroutput> suffix is for &quot;parameterized&quot; or &quot;pattern&quot;, whichever you prefer to think.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">TEST_P(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>access<sp/>the<sp/>test<sp/>parameter<sp/>with<sp/>the<sp/>GetParam()<sp/>method</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>of<sp/>the<sp/>TestWithParam&lt;T&gt;<sp/>class:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_TRUE(foo.Blah(GetParam()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_P(FooTest,<sp/>HasBlahBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Finally, you can use the <computeroutput>INSTANTIATE_TEST_SUITE_P</computeroutput> macro to instantiate the test suite with any set of parameters you want. GoogleTest defines a number of functions for generating test parameters—see details at <ulink url="reference/testing.md#INSTANTIATE_TEST_SUITE_P"><computeroutput>INSTANTIATE_TEST_SUITE_P</computeroutput></ulink> in the Testing Reference.</para>
<para>For example, the following statement will instantiate tests from the <computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref></computeroutput> test suite each with parameter values <computeroutput>&quot;meeny&quot;</computeroutput>, <computeroutput>&quot;miny&quot;</computeroutput>, and <computeroutput>&quot;moe&quot;</computeroutput> using the <ulink url="reference/testing.md#param-generators"><computeroutput>Values</computeroutput></ulink> parameter generator:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_SUITE_P(MeenyMinyMoe,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FooTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(&quot;meeny&quot;,<sp/>&quot;miny&quot;,<sp/>&quot;moe&quot;));</highlight></codeline>
</programlisting></para>
<para>{: .callout .note} NOTE: The code above must be placed at global or namespace scope, not at function scope.</para>
<para>The first argument to <computeroutput>INSTANTIATE_TEST_SUITE_P</computeroutput> is a unique name for the instantiation of the test suite. The next argument is the name of the test pattern, and the last is the <ulink url="reference/testing.md#param-generators">parameter generator</ulink>.</para>
<para>The parameter generator expression is not evaluated until GoogleTest is initialized (via <computeroutput>InitGoogleTest()</computeroutput>). Any prior initialization done in the <computeroutput>main</computeroutput> function will be accessible from the parameter generator, for example, the results of flag parsing.</para>
<para>You can instantiate a test pattern more than once, so to distinguish different instances of the pattern, the instantiation name is added as a prefix to the actual test suite name. Remember to pick unique prefixes for different instantiations. The tests from the instantiation above will have these names:</para>
<para><itemizedlist>
<listitem><para><computeroutput>MeenyMinyMoe/FooTest.DoesBlah/0</computeroutput> for <computeroutput>&quot;meeny&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>MeenyMinyMoe/FooTest.DoesBlah/1</computeroutput> for <computeroutput>&quot;miny&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>MeenyMinyMoe/FooTest.DoesBlah/2</computeroutput> for <computeroutput>&quot;moe&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>MeenyMinyMoe/FooTest.HasBlahBlah/0</computeroutput> for <computeroutput>&quot;meeny&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>MeenyMinyMoe/FooTest.HasBlahBlah/1</computeroutput> for <computeroutput>&quot;miny&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>MeenyMinyMoe/FooTest.HasBlahBlah/2</computeroutput> for <computeroutput>&quot;moe&quot;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>You can use these names in `--gtest_filter`.</para>
<para>The following statement will instantiate all tests from <computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref></computeroutput> again, each with parameter values <computeroutput>&quot;cat&quot;</computeroutput> and <computeroutput>&quot;dog&quot;</computeroutput> using the <ulink url="reference/testing.md#param-generators"><computeroutput>ValuesIn</computeroutput></ulink> parameter generator:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">constexpr<sp/>absl::string_view<sp/>kPets[]<sp/>=<sp/>{&quot;cat&quot;,<sp/>&quot;dog&quot;};</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_SUITE_P(Pets,<sp/>FooTest,<sp/>testing::ValuesIn(kPets));</highlight></codeline>
</programlisting></para>
<para>The tests from the instantiation above will have these names:</para>
<para><itemizedlist>
<listitem><para><computeroutput>Pets/FooTest.DoesBlah/0</computeroutput> for <computeroutput>&quot;cat&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>Pets/FooTest.DoesBlah/1</computeroutput> for <computeroutput>&quot;dog&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>Pets/FooTest.HasBlahBlah/0</computeroutput> for <computeroutput>&quot;cat&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>Pets/FooTest.HasBlahBlah/1</computeroutput> for <computeroutput>&quot;dog&quot;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>Please note that <computeroutput>INSTANTIATE_TEST_SUITE_P</computeroutput> will instantiate <emphasis>all</emphasis> tests in the given test suite, whether their definitions come before or <emphasis>after</emphasis> the <computeroutput>INSTANTIATE_TEST_SUITE_P</computeroutput> statement.</para>
<para>Additionally, by default, every <computeroutput>TEST_P</computeroutput> without a corresponding <computeroutput>INSTANTIATE_TEST_SUITE_P</computeroutput> causes a failing test in test suite <computeroutput>GoogleTestVerification</computeroutput>. If you have a test suite where that omission is not an error, for example it is in a library that may be linked in for other reasons or where the list of test cases is dynamic and may be empty, then this check can be suppressed by tagging the test suite:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(FooTest);</highlight></codeline>
</programlisting></para>
<para>You can see <ulink url="https://github.com/google/googletest/blob/main/googletest/samples/sample7_unittest.cc">sample7_unittest.cc</ulink> and <ulink url="https://github.com/google/googletest/blob/main/googletest/samples/sample8_unittest.cc">sample8_unittest.cc</ulink> for more examples.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md47">
<title>Creating Value-Parameterized Abstract Tests</title>
<para>In the above, we define and instantiate <computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref></computeroutput> in the <emphasis>same</emphasis> source file. Sometimes you may want to define value-parameterized tests in a library and let other people instantiate them later. This pattern is known as <emphasis>abstract tests</emphasis>. As an example of its application, when you are designing an interface you can write a standard suite of abstract tests (perhaps using a factory function as the test parameter) that all implementations of the interface are expected to pass. When someone implements the interface, they can instantiate your suite to get all the interface-conformance tests for free.</para>
<para>To define abstract tests, you should organize your code like this:</para>
<para><orderedlist>
<listitem><para>Put the definition of the parameterized test fixture class (e.g. <computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref></computeroutput>) in a header file, say <computeroutput>foo_param_test.h</computeroutput>. Think of this as <emphasis>declaring</emphasis> your abstract tests.</para>
</listitem><listitem><para>Put the <computeroutput>TEST_P</computeroutput> definitions in <computeroutput>foo_param_test.cc</computeroutput>, which includes <computeroutput>foo_param_test.h</computeroutput>. Think of this as <emphasis>implementing</emphasis> your abstract tests.</para>
</listitem></orderedlist>
</para>
<para>Once they are defined, you can instantiate them by including <computeroutput>foo_param_test.h</computeroutput>, invoking <computeroutput>INSTANTIATE_TEST_SUITE_P()</computeroutput>, and depending on the library target that contains <computeroutput>foo_param_test.cc</computeroutput>. You can instantiate the same abstract test suite multiple times, possibly in different source files.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md48">
<title>Specifying Names for Value-Parameterized Test Parameters</title>
<para>The optional last argument to <computeroutput>INSTANTIATE_TEST_SUITE_P()</computeroutput> allows the user to specify a function or functor that generates custom test name suffixes based on the test parameters. The function should accept one argument of type <computeroutput><ref refid="structtesting_1_1TestParamInfo" kindref="compound">testing::TestParamInfo</ref>&lt;class ParamType&gt;</computeroutput>, and return <computeroutput>std::string</computeroutput>.</para>
<para><computeroutput><ref refid="structtesting_1_1PrintToStringParamName" kindref="compound">testing::PrintToStringParamName</ref></computeroutput> is a builtin test suffix generator that returns the value of <computeroutput>testing::PrintToString(GetParam())</computeroutput>. It does not work for <computeroutput>std::string</computeroutput> or C strings.</para>
<para>{: .callout .note} NOTE: test names must be non-empty, unique, and may only contain ASCII alphanumeric characters. In particular, they <ulink url="faq.md#why-should-test-suite-names-and-test-names-not-contain-underscore">should not contain underscores</ulink></para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MyTestSuite<sp/>:<sp/>public<sp/>testing::TestWithParam&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_P(MyTestSuite,<sp/>MyTest)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Example<sp/>Test<sp/>Param:<sp/>&quot;<sp/>&lt;&lt;<sp/>GetParam()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_SUITE_P(MyGroup,<sp/>MyTestSuite,<sp/>testing::Range(0,<sp/>10),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::PrintToStringParamName());</highlight></codeline>
</programlisting></para>
<para>Providing a custom functor allows for more control over test parameter name generation, especially for types where the automatic conversion does not generate helpful parameter names (e.g. strings as demonstrated above). The following example illustrates this for multiple parameters, an enumeration type and a string, and also demonstrates how to combine generators. It uses a lambda for conciseness:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>class<sp/>MyType<sp/>{<sp/>MY_FOO<sp/>=<sp/>0,<sp/>MY_BAR<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MyTestSuite<sp/>:<sp/>public<sp/>testing::TestWithParam&lt;std::tuple&lt;MyType,<sp/>std::string&gt;&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MyGroup,<sp/>MyTestSuite,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testing::Combine(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(MyType::MY_FOO,<sp/>MyType::MY_BAR),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::Values(&quot;A&quot;,<sp/>&quot;B&quot;)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[](const<sp/>testing::TestParamInfo&lt;MyTestSuite::ParamType&gt;&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>absl::StrCat(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;0&gt;(info.param)<sp/>==<sp/>MyType::MY_FOO<sp/>?<sp/>&quot;Foo&quot;<sp/>:<sp/>&quot;Bar&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;1&gt;(info.param));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::c_replace_if(name,<sp/>[](char<sp/>c)<sp/>{<sp/>return<sp/>!std::isalnum(c);<sp/>},<sp/>&apos;_&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md49">
<title>Typed Tests</title>
<para>Suppose you have multiple implementations of the same interface and want to make sure that all of them satisfy some common requirements. Or, you may have defined several types that are supposed to conform to the same &quot;concept&quot; and you want to verify it. In both cases, you want the same test logic repeated for different types.</para>
<para>While you can write one <computeroutput>TEST</computeroutput> or <computeroutput>TEST_F</computeroutput> for each type you want to test (and you may even factor the test logic into a function template that you invoke from the <computeroutput>TEST</computeroutput>), it&apos;s tedious and doesn&apos;t scale: if you want <computeroutput>m</computeroutput> tests over <computeroutput>n</computeroutput> types, you&apos;ll end up writing <computeroutput>m*n</computeroutput> <computeroutput>TEST</computeroutput>s.</para>
<para><emphasis>Typed tests</emphasis> allow you to repeat the same test logic over a list of types. You only need to write the test logic once, although you must know the type list when writing typed tests. Here&apos;s how you do it:</para>
<para>First, define a fixture class template. It should be parameterized by a type. Remember to derive it from <computeroutput><ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref></computeroutput>:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>List<sp/>=<sp/>std::list&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>T<sp/>shared_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>Next, associate a list of types with the test suite, which will be repeated for each type in the list:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">using<sp/>MyTypes<sp/>=<sp/>::testing::Types&lt;char,<sp/>int,<sp/>unsigned<sp/>int&gt;;</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_SUITE(FooTest,<sp/>MyTypes);</highlight></codeline>
</programlisting></para>
<para>The type alias (<computeroutput>using</computeroutput> or <computeroutput>typedef</computeroutput>) is necessary for the <computeroutput>TYPED_TEST_SUITE</computeroutput> macro to parse correctly. Otherwise the compiler will think that each comma in the type list introduces a new macro argument.</para>
<para>Then, use <computeroutput>TYPED_TEST()</computeroutput> instead of <computeroutput>TEST_F()</computeroutput> to define a typed test for this test suite. You can repeat this as many times as you want:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>refer<sp/>to<sp/>the<sp/>special<sp/>name<sp/>TypeParam<sp/>to<sp/>get<sp/>the<sp/>type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>parameter.<sp/><sp/>Since<sp/>we<sp/>are<sp/>inside<sp/>a<sp/>derived<sp/>class<sp/>template,<sp/>C++<sp/>requires</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>us<sp/>to<sp/>visit<sp/>the<sp/>members<sp/>of<sp/>FooTest<sp/>via<sp/>&apos;this&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TypeParam<sp/>n<sp/>=<sp/>this-&gt;value_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>visit<sp/>static<sp/>members<sp/>of<sp/>the<sp/>fixture,<sp/>add<sp/>the<sp/>&apos;TestFixture::&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>prefix.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>n<sp/>+=<sp/>TestFixture::shared_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>refer<sp/>to<sp/>typedefs<sp/>in<sp/>the<sp/>fixture,<sp/>add<sp/>the<sp/>&apos;typename<sp/>TestFixture::&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>prefix.<sp/><sp/>The<sp/>&apos;typename&apos;<sp/>is<sp/>required<sp/>to<sp/>satisfy<sp/>the<sp/>compiler.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>TestFixture::List<sp/>values;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>values.push_back(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TYPED_TEST(FooTest,<sp/>HasPropertyA)<sp/>{<sp/>...<sp/>}</highlight></codeline>
</programlisting></para>
<para>You can see <ulink url="https://github.com/google/googletest/blob/main/googletest/samples/sample6_unittest.cc">sample6_unittest.cc</ulink> for a complete example.</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md50">
<title>Type-Parameterized Tests</title>
<para><emphasis>Type-parameterized tests</emphasis> are like typed tests, except that they don&apos;t require you to know the list of types ahead of time. Instead, you can define the test logic first and instantiate it with different type lists later. You can even instantiate it more than once in the same program.</para>
<para>If you are designing an interface or concept, you can define a suite of type-parameterized tests to verify properties that any valid implementation of the interface/concept should have. Then, the author of each implementation can just instantiate the test suite with their type to verify that it conforms to the requirements, without having to write similar tests repeatedly. Here&apos;s an example:</para>
<para>First, define a fixture class template, as we did with typed tests:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>DoSomethingInteresting();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>Next, declare that you will define a type-parameterized test suite:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_SUITE_P(FooTest);</highlight></codeline>
</programlisting></para>
<para>Then, use <computeroutput>TYPED_TEST_P()</computeroutput> to define a type-parameterized test. You can repeat this as many times as you want:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_P(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>refer<sp/>to<sp/>TypeParam<sp/>to<sp/>get<sp/>the<sp/>type<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TypeParam<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>will<sp/>need<sp/>to<sp/>use<sp/>`this`<sp/>explicitly<sp/>to<sp/>refer<sp/>to<sp/>fixture<sp/>members.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;DoSomethingInteresting()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TYPED_TEST_P(FooTest,<sp/>HasPropertyA)<sp/>{<sp/>...<sp/>}</highlight></codeline>
</programlisting></para>
<para>Now the tricky part: you need to register all test patterns using the <computeroutput>REGISTER_TYPED_TEST_SUITE_P</computeroutput> macro before you can instantiate them. The first argument of the macro is the test suite name; the rest are the names of the tests in this test suite:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">REGISTER_TYPED_TEST_SUITE_P(FooTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DoesBlah,<sp/>HasPropertyA);</highlight></codeline>
</programlisting></para>
<para>Finally, you are free to instantiate the pattern with the types you want. If you put the above code in a header file, you can <computeroutput>#include</computeroutput> it in multiple C++ source files and instantiate it multiple times.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">using<sp/>MyTypes<sp/>=<sp/>::testing::Types&lt;char,<sp/>int,<sp/>unsigned<sp/>int&gt;;</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/>FooTest,<sp/>MyTypes);</highlight></codeline>
</programlisting></para>
<para>To distinguish different instances of the pattern, the first argument to the <computeroutput>INSTANTIATE_TYPED_TEST_SUITE_P</computeroutput> macro is a prefix that will be added to the actual test suite name. Remember to pick unique prefixes for different instances.</para>
<para>In the special case where the type list contains only one type, you can write that type directly without <computeroutput>testing::Types&lt;...&gt;</computeroutput>, like this:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TYPED_TEST_SUITE_P(My,<sp/>FooTest,<sp/>int);</highlight></codeline>
</programlisting></para>
<para>You can see <ulink url="https://github.com/google/googletest/blob/main/googletest/samples/sample6_unittest.cc">sample6_unittest.cc</ulink> for a complete example.</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md51">
<title>Testing Private Code</title>
<para>If you change your software&apos;s internal implementation, your tests should not break as long as the change is not observable by users. Therefore, <bold>per the black-box testing principle, most of the time you should test your code through its public interfaces.</bold></para>
<para><bold>If you still find yourself needing to test internal implementation code, consider if there&apos;s a better design.</bold> The desire to test internal implementation is often a sign that the class is doing too much. Consider extracting an implementation class, and testing it. Then use that implementation class in the original class.</para>
<para>If you absolutely have to test non-public interface code though, you can. There are two cases to consider:</para>
<para><itemizedlist>
<listitem><para>Static functions ( <emphasis>not</emphasis> the same as static member functions!) or unnamed namespaces, and</para>
</listitem><listitem><para>Private or protected class members</para>
</listitem></itemizedlist>
</para>
<para>To test them, we use the following special techniques:</para>
<para><itemizedlist>
<listitem><para>Both static functions and definitions/declarations in an unnamed namespace are only visible within the same translation unit. To test them, you can <computeroutput>#include</computeroutput> the entire <computeroutput>.cc</computeroutput> file being tested in your <computeroutput>*_test.cc</computeroutput> file. (#including <computeroutput>.cc</computeroutput> files is not a good way to reuse code - you should not do this in production code!)</para>
<para>However, a better approach is to move the private code into the <computeroutput>foo::internal</computeroutput> namespace, where <computeroutput>foo</computeroutput> is the namespace your project normally uses, and put the private declarations in a <computeroutput>*-internal.h</computeroutput> file. Your production <computeroutput>.cc</computeroutput> files and your tests are allowed to include this internal header, but your clients are not. This way, you can fully test your internal implementation without leaking it to your clients.</para>
</listitem><listitem><para>Private class members are only accessible from within the class or by friends. To access a class&apos; private members, you can declare your test fixture as a friend to the class and define accessors in your fixture. Tests using the fixture can then access the private members of your production class via the accessors in the fixture. Note that even though your fixture is a friend to your production class, your tests are not automatically friends to it, as they are technically defined in sub-classes of the fixture.</para>
<para>Another way to test private members is to refactor them into an implementation class, which is then declared in a <computeroutput>*-internal.h</computeroutput> file. Your clients aren&apos;t allowed to include this header but your tests can. Such is called the <ulink url="https://www.gamedev.net/articles/programming/general-and-gameplay-programming/the-c-pimpl-r1794/">Pimpl</ulink> (Private Implementation) idiom.</para>
<para>Or, you can declare an individual test as a friend of your class by adding this line in the class body:</para>
<para>```c++ FRIEND_TEST(TestSuiteName, TestName); ```</para>
<para>For example,</para>
<para>```c++ // foo.h class Foo { ... private: FRIEND_TEST(FooTest, BarReturnsZeroOnNull);</para>
<para>int Bar(void* x); };</para>
<para>// foo_test.cc ... TEST(FooTest, BarReturnsZeroOnNull) { Foo foo; EXPECT_EQ(foo.Bar(NULL), 0); // Uses Foo&apos;s private member Bar(). } ```</para>
<para>Pay special attention when your class is defined in a namespace. If you want your test fixtures and tests to be friends of your class, then they must be defined in the exact same namespace (no anonymous or inline namespaces).</para>
<para>For example, if the code to be tested looks like:</para>
<para>```c++ namespace my_namespace {</para>
<para>class Foo { friend class <ref refid="classFooTest" kindref="compound">FooTest</ref>; FRIEND_TEST(FooTest, Bar); FRIEND_TEST(FooTest, Baz); ... definition of the class Foo ... };</para>
<para>} // namespace my_namespace ```</para>
<para>Your test code should be something like:</para>
<para>```c++ namespace my_namespace {</para>
<para>class <ref refid="classFooTest" kindref="compound">FooTest</ref> : public <ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref> { protected: ... };</para>
<para>TEST_F(FooTest, Bar) { ... } TEST_F(FooTest, Baz) { ... }</para>
<para>} // namespace my_namespace ```</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md52">
<title>&quot;Catching&quot; Failures</title>
<para>If you are building a testing utility on top of GoogleTest, you&apos;ll want to test your utility. What framework would you use to test it? GoogleTest, of course.</para>
<para>The challenge is to verify that your testing utility reports failures correctly. In frameworks that report a failure by throwing an exception, you could catch the exception and assert on it. But GoogleTest doesn&apos;t use exceptions, so how do we test that a piece of code generates an expected failure?</para>
<para><computeroutput>&quot;gtest/gtest-spi.h&quot;</computeroutput> contains some constructs to do this. After #including this header, you can use</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/>EXPECT_FATAL_FAILURE(statement,<sp/>substring);</highlight></codeline>
</programlisting></para>
<para>to assert that <computeroutput>statement</computeroutput> generates a fatal (e.g. <computeroutput>ASSERT_*</computeroutput>) failure in the current thread whose message contains the given <computeroutput>substring</computeroutput>, or use</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/>EXPECT_NONFATAL_FAILURE(statement,<sp/>substring);</highlight></codeline>
</programlisting></para>
<para>if you are expecting a non-fatal (e.g. <computeroutput>EXPECT_*</computeroutput>) failure.</para>
<para>Only failures in the current thread are checked to determine the result of this type of expectations. If <computeroutput>statement</computeroutput> creates new threads, failures in these threads are also ignored. If you want to catch failures in other threads as well, use one of the following macros instead:</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/>EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement,<sp/>substring);</highlight></codeline>
<codeline><highlight class="normal"><sp/>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement,<sp/>substring);</highlight></codeline>
</programlisting></para>
<para>{: .callout .note} NOTE: Assertions from multiple threads are currently not supported on Windows.</para>
<para>For technical reasons, there are some caveats:</para>
<para><orderedlist>
<listitem><para>You cannot stream a failure message to either macro.</para>
</listitem><listitem><para><computeroutput>statement</computeroutput> in <computeroutput>EXPECT_FATAL_FAILURE{_ON_ALL_THREADS}()</computeroutput> cannot reference local non-static variables or non-static members of <computeroutput>this</computeroutput> object.</para>
</listitem><listitem><para><computeroutput>statement</computeroutput> in <computeroutput>EXPECT_FATAL_FAILURE{_ON_ALL_THREADS}()</computeroutput> cannot return a value.</para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md53">
<title>Registering tests programmatically</title>
<para>The <computeroutput>TEST</computeroutput> macros handle the vast majority of all use cases, but there are few where runtime registration logic is required. For those cases, the framework provides the <computeroutput>testing::RegisterTest</computeroutput> that allows callers to register arbitrary tests dynamically.</para>
<para>This is an advanced API only to be used when the <computeroutput>TEST</computeroutput> macros are insufficient. The macros should be preferred when possible, as they avoid most of the complexity of calling this function.</para>
<para>It provides the following signature:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>Factory&gt;</highlight></codeline>
<codeline><highlight class="normal">TestInfo*<sp/>RegisterTest(const<sp/>char*<sp/>test_suite_name,<sp/>const<sp/>char*<sp/>test_name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>type_param,<sp/>const<sp/>char*<sp/>value_param,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>file,<sp/>int<sp/>line,<sp/>Factory<sp/>factory);</highlight></codeline>
</programlisting></para>
<para>The <computeroutput>factory</computeroutput> argument is a factory callable (move-constructible) object or function pointer that creates a new instance of the Test object. It handles ownership to the caller. The signature of the callable is <computeroutput>Fixture*()</computeroutput>, where <computeroutput><ref refid="classFixture" kindref="compound">Fixture</ref></computeroutput> is the test fixture class for the test. All tests registered with the same <computeroutput>test_suite_name</computeroutput> must return the same fixture type. This is checked at runtime.</para>
<para>The framework will infer the fixture class from the factory and will call the <computeroutput>SetUpTestSuite</computeroutput> and <computeroutput>TearDownTestSuite</computeroutput> for it.</para>
<para>Must be called before <computeroutput>RUN_ALL_TESTS()</computeroutput> is invoked, otherwise behavior is undefined.</para>
<para>Use case example:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MyFixture<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>of<sp/>these<sp/>optional,<sp/>just<sp/>like<sp/>in<sp/>regular<sp/>macro<sp/>usage.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>SetUpTestSuite()<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>TearDownTestSuite()<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>TearDown()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MyTest<sp/>:<sp/>public<sp/>MyFixture<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>explicit<sp/>MyTest(int<sp/>data)<sp/>:<sp/>data_(data)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>TestBody()<sp/>override<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>data_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>RegisterMyTests(const<sp/>std::vector&lt;int&gt;&amp;<sp/>values)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int<sp/>v<sp/>:<sp/>values)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testing::RegisterTest(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;MyFixture&quot;,<sp/>(&quot;Test&quot;<sp/>+<sp/>std::to_string(v)).c_str(),<sp/>nullptr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(v).c_str(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Important<sp/>to<sp/>use<sp/>the<sp/>fixture<sp/>type<sp/>as<sp/>the<sp/>return<sp/>type<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]()<sp/>-&gt;<sp/>MyFixture*<sp/>{<sp/>return<sp/>new<sp/>MyTest(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>values_to_test<sp/>=<sp/>LoadValuesFromConfig();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RegisterMyTests(values_to_test);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md54">
<title>Getting the Current Test&apos;s Name</title>
<para>Sometimes a function may need to know the name of the currently running test. For example, you may be using the <computeroutput>SetUp()</computeroutput> method of your test fixture to set the golden file name based on which test is running. The <ulink url="reference/testing.md#TestInfo"><computeroutput>TestInfo</computeroutput></ulink> class has this information.</para>
<para>To obtain a <computeroutput>TestInfo</computeroutput> object for the currently running test, call <computeroutput>current_test_info()</computeroutput> on the <ulink url="reference/testing.md#UnitTest"><computeroutput>UnitTest</computeroutput></ulink> singleton object:</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Gets<sp/>information<sp/>about<sp/>the<sp/>currently<sp/>running<sp/>test.</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Do<sp/>NOT<sp/>delete<sp/>the<sp/>returned<sp/>object<sp/>-<sp/>it&apos;s<sp/>managed<sp/>by<sp/>the<sp/>UnitTest<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/>const<sp/>testing::TestInfo*<sp/>const<sp/>test_info<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>printf(&quot;We<sp/>are<sp/>in<sp/>test<sp/>%s<sp/>of<sp/>test<sp/>suite<sp/>%s.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;name(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;test_suite_name());</highlight></codeline>
</programlisting></para>
<para><computeroutput>current_test_info()</computeroutput> returns a null pointer if no test is running. In particular, you cannot find the test suite name in <computeroutput>SetUpTestSuite()</computeroutput>, <computeroutput>TearDownTestSuite()</computeroutput> (where you know the test suite name implicitly), or functions called from them.</para>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md55">
<title>Extending GoogleTest by Handling Test Events</title>
<para>GoogleTest provides an <bold>event listener API</bold> to let you receive notifications about the progress of a test program and test failures. The events you can listen to include the start and end of the test program, a test suite, or a test method, among others. You may use this API to augment or replace the standard console output, replace the XML output, or provide a completely different form of output, such as a GUI or a database. You can also use test events as checkpoints to implement a resource leak checker, for example.</para>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md56">
<title>Defining Event Listeners</title>
<para>To define a event listener, you subclass either <ulink url="reference/testing.md#TestEventListener"><computeroutput>testing::TestEventListener</computeroutput></ulink> or <ulink url="reference/testing.md#EmptyTestEventListener"><computeroutput>testing::EmptyTestEventListener</computeroutput></ulink> The former is an (abstract) interface, where <emphasis>each pure virtual method can be overridden to handle a test event</emphasis> (For example, when a test starts, the <computeroutput>OnTestStart()</computeroutput> method will be called.). The latter provides an empty implementation of all methods in the interface, such that a subclass only needs to override the methods it cares about.</para>
<para>When an event is fired, its context is passed to the handler function as an argument. The following argument types are used:</para>
<para><itemizedlist>
<listitem><para>UnitTest reflects the state of the entire test program,</para>
</listitem><listitem><para>TestSuite has information about a test suite, which can contain one or more tests,</para>
</listitem><listitem><para>TestInfo contains the state of a test, and</para>
</listitem><listitem><para>TestPartResult represents the result of a test assertion.</para>
</listitem></itemizedlist>
</para>
<para>An event handler function can examine the argument it receives to find out interesting information about the event and the test program&apos;s state.</para>
<para>Here&apos;s an example:</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/>class<sp/>MinimalistPrinter<sp/>:<sp/>public<sp/>testing::EmptyTestEventListener<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Called<sp/>before<sp/>a<sp/>test<sp/>starts.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>void<sp/>OnTestStart(const<sp/>testing::TestInfo&amp;<sp/>test_info)<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(&quot;***<sp/>Test<sp/>%s.%s<sp/>starting.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.test_suite_name(),<sp/>test_info.name());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Called<sp/>after<sp/>a<sp/>failed<sp/>assertion<sp/>or<sp/>a<sp/>SUCCESS().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>void<sp/>OnTestPartResult(const<sp/>testing::TestPartResult&amp;<sp/>test_part_result)<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(&quot;%s<sp/>in<sp/>%s:%d\n%s\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.failed()<sp/>?<sp/>&quot;***<sp/>Failure&quot;<sp/>:<sp/>&quot;Success&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.file_name(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.line_number(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.summary());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Called<sp/>after<sp/>a<sp/>test<sp/>ends.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>void<sp/>OnTestEnd(const<sp/>testing::TestInfo&amp;<sp/>test_info)<sp/>override<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(&quot;***<sp/>Test<sp/>%s.%s<sp/>ending.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.test_suite_name(),<sp/>test_info.name());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>};</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md57">
<title>Using Event Listeners</title>
<para>To use the event listener you have defined, add an instance of it to the GoogleTest event listener list (represented by class <ulink url="reference/testing.md#TestEventListeners"><computeroutput>TestEventListeners</computeroutput></ulink> - note the &quot;s&quot; at the end of the name) in your <computeroutput>main()</computeroutput> function, before calling <computeroutput>RUN_ALL_TESTS()</computeroutput>:</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>hold<sp/>of<sp/>the<sp/>event<sp/>listener<sp/>list.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testing::TestEventListeners&amp;<sp/>listeners<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing::UnitTest::GetInstance()-&gt;listeners();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Adds<sp/>a<sp/>listener<sp/>to<sp/>the<sp/>end.<sp/><sp/>GoogleTest<sp/>takes<sp/>the<sp/>ownership.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>listeners.Append(new<sp/>MinimalistPrinter);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>There&apos;s only one problem: the default test result printer is still in effect, so its output will mingle with the output from your minimalist printer. To suppress the default printer, just release it from the event listener list and delete it. You can do so by adding one line:</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/>delete<sp/>listeners.Release(listeners.default_result_printer());</highlight></codeline>
<codeline><highlight class="normal"><sp/>listeners.Append(new<sp/>MinimalistPrinter);</highlight></codeline>
<codeline><highlight class="normal"><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
</programlisting></para>
<para>Now, sit back and enjoy a completely different output from your tests. For more details, see <ulink url="https://github.com/google/googletest/blob/main/googletest/samples/sample9_unittest.cc">sample9_unittest.cc</ulink>.</para>
<para>You may append more than one listener to the list. When an <computeroutput>On*Start()</computeroutput> or <computeroutput>OnTestPartResult()</computeroutput> event is fired, the listeners will receive it in the order they appear in the list (since new listeners are added to the end of the list, the default text printer and the default XML generator will receive the event first). An <computeroutput>On*End()</computeroutput> event will be received by the listeners in the <emphasis>reverse</emphasis> order. This allows output by listeners added later to be framed by output from listeners added earlier.</para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md58">
<title>Generating Failures in Listeners</title>
<para>You may use failure-raising macros (<computeroutput>EXPECT_*()</computeroutput>, <computeroutput>ASSERT_*()</computeroutput>, <computeroutput>FAIL()</computeroutput>, etc) when processing an event. There are some restrictions:</para>
<para><orderedlist>
<listitem><para>You cannot generate any failure in <computeroutput>OnTestPartResult()</computeroutput> (otherwise it will cause <computeroutput>OnTestPartResult()</computeroutput> to be called recursively).</para>
</listitem><listitem><para>A listener that handles <computeroutput>OnTestPartResult()</computeroutput> is not allowed to generate any failure.</para>
</listitem></orderedlist>
</para>
<para>When you add listeners to the listener list, you should put listeners that handle <computeroutput>OnTestPartResult()</computeroutput> <emphasis>before</emphasis> listeners that can generate failures. This ensures that failures generated by the latter are attributed to the right test by the former.</para>
<para>See <ulink url="https://github.com/google/googletest/blob/main/googletest/samples/sample10_unittest.cc">sample10_unittest.cc</ulink> for an example of a failure-raising listener.</para>
</sect2>
</sect1>
<sect1 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md59">
<title>Running Test Programs: Advanced Options</title>
<para>GoogleTest test programs are ordinary executables. Once built, you can run them directly and affect their behavior via the following environment variables and/or command line flags. For the flags to work, your programs must call <computeroutput>testing::InitGoogleTest()</computeroutput> before calling <computeroutput>RUN_ALL_TESTS()</computeroutput>.</para>
<para>To see a list of supported flags and their usage, please run your test program with the <computeroutput>--help</computeroutput> flag. You can also use <computeroutput>-h</computeroutput>, <computeroutput>-?</computeroutput>, or <computeroutput>/?</computeroutput> for short.</para>
<para>If an option is specified both by an environment variable and by a flag, the latter takes precedence.</para>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md60">
<title>Selecting Tests</title>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md61">
<title>Listing Test Names</title>
<para>Sometimes it is necessary to list the available tests in a program before running them so that a filter may be applied if needed. Including the flag <computeroutput>--gtest_list_tests</computeroutput> overrides all other flags and lists tests in the following format:</para>
<para><programlisting filename=".none"><codeline><highlight class="normal">TestSuite1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName2</highlight></codeline>
<codeline><highlight class="normal">TestSuite2.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName</highlight></codeline>
</programlisting></para>
<para>None of the tests listed are actually run if the flag is provided. There is no corresponding environment variable for this flag.</para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md62">
<title>Running a Subset of the Tests</title>
<para>By default, a GoogleTest program runs all tests the user has defined. Sometimes, you want to run only a subset of the tests (e.g. for debugging or quickly verifying a change). If you set the <computeroutput>GTEST_FILTER</computeroutput> environment variable or the <computeroutput>--gtest_filter</computeroutput> flag to a filter string, GoogleTest will only run the tests whose full names (in the form of <computeroutput>TestSuiteName.TestName</computeroutput>) match the filter.</para>
<para>The format of a filter is a &apos;<computeroutput>:</computeroutput>&apos;-separated list of wildcard patterns (called the <emphasis>positive patterns</emphasis>) optionally followed by a &apos;<computeroutput>-</computeroutput>&apos; and another &apos;<computeroutput>:</computeroutput>&apos;-separated pattern list (called the <emphasis>negative patterns</emphasis>). A test matches the filter if and only if it matches any of the positive patterns but does not match any of the negative patterns.</para>
<para>A pattern may contain <lsquo/><rsquo/>*&apos;<computeroutput>(matches any string) or</computeroutput>&apos;?&apos;<computeroutput>(matches any single character). For convenience, the filter</computeroutput>&apos;<emphasis>-NegativePatterns&apos;<computeroutput>can be also written as</computeroutput>&apos;-NegativePatterns&apos;`.</emphasis></para>
<para><emphasis>For example:</emphasis></para>
<para><emphasis><itemizedlist>
<listitem><para><computeroutput>./foo_test</computeroutput> Has no flag, and thus runs all its tests.</para>
</listitem><listitem><para>`./foo_test <ndash/>gtest_filter=<computeroutput>Also runs everything, due to the single match-everything</computeroutput>*<computeroutput>value. *</computeroutput>./foo_test <ndash/>gtest_filter=<ref refid="classFooTest" kindref="compound">FooTest</ref>.*<computeroutput>Runs everything in test suite </computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref><computeroutput>. *</computeroutput>./foo_test <ndash/>gtest_filter=*Null*:<emphasis>Constructor</emphasis><computeroutput>Runs any test whose full name contains either</computeroutput>&quot;Null&quot;<computeroutput>or</computeroutput>&quot;Constructor&quot;<computeroutput>. *</computeroutput>./foo_test <ndash/>gtest_filter=-*DeathTest.*<computeroutput>Runs all non-death tests. *</computeroutput>./foo_test <ndash/>gtest_filter=<ref refid="classFooTest" kindref="compound">FooTest</ref>.*-FooTest.Bar<computeroutput>Runs everything in test suite</computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref><computeroutput>except</computeroutput>FooTest.Bar<computeroutput>. *</computeroutput>./foo_test <ndash/>gtest_filter=<ref refid="classFooTest" kindref="compound">FooTest</ref>.*:BarTest.*-FooTest.Bar:BarTest.Foo<computeroutput>Runs everything in test suite</computeroutput><ref refid="classFooTest" kindref="compound">FooTest</ref><computeroutput>except</computeroutput>FooTest.Bar<computeroutput>and everything in test suite</computeroutput>BarTest<computeroutput>except</computeroutput>BarTest.Foo`.</para>
</listitem></itemizedlist>
</emphasis></para>
<para><emphasis></emphasis></para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md63">
<title>Stop test execution upon first failure</title>
<para><emphasis> By default, a GoogleTest program runs all tests the user has defined. In some cases (e.g. iterative test development &amp; execution) it may be desirable stop test execution upon first failure (trading improved latency for completeness). If <computeroutput>GTEST_FAIL_FAST</computeroutput> environment variable or <computeroutput>--gtest_fail_fast</computeroutput> flag is set, the test runner will stop execution as soon as the first test failure is found.</emphasis></para>
<para><emphasis></emphasis></para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md64">
<title>Temporarily Disabling Tests</title>
<para><emphasis> If you have a broken test that you cannot fix right away, you can add the <computeroutput>DISABLED_</computeroutput> prefix to its name. This will exclude it from execution. This is better than commenting out the code or using <computeroutput>#if 0</computeroutput>, as disabled tests are still compiled (and thus won&apos;t rot).</emphasis></para>
<para><emphasis>If you need to disable all tests in a test suite, you can either add <computeroutput>DISABLED_</computeroutput> to the front of the name of each test, or alternatively add it to the front of the test suite name.</emphasis></para>
<para><emphasis>For example, the following tests won&apos;t be run by GoogleTest, even though they will still be compiled:</emphasis></para>
<para><emphasis><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>that<sp/>Foo<sp/>does<sp/>Abc.</highlight></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>DISABLED_DoesAbc)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>DISABLED_BarTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>that<sp/>Bar<sp/>does<sp/>Xyz.</highlight></codeline>
<codeline><highlight class="normal">TEST_F(DISABLED_BarTest,<sp/>DoesXyz)<sp/>{<sp/>...<sp/>}</highlight></codeline>
</programlisting></emphasis></para>
<para><emphasis>{: .callout .note} NOTE: This feature should only be used for temporary pain-relief. You still have to fix the disabled tests at a later date. As a reminder, GoogleTest will print a banner warning you if a test program contains any disabled tests.</emphasis></para>
<para><emphasis>{: .callout .tip} TIP: You can easily count the number of disabled tests you have using <computeroutput>grep</computeroutput>. This number can be used as a metric for improving your test quality.</emphasis></para>
<para><emphasis></emphasis></para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md65">
<title>Temporarily Enabling Disabled Tests</title>
<para><emphasis> To include disabled tests in test execution, just invoke the test program with the <computeroutput>--gtest_also_run_disabled_tests</computeroutput> flag or set the <computeroutput>GTEST_ALSO_RUN_DISABLED_TESTS</computeroutput> environment variable to a value other than <computeroutput>0</computeroutput>. You can combine this with the <computeroutput>--gtest_filter</computeroutput> flag to further select which disabled tests to run.</emphasis></para>
<para><emphasis></emphasis></para>
</sect3>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md66">
<title>Repeating the Tests</title>
<para><emphasis> Once in a while you&apos;ll run into a test whose result is hit-or-miss. Perhaps it will fail only 1% of the time, making it rather hard to reproduce the bug under a debugger. This can be a major source of frustration.</emphasis></para>
<para><emphasis>The <computeroutput>--gtest_repeat</computeroutput> flag allows you to repeat all (or selected) test methods in a program many times. Hopefully, a flaky test will eventually fail and give you a chance to debug. Here&apos;s how to use it:</emphasis></para>
<para><emphasis><programlisting filename=".none"><codeline><highlight class="normal">$<sp/>foo_test<sp/>--gtest_repeat=1000</highlight></codeline>
<codeline><highlight class="normal">Repeat<sp/>foo_test<sp/>1000<sp/>times<sp/>and<sp/>don&apos;t<sp/>stop<sp/>at<sp/>failures.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>foo_test<sp/>--gtest_repeat=-1</highlight></codeline>
<codeline><highlight class="normal">A<sp/>negative<sp/>count<sp/>means<sp/>repeating<sp/>forever.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>foo_test<sp/>--gtest_repeat=1000<sp/>--gtest_break_on_failure</highlight></codeline>
<codeline><highlight class="normal">Repeat<sp/>foo_test<sp/>1000<sp/>times,<sp/>stopping<sp/>at<sp/>the<sp/>first<sp/>failure.<sp/><sp/>This</highlight></codeline>
<codeline><highlight class="normal">is<sp/>especially<sp/>useful<sp/>when<sp/>running<sp/>under<sp/>a<sp/>debugger:<sp/>when<sp/>the<sp/>test</highlight></codeline>
<codeline><highlight class="normal">fails,<sp/>it<sp/>will<sp/>drop<sp/>into<sp/>the<sp/>debugger<sp/>and<sp/>you<sp/>can<sp/>then<sp/>inspect</highlight></codeline>
<codeline><highlight class="normal">variables<sp/>and<sp/>stacks.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>foo_test<sp/>--gtest_repeat=1000<sp/>--gtest_filter=FooBar.*</highlight></codeline>
<codeline><highlight class="normal">Repeat<sp/>the<sp/>tests<sp/>whose<sp/>name<sp/>matches<sp/>the<sp/>filter<sp/>1000<sp/>times.</highlight></codeline>
</programlisting></emphasis></para>
<para><emphasis>If your test program contains global set-up/tear-down code, it will be repeated in each iteration as well, as the flakiness may be in it. To avoid repeating global set-up/tear-down, specify <computeroutput>--gtest_recreate_environments_when_repeating=false</computeroutput>{.nowrap}.</emphasis></para>
<para><emphasis>You can also specify the repeat count by setting the <computeroutput>GTEST_REPEAT</computeroutput> environment variable.</emphasis></para>
<para><emphasis></emphasis></para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md67">
<title>Shuffling the Tests</title>
<para><emphasis> You can specify the <computeroutput>--gtest_shuffle</computeroutput> flag (or set the <computeroutput>GTEST_SHUFFLE</computeroutput> environment variable to <computeroutput>1</computeroutput>) to run the tests in a program in a random order. This helps to reveal bad dependencies between tests.</emphasis></para>
<para><emphasis>By default, GoogleTest uses a random seed calculated from the current time. Therefore you&apos;ll get a different order every time. The console output includes the random seed value, such that you can reproduce an order-related test failure later. To specify the random seed explicitly, use the <computeroutput>--gtest_random_seed=SEED</computeroutput> flag (or set the <computeroutput>GTEST_RANDOM_SEED</computeroutput> environment variable), where <computeroutput>SEED</computeroutput> is an integer in the range [0, 99999]. The seed value 0 is special: it tells GoogleTest to do the default behavior of calculating the seed from the current time.</emphasis></para>
<para><emphasis>If you combine this with <computeroutput>--gtest_repeat=N</computeroutput>, GoogleTest will pick a different random seed and re-shuffle the tests in each iteration.</emphasis></para>
<para><emphasis></emphasis></para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md68">
<title>Distributing Test Functions to Multiple Machines</title>
<para><emphasis> If you have more than one machine you can use to run a test program, you might want to run the test functions in parallel and get the result faster. We call this technique <emphasis>sharding</emphasis>, where each machine is called a <emphasis>shard</emphasis>.</emphasis></para>
<para><emphasis>GoogleTest is compatible with test sharding. To take advantage of this feature, your test runner (not part of GoogleTest) needs to do the following:</emphasis></para>
<para><emphasis><orderedlist>
<listitem><para>Allocate a number of machines (shards) to run the tests.</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para>On each shard, set the <computeroutput>GTEST_TOTAL_SHARDS</computeroutput> environment variable to the total number of shards. It must be the same for all shards.</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para>On each shard, set the <computeroutput>GTEST_SHARD_INDEX</computeroutput> environment variable to the index of the shard. Different shards must be assigned different indices, which must be in the range <computeroutput>[0, GTEST_TOTAL_SHARDS - 1]</computeroutput>.</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para>Run the same test program on all shards. When GoogleTest sees the above two environment variables, it will select a subset of the test functions to run. Across all shards, each test function in the program will be run exactly once.</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para>Wait for all shards to finish, then collect and report the results.</para>
</listitem></orderedlist>
</emphasis></para>
<para><emphasis>Your project may have tests that were written without GoogleTest and thus don&apos;t understand this protocol. In order for your test runner to figure out which test supports sharding, it can set the environment variable <computeroutput>GTEST_SHARD_STATUS_FILE</computeroutput> to a non-existent file path. If a test program supports sharding, it will create this file to acknowledge that fact; otherwise it will not create it. The actual contents of the file are not important at this time, although we may put some useful information in it in the future.</emphasis></para>
<para><emphasis>Here&apos;s an example to make it clear. Suppose you have a test program <computeroutput>foo_test</computeroutput> that contains the following 5 test functions:</emphasis></para>
<para><emphasis><programlisting><codeline><highlight class="normal">TEST(A,<sp/>V)</highlight></codeline>
<codeline><highlight class="normal">TEST(A,<sp/>W)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>X)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>Y)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>Z)</highlight></codeline>
</programlisting></emphasis></para>
<para><emphasis>Suppose you have 3 machines at your disposal. To run the test functions in parallel, you would set <computeroutput>GTEST_TOTAL_SHARDS</computeroutput> to 3 on all machines, and set <computeroutput>GTEST_SHARD_INDEX</computeroutput> to 0, 1, and 2 on the machines respectively. Then you would run the same <computeroutput>foo_test</computeroutput> on each machine.</emphasis></para>
<para><emphasis>GoogleTest reserves the right to change how the work is distributed across the shards, but here&apos;s one possible scenario:</emphasis></para>
<para><emphasis><itemizedlist>
<listitem><para>Machine #0 runs <computeroutput>A.V</computeroutput> and <computeroutput>B.X</computeroutput>.</para>
</listitem><listitem><para>Machine #1 runs <computeroutput>A.W</computeroutput> and <computeroutput>B.Y</computeroutput>.</para>
</listitem><listitem><para>Machine #2 runs <computeroutput>B.Z</computeroutput>.</para>
</listitem></itemizedlist>
</emphasis></para>
<para><emphasis></emphasis></para>
</sect2>
<sect2 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md69">
<title>Controlling Test Output</title>
<para><emphasis> </emphasis></para>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md70">
<title>Colored Terminal Output</title>
<para><emphasis> GoogleTest can use colors in its terminal output to make it easier to spot the important information:</emphasis></para>
<para><emphasis><preformatted>...
&lt;font color=&quot;green&quot;&gt;[----------]&lt;/font&gt; 1 test from <ref refid="classFooTest" kindref="compound">FooTest</ref>
&lt;font color=&quot;green&quot;&gt;[ RUN      ]&lt;/font&gt; FooTest.DoesAbc
&lt;font color=&quot;green&quot;&gt;[       OK ]&lt;/font&gt; FooTest.DoesAbc
&lt;font color=&quot;green&quot;&gt;[----------]&lt;/font&gt; 2 tests from BarTest
&lt;font color=&quot;green&quot;&gt;[ RUN      ]&lt;/font&gt; BarTest.HasXyzProperty
&lt;font color=&quot;green&quot;&gt;[       OK ]&lt;/font&gt; BarTest.HasXyzProperty
&lt;font color=&quot;green&quot;&gt;[ RUN      ]&lt;/font&gt; BarTest.ReturnsTrueOnSuccess
... some error messages ...
&lt;font color=&quot;red&quot;&gt;[   FAILED ]&lt;/font&gt; BarTest.ReturnsTrueOnSuccess
...
&lt;font color=&quot;green&quot;&gt;[==========]&lt;/font&gt; 30 tests from 14 test suites ran.
&lt;font color=&quot;green&quot;&gt;[   PASSED ]&lt;/font&gt; 28 tests.
&lt;font color=&quot;red&quot;&gt;[   FAILED ]&lt;/font&gt; 2 tests, listed below:
&lt;font color=&quot;red&quot;&gt;[   FAILED ]&lt;/font&gt; BarTest.ReturnsTrueOnSuccess
&lt;font color=&quot;red&quot;&gt;[   FAILED ]&lt;/font&gt; AnotherTest.DoesXyz

 2 FAILED TESTS
</preformatted></emphasis></para>
<para><emphasis>You can set the <computeroutput>GTEST_COLOR</computeroutput> environment variable or the <computeroutput>--gtest_color</computeroutput> command line flag to <computeroutput>yes</computeroutput>, <computeroutput>no</computeroutput>, or <computeroutput>auto</computeroutput> (the default) to enable colors, disable colors, or let GoogleTest decide. When the value is <computeroutput>auto</computeroutput>, GoogleTest will use colors if and only if the output goes to a terminal and (on non-Windows platforms) the <computeroutput>TERM</computeroutput> environment variable is set to <computeroutput>xterm</computeroutput> or <computeroutput>xterm-color</computeroutput>.</emphasis></para>
<para><emphasis></emphasis></para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md71">
<title>Suppressing test passes</title>
<para><emphasis> By default, GoogleTest prints 1 line of output for each test, indicating if it passed or failed. To show only test failures, run the test program with <computeroutput>--gtest_brief=1</computeroutput>, or set the GTEST_BRIEF environment variable to <computeroutput>1</computeroutput>.</emphasis></para>
<para><emphasis></emphasis></para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md72">
<title>Suppressing the Elapsed Time</title>
<para><emphasis> By default, GoogleTest prints the time it takes to run each test. To disable that, run the test program with the <computeroutput>--gtest_print_time=0</computeroutput> command line flag, or set the GTEST_PRINT_TIME environment variable to <computeroutput>0</computeroutput>.</emphasis></para>
<para><emphasis></emphasis></para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md73">
<title>Suppressing UTF-8 Text Output</title>
<para><emphasis> In case of assertion failures, GoogleTest prints expected and actual values of type <computeroutput>string</computeroutput> both as hex-encoded strings as well as in readable UTF-8 text if they contain valid non-ASCII UTF-8 characters. If you want to suppress the UTF-8 text because, for example, you don&apos;t have an UTF-8 compatible output medium, run the test program with <computeroutput>--gtest_print_utf8=0</computeroutput> or set the <computeroutput>GTEST_PRINT_UTF8</computeroutput> environment variable to <computeroutput>0</computeroutput>.</emphasis></para>
<para><emphasis></emphasis></para>
</sect3>
<sect3 id="md_build__deps_googletest_src_docs_advanced_1autotoc_md74">
<title>Generating an XML Report</title>
<para><emphasis> GoogleTest can emit a detailed XML report to a file in addition to its normal textual output. The report contains the duration of each test, and thus can help you identify slow tests.</emphasis></para>
<para><emphasis>To generate the XML report, set the <computeroutput>GTEST_OUTPUT</computeroutput> environment variable or the <computeroutput>--gtest_output</computeroutput> flag to the string <computeroutput>&quot;xml:path_to_output_file&quot;</computeroutput>, which will create the file at the given location. You can also just use the string <computeroutput>&quot;xml&quot;</computeroutput>, in which case the output can be found in the <computeroutput>test_detail.xml</computeroutput> file in the current directory.</emphasis></para>
<para><emphasis>If you specify a directory (for example, <computeroutput>&quot;xml:output/directory/&quot;</computeroutput> on Linux or <computeroutput>&quot;xml:output\directory\&quot;&lt;/tt&gt; on Windows), GoogleTest will create the XML file in
that directory, named after the test executable (e.g. &lt;tt&gt;foo_test.xml&lt;/tt&gt; for test
program &lt;tt&gt;foo_test&lt;/tt&gt; or &lt;tt&gt;foo_test.exe&lt;/tt&gt;). If the file already exists (perhaps left
over from a previous run), GoogleTest will pick a different name (e.g.
&lt;tt&gt;foo_test_1.xml&lt;/tt&gt;) to avoid overwriting it.

The report is based on the &lt;tt&gt;junitreport&lt;/tt&gt; Ant task. Since that format was
originally intended for Java, a little interpretation is required to make it
apply to GoogleTest tests, as shown here:

@icode{xml} 
&lt;testsuites name=&quot;AllTests&quot; ...&gt;
  &lt;testsuite name=&quot;test_case_name&quot; ...&gt;
    &lt;testcase    name=&quot;test_name&quot; ...&gt;
      &lt;failure message=&quot;...&quot;/&gt;
      &lt;failure message=&quot;...&quot;/&gt;
      &lt;failure message=&quot;...&quot;/&gt;
    &lt;/testcase&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;
@endicode

*   The root &lt;tt&gt;\&lt;testsuites\&gt;&lt;/tt&gt; element corresponds to the entire test program.
*   &lt;tt&gt;\&lt;testsuite\&gt;&lt;/tt&gt; elements correspond to GoogleTest test suites.
*   &lt;tt&gt;\&lt;testcase\&gt;&lt;/tt&gt; elements correspond to GoogleTest test functions.

For instance, the following program

@icode {c++}
TEST(MathTest, Addition) { ... }
TEST(MathTest, Subtraction) { ... }
TEST(LogicTest, NonContradiction) { ... }
@endicode

could generate this report:

@icode{xml} 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;testsuites tests=&quot;3&quot; failures=&quot;1&quot; errors=&quot;0&quot; time=&quot;0.035&quot; timestamp=&quot;2011-10-31T18:52:42&quot; name=&quot;AllTests&quot;&gt;
  &lt;testsuite name=&quot;MathTest&quot; tests=&quot;2&quot; failures=&quot;1&quot; errors=&quot;0&quot; time=&quot;0.015&quot;&gt;
    &lt;testcase name=&quot;Addition&quot; file=&quot;test.cpp&quot; line=&quot;1&quot; status=&quot;run&quot; time=&quot;0.007&quot; classname=&quot;&quot;&gt;
      &lt;failure message=&quot;Value of: add(1, 1)&amp;#x0A; Actual: 3&amp;#x0A;Expected: 2&quot; type=&quot;&quot;&gt;...&lt;/failure&gt;
      &lt;failure message=&quot;Value of: add(1, -1)&amp;#x0A; Actual: 1&amp;#x0A;Expected: 0&quot; type=&quot;&quot;&gt;...&lt;/failure&gt;
    &lt;/testcase&gt;
    &lt;testcase name=&quot;Subtraction&quot; file=&quot;test.cpp&quot; line=&quot;2&quot; status=&quot;run&quot; time=&quot;0.005&quot; classname=&quot;&quot;&gt;
    &lt;/testcase&gt;
  &lt;/testsuite&gt;
  &lt;testsuite name=&quot;LogicTest&quot; tests=&quot;1&quot; failures=&quot;0&quot; errors=&quot;0&quot; time=&quot;0.005&quot;&gt;
    &lt;testcase name=&quot;NonContradiction&quot; file=&quot;test.cpp&quot; line=&quot;3&quot; status=&quot;run&quot; time=&quot;0.005&quot; classname=&quot;&quot;&gt;
    &lt;/testcase&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;
@endicode

Things to note:

*   The &lt;tt&gt;tests&lt;/tt&gt; attribute of a &lt;tt&gt;\&lt;testsuites\&gt;&lt;/tt&gt; or &lt;tt&gt;\&lt;testsuite\&gt;&lt;/tt&gt; element tells how
    many test functions the GoogleTest program or test suite contains, while the
    &lt;tt&gt;failures&lt;/tt&gt; attribute tells how many of them failed.

*   The &lt;tt&gt;time&lt;/tt&gt; attribute expresses the duration of the test, test suite, or
    entire test program in seconds.

*   The &lt;tt&gt;timestamp&lt;/tt&gt; attribute records the local date and time of the test
    execution.

*   The &lt;tt&gt;file&lt;/tt&gt; and &lt;tt&gt;line&lt;/tt&gt; attributes record the source file location, where the
    test was defined.

*   Each &lt;tt&gt;\&lt;failure\&gt;&lt;/tt&gt; element corresponds to a single failed GoogleTest
    assertion.

@subsubsection autotoc_md75 Generating a JSON Report

GoogleTest can also emit a JSON report as an alternative format to XML. To
generate the JSON report, set the &lt;tt&gt;GTEST_OUTPUT&lt;/tt&gt; environment variable or the
&lt;tt&gt;--gtest_output&lt;/tt&gt; flag to the string &lt;tt&gt;&quot;json:path_to_output_file&quot;&lt;/tt&gt;, which will
create the file at the given location. You can also just use the string
&lt;tt&gt;&quot;json&quot;&lt;/tt&gt;, in which case the output can be found in the &lt;tt&gt;test_detail.json&lt;/tt&gt; file
in the current directory.

The report format conforms to the following JSON Schema:

@icode{json} 
{
  &quot;$schema&quot;: &quot;<ulink url="http://json-schema.org/schema#">http://json-schema.org/schema#</ulink>&quot;,
  &quot;type&quot;: &quot;object&quot;,
  &quot;definitions&quot;: {
    &quot;TestCase&quot;: {
      &quot;type&quot;: &quot;object&quot;,
      &quot;properties&quot;: {
        &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; },
        &quot;tests&quot;: { &quot;type&quot;: &quot;integer&quot; },
        &quot;failures&quot;: { &quot;type&quot;: &quot;integer&quot; },
        &quot;disabled&quot;: { &quot;type&quot;: &quot;integer&quot; },
        &quot;time&quot;: { &quot;type&quot;: &quot;string&quot; },
        &quot;testsuite&quot;: {
          &quot;type&quot;: &quot;array&quot;,
          &quot;items&quot;: {
            &quot;$ref&quot;: &quot;#/definitions/TestInfo&quot;
          }
        }
      }
    },
    &quot;TestInfo&quot;: {
      &quot;type&quot;: &quot;object&quot;,
      &quot;properties&quot;: {
        &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; },
        &quot;file&quot;: { &quot;type&quot;: &quot;string&quot; },
        &quot;line&quot;: { &quot;type&quot;: &quot;integer&quot; },
        &quot;status&quot;: {
          &quot;type&quot;: &quot;string&quot;,
          &quot;enum&quot;: [&quot;RUN&quot;, &quot;NOTRUN&quot;]
        },
        &quot;time&quot;: { &quot;type&quot;: &quot;string&quot; },
        &quot;classname&quot;: { &quot;type&quot;: &quot;string&quot; },
        &quot;failures&quot;: {
          &quot;type&quot;: &quot;array&quot;,
          &quot;items&quot;: {
            &quot;$ref&quot;: &quot;#/definitions/Failure&quot;
          }
        }
      }
    },
    &quot;Failure&quot;: {
      &quot;type&quot;: &quot;object&quot;,
      &quot;properties&quot;: {
        &quot;failures&quot;: { &quot;type&quot;: &quot;string&quot; },
        &quot;type&quot;: { &quot;type&quot;: &quot;string&quot; }
      }
    }
  },
  &quot;properties&quot;: {
    &quot;tests&quot;: { &quot;type&quot;: &quot;integer&quot; },
    &quot;failures&quot;: { &quot;type&quot;: &quot;integer&quot; },
    &quot;disabled&quot;: { &quot;type&quot;: &quot;integer&quot; },
    &quot;errors&quot;: { &quot;type&quot;: &quot;integer&quot; },
    &quot;timestamp&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;format&quot;: &quot;date-time&quot;
    },
    &quot;time&quot;: { &quot;type&quot;: &quot;string&quot; },
    &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; },
    &quot;testsuites&quot;: {
      &quot;type&quot;: &quot;array&quot;,
      &quot;items&quot;: {
        &quot;$ref&quot;: &quot;#/definitions/TestCase&quot;
      }
    }
  }
}
@endicode

The report uses the format that conforms to the following Proto3 using the
&lt;a href=&quot;<ulink url="https://developers.google.com/protocol-buffers/docs/proto3#json">https://developers.google.com/protocol-buffers/docs/proto3#json</ulink>&quot; &gt;JSON encoding&lt;/a&gt;:

@icode{proto} 
syntax = &quot;proto3&quot;;

package googletest;

import &quot;google/protobuf/timestamp.proto&quot;;
import &quot;google/protobuf/duration.proto&quot;;

message UnitTest {
  int32 tests = 1;
  int32 failures = 2;
  int32 disabled = 3;
  int32 errors = 4;
  google.protobuf.Timestamp timestamp = 5;
  google.protobuf.Duration time = 6;
  string name = 7;
  repeated TestCase testsuites = 8;
}

message TestCase {
  string name = 1;
  int32 tests = 2;
  int32 failures = 3;
  int32 disabled = 4;
  int32 errors = 5;
  google.protobuf.Duration time = 6;
  repeated TestInfo testsuite = 7;
}

message TestInfo {
  string name = 1;
  string file = 6;
  int32 line = 7;
  enum Status {
    RUN = 0;
    NOTRUN = 1;
  }
  Status status = 2;
  google.protobuf.Duration time = 3;
  string classname = 4;
  message Failure {
    string failures = 1;
    string type = 2;
  }
  repeated Failure failures = 5;
}
@endicode

For instance, the following program

@icode {c++}
TEST(MathTest, Addition) { ... }
TEST(MathTest, Subtraction) { ... }
TEST(LogicTest, NonContradiction) { ... }
@endicode

could generate this report:

@icode{json} 
{
  &quot;tests&quot;: 3,
  &quot;failures&quot;: 1,
  &quot;errors&quot;: 0,
  &quot;time&quot;: &quot;0.035s&quot;,
  &quot;timestamp&quot;: &quot;2011-10-31T18:52:42Z&quot;,
  &quot;name&quot;: &quot;AllTests&quot;,
  &quot;testsuites&quot;: [
    {
      &quot;name&quot;: &quot;MathTest&quot;,
      &quot;tests&quot;: 2,
      &quot;failures&quot;: 1,
      &quot;errors&quot;: 0,
      &quot;time&quot;: &quot;0.015s&quot;,
      &quot;testsuite&quot;: [
        {
          &quot;name&quot;: &quot;Addition&quot;,
          &quot;file&quot;: &quot;test.cpp&quot;,
          &quot;line&quot;: 1,
          &quot;status&quot;: &quot;RUN&quot;,
          &quot;time&quot;: &quot;0.007s&quot;,
          &quot;classname&quot;: &quot;&quot;,
          &quot;failures&quot;: [
            {
              &quot;message&quot;: &quot;Value of: add(1, 1)<linebreak/>
 Actual: 3\nExpected: 2&quot;,
              &quot;type&quot;: &quot;&quot;
            },
            {
              &quot;message&quot;: &quot;Value of: add(1, -1)<linebreak/>
 Actual: 1\nExpected: 0&quot;,
              &quot;type&quot;: &quot;&quot;
            }
          ]
        },
        {
          &quot;name&quot;: &quot;Subtraction&quot;,
          &quot;file&quot;: &quot;test.cpp&quot;,
          &quot;line&quot;: 2,
          &quot;status&quot;: &quot;RUN&quot;,
          &quot;time&quot;: &quot;0.005s&quot;,
          &quot;classname&quot;: &quot;&quot;
        }
      ]
    },
    {
      &quot;name&quot;: &quot;LogicTest&quot;,
      &quot;tests&quot;: 1,
      &quot;failures&quot;: 0,
      &quot;errors&quot;: 0,
      &quot;time&quot;: &quot;0.005s&quot;,
      &quot;testsuite&quot;: [
        {
          &quot;name&quot;: &quot;NonContradiction&quot;,
          &quot;file&quot;: &quot;test.cpp&quot;,
          &quot;line&quot;: 3,
          &quot;status&quot;: &quot;RUN&quot;,
          &quot;time&quot;: &quot;0.005s&quot;,
          &quot;classname&quot;: &quot;&quot;
        }
      ]
    }
  ]
}
@endicode

{: .callout .important}
IMPORTANT: The exact format of the JSON document is subject to change.

@subsection autotoc_md76 Controlling How Failures Are Reported

@subsubsection autotoc_md77 Detecting Test Premature Exit

Google Test implements the &lt;em&gt;premature-exit-file&lt;/em&gt; protocol for test runners to
catch any kind of unexpected exits of test programs. Upon start, Google Test
creates the file which will be automatically deleted after all work has been
finished. Then, the test runner can check if this file exists. In case the file
remains undeleted, the inspected test has exited prematurely.

This feature is enabled only if the &lt;tt&gt;TEST_PREMATURE_EXIT_FILE&lt;/tt&gt; environment
variable has been set.

@subsubsection autotoc_md78 Turning Assertion Failures into Break-Points

When running test programs under a debugger, it&apos;s very convenient if the
debugger can catch an assertion failure and automatically drop into interactive
mode. GoogleTest&apos;s &lt;em&gt;break-on-failure&lt;/em&gt; mode supports this behavior.

To enable it, set the &lt;tt&gt;GTEST_BREAK_ON_FAILURE&lt;/tt&gt; environment variable to a value
other than &lt;tt&gt;0&lt;/tt&gt;. Alternatively, you can use the &lt;tt&gt;--gtest_break_on_failure&lt;/tt&gt;
command line flag.

@subsubsection autotoc_md79 Disabling Catching Test-Thrown Exceptions

GoogleTest can be used either with or without exceptions enabled. If a test
throws a C++ exception or (on Windows) a structured exception (SEH), by default
GoogleTest catches it, reports it as a test failure, and continues with the next
test method. This maximizes the coverage of a test run. Also, on Windows an
uncaught exception will cause a pop-up window, so catching the exceptions allows
you to run the tests automatically.

When debugging the test failures, however, you may instead want the exceptions
to be handled by the debugger, such that you can examine the call stack when an
exception is thrown. To achieve that, set the &lt;tt&gt;GTEST_CATCH_EXCEPTIONS&lt;/tt&gt;
environment variable to &lt;tt&gt;0&lt;/tt&gt;, or use the &lt;tt&gt;--gtest_catch_exceptions=0&lt;/tt&gt; flag when
running the tests.

@subsection autotoc_md80 Sanitizer Integration

The
&lt;a href=&quot;<ulink url="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html">https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html</ulink>&quot; &gt;Undefined Behavior Sanitizer&lt;/a&gt;,
&lt;a href=&quot;<ulink url="https://github.com/google/sanitizers/wiki/AddressSanitizer">https://github.com/google/sanitizers/wiki/AddressSanitizer</ulink>&quot; &gt;Address Sanitizer&lt;/a&gt;,
and
&lt;a href=&quot;<ulink url="https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual">https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual</ulink>&quot; &gt;Thread Sanitizer&lt;/a&gt;
all provide weak functions that you can override to trigger explicit failures
when they detect sanitizer errors, such as creating a reference from &lt;tt&gt;nullptr&lt;/tt&gt;.
To override these functions, place definitions for them in a source file that
you compile as part of your main binary:

@icode 
extern &quot;C&quot; {
void __ubsan_on_report() {
  FAIL() &lt;&lt; &quot;Encountered an undefined behavior sanitizer error&quot;;
}
void __asan_on_error() {
  FAIL() &lt;&lt; &quot;Encountered an address sanitizer error&quot;;
}
void __tsan_on_report() {
  FAIL() &lt;&lt; &quot;Encountered a thread sanitizer error&quot;;
}
}  // extern &quot;C" </computeroutput></emphasis></para>
<para><emphasis><computeroutput>After compiling your project with one of the sanitizers enabled, if a particular test triggers a sanitizer error, GoogleTest will report that it failed. </computeroutput></emphasis></para>
</sect3>
</sect2>
</sect1>
    </detaileddescription>
    <location file="build/_deps/googletest-src/docs/advanced.md"/>
  </compounddef>
</doxygen>
