<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="gtest-unittest-api__test_8cc" kind="file" language="C++">
    <compoundname>gtest-unittest-api_test.cc</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">algorithm</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="16">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="29">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="48">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="36">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="18">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc</label>
        <link refid="gtest-unittest-api__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="38">
        <label>atomic</label>
      </node>
      <node id="52">
        <label>cassert</label>
      </node>
      <node id="23">
        <label>cerrno</label>
      </node>
      <node id="5">
        <label>cstddef</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="19">
        <label>ctype.h</label>
      </node>
      <node id="43">
        <label>float.h</label>
      </node>
      <node id="39">
        <label>functional</label>
      </node>
      <node id="7">
        <label>iomanip</label>
      </node>
      <node id="54">
        <label>iosfwd</label>
      </node>
      <node id="24">
        <label>iostream</label>
      </node>
      <node id="50">
        <label>iterator</label>
      </node>
      <node id="8">
        <label>limits</label>
      </node>
      <node id="25">
        <label>locale</label>
      </node>
      <node id="44">
        <label>map</label>
      </node>
      <node id="9">
        <label>memory</label>
      </node>
      <node id="10">
        <label>ostream</label>
      </node>
      <node id="33">
        <label>regex.h</label>
      </node>
      <node id="11">
        <label>set</label>
      </node>
      <node id="12">
        <label>sstream</label>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="21">
        <label>stdio.h</label>
      </node>
      <node id="22">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
      <node id="31">
        <label>strings.h</label>
      </node>
      <node id="27">
        <label>sys/stat.h</label>
      </node>
      <node id="28">
        <label>sys/types.h</label>
      </node>
      <node id="26">
        <label>tuple</label>
      </node>
      <node id="14">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>typeinfo</label>
      </node>
      <node id="32">
        <label>unistd.h</label>
      </node>
      <node id="41">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structtesting_1_1internal_1_1LessByName" prot="public">testing::internal::LessByName</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UnitTestHelper" prot="public">testing::internal::UnitTestHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1TestSuiteWithCommentTest" prot="public">testing::internal::TestSuiteWithCommentTest</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1FinalSuccessChecker" prot="public">testing::internal::FinalSuccessChecker</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="322" column="5" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="322" bodyend="328"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2009<sp/>Google<sp/>Inc.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>and<sp/>Mocking<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>contains<sp/>tests<sp/>verifying<sp/>correctness<sp/>of<sp/>data<sp/>provided<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnitTest&apos;s<sp/>public<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>strcmp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">using<sp/>::testing::InitGoogleTest;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="47" refid="structtesting_1_1internal_1_1LessByName" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1LessByName" kindref="compound">LessByName</ref><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(a-&gt;name(),<sp/>b-&gt;name())<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classtesting_1_1internal_1_1UnitTestHelper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UnitTestHelper" kindref="compound">UnitTestHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>all<sp/>test<sp/>suites<sp/>sorted<sp/>by<sp/>the<sp/>test<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>name.<sp/><sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>GetSortedTestSuites()<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test<sp/>=<sp/>*UnitTest::GetInstance();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_suites<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref>*[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test.total_test_suite_count())];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unit_test.total_test_suite_count();<sp/>++i)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_suites[i]<sp/>=<sp/>unit_test.GetTestSuite(i);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(test_suites,<sp/>test_suites<sp/>+<sp/>unit_test.total_test_suite_count(),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1LessByName" kindref="compound">LessByName&lt;TestSuite&gt;</ref>());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_suites;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>suite<sp/>by<sp/>its<sp/>name.<sp/><sp/>The<sp/>caller<sp/>doesn&apos;t<sp/>own<sp/>the<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref>*<sp/>FindTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test<sp/>=<sp/>*UnitTest::GetInstance();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unit_test.total_test_suite_count();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref>*<sp/>test_suite<sp/>=<sp/>unit_test.GetTestSuite(i);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(test_suite-&gt;name(),<sp/>name))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_suite;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>all<sp/>tests<sp/>in<sp/>a<sp/>particular<sp/>test<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sorted<sp/>by<sp/>the<sp/>test<sp/>name.<sp/><sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>GetSortedTests(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref>*<sp/>test_suite)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tests<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_suite-&gt;total_test_count())];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_suite-&gt;total_test_count();<sp/>++i)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tests[i]<sp/>=<sp/>test_suite-&gt;GetTestInfo(i);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(tests,<sp/>tests<sp/>+<sp/>test_suite-&gt;total_test_count(),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1LessByName" kindref="compound">LessByName&lt;TestInfo&gt;</ref>());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tests;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="98" refid="classtesting_1_1internal_1_1TestSuiteWithCommentTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TestSuiteWithCommentTest" kindref="compound">TestSuiteWithCommentTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="99"><highlight class="normal">TYPED_TEST_SUITE(<ref refid="classtesting_1_1internal_1_1TestSuiteWithCommentTest" kindref="compound">TestSuiteWithCommentTest</ref>,<sp/><ref refid="structtesting_1_1internal_1_1Types" kindref="compound">Types&lt;int&gt;</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">TYPED_TEST(<ref refid="classtesting_1_1internal_1_1TestSuiteWithCommentTest" kindref="compound">TestSuiteWithCommentTest</ref>,<sp/>Dummy)<sp/>{}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kTypedTestSuites<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kTypedTests<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>only<sp/>test<sp/>the<sp/>accessors<sp/>that<sp/>do<sp/>not<sp/>change<sp/>value<sp/>while<sp/>tests<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>tests<sp/>can<sp/>be<sp/>run<sp/>in<sp/>any<sp/>order,<sp/>the<sp/>values<sp/>the<sp/>accessors<sp/>that<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>execution<sp/>(such<sp/>as<sp/>failed_test_count)<sp/>can<sp/>not<sp/>be<sp/>predicted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">TEST(ApiTest,<sp/>UnitTestImmutableAccessorsWork)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>unit_test<sp/>=<sp/>UnitTest::GetInstance();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2<sp/>+<sp/>kTypedTestSuites,<sp/>unit_test-&gt;total_test_suite_count());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1<sp/>+<sp/>kTypedTestSuites,<sp/>unit_test-&gt;test_suite_to_run_count());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>unit_test-&gt;disabled_test_count());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5<sp/>+<sp/>kTypedTests,<sp/>unit_test-&gt;total_test_count());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3<sp/>+<sp/>kTypedTests,<sp/>unit_test-&gt;test_to_run_count());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref>**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_suites<sp/>=<sp/>UnitTestHelper::GetSortedTestSuites();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>test_suites[0]-&gt;name());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;DISABLED_Test&quot;</highlight><highlight class="normal">,<sp/>test_suites[1]-&gt;name());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteWithCommentTest/0&quot;</highlight><highlight class="normal">,<sp/>test_suites[2]-&gt;name());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>test_suites;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>lines<sp/>initiate<sp/>actions<sp/>to<sp/>verify<sp/>certain<sp/>methods<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FinalSuccessChecker::TearDown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Records<sp/>a<sp/>test<sp/>property<sp/>to<sp/>verify<sp/>TestResult::GetTestProperty().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">AssertionResult<sp/>IsNull(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::AssertionFailure()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;argument<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">TEST(ApiTest,<sp/>TestSuiteImmutableAccessorsWork)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestSuite*<sp/>test_suite<sp/>=<sp/>UnitTestHelper::FindTestSuite(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(test_suite<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>test_suite-&gt;name());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(test_suite-&gt;type_param()));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(test_suite-&gt;should_run());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>test_suite-&gt;disabled_test_count());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>test_suite-&gt;test_to_run_count());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>ASSERT_EQ(4,<sp/>test_suite-&gt;total_test_count());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo**<sp/>tests<sp/>=<sp/>UnitTestHelper::GetSortedTests(test_suite);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;DISABLED_Dummy1&quot;</highlight><highlight class="normal">,<sp/>tests[0]-&gt;name());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>tests[0]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[0]-&gt;value_param()));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[0]-&gt;type_param()));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(tests[0]-&gt;should_run());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteDisabledAccessorsWork&quot;</highlight><highlight class="normal">,<sp/>tests[1]-&gt;name());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>tests[1]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[1]-&gt;value_param()));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[1]-&gt;type_param()));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(tests[1]-&gt;should_run());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteImmutableAccessorsWork&quot;</highlight><highlight class="normal">,<sp/>tests[2]-&gt;name());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>tests[2]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[2]-&gt;value_param()));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[2]-&gt;type_param()));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(tests[2]-&gt;should_run());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;UnitTestImmutableAccessorsWork&quot;</highlight><highlight class="normal">,<sp/>tests[3]-&gt;name());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>tests[3]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[3]-&gt;value_param()));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[3]-&gt;type_param()));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(tests[3]-&gt;should_run());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tests;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>tests<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>test_suite<sp/>=<sp/>UnitTestHelper::FindTestSuite(</highlight><highlight class="stringliteral">&quot;TestSuiteWithCommentTest/0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(test_suite<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteWithCommentTest/0&quot;</highlight><highlight class="normal">,<sp/>test_suite-&gt;name());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(GetTypeName&lt;Types&lt;int&gt;&gt;().c_str(),<sp/>test_suite-&gt;type_param());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(test_suite-&gt;should_run());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>test_suite-&gt;disabled_test_count());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>test_suite-&gt;test_to_run_count());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>test_suite-&gt;total_test_count());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>tests<sp/>=<sp/>UnitTestHelper::GetSortedTests(test_suite);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Dummy&quot;</highlight><highlight class="normal">,<sp/>tests[0]-&gt;name());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteWithCommentTest/0&quot;</highlight><highlight class="normal">,<sp/>tests[0]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(tests[0]-&gt;value_param()));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(GetTypeName&lt;Types&lt;int&gt;&gt;().c_str(),<sp/>tests[0]-&gt;type_param());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(tests[0]-&gt;should_run());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tests;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">TEST(ApiTest,<sp/>TestSuiteDisabledAccessorsWork)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestSuite*<sp/>test_suite<sp/>=<sp/>UnitTestHelper::FindTestSuite(</highlight><highlight class="stringliteral">&quot;DISABLED_Test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(test_suite<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;DISABLED_Test&quot;</highlight><highlight class="normal">,<sp/>test_suite-&gt;name());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(test_suite-&gt;type_param()));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(test_suite-&gt;should_run());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>test_suite-&gt;disabled_test_count());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>test_suite-&gt;test_to_run_count());</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>test_suite-&gt;total_test_count());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=<sp/>test_suite-&gt;GetTestInfo(0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Dummy2&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;name());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;DISABLED_Test&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(test_info-&gt;value_param()));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsNull(test_info-&gt;type_param()));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(test_info-&gt;should_run());</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>tests<sp/>are<sp/>here<sp/>to<sp/>provide<sp/>support<sp/>for<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test_suite_to_run_count,<sp/>disabled_test_count,<sp/>and<sp/>test_to_run_count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">TEST(ApiTest,<sp/>DISABLED_Dummy1)<sp/>{}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">TEST(DISABLED_Test,<sp/>Dummy2)<sp/>{}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="classtesting_1_1internal_1_1FinalSuccessChecker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FinalSuccessChecker" kindref="compound">FinalSuccessChecker</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment" kindref="compound">Environment</ref><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>unit_test<sp/>=<sp/>UnitTest::GetInstance();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1<sp/>+<sp/>kTypedTestSuites,<sp/>unit_test-&gt;successful_test_suite_count());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(3<sp/>+<sp/>kTypedTests,<sp/>unit_test-&gt;successful_test_count());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>unit_test-&gt;failed_test_suite_count());</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>unit_test-&gt;failed_test_count());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(unit_test-&gt;Passed());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(unit_test-&gt;Failed());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(2<sp/>+<sp/>kTypedTestSuites,<sp/>unit_test-&gt;total_test_suite_count());</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref>**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_suites<sp/>=<sp/>UnitTestHelper::GetSortedTestSuites();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>test_suites[0]-&gt;name());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(test_suites[0]-&gt;type_param()));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(test_suites[0]-&gt;should_run());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>test_suites[0]-&gt;disabled_test_count());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(4,<sp/>test_suites[0]-&gt;total_test_count());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(3,<sp/>test_suites[0]-&gt;successful_test_count());</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>test_suites[0]-&gt;failed_test_count());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(test_suites[0]-&gt;Passed());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(test_suites[0]-&gt;Failed());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;DISABLED_Test&quot;</highlight><highlight class="normal">,<sp/>test_suites[1]-&gt;name());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(test_suites[1]-&gt;type_param()));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(test_suites[1]-&gt;should_run());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>test_suites[1]-&gt;disabled_test_count());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>test_suites[1]-&gt;total_test_count());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>test_suites[1]-&gt;successful_test_count());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>test_suites[1]-&gt;failed_test_count());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteWithCommentTest/0&quot;</highlight><highlight class="normal">,<sp/>test_suites[2]-&gt;name());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(GetTypeName&lt;<ref refid="structtesting_1_1internal_1_1Types" kindref="compound">Types&lt;int&gt;</ref>&gt;().c_str(),</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_suites[2]-&gt;type_param());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(test_suites[2]-&gt;should_run());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>test_suites[2]-&gt;disabled_test_count());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>test_suites[2]-&gt;total_test_count());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>test_suites[2]-&gt;successful_test_count());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>test_suites[2]-&gt;failed_test_count());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(test_suites[2]-&gt;Passed());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(test_suites[2]-&gt;Failed());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestSuite" kindref="compound">TestSuite</ref>*<sp/>test_suite<sp/>=<sp/>UnitTestHelper::FindTestSuite(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>**<sp/>tests<sp/>=<sp/>UnitTestHelper::GetSortedTests(test_suite);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;DISABLED_Dummy1&quot;</highlight><highlight class="normal">,<sp/>tests[0]-&gt;name());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>tests[0]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(tests[0]-&gt;should_run());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteDisabledAccessorsWork&quot;</highlight><highlight class="normal">,<sp/>tests[1]-&gt;name());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>tests[1]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(tests[1]-&gt;value_param()));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(tests[1]-&gt;type_param()));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(tests[1]-&gt;should_run());</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(tests[1]-&gt;result()-&gt;Passed());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>tests[1]-&gt;result()-&gt;test_property_count());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteImmutableAccessorsWork&quot;</highlight><highlight class="normal">,<sp/>tests[2]-&gt;name());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>tests[2]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(tests[2]-&gt;value_param()));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(tests[2]-&gt;type_param()));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(tests[2]-&gt;should_run());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(tests[2]-&gt;result()-&gt;Passed());</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>tests[2]-&gt;result()-&gt;test_property_count());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;UnitTestImmutableAccessorsWork&quot;</highlight><highlight class="normal">,<sp/>tests[3]-&gt;name());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;ApiTest&quot;</highlight><highlight class="normal">,<sp/>tests[3]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(tests[3]-&gt;value_param()));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(tests[3]-&gt;type_param()));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(tests[3]-&gt;should_run());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(tests[3]-&gt;result()-&gt;Passed());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>tests[3]-&gt;result()-&gt;test_property_count());</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestProperty" kindref="compound">TestProperty</ref>&amp;<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>=<sp/>tests[3]-&gt;result()-&gt;GetTestProperty(0);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>property.key());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>property.value());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tests;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>test_suite<sp/>=<sp/>UnitTestHelper::FindTestSuite(</highlight><highlight class="stringliteral">&quot;TestSuiteWithCommentTest/0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>tests<sp/>=<sp/>UnitTestHelper::GetSortedTests(test_suite);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Dummy&quot;</highlight><highlight class="normal">,<sp/>tests[0]-&gt;name());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;TestSuiteWithCommentTest/0&quot;</highlight><highlight class="normal">,<sp/>tests[0]-&gt;test_suite_name());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(IsNull(tests[0]-&gt;value_param()));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(GetTypeName&lt;<ref refid="structtesting_1_1internal_1_1Types" kindref="compound">Types&lt;int&gt;</ref>&gt;().c_str(),<sp/>tests[0]-&gt;type_param());</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(tests[0]-&gt;should_run());</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(tests[0]-&gt;result()-&gt;Passed());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>tests[0]-&gt;result()-&gt;test_property_count());</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tests;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>test_suites;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal">};</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>AddGlobalTestEnvironment(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FinalSuccessChecker" kindref="compound">testing::internal::FinalSuccessChecker</ref>());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc"/>
  </compounddef>
</doxygen>
