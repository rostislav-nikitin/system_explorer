<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="googletest-filepath-test_8cc" kind="file" language="C++">
    <compoundname>googletest-filepath-test.cc</compoundname>
    <includes local="no">string</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-filepath_8h" local="yes">gtest/internal/gtest-filepath.h</includes>
    <includes refid="gtest-internal-inl_8h" local="yes">src/gtest-internal-inl.h</includes>
    <includedby refid="gtest__all__test_8cc" local="yes">build/_deps/googletest-src/googletest/test/gtest_all_test.cc</includedby>
    <incdepgraph>
      <node id="14">
        <label>gtest/gtest-assertion-result.h</label>
        <link refid="gtest-assertion-result_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gtest/gtest-matchers.h</label>
        <link refid="gtest-matchers_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="28">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="47">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="35">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="16">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc</label>
        <link refid="googletest-filepath-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>algorithm</label>
      </node>
      <node id="37">
        <label>atomic</label>
      </node>
      <node id="51">
        <label>cassert</label>
      </node>
      <node id="22">
        <label>cerrno</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="17">
        <label>ctype.h</label>
      </node>
      <node id="58">
        <label>errno.h</label>
      </node>
      <node id="42">
        <label>float.h</label>
      </node>
      <node id="38">
        <label>functional</label>
      </node>
      <node id="6">
        <label>iomanip</label>
      </node>
      <node id="53">
        <label>iosfwd</label>
      </node>
      <node id="23">
        <label>iostream</label>
      </node>
      <node id="49">
        <label>iterator</label>
      </node>
      <node id="7">
        <label>limits</label>
      </node>
      <node id="24">
        <label>locale</label>
      </node>
      <node id="43">
        <label>map</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="9">
        <label>ostream</label>
      </node>
      <node id="32">
        <label>regex.h</label>
      </node>
      <node id="10">
        <label>set</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="18">
        <label>stddef.h</label>
      </node>
      <node id="19">
        <label>stdio.h</label>
      </node>
      <node id="20">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="21">
        <label>string.h</label>
      </node>
      <node id="30">
        <label>strings.h</label>
      </node>
      <node id="26">
        <label>sys/stat.h</label>
      </node>
      <node id="27">
        <label>sys/types.h</label>
      </node>
      <node id="25">
        <label>tuple</label>
      </node>
      <node id="12">
        <label>type_traits</label>
      </node>
      <node id="33">
        <label>typeinfo</label>
      </node>
      <node id="31">
        <label>unistd.h</label>
      </node>
      <node id="40">
        <label>utility</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="googletest-filepath-test_8cc_1aed9839d60eafc7d5afbf14281a31caea" prot="protected" static="no" mutable="no">
        <type>FilePath</type>
        <definition>FilePath testdata_path_</definition>
        <argsstring></argsstring>
        <name>testdata_path_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc" line="520" column="12" bodyfile="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googletest-filepath-test_8cc_1ab25205b360de0f1648175ccbc1cc4365" prot="protected" static="no" mutable="no">
        <type>FilePath</type>
        <definition>FilePath testdata_file_</definition>
        <argsstring></argsstring>
        <name>testdata_file_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc" line="521" column="12" bodyfile="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googletest-filepath-test_8cc_1adcfc0d513af262b152f09de5a6094636" prot="protected" static="no" mutable="no">
        <type>FilePath</type>
        <definition>FilePath unique_file0_</definition>
        <argsstring></argsstring>
        <name>unique_file0_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc" line="522" column="12" bodyfile="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc" bodystart="522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googletest-filepath-test_8cc_1a2a86ee575545592eb81059360eda7379" prot="protected" static="no" mutable="no">
        <type>FilePath</type>
        <definition>FilePath unique_file1_</definition>
        <argsstring></argsstring>
        <name>unique_file1_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc" line="523" column="12" bodyfile="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc" bodystart="523" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>filepath<sp/>utilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>classes<sp/>and<sp/>functions<sp/>used<sp/>internally<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>They<sp/>are<sp/>subject<sp/>to<sp/>change<sp/>without<sp/>notice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>#included<sp/>from<sp/>gtest-internal.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>#include<sp/>this<sp/>file<sp/>anywhere<sp/>else!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-filepath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/gtest-internal-inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GTEST_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>have<sp/>the<sp/>remove<sp/>C<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remove(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>LPCWSTR<sp/>wpath<sp/>=<sp/>String::AnsiToUtf16(path);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>DeleteFile(wpath)<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>wpath;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>have<sp/>the<sp/>_rmdir<sp/>C<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_rmdir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>FilePath<sp/>filepath(path);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>LPCWSTR<sp/>wpath<sp/>=</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::AnsiToUtf16(filepath.RemoveTrailingPathSeparator().c_str());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>RemoveDirectory(wpath)<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>wpath;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">TEST(GetCurrentDirTest,<sp/>ReturnsCurrentDir)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>original_dir<sp/>=<sp/>FilePath::GetCurrentDir();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(original_dir.IsEmpty());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>posix::ChDir(GTEST_PATH_SEP_);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>cwd<sp/>=<sp/>FilePath::GetCurrentDir();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>posix::ChDir(original_dir.c_str());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_OS_WINDOWS)<sp/>||<sp/>defined(GTEST_OS_OS2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Skips<sp/>the<sp/>&quot;:&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cwd_without_drive<sp/>=<sp/>strchr(cwd.c_str(),<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(cwd_without_drive<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(GTEST_PATH_SEP_,<sp/>cwd_without_drive<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GTEST_PATH_SEP_,<sp/>cwd.string());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">TEST(IsEmptyTest,<sp/>ReturnsTrueForEmptyPath)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).IsEmpty());</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">TEST(IsEmptyTest,<sp/>ReturnsFalseForNonEmptyPath)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">).IsEmpty());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">).IsEmpty());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;a/b&quot;</highlight><highlight class="normal">).IsEmpty());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;a\\b\\&quot;</highlight><highlight class="normal">).IsEmpty());</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName<sp/>&quot;&quot;<sp/>-&gt;<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>WhenEmptyName)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName<sp/>&quot;afile&quot;<sp/>-&gt;<sp/>&quot;afile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>ButNoDirectory)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName<sp/>&quot;/afile&quot;<sp/>-&gt;<sp/>&quot;afile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>RootFileShouldGiveFileName)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName<sp/>&quot;adir/&quot;<sp/>-&gt;<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>WhereThereIsNoFileName)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName<sp/>&quot;adir/afile&quot;<sp/>-&gt;<sp/>&quot;afile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>ShouldGiveFileName)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName<sp/>&quot;adir/subdir/afile&quot;<sp/>-&gt;<sp/>&quot;afile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>ShouldAlsoGiveFileName)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;subdir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.RemoveDirectoryName()</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_ALT_PATH_SEP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>RemoveDirectoryName()<sp/>works<sp/>with<sp/>the<sp/>alternate<sp/>separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName(&quot;/afile&quot;)<sp/>-&gt;<sp/>&quot;afile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>RootFileShouldGiveFileNameForAlternateSeparator)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;/afile&quot;</highlight><highlight class="normal">).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName(&quot;adir/&quot;)<sp/>-&gt;<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>WhereThereIsNoFileNameForAlternateSeparator)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir/&quot;</highlight><highlight class="normal">).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName(&quot;adir/afile&quot;)<sp/>-&gt;<sp/>&quot;afile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>ShouldGiveFileNameForAlternateSeparator)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir/afile&quot;</highlight><highlight class="normal">).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveDirectoryName(&quot;adir/subdir/afile&quot;)<sp/>-&gt;<sp/>&quot;afile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">TEST(RemoveDirectoryNameTest,<sp/>ShouldAlsoGiveFileNameForAlternateSeparator)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir/subdir/afile&quot;</highlight><highlight class="normal">).RemoveDirectoryName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName<sp/>&quot;&quot;<sp/>-&gt;<sp/>&quot;./&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>EmptyName)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>CE,<sp/>we<sp/>use<sp/>the<sp/>root<sp/>as<sp/>the<sp/>current<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GTEST_PATH_SEP_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName<sp/>&quot;adir/&quot;<sp/>-&gt;<sp/>&quot;adir/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>ButNoFile)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName<sp/>&quot;adir/afile&quot;<sp/>-&gt;<sp/>&quot;adir/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>GivesDirName)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName<sp/>&quot;adir/subdir/afile&quot;<sp/>-&gt;<sp/>&quot;adir/subdir/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>GivesDirAndSubDirName)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;subdir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;subdir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.RemoveFileName()</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName<sp/>&quot;/afile&quot;<sp/>-&gt;<sp/>&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>GivesRootDir)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;afile&quot;</highlight><highlight class="normal">).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_ALT_PATH_SEP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>RemoveFileName()<sp/>works<sp/>with<sp/>the<sp/>alternate<sp/>separator<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName(&quot;adir/&quot;)<sp/>-&gt;<sp/>&quot;adir/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>ButNoFileForAlternateSeparator)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir/&quot;</highlight><highlight class="normal">).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName(&quot;adir/afile&quot;)<sp/>-&gt;<sp/>&quot;adir/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>GivesDirNameForAlternateSeparator)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir/afile&quot;</highlight><highlight class="normal">).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName(&quot;adir/subdir/afile&quot;)<sp/>-&gt;<sp/>&quot;adir/subdir/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>GivesDirAndSubDirNameForAlternateSeparator)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;adir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;subdir&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;adir/subdir/afile&quot;</highlight><highlight class="normal">).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveFileName(&quot;/afile&quot;)<sp/>-&gt;<sp/>&quot;\&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">TEST(RemoveFileNameTest,<sp/>GivesRootDirForAlternateSeparator)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GTEST_PATH_SEP_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;/afile&quot;</highlight><highlight class="normal">).RemoveFileName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">TEST(MakeFileNameTest,<sp/>GenerateWhenNumberIsZero)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath::MakeFileName(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST(MakeFileNameTest,<sp/>GenerateFileNameNumberGtZero)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath::MakeFileName(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),<sp/>12,<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar_12.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">TEST(MakeFileNameTest,<sp/>GenerateFileNameWithSlashNumberIsZero)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=<sp/>FilePath::MakeFileName(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_),</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">TEST(MakeFileNameTest,<sp/>GenerateFileNameWithSlashNumberGtZero)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=<sp/>FilePath::MakeFileName(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),<sp/>12,<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar_12.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">TEST(MakeFileNameTest,<sp/>GenerateWhenNumberIsZeroAndDirIsEmpty)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath::MakeFileName(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">TEST(MakeFileNameTest,<sp/>GenerateWhenNumberIsNotZeroAndDirIsEmpty)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath::MakeFileName(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),<sp/>14,<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;bar_14.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">TEST(ConcatPathsTest,<sp/>WorksWhenDirDoesNotEndWithPathSep)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=<sp/>FilePath::ConcatPaths(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">TEST(ConcatPathsTest,<sp/>WorksWhenPath1EndsWithPathSep)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=<sp/>FilePath::ConcatPaths(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_),</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">TEST(ConcatPathsTest,<sp/>Path1BeingEmpty)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=<sp/>FilePath::ConcatPaths(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">TEST(ConcatPathsTest,<sp/>Path2BeingEmpty)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=<sp/>FilePath::ConcatPaths(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,<sp/>actual.string());</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">TEST(ConcatPathsTest,<sp/>BothPathBeingEmpty)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=<sp/>FilePath::ConcatPaths(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>actual.string());</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">TEST(ConcatPathsTest,<sp/>Path1ContainsPathSep)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=<sp/>FilePath::ConcatPaths(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foobar.xml&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;foobar.xml&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual.string());</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">TEST(ConcatPathsTest,<sp/>Path2ContainsPathSep)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath::ConcatPaths(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_),</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar.xml&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual.string());</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">TEST(ConcatPathsTest,<sp/>Path2EndsWithPathSep)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>FilePath<sp/>actual<sp/>=</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath::ConcatPaths(FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,<sp/>actual.string());</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveTrailingPathSeparator<sp/>&quot;&quot;<sp/>-&gt;<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">TEST(RemoveTrailingPathSeparatorTest,<sp/>EmptyString)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).RemoveTrailingPathSeparator().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveTrailingPathSeparator<sp/>&quot;foo&quot;<sp/>-&gt;<sp/>&quot;foo&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">TEST(RemoveTrailingPathSeparatorTest,<sp/>FileNoSlashString)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">).RemoveTrailingPathSeparator().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveTrailingPathSeparator<sp/>&quot;foo/&quot;<sp/>-&gt;<sp/>&quot;foo&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">TEST(RemoveTrailingPathSeparatorTest,<sp/>ShouldRemoveTrailingSeparator)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_).RemoveTrailingPathSeparator().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_ALT_PATH_SEP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo/&quot;</highlight><highlight class="normal">).RemoveTrailingPathSeparator().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveTrailingPathSeparator<sp/>&quot;foo/bar/&quot;<sp/>-&gt;<sp/>&quot;foo/bar/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">TEST(RemoveTrailingPathSeparatorTest,<sp/>ShouldRemoveLastSeparator)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.RemoveTrailingPathSeparator()</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RemoveTrailingPathSeparator<sp/>&quot;foo/bar&quot;<sp/>-&gt;<sp/>&quot;foo/bar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">TEST(RemoveTrailingPathSeparatorTest,<sp/>ShouldReturnUnmodified)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.RemoveTrailingPathSeparator()</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">TEST(DirectoryTest,<sp/>RootDirectoryExists)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>current_drive[_MAX_PATH];<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>current_drive[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_getdrive()<sp/>+<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>current_drive[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>current_drive[2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>current_drive[3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(current_drive).DirectoryExists());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">).DirectoryExists());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">TEST(DirectoryTest,<sp/>RootOfWrongDriveDoesNotExists)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>saved_drive_<sp/>=<sp/>_getdrive();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>drive<sp/>that<sp/>doesn&apos;t<sp/>exist.<sp/>Start<sp/>with<sp/>&apos;Z&apos;<sp/>to<sp/>avoid<sp/>common<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>drive<sp/>=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">;<sp/>drive<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">;<sp/>drive--)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_chdrive(drive<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>1)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>non_drive[_MAX_PATH];<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_drive[0]<sp/>=<sp/>drive;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_drive[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_drive[2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_drive[3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(FilePath(non_drive).DirectoryExists());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>_chdrive(saved_drive_);</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>_does_<sp/>consider<sp/>an<sp/>empty<sp/>directory<sp/>to<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">TEST(DirectoryTest,<sp/>EmptyPathDirectoryDoesNotExist)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).DirectoryExists());</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">TEST(DirectoryTest,<sp/>CurrentDirectoryExists)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32_CE<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>current<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">).DirectoryExists());</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;.\\&quot;</highlight><highlight class="normal">).DirectoryExists());</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_WIN32_CE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">).DirectoryExists());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">).DirectoryExists());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;foo/bar&quot;<sp/>==<sp/>foo//bar&quot;<sp/>==<sp/>&quot;foo///bar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">TEST(NormalizeTest,<sp/>MultipleConsecutiveSeparatorsInMidstring)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;/bar&quot;<sp/>==<sp/>//bar&quot;<sp/>==<sp/>&quot;///bar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">TEST(NormalizeTest,<sp/>MultipleConsecutiveSeparatorsAtStringStart)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>FilePath(GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>EXPECT_EQ(GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;foo/&quot;<sp/>==<sp/>foo//&quot;<sp/>==<sp/>&quot;foo///&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">TEST(NormalizeTest,<sp/>MultipleConsecutiveSeparatorsAtStringEnd)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_<sp/>GTEST_PATH_SEP_).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_ALT_PATH_SEP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>separators<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string<sp/>are<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regardless<sp/>of<sp/>their<sp/>combination<sp/>(e.g.<sp/>&quot;foo\&quot;<sp/>==&quot;foo/\&quot;<sp/>==</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;foo\\/&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">TEST(NormalizeTest,<sp/>MixAlternateSeparatorAtStringEnd)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo/&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;foo//&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">TEST(AssignmentOperatorTest,<sp/>DefaultAssignedToNonDefault)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>FilePath<sp/>default_path;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>FilePath<sp/>non_default_path(</highlight><highlight class="stringliteral">&quot;path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>non_default_path<sp/>=<sp/>default_path;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>non_default_path.string());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>default_path.string());<sp/><sp/></highlight><highlight class="comment">//<sp/>RHS<sp/>var<sp/>is<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">TEST(AssignmentOperatorTest,<sp/>NonDefaultAssignedToDefault)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>FilePath<sp/>non_default_path(</highlight><highlight class="stringliteral">&quot;path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>FilePath<sp/>default_path;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>default_path<sp/>=<sp/>non_default_path;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;path&quot;</highlight><highlight class="normal">,<sp/>default_path.string());</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;path&quot;</highlight><highlight class="normal">,<sp/>non_default_path.string());<sp/><sp/></highlight><highlight class="comment">//<sp/>RHS<sp/>var<sp/>is<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">TEST(AssignmentOperatorTest,<sp/>ConstAssignedToNonConst)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>const_default_path(</highlight><highlight class="stringliteral">&quot;const_path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>FilePath<sp/>non_default_path(</highlight><highlight class="stringliteral">&quot;path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>non_default_path<sp/>=<sp/>const_default_path;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;const_path&quot;</highlight><highlight class="normal">,<sp/>non_default_path.string());</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DirectoryCreationTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>testdata_path_.Set(</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(TempDir()<sp/>+<sp/>GetCurrentExecutableName().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">()<sp/>+</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_directory_creation&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>testdata_file_.Set(testdata_path_.RemoveTrailingPathSeparator());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_file0_.Set(</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath::MakeFileName(testdata_path_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;unique&quot;</highlight><highlight class="normal">),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_file1_.Set(</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FilePath::MakeFileName(testdata_path_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;unique&quot;</highlight><highlight class="normal">),<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(testdata_file_.c_str());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(unique_file0_.c_str());</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(unique_file1_.c_str());</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>posix::RmDir(testdata_path_.c_str());</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(testdata_file_.c_str());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(unique_file0_.c_str());</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(unique_file1_.c_str());</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>posix::RmDir(testdata_path_.c_str());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateTextFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>f<sp/>=<sp/>posix::FOpen(filename,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;text\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Strings<sp/>representing<sp/>a<sp/>directory<sp/>and<sp/>a<sp/>file,<sp/>with<sp/>identical<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>except<sp/>for<sp/>the<sp/>trailing<sp/>separator<sp/>character<sp/>that<sp/>distinguishes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>directory<sp/>named<sp/>&apos;test&apos;<sp/>from<sp/>a<sp/>file<sp/>named<sp/>&apos;test&apos;.<sp/>Example<sp/>names:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>FilePath<sp/>testdata_path_;<sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;/tmp/directory_creation/test/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>FilePath<sp/>testdata_file_;<sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;/tmp/directory_creation/test&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>FilePath<sp/>unique_file0_;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;/tmp/directory_creation/test/unique.txt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>FilePath<sp/>unique_file1_;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;/tmp/directory_creation/test/unique_1.txt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">};</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal">TEST_F(DirectoryCreationTest,<sp/>CreateDirectoriesRecursively)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testdata_path_.DirectoryExists())<sp/>&lt;&lt;<sp/>testdata_path_.string();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testdata_path_.CreateDirectoriesRecursively());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testdata_path_.DirectoryExists());</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">TEST_F(DirectoryCreationTest,<sp/>CreateDirectoriesForAlreadyExistingPath)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testdata_path_.DirectoryExists())<sp/>&lt;&lt;<sp/>testdata_path_.string();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testdata_path_.CreateDirectoriesRecursively());</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>&apos;create&apos;<sp/>again...<sp/>should<sp/>still<sp/>succeed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testdata_path_.CreateDirectoriesRecursively());</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal">TEST_F(DirectoryCreationTest,<sp/>CreateDirectoriesAndUniqueFilename)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>FilePath<sp/>file_path(FilePath::GenerateUniqueFileName(</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testdata_path_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;unique&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>EXPECT_EQ(unique_file0_.string(),<sp/>file_path.string());</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(file_path.FileOrDirectoryExists());<sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>not<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>testdata_path_.CreateDirectoriesRecursively();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(file_path.FileOrDirectoryExists());<sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>still<sp/>not<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>CreateTextFile(file_path.c_str());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(file_path.FileOrDirectoryExists());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>FilePath<sp/>file_path2(FilePath::GenerateUniqueFileName(</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testdata_path_,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;unique&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>EXPECT_EQ(unique_file1_.string(),<sp/>file_path2.string());</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(file_path2.FileOrDirectoryExists());<sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>not<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>CreateTextFile(file_path2.c_str());</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(file_path2.FileOrDirectoryExists());</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">TEST_F(DirectoryCreationTest,<sp/>CreateDirectoriesFail)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>a<sp/>failure<sp/>by<sp/>putting<sp/>a<sp/>file<sp/>where<sp/>we<sp/>will<sp/>try<sp/>to<sp/>create<sp/>a<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>CreateTextFile(testdata_file_.c_str());</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(testdata_file_.FileOrDirectoryExists());</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testdata_file_.DirectoryExists());</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(testdata_file_.CreateDirectoriesRecursively());</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">TEST(NoDirectoryCreationTest,<sp/>CreateNoDirectoriesForDefaultXmlFile)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>test_detail_xml(</highlight><highlight class="stringliteral">&quot;test_detail.xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(test_detail_xml.CreateDirectoriesRecursively());</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">TEST(FilePathTest,<sp/>DefaultConstructor)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>FilePath<sp/>fp;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>fp.string());</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">TEST(FilePathTest,<sp/>CharAndCopyConstructors)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>fp(</highlight><highlight class="stringliteral">&quot;spicy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;spicy&quot;</highlight><highlight class="normal">,<sp/>fp.string());</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>fp_copy(fp);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;spicy&quot;</highlight><highlight class="normal">,<sp/>fp_copy.string());</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">TEST(FilePathTest,<sp/>StringConstructor)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>fp(std::string(</highlight><highlight class="stringliteral">&quot;cider&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;cider&quot;</highlight><highlight class="normal">,<sp/>fp.string());</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">TEST(FilePathTest,<sp/>Set)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>apple(</highlight><highlight class="stringliteral">&quot;apple&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>FilePath<sp/>mac(</highlight><highlight class="stringliteral">&quot;mac&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>mac.Set(apple);<sp/><sp/></highlight><highlight class="comment">//<sp/>Implement<sp/>Set()<sp/>since<sp/>overloading<sp/>operator=<sp/>is<sp/>forbidden.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;apple&quot;</highlight><highlight class="normal">,<sp/>mac.string());</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;apple&quot;</highlight><highlight class="normal">,<sp/>apple.string());</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal">TEST(FilePathTest,<sp/>ToString)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilePath<sp/>file(</highlight><highlight class="stringliteral">&quot;drink&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;drink&quot;</highlight><highlight class="normal">,<sp/>file.string());</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">TEST(FilePathTest,<sp/>RemoveExtension)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;app&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;app.cc&quot;</highlight><highlight class="normal">).RemoveExtension(</highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;app&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;app.exe&quot;</highlight><highlight class="normal">).RemoveExtension(</highlight><highlight class="stringliteral">&quot;exe&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;APP&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;APP.EXE&quot;</highlight><highlight class="normal">).RemoveExtension(</highlight><highlight class="stringliteral">&quot;exe&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">TEST(FilePathTest,<sp/>RemoveExtensionWhenThereIsNoExtension)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;app&quot;</highlight><highlight class="normal">,<sp/>FilePath(</highlight><highlight class="stringliteral">&quot;app&quot;</highlight><highlight class="normal">).RemoveExtension(</highlight><highlight class="stringliteral">&quot;exe&quot;</highlight><highlight class="normal">).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">TEST(FilePathTest,<sp/>IsDirectory)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;cola&quot;</highlight><highlight class="normal">).IsDirectory());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;koala&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_).IsDirectory());</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_ALT_PATH_SEP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;koala/&quot;</highlight><highlight class="normal">).IsDirectory());</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">TEST(FilePathTest,<sp/>IsAbsolutePath)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;is&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;relative&quot;</highlight><highlight class="normal">).IsAbsolutePath());</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).IsAbsolutePath());</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;c:\\&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;is_not&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;relative&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.IsAbsolutePath());</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;c:foo&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">).IsAbsolutePath());</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FilePath(</highlight><highlight class="stringliteral">&quot;c:/&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;is_not&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;relative&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.IsAbsolutePath());</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;d:/Windows&quot;</highlight><highlight class="normal">).IsAbsolutePath());</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;\\\\Host\\Share&quot;</highlight><highlight class="normal">).IsAbsolutePath());</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;\\\\Host\\Share\\Folder&quot;</highlight><highlight class="normal">).IsAbsolutePath());</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;is_not&quot;</highlight><highlight class="normal"><sp/>GTEST_PATH_SEP_<sp/></highlight><highlight class="stringliteral">&quot;relative&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.IsAbsolutePath());</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal">TEST(FilePathTest,<sp/>IsRootDirectory)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;a:\\&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;Z:/&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;e://&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;b:&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;b:a&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;8:/&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;c|/&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;c:/&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;d:/Windows&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>for<sp/>backward<sp/>compatibility,<sp/>since<sp/>callers<sp/>(even<sp/>in<sp/>this<sp/>library)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>assumed<sp/>IsRootDirectory()<sp/>implies<sp/>a<sp/>trailing<sp/>directory<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;\\\\Host\\Share&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;\\\\Host\\Share\\&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;\\\\Host\\Share\\.&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;\\\\Host\\Share\\C$\\&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(FilePath(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(FilePath(</highlight><highlight class="stringliteral">&quot;/x&quot;</highlight><highlight class="normal">).IsRootDirectory());</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc"/>
  </compounddef>
</doxygen>
